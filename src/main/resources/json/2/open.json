{"name":"open","description":"open, openat,\ncreat - open and possibly create a file","body":"\n\n<h1 align=\"center\">OPEN</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">open, openat,\ncreat - open and possibly create a file</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;fcntl.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nopen(const char *</b><i>pathname</i><b>, int</b>\n<i>flags</i><b>); <br>\nint open(const char *</b><i>pathname</i><b>, int</b>\n<i>flags</i><b>, mode_t</b> <i>mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ncreat(const char *</b><i>pathname</i><b>, mode_t</b>\n<i>mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nopenat(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, int</b> <i>flags</i><b>); <br>\nint openat(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, int</b> <i>flags</i><b>, mode_t</b>\n<i>mode</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Documented\nseparately, in <a href=\"https://man.page/2/openat2\">openat2(2)</a>: */ <b><br>\nint openat2(int</b> <i>dirfd</i><b>, const char\n*</b><i>pathname</i><b>, <br>\nconst struct open_how *</b><i>how</i><b>, size_t</b>\n<i>size</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>openat</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.10:</p>\n\n\n<p style=\"margin-left:23%;\">_POSIX_C_SOURCE&nbsp;&gt;=&nbsp;200809L</p>\n\n<p style=\"margin-left:17%;\">Before glibc 2.10:</p>\n\n<p style=\"margin-left:23%;\">_ATFILE_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>open</b>() system call opens the file specified by\n<i>pathname</i>. If the specified file does not exist, it\nmay optionally (if <b>O_CREAT</b> is specified in\n<i>flags</i>) be created by <b>open</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue of <b>open</b>() is a file descriptor, a small,\nnonnegative integer that is used in subsequent system calls\n(<a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>, <a href=\"https://man.page/2/lseek\">lseek(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, etc.) to refer to the open file. The file\ndescriptor returned by a successful call will be the\nlowest-numbered file descriptor not currently open for the\nprocess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nnew file descriptor is set to remain open across an\n<a href=\"https://man.page/2/execve\">execve(2)</a> (i.e., the <b>FD_CLOEXEC</b> file\ndescriptor flag described in <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> is initially\ndisabled); the <b>O_CLOEXEC</b> flag, described below, can\nbe used to change this default. The file offset is set to\nthe beginning of the file (see <a href=\"https://man.page/2/lseek\">lseek(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A call to\n<b>open</b>() creates a new <i>open file description</i>, an\nentry in the system-wide table of open files. The open file\ndescription records the file offset and the file status\nflags (see below). A file descriptor is a reference to an\nopen file description; this reference is unaffected if\n<i>pathname</i> is subsequently removed or modified to refer\nto a different file. For further details on open file\ndescriptions, see NOTES.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\n<i>flags</i> must include one of the following <i>access\nmodes</i>: <b>O_RDONLY</b>, <b>O_WRONLY</b>, or\n<b>O_RDWR</b>. These request opening the file read-only,\nwrite-only, or read/write, respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\nzero or more file creation flags and file status flags can\nbe bitwise-<i>or</i>&rsquo;d in <i>flags</i>. The <i>file\ncreation flags</i> are <b>O_CLOEXEC</b>, <b>O_CREAT</b>,\n<b>O_DIRECTORY</b>, <b>O_EXCL</b>, <b>O_NOCTTY</b>,\n<b>O_NOFOLLOW</b>, <b>O_TMPFILE</b>, and <b>O_TRUNC</b>. The\n<i>file status flags</i> are all of the remaining flags\nlisted below. The distinction between these two groups of\nflags is that the file creation flags affect the semantics\nof the open operation itself, while the file status flags\naffect the semantics of subsequent I/O operations. The file\nstatus flags can be retrieved and (in some cases) modified;\nsee <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The full list\nof file creation flags and file status flags is as follows:\n<b><br>\nO_APPEND</b></p>\n\n<p style=\"margin-left:22%;\">The file is opened in append\nmode. Before each <a href=\"https://man.page/2/write\">write(2)</a>, the file offset is\npositioned at the end of the file, as if with\n<a href=\"https://man.page/2/lseek\">lseek(2)</a>. The modification of the file offset and the\nwrite operation are performed as a single atomic step.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>O_APPEND</b>\nmay lead to corrupted files on NFS filesystems if more than\none process appends data to a file at once. This is because\nNFS does not support appending to a file, so the client\nkernel has to simulate it, which can&rsquo;t be done without\na race condition.</p>\n\n<p style=\"margin-left:11%;\"><b>O_ASYNC</b></p>\n\n<p style=\"margin-left:22%;\">Enable signal-driven I/O:\ngenerate a signal (<b>SIGIO</b> by default, but this can be\nchanged via <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>) when input or output becomes\npossible on this file descriptor. This feature is available\nonly for terminals, pseudoterminals, sockets, and (since\nLinux 2.6) pipes and FIFOs. See <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for further\ndetails. See also BUGS, below.</p>\n\n<p style=\"margin-left:11%;\"><b>O_CLOEXEC</b> (since Linux\n2.6.23)</p>\n\n<p style=\"margin-left:22%;\">Enable the close-on-exec flag\nfor the new file descriptor. Specifying this flag permits a\nprogram to avoid additional <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_SETFD</b>\noperations to set the <b>FD_CLOEXEC</b> flag.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that the\nuse of this flag is essential in some multithreaded\nprograms, because using a separate <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>\n<b>F_SETFD</b> operation to set the <b>FD_CLOEXEC</b> flag\ndoes not suffice to avoid race conditions where one thread\nopens a file descriptor and attempts to set its\nclose-on-exec flag using <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> at the same time as\nanother thread does a <a href=\"https://man.page/2/fork\">fork(2)</a> plus <a href=\"https://man.page/2/execve\">execve(2)</a>.\nDepending on the order of execution, the race may lead to\nthe file descriptor returned by <b>open</b>() being\nunintentionally leaked to the program executed by the child\nprocess created by <a href=\"https://man.page/2/fork\">fork(2)</a>. (This kind of race is in\nprinciple possible for any system call that creates a file\ndescriptor whose close-on-exec flag should be set, and\nvarious other Linux system calls provide an equivalent of\nthe <b>O_CLOEXEC</b> flag to deal with this problem.)</p>\n\n<p style=\"margin-left:11%;\"><b>O_CREAT</b></p>\n\n<p style=\"margin-left:22%;\">If <i>pathname</i> does not\nexist, create it as a regular file.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The owner (user\nID) of the new file is set to the effective user ID of the\nprocess.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The group\nownership (group ID) of the new file is set either to the\neffective group ID of the process (System V semantics) or to\nthe group ID of the parent directory (BSD semantics). On\nLinux, the behavior depends on whether the set-group-ID mode\nbit is set on the parent directory: if that bit is set, then\nBSD semantics apply; otherwise, System V semantics apply.\nFor some filesystems, the behavior also depends on the\n<i>bsdgroups</i> and <i>sysvgroups</i> mount options\ndescribed in <b>mount</b>(8).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The <i>mode</i>\nargument specifies the file mode bits to be applied when a\nnew file is created. If neither <b>O_CREAT</b> nor\n<b>O_TMPFILE</b> is specified in <i>flags</i>, then\n<i>mode</i> is ignored (and can thus be specified as 0, or\nsimply omitted). The <i>mode</i> argument <b>must</b> be\nsupplied if <b>O_CREAT</b> or <b>O_TMPFILE</b> is specified\nin <i>flags</i>; if it is not supplied, some arbitrary bytes\nfrom the stack will be applied as the file mode.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The effective\nmode is modified by the process&rsquo;s <i>umask</i> in the\nusual way: in the absence of a default ACL, the mode of the\ncreated file is <i>(mode&nbsp;&amp;&nbsp;~umask)</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that\n<i>mode</i> applies only to future accesses of the newly\ncreated file; the <b>open</b>() call that creates a\nread-only file may well return a read/write file\ndescriptor.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nsymbolic constants are provided for <i>mode</i>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IRWXU</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00700 user (file owner) has read, write, and execute\npermission</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IRUSR</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00400 user has read permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IWUSR</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00200 user has write permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IXUSR</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00100 user has execute permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IRWXG</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00070 group has read, write, and execute permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IRGRP</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00040 group has read permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IWGRP</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00020 group has write permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IXGRP</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00010 group has execute permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IRWXO</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00007 others have read, write, and execute\npermission</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IROTH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00004 others have read permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IWOTH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00002 others have write permission</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_IXOTH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"65%\">\n\n\n<p>00001 others have execute permission</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">According to\nPOSIX, the effect when other bits are set in <i>mode</i> is\nunspecified. On Linux, the following bits are also honored\nin <i>mode</i>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p style=\"margin-top: 1em\"><b>S_ISUID</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"62%\">\n\n\n<p style=\"margin-top: 1em\">0004000 set-user-ID bit</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_ISGID</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"62%\">\n\n\n<p>0002000 set-group-ID bit (see <a href=\"https://man.page/7/inode\">inode(7)</a>).</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"10%\">\n\n\n<p><b>S_ISVTX</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"62%\">\n\n\n<p>0001000 sticky bit (see <a href=\"https://man.page/7/inode\">inode(7)</a>).</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>O_DIRECT</b> (since Linux\n2.4.10)</p>\n\n<p style=\"margin-left:22%;\">Try to minimize cache effects\nof the I/O to and from this file. In general this will\ndegrade performance, but it is useful in special situations,\nsuch as when applications do their own caching. File I/O is\ndone directly to/from user-space buffers. The\n<b>O_DIRECT</b> flag on its own makes an effort to transfer\ndata synchronously, but does not give the guarantees of the\n<b>O_SYNC</b> flag that data and necessary metadata are\ntransferred. To guarantee synchronous I/O, <b>O_SYNC</b>\nmust be used in addition to <b>O_DIRECT</b>. See NOTES below\nfor further discussion.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A semantically\nsimilar (but deprecated) interface for block devices is\ndescribed in <b>raw</b>(8).</p>\n\n<p style=\"margin-left:11%;\"><b>O_DIRECTORY</b></p>\n\n<p style=\"margin-left:22%;\">If <i>pathname</i> is not a\ndirectory, cause the open to fail. This flag was added in\nkernel version 2.1.126, to avoid denial-of-service problems\nif <a href=\"https://man.page/3/opendir\">opendir(3)</a> is called on a FIFO or tape device.</p>\n\n<p style=\"margin-left:11%;\"><b>O_DSYNC</b></p>\n\n<p style=\"margin-left:22%;\">Write operations on the file\nwill complete according to the requirements of synchronized\nI/O <i>data</i> integrity completion.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">By the time\n<a href=\"https://man.page/2/write\">write(2)</a> (and similar) return, the output data has\nbeen transferred to the underlying hardware, along with any\nfile metadata that would be required to retrieve that data\n(i.e., as though each <a href=\"https://man.page/2/write\">write(2)</a> was followed by a call\nto <a href=\"https://man.page/2/fdatasync\">fdatasync(2)</a>). <i>See NOTES below</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>O_EXCL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Ensure that this call creates the file: if this flag is\nspecified in conjunction with <b>O_CREAT</b>, and\n<i>pathname</i> already exists, then <b>open</b>() fails\nwith the error <b>EEXIST</b>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When these two\nflags are specified, symbolic links are not followed: if\n<i>pathname</i> is a symbolic link, then <b>open</b>() fails\nregardless of where the symbolic link points.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In general, the\nbehavior of <b>O_EXCL</b> is undefined if it is used without\n<b>O_CREAT</b>. There is one exception: on Linux 2.6 and\nlater, <b>O_EXCL</b> can be used without <b>O_CREAT</b> if\n<i>pathname</i> refers to a block device. If the block\ndevice is in use by the system (e.g., mounted),\n<b>open</b>() fails with the error <b>EBUSY</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">On NFS,\n<b>O_EXCL</b> is supported only when using NFSv3 or later on\nkernel 2.6 or later. In NFS environments where <b>O_EXCL</b>\nsupport is not provided, programs that rely on it for\nperforming locking tasks will contain a race condition.\nPortable programs that want to perform atomic file locking\nusing a lockfile, and need to avoid reliance on NFS support\nfor <b>O_EXCL</b>, can create a unique file on the same\nfilesystem (e.g., incorporating hostname and PID), and use\n<a href=\"https://man.page/2/link\">link(2)</a> to make a link to the lockfile. If\n<a href=\"https://man.page/2/link\">link(2)</a> returns 0, the lock is successful. Otherwise,\nuse <a href=\"https://man.page/2/stat\">stat(2)</a> on the unique file to check if its link\ncount has increased to 2, in which case the lock is also\nsuccessful.</p>\n\n<p style=\"margin-left:11%;\"><b>O_LARGEFILE</b></p>\n\n<p style=\"margin-left:22%;\">(LFS) Allow files whose sizes\ncannot be represented in an <i>off_t</i> (but can be\nrepresented in an <i>off64_t</i>) to be opened. The\n<b>_LARGEFILE64_SOURCE</b> macro must be defined (before\nincluding <i>any</i> header files) in order to obtain this\ndefinition. Setting the <b>_FILE_OFFSET_BITS</b> feature\ntest macro to 64 (rather than using <b>O_LARGEFILE</b>) is\nthe preferred method of accessing large files on 32-bit\nsystems (see <a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>O_NOATIME</b> (since Linux\n2.6.8)</p>\n\n<p style=\"margin-left:22%;\">Do not update the file last\naccess time (<i>st_atime</i> in the inode) when the file is\n<a href=\"https://man.page/2/read\">read(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This flag can\nbe employed only if one of the following conditions is\ntrue:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The effective UID of the process matches the owner UID\nof the file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The calling process has the <b>CAP_FOWNER</b> capability\nin its user namespace and the owner UID of the file has a\nmapping in the namespace.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This flag is\nintended for use by indexing or backup programs, where its\nuse can significantly reduce the amount of disk activity.\nThis flag may not be effective on all filesystems. One\nexample is NFS, where the server maintains the access\ntime.</p>\n\n<p style=\"margin-left:11%;\"><b>O_NOCTTY</b></p>\n\n<p style=\"margin-left:22%;\">If <i>pathname</i> refers to a\nterminal device&mdash;see <a href=\"https://man.page/4/tty\">tty(4)</a>&mdash;it will not\nbecome the process&rsquo;s controlling terminal even if the\nprocess does not have one.</p>\n\n<p style=\"margin-left:11%;\"><b>O_NOFOLLOW</b></p>\n\n<p style=\"margin-left:22%;\">If the trailing component\n(i.e., basename) of <i>pathname</i> is a symbolic link, then\nthe open fails, with the error <b>ELOOP</b>. Symbolic links\nin earlier components of the pathname will still be\nfollowed. (Note that the <b>ELOOP</b> error that can occur\nin this case is indistinguishable from the case where an\nopen fails because there are too many symbolic links found\nwhile resolving components in the prefix part of the\npathname.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This flag is a\nFreeBSD extension, which was added to Linux in version\n2.1.126, and has subsequently been standardized in\nPOSIX.1-2008.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">See also\n<b>O_PATH</b> below.</p>\n\n<p style=\"margin-left:11%;\"><b>O_NONBLOCK</b> or\n<b>O_NDELAY</b></p>\n\n<p style=\"margin-left:22%;\">When possible, the file is\nopened in nonblocking mode. Neither the <b>open</b>() nor\nany subsequent I/O operations on the file descriptor which\nis returned will cause the calling process to wait.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that the\nsetting of this flag has no effect on the operation of\n<a href=\"https://man.page/2/poll\">poll(2)</a>, <a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/7/epoll\">epoll(7)</a>, and\nsimilar, since those interfaces merely inform the caller\nabout whether a file descriptor is &quot;ready&quot;,\nmeaning that an I/O operation performed on the file\ndescriptor with the <b>O_NONBLOCK</b> flag <i>clear</i>\nwould not block.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that this\nflag has no effect for regular files and block devices; that\nis, I/O operations will (briefly) block when device activity\nis required, regardless of whether <b>O_NONBLOCK</b> is set.\nSince <b>O_NONBLOCK</b> semantics might eventually be\nimplemented, applications should not depend upon blocking\nbehavior when specifying this flag for regular files and\nblock devices.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For the\nhandling of FIFOs (named pipes), see also <a href=\"https://man.page/7/fifo\">fifo(7)</a>.\nFor a discussion of the effect of <b>O_NONBLOCK</b> in\nconjunction with mandatory file locks and with file leases,\nsee <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>O_PATH</b> (since Linux\n2.6.39)</p>\n\n<p style=\"margin-left:22%;\">Obtain a file descriptor that\ncan be used for two purposes: to indicate a location in the\nfilesystem tree and to perform operations that act purely at\nthe file descriptor level. The file itself is not opened,\nand other file operations (e.g., <a href=\"https://man.page/2/read\">read(2)</a>,\n<a href=\"https://man.page/2/write\">write(2)</a>, <a href=\"https://man.page/2/fchmod\">fchmod(2)</a>, <a href=\"https://man.page/2/fchown\">fchown(2)</a>,\n<a href=\"https://man.page/2/fgetxattr\">fgetxattr(2)</a>, <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>) fail\nwith the error <b>EBADF</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\noperations <i>can</i> be performed on the resulting file\ndescriptor:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/close\">close(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/fchdir\">fchdir(2)</a>, if the file descriptor refers to a\ndirectory (since Linux 3.5).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/fstat\">fstat(2)</a> (since Linux 3.6).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/fstatfs\">fstatfs(2)</a> (since Linux 3.12).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Duplicating the file descriptor (<a href=\"https://man.page/2/dup\">dup(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_DUPFD</b>, etc.).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Getting and setting file descriptor flags\n(<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_GETFD</b> and <b>F_SETFD</b>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Retrieving open file status flags using the\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_GETFL</b> operation: the returned flags\nwill include the bit <b>O_PATH</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Passing the file descriptor as the <i>dirfd</i> argument\nof <b>openat</b>() and the other &quot;*at()&quot; system\ncalls. This includes <a href=\"https://man.page/2/linkat\">linkat(2)</a> with\n<b>AT_EMPTY_PATH</b> (or via procfs using\n<b>AT_SYMLINK_FOLLOW</b>) even if the file is not a\ndirectory.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Passing the file descriptor to another process via a\nUNIX domain socket (see <b>SCM_RIGHTS</b> in\n<a href=\"https://man.page/7/unix\">unix(7)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When\n<b>O_PATH</b> is specified in <i>flags</i>, flag bits other\nthan <b>O_CLOEXEC</b>, <b>O_DIRECTORY</b>, and\n<b>O_NOFOLLOW</b> are ignored.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Opening a file\nor directory with the <b>O_PATH</b> flag requires no\npermissions on the object itself (but does require execute\npermission on the directories in the path prefix). Depending\non the subsequent operation, a check for suitable file\npermissions may be performed (e.g., <a href=\"https://man.page/2/fchdir\">fchdir(2)</a>\nrequires execute permission on the directory referred to by\nits file descriptor argument). By contrast, obtaining a\nreference to a filesystem object by opening it with the\n<b>O_RDONLY</b> flag requires that the caller have read\npermission on the object, even when the subsequent operation\n(e.g., <a href=\"https://man.page/2/fchdir\">fchdir(2)</a>, <a href=\"https://man.page/2/fstat\">fstat(2)</a>) does not require\nread permission on the object.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>pathname</i> is a symbolic link and the <b>O_NOFOLLOW</b>\nflag is also specified, then the call returns a file\ndescriptor referring to the symbolic link. This file\ndescriptor can be used as the <i>dirfd</i> argument in calls\nto <a href=\"https://man.page/2/fchownat\">fchownat(2)</a>, <a href=\"https://man.page/2/fstatat\">fstatat(2)</a>, <a href=\"https://man.page/2/linkat\">linkat(2)</a>,\nand <a href=\"https://man.page/2/readlinkat\">readlinkat(2)</a> with an empty pathname to have the\ncalls operate on the symbolic link.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If\n<i>pathname</i> refers to an automount point that has not\nyet been triggered, so no other filesystem is mounted on it,\nthen the call returns a file descriptor referring to the\nautomount directory without triggering a mount.\n<a href=\"https://man.page/2/fstatfs\">fstatfs(2)</a> can then be used to determine if it is, in\nfact, an untriggered automount point (<b>.f_type ==\nAUTOFS_SUPER_MAGIC</b>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">One use of\n<b>O_PATH</b> for regular files is to provide the equivalent\nof POSIX.1&rsquo;s <b>O_EXEC</b> functionality. This permits\nus to open a file for which we have execute permission but\nnot read permission, and then execute that file, with steps\nsomething like the following:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">char\nbuf[PATH_MAX]; <br>\nfd = open(&quot;some_prog&quot;, O_PATH); <br>\nsnprintf(buf, PATH_MAX, &quot;/proc/self/fd/%d&quot;, fd);\n<br>\nexecl(buf, &quot;some_prog&quot;, (char *) NULL);</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">An\n<b>O_PATH</b> file descriptor can also be passed as the\nargument of <a href=\"https://man.page/3/fexecve\">fexecve(3)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>O_SYNC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Write operations on the file\nwill complete according to the requirements of synchronized\nI/O <i>file</i> integrity completion (by contrast with the\nsynchronized I/O <i>data</i> integrity completion provided\nby <b>O_DSYNC</b>.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">By the time\n<a href=\"https://man.page/2/write\">write(2)</a> (or similar) returns, the output data and\nassociated file metadata have been transferred to the\nunderlying hardware (i.e., as though each <a href=\"https://man.page/2/write\">write(2)</a>\nwas followed by a call to <a href=\"https://man.page/2/fsync\">fsync(2)</a>). <i>See NOTES\nbelow</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>O_TMPFILE</b> (since Linux\n3.11)</p>\n\n<p style=\"margin-left:22%;\">Create an unnamed temporary\nregular file. The <i>pathname</i> argument specifies a\ndirectory; an unnamed inode will be created in that\ndirectory&rsquo;s filesystem. Anything written to the\nresulting file will be lost when the last file descriptor is\nclosed, unless the file is given a name.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>O_TMPFILE</b>\nmust be specified with one of <b>O_RDWR</b> or\n<b>O_WRONLY</b> and, optionally, <b>O_EXCL</b>. If\n<b>O_EXCL</b> is not specified, then <a href=\"https://man.page/2/linkat\">linkat(2)</a> can be\nused to link the temporary file into the filesystem, making\nit permanent, using code like the following:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">char\npath[PATH_MAX]; <br>\nfd = open(&quot;/path/to/dir&quot;, O_TMPFILE | O_RDWR, <br>\nS_IRUSR | S_IWUSR);</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* File I/O on\n'fd'... */</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">linkat(fd,\nNULL, AT_FDCWD, &quot;/path/for/file&quot;,\nAT_EMPTY_PATH);</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">/* If the\ncaller doesn't have the CAP_DAC_READ_SEARCH <br>\ncapability (needed to use AT_EMPTY_PATH with linkat(2)),\n<br>\nand there is a proc(5) filesystem mounted, then the <br>\nlinkat(2) call above can be replaced with:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">snprintf(path,\nPATH_MAX, &quot;/proc/self/fd/%d&quot;, fd); <br>\nlinkat(AT_FDCWD, path, AT_FDCWD, &quot;/path/for/file&quot;,\n<br>\nAT_SYMLINK_FOLLOW); <br>\n*/</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In this case,\nthe <b>open</b>() <i>mode</i> argument determines the file\npermission mode, as with <b>O_CREAT</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Specifying\n<b>O_EXCL</b> in conjunction with <b>O_TMPFILE</b> prevents\na temporary file from being linked into the filesystem in\nthe above manner. (Note that the meaning of <b>O_EXCL</b> in\nthis case is different from the meaning of <b>O_EXCL</b>\notherwise.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are two\nmain use cases for <b>O_TMPFILE</b>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Improved <a href=\"https://man.page/3/tmpfile\">tmpfile(3)</a> functionality: race-free\ncreation of temporary files that (1) are automatically\ndeleted when closed; (2) can never be reached via any\npathname; (3) are not subject to symlink attacks; and (4) do\nnot require the caller to devise unique names.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Creating a file that is initially invisible, which is\nthen populated with data and adjusted to have appropriate\nfilesystem attributes (<a href=\"https://man.page/2/fchown\">fchown(2)</a>, <a href=\"https://man.page/2/fchmod\">fchmod(2)</a>,\n<a href=\"https://man.page/2/fsetxattr\">fsetxattr(2)</a>, etc.) before being atomically linked\ninto the filesystem in a fully formed state (using\n<a href=\"https://man.page/2/linkat\">linkat(2)</a> as described above).</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>O_TMPFILE</b>\nrequires support by the underlying filesystem; only a subset\nof Linux filesystems provide that support. In the initial\nimplementation, support was provided in the ext2, ext3,\next4, UDF, Minix, and shmem filesystems. Support for other\nfilesystems has subsequently been added as follows: XFS\n(Linux 3.15); Btrfs (Linux 3.16); F2FS (Linux 3.16); and\nubifs (Linux 4.9)</p>\n\n<p style=\"margin-left:11%;\"><b>O_TRUNC</b></p>\n\n<p style=\"margin-left:22%;\">If the file already exists and\nis a regular file and the access mode allows writing (i.e.,\nis <b>O_RDWR</b> or <b>O_WRONLY</b>) it will be truncated to\nlength 0. If the file is a FIFO or terminal device file, the\n<b>O_TRUNC</b> flag is ignored. Otherwise, the effect of\n<b>O_TRUNC</b> is unspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>creat()</b>\n<br>\nA call to <b>creat</b>() is equivalent to calling\n<b>open</b>() with <i>flags</i> equal to\n<b>O_CREAT|O_WRONLY|O_TRUNC</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>openat()</b>\n<br>\nThe <b>openat</b>() system call operates in exactly the same\nway as <b>open</b>(), except for the differences described\nhere.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the pathname\ngiven in <i>pathname</i> is relative, then it is interpreted\nrelative to the directory referred to by the file descriptor\n<i>dirfd</i> (rather than relative to the current working\ndirectory of the calling process, as is done by\n<b>open</b>() for a relative pathname).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>pathname</i> is relative and <i>dirfd</i> is the special\nvalue <b>AT_FDCWD</b>, then <i>pathname</i> is interpreted\nrelative to the current working directory of the calling\nprocess (like <b>open</b>()).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<i>pathname</i> is absolute, then <i>dirfd</i> is\nignored.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>openat2(2)</b>\n<br>\nThe <a href=\"https://man.page/2/openat2\">openat2(2)</a> system call is an extension of\n<b>openat</b>(), and provides a superset of the features of\n<b>openat</b>(). It is documented separately, in\n<a href=\"https://man.page/2/openat2\">openat2(2)</a>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>open</b>(),\n<b>openat</b>(), and <b>creat</b>() return the new file\ndescriptor (a nonnegative integer), or -1 if an error\noccurred (in which case, <i>errno</i> is set\nappropriately).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>open</b>(),\n<b>openat</b>(), and <b>creat</b>() can fail with the\nfollowing errors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The requested access to the file is not allowed, or\nsearch permission is denied for one of the directories in\nthe path prefix of <i>pathname</i>, or the file did not\nexist yet and write access to the parent directory is not\nallowed. (See also <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Where <b>O_CREAT</b> is specified, the\n<i>protected_fifos</i> or <i>protected_regular</i> sysctl is\nenabled, the file already exists and is a FIFO or regular\nfile, the owner of the file is neither the current user nor\nthe owner of the containing directory, and the containing\ndirectory is both world- or group-writable and sticky. For\ndetails, see the descriptions of\n<i>/proc/sys/fs/protected_fifos</i> and\n<i>/proc/sys/fs/protected_regular</i> in <a href=\"https://man.page/5/proc\">proc(5)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>O_EXCL</b> was specified in <i>flags</i> and\n<i>pathname</i> refers to a block device that is in use by\nthe system (e.g., it is mounted).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EDQUOT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Where <b>O_CREAT</b> is specified, the file does not\nexist, and the user&rsquo;s quota of disk blocks or inodes\non the filesystem has been exhausted.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EEXIST</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> already exists and <b>O_CREAT</b> and\n<b>O_EXCL</b> were used.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> points outside your accessible address\nspace.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFBIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>See <b>EOVERFLOW</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>While blocked waiting to complete an open of a slow\ndevice (e.g., a FIFO; see <a href=\"https://man.page/7/fifo\">fifo(7)</a>), the call was\ninterrupted by a signal handler; see <a href=\"https://man.page/7/signal\">signal(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The filesystem does not support the <b>O_DIRECT</b>\nflag. See <b>NOTES</b> for more information.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Invalid value in <i>flags</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>O_TMPFILE</b> was specified in <i>flags</i>, but\nneither <b>O_WRONLY</b> nor <b>O_RDWR</b> was specified.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>O_CREAT</b> was specified in <i>flags</i> and the\nfinal component (&quot;basename&quot;) of the new\nfile&rsquo;s <i>pathname</i> is invalid (e.g., it contains\ncharacters not permitted by the underlying filesystem).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The final component (&quot;basename&quot;) of\n<i>pathname</i> is invalid (e.g., it contains characters not\npermitted by the underlying filesystem).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EISDIR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> refers to a directory and the access\nrequested involved writing (that is, <b>O_WRONLY</b> or\n<b>O_RDWR</b> is set).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EISDIR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> refers to an existing directory,\n<b>O_TMPFILE</b> and one of <b>O_WRONLY</b> or <b>O_RDWR</b>\nwere specified in <i>flags</i>, but this kernel version does\nnot provide the <b>O_TMPFILE</b> functionality.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Too many symbolic links were encountered in resolving\n<i>pathname</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> was a symbolic link, and <i>flags</i>\nspecified <b>O_NOFOLLOW</b> but not <b>O_PATH</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached (see the description of\n<b>RLIMIT_NOFILE</b> in <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> was too\nlong.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> refers to a device special file and no\ncorresponding device exists. (This is a Linux kernel bug; in\nthis situation <b>ENXIO</b> must be returned.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>O_CREAT</b> is not set and the named file does not\nexist.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A directory component in <i>pathname</i> does not exist\nor is a dangling symbolic link.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> refers to a nonexistent directory,\n<b>O_TMPFILE</b> and one of <b>O_WRONLY</b> or <b>O_RDWR</b>\nwere specified in <i>flags</i>, but this kernel version does\nnot provide the <b>O_TMPFILE</b> functionality.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The named file is a FIFO, but memory for the FIFO buffer\ncan&rsquo;t be allocated because the per-user hard limit on\nmemory allocation for pipes has been reached and the caller\nis not privileged; see <a href=\"https://man.page/7/pipe\">pipe(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient kernel memory was available.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSPC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> was to be created but the device\ncontaining <i>pathname</i> has no room for the new file.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\">A component used as a directory\nin <i>pathname</i> is not, in fact, a directory, or\n<b>O_DIRECTORY</b> was specified and <i>pathname</i> was not\na directory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><b>O_NONBLOCK</b> | <b>O_WRONLY</b> is set, the named\nfile is a FIFO, and no process has the FIFO open for\nreading.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The file is a device special file and no corresponding\ndevice exists.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ENXIO</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The file is a UNIX domain socket.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\">The filesystem containing\n<i>pathname</i> does not support <b>O_TMPFILE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>EOVERFLOW</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> refers to a\nregular file that is too large to be opened. The usual\nscenario here is that an application compiled on a 32-bit\nplatform without <i>-D_FILE_OFFSET_BITS=64</i> tried to open\na file whose size exceeds <i>(1&lt;&lt;31)-1</i> bytes; see\nalso <b>O_LARGEFILE</b> above. This is the error specified\nby POSIX.1; in kernels before 2.6.24, Linux gave the error\n<b>EFBIG</b> for this case.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>O_NOATIME</b> flag was specified, but the\neffective user ID of the caller did not match the owner of\nthe file and the caller was not privileged.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The operation was prevented by a file seal; see\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EROFS</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> refers to a file on a read-only\nfilesystem and write access was requested.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETXTBSY</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> refers to an\nexecutable image which is currently being executed and write\naccess was requested.</p>\n\n<p style=\"margin-left:11%;\"><b>ETXTBSY</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> refers to a\nfile that is currently in use as a swap file, and the\n<b>O_TRUNC</b> flag was specified.</p>\n\n<p style=\"margin-left:11%;\"><b>ETXTBSY</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> refers to a\nfile that is currently being read by the kernel (e.g., for\nmodule/firmware loading), and write access was\nrequested.</p>\n\n<p style=\"margin-left:11%;\"><b>EWOULDBLOCK</b></p>\n\n<p style=\"margin-left:22%;\">The <b>O_NONBLOCK</b> flag was\nspecified, and an incompatible lease was held on the file\n(see <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nadditional errors can occur for <b>openat</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"56%\">\n\n\n<p><i>dirfd</i> is not a valid file descriptor.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is a relative\npathname and <i>dirfd</i> is a file descriptor referring to\na file other than a directory.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>openat</b>()\nwas added to Linux in kernel 2.6.16; library support was\nadded to glibc in version 2.4.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>open</b>(),\n<b>creat</b>() SVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>openat</b>():\nPOSIX.1-2008.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/openat2\">openat2(2)</a>\nis Linux-specific.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>O_DIRECT</b>, <b>O_NOATIME</b>, <b>O_PATH</b>, and\n<b>O_TMPFILE</b> flags are Linux-specific. One must define\n<b>_GNU_SOURCE</b> to obtain their definitions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>O_CLOEXEC</b>, <b>O_DIRECTORY</b>, and <b>O_NOFOLLOW</b>\nflags are not specified in POSIX.1-2001, but are specified\nin POSIX.1-2008. Since glibc 2.12, one can obtain their\ndefinitions by defining either <b>_POSIX_C_SOURCE</b> with a\nvalue greater than or equal to 200809L or\n<b>_XOPEN_SOURCE</b> with a value greater than or equal to\n700. In glibc 2.11 and earlier, one obtains the definitions\nby defining <b>_GNU_SOURCE</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As noted in\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>, feature test macros such as\n<b>_POSIX_C_SOURCE</b>, <b>_XOPEN_SOURCE</b>, and\n<b>_GNU_SOURCE</b> must be defined before including\n<i>any</i> header files.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under Linux,\nthe <b>O_NONBLOCK</b> flag is sometimes used in cases where\none wants to open but does not necessarily have the\nintention to read or write. For example, this may be used to\nopen a device in order to get a file descriptor for use with\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The (undefined)\neffect of <b>O_RDONLY | O_TRUNC</b> varies among\nimplementations. On many systems the file is actually\ntruncated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n<b>open</b>() can open device special files, but\n<b>creat</b>() cannot create them; use <a href=\"https://man.page/2/mknod\">mknod(2)</a>\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the file is\nnewly created, its <i>st_atime</i>, <i>st_ctime</i>,\n<i>st_mtime</i> fields (respectively, time of last access,\ntime of last status change, and time of last modification;\nsee <a href=\"https://man.page/2/stat\">stat(2)</a>) are set to the current time, and so are\nthe <i>st_ctime</i> and <i>st_mtime</i> fields of the parent\ndirectory. Otherwise, if the file is modified because of the\n<b>O_TRUNC</b> flag, its <i>st_ctime</i> and <i>st_mtime</i>\nfields are set to the current time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The files in\nthe <i>/proc/[pid]/fd</i> directory show the open file\ndescriptors of the process with the PID <i>pid</i>. The\nfiles in the <i>/proc/[pid]/fdinfo</i> directory show even\nmore information about these file descriptors. See\n<a href=\"https://man.page/5/proc\">proc(5)</a> for further details of both of these\ndirectories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Linux\nheader file <b>&lt;asm/fcntl.h&gt;</b> doesn&rsquo;t define\n<b>O_ASYNC</b>; the (BSD-derived) <b>FASYNC</b> synonym is\ndefined instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Open file\ndescriptions</b> <br>\nThe term open file description is the one used by POSIX to\nrefer to the entries in the system-wide table of open files.\nIn other contexts, this object is variously also called an\n&quot;open file object&quot;, a &quot;file handle&quot;, an\n&quot;open file table entry&quot;, or&mdash;in\nkernel-developer parlance&mdash;a <i>struct file</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a file\ndescriptor is duplicated (using <a href=\"https://man.page/2/dup\">dup(2)</a> or similar),\nthe duplicate refers to the same open file description as\nthe original file descriptor, and the two file descriptors\nconsequently share the file offset and file status flags.\nSuch sharing can also occur between processes: a child\nprocess created via <a href=\"https://man.page/2/fork\">fork(2)</a> inherits duplicates of\nits parent&rsquo;s file descriptors, and those duplicates\nrefer to the same open file descriptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each\n<b>open</b>() of a file creates a new open file description;\nthus, there may be multiple open file descriptions\ncorresponding to a file inode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux, one\ncan use the <a href=\"https://man.page/2/kcmp\">kcmp(2)</a> <b>KCMP_FILE</b> operation to\ntest whether two file descriptors (in the same process or in\ntwo different processes) refer to the same open file\ndescription.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Synchronized\nI/O</b> <br>\nThe POSIX.1-2008 &quot;synchronized I/O&quot; option\nspecifies different variants of synchronized I/O, and\nspecifies the <b>open</b>() flags <b>O_SYNC</b>,\n<b>O_DSYNC</b>, and <b>O_RSYNC</b> for controlling the\nbehavior. Regardless of whether an implementation supports\nthis option, it must at least support the use of\n<b>O_SYNC</b> for regular files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux\nimplements <b>O_SYNC</b> and <b>O_DSYNC</b>, but not\n<b>O_RSYNC</b>. Somewhat incorrectly, glibc defines\n<b>O_RSYNC</b> to have the same value as <b>O_SYNC</b>.\n(<b>O_RSYNC</b> is defined in the Linux header file\n<i>&lt;asm/fcntl.h&gt;</i> on HP PA-RISC, but it is not\nused.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>O_SYNC</b>\nprovides synchronized I/O <i>file</i> integrity completion,\nmeaning write operations will flush data and all associated\nmetadata to the underlying hardware. <b>O_DSYNC</b> provides\nsynchronized I/O <i>data</i> integrity completion, meaning\nwrite operations will flush data to the underlying hardware,\nbut will only flush metadata updates that are required to\nallow a subsequent read operation to complete successfully.\nData integrity completion can reduce the number of disk\noperations that are required for applications that\ndon&rsquo;t need the guarantees of file integrity\ncompletion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To understand\nthe difference between the two types of completion, consider\ntwo pieces of file metadata: the file last modification\ntimestamp (<i>st_mtime</i>) and the file length. All write\noperations will update the last file modification timestamp,\nbut only writes that add data to the end of the file will\nchange the file length. The last modification timestamp is\nnot needed to ensure that a read completes successfully, but\nthe file length is. Thus, <b>O_DSYNC</b> would only\nguarantee to flush updates to the file length metadata\n(whereas <b>O_SYNC</b> would also always flush the last\nmodification timestamp metadata).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before Linux\n2.6.33, Linux implemented only the <b>O_SYNC</b> flag for\n<b>open</b>(). However, when that flag was specified, most\nfilesystems actually provided the equivalent of synchronized\nI/O <i>data</i> integrity completion (i.e., <b>O_SYNC</b>\nwas actually implemented as the equivalent of\n<b>O_DSYNC</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.33, proper <b>O_SYNC</b> support is provided. However,\nto ensure backward binary compatibility, <b>O_DSYNC</b> was\ndefined with the same value as the historical <b>O_SYNC</b>,\nand <b>O_SYNC</b> was defined as a new (two-bit) flag value\nthat includes the <b>O_DSYNC</b> flag value. This ensures\nthat applications compiled against new headers get at least\n<b>O_DSYNC</b> semantics on pre-2.6.33 kernels.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nSince version 2.26, the glibc wrapper function for\n<b>open</b>() employs the <b>openat</b>() system call,\nrather than the kernel&rsquo;s <b>open</b>() system call.\nFor certain architectures, this is also true in glibc\nversions before 2.26.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>NFS</b> <br>\nThere are many infelicities in the protocol underlying NFS,\naffecting amongst others <b>O_SYNC</b> and\n<b>O_NDELAY</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On NFS\nfilesystems with UID mapping enabled, <b>open</b>() may\nreturn a file descriptor but, for example, <a href=\"https://man.page/2/read\">read(2)</a>\nrequests are denied with <b>EACCES</b>. This is because the\nclient performs <b>open</b>() by checking the permissions,\nbut UID mapping is performed by the server upon read and\nwrite requests.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>FIFOs</b>\n<br>\nOpening the read or write end of a FIFO blocks until the\nother end is also opened (by another process or thread). See\n<a href=\"https://man.page/7/fifo\">fifo(7)</a> for further details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>File access\nmode</b> <br>\nUnlike the other values that can be specified in\n<i>flags</i>, the <i>access mode</i> values <b>O_RDONLY</b>,\n<b>O_WRONLY</b>, and <b>O_RDWR</b> do not specify individual\nbits. Rather, they define the low order two bits of\n<i>flags</i>, and are defined respectively as 0, 1, and 2.\nIn other words, the combination <b>O_RDONLY | O_WRONLY</b>\nis a logical error, and certainly does not have the same\nmeaning as <b>O_RDWR</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux reserves\nthe special, nonstandard access mode 3 (binary 11) in\n<i>flags</i> to mean: check for read and write permission on\nthe file and return a file descriptor that can&rsquo;t be\nused for reading or writing. This nonstandard access mode is\nused by some Linux drivers to return a file descriptor that\nis to be used only for device-specific <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\noperations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Rationale\nfor openat() and other directory file descriptor APIs <br>\nopenat</b>() and the other system calls and library\nfunctions that take a directory file descriptor argument\n(i.e., <a href=\"https://man.page/2/execveat\">execveat(2)</a>, <a href=\"https://man.page/2/faccessat\">faccessat(2)</a>,\n<a href=\"https://man.page/2/fanotify_mark\">fanotify_mark(2)</a>, <a href=\"https://man.page/2/fchmodat\">fchmodat(2)</a>,\n<a href=\"https://man.page/2/fchownat\">fchownat(2)</a>, <a href=\"https://man.page/2/fspick\">fspick(2)</a>, <a href=\"https://man.page/2/fstatat\">fstatat(2)</a>,\n<a href=\"https://man.page/2/futimesat\">futimesat(2)</a>, <a href=\"https://man.page/2/linkat\">linkat(2)</a>, <a href=\"https://man.page/2/mkdirat\">mkdirat(2)</a>,\n<a href=\"https://man.page/2/move_mount\">move_mount(2)</a>, <a href=\"https://man.page/2/mknodat\">mknodat(2)</a>,\n<a href=\"https://man.page/2/name_to_handle_at\">name_to_handle_at(2)</a>, <a href=\"https://man.page/2/open_tree\">open_tree(2)</a>,\n<a href=\"https://man.page/2/openat2\">openat2(2)</a>, <a href=\"https://man.page/2/readlinkat\">readlinkat(2)</a>, <a href=\"https://man.page/2/renameat\">renameat(2)</a>,\n<a href=\"https://man.page/2/statx\">statx(2)</a>, <a href=\"https://man.page/2/symlinkat\">symlinkat(2)</a>, <a href=\"https://man.page/2/unlinkat\">unlinkat(2)</a>,\n<a href=\"https://man.page/2/utimensat\">utimensat(2)</a>, <a href=\"https://man.page/3/mkfifoat\">mkfifoat(3)</a>, and\n<a href=\"https://man.page/3/scandirat\">scandirat(3)</a>) address two problems with the older\ninterfaces that preceded them. Here, the explanation is in\nterms of the <b>openat</b>() call, but the rationale is\nanalogous for the other interfaces.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First,\n<b>openat</b>() allows an application to avoid race\nconditions that could occur when using <b>open</b>() to open\nfiles in directories other than the current working\ndirectory. These race conditions result from the fact that\nsome component of the directory prefix given to\n<b>open</b>() could be changed in parallel with the call to\n<b>open</b>(). Suppose, for example, that we wish to create\nthe file <i>dir1/dir2/xxx.dep</i> if the file\n<i>dir1/dir2/xxx</i> exists. The problem is that between the\nexistence check and the file-creation step, <i>dir1</i> or\n<i>dir2</i> (which might be symbolic links) could be\nmodified to point to a different location. Such races can be\navoided by opening a file descriptor for the target\ndirectory, and then specifying that file descriptor as the\n<i>dirfd</i> argument of (say) <a href=\"https://man.page/2/fstatat\">fstatat(2)</a> and\n<b>openat</b>(). The use of the <i>dirfd</i> file descriptor\nalso has other benefits:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the file descriptor is a stable reference to the\ndirectory, even if the directory is renamed; and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the open file descriptor prevents the underlying\nfilesystem from being dismounted, just as when a process has\na current working directory on a filesystem.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Second,\n<b>openat</b>() allows the implementation of a per-thread\n&quot;current working directory&quot;, via file\ndescriptor(s) maintained by the application. (This\nfunctionality can also be obtained by tricks based on the\nuse of <i>/proc/self/fd/</i>dirfd, but less\nefficiently.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>dirfd</i> argument for these APIs can be obtained by\nusing <b>open</b>() or <b>openat</b>() to open a directory\n(with either the <b>O_RDONLY</b> or the <b>O_PATH</b> flag).\nAlternatively, such a file descriptor can be obtained by\napplying <a href=\"https://man.page/3/dirfd\">dirfd(3)</a> to a directory stream created using\n<a href=\"https://man.page/3/opendir\">opendir(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When these APIs\nare given a <i>dirfd</i> argument of <b>AT_FDCWD</b> or the\nspecified pathname is absolute, then they handle their\npathname argument in the same way as the corresponding\nconventional APIs. However, in this case, several of the\nAPIs have a <i>flags</i> argument that provides access to\nfunctionality that is not available with the corresponding\nconventional APIs.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>O_DIRECT</b>\n<br>\nThe <b>O_DIRECT</b> flag may impose alignment restrictions\non the length and address of user-space buffers and the file\noffset of I/Os. In Linux alignment restrictions vary by\nfilesystem and kernel version and might be absent entirely.\nHowever there is currently no filesystem-independent\ninterface for an application to discover these restrictions\nfor a given file or filesystem. Some filesystems provide\ntheir own interfaces for doing so, for example the\n<b>XFS_IOC_DIOINFO</b> operation in <a href=\"https://man.page/3/xfsctl\">xfsctl(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under Linux\n2.4, transfer sizes, and the alignment of the user buffer\nand the file offset must all be multiples of the logical\nblock size of the filesystem. Since Linux 2.6.0, alignment\nto the logical block size of the underlying storage\n(typically 512 bytes) suffices. The logical block size can\nbe determined using the <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> <b>BLKSSZGET</b>\noperation or from the shell using the command:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">blockdev\n--getss</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>O_DIRECT</b>\nI/Os should never be run concurrently with the\n<a href=\"https://man.page/2/fork\">fork(2)</a> system call, if the memory buffer is a\nprivate mapping (i.e., any mapping created with the\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> <b>MAP_PRIVATE</b> flag; this includes memory\nallocated on the heap and statically allocated buffers). Any\nsuch I/Os, whether submitted via an asynchronous I/O\ninterface or from another thread in the process, should be\ncompleted before <a href=\"https://man.page/2/fork\">fork(2)</a> is called. Failure to do so\ncan result in data corruption and undefined behavior in\nparent and child processes. This restriction does not apply\nwhen the memory buffer for the <b>O_DIRECT</b> I/Os was\ncreated using <a href=\"https://man.page/2/shmat\">shmat(2)</a> or <a href=\"https://man.page/2/mmap\">mmap(2)</a> with the\n<b>MAP_SHARED</b> flag. Nor does this restriction apply when\nthe memory buffer has been advised as <b>MADV_DONTFORK</b>\nwith <a href=\"https://man.page/2/madvise\">madvise(2)</a>, ensuring that it will not be\navailable to the child after <a href=\"https://man.page/2/fork\">fork(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>O_DIRECT</b> flag was introduced in SGI IRIX, where it\nhas alignment restrictions similar to those of Linux 2.4.\nIRIX has also a <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> call to query appropriate\nalignments, and sizes. FreeBSD 4.x introduced a flag of the\nsame name, but without alignment restrictions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>O_DIRECT</b>\nsupport was added under Linux in kernel version 2.4.10.\nOlder Linux kernels simply ignore this flag. Some\nfilesystems may not implement the flag, in which case\n<b>open</b>() fails with the error <b>EINVAL</b> if it is\nused.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Applications\nshould avoid mixing <b>O_DIRECT</b> and normal I/O to the\nsame file, and especially to overlapping byte regions in the\nsame file. Even when the filesystem correctly handles the\ncoherency issues in this situation, overall I/O throughput\nis likely to be slower than using either mode alone.\nLikewise, applications should avoid mixing <a href=\"https://man.page/2/mmap\">mmap(2)</a> of\nfiles with direct I/O to the same files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior of\n<b>O_DIRECT</b> with NFS will differ from local filesystems.\nOlder kernels, or kernels configured in certain ways, may\nnot support this combination. The NFS protocol does not\nsupport passing the flag to the server, so <b>O_DIRECT</b>\nI/O will bypass the page cache only on the client; the\nserver may still cache the I/O. The client asks the server\nto make the I/O synchronous to preserve the synchronous\nsemantics of <b>O_DIRECT</b>. Some servers will perform\npoorly under these circumstances, especially if the I/O size\nis small. Some servers may also be configured to lie to\nclients about the I/O having reached stable storage; this\nwill avoid the performance penalty at some risk to data\nintegrity in the event of server power failure. The Linux\nNFS client places no alignment restrictions on\n<b>O_DIRECT</b> I/O.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In summary,\n<b>O_DIRECT</b> is a potentially powerful tool that should\nbe used with caution. It is recommended that applications\ntreat use of <b>O_DIRECT</b> as a performance option which\nis disabled by default.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently, it\nis not possible to enable signal-driven I/O by specifying\n<b>O_ASYNC</b> when calling <b>open</b>(); use\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> to enable this flag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One must check\nfor two different error codes, <b>EISDIR</b> and\n<b>ENOENT</b>, when trying to determine whether the kernel\nsupports <b>O_TMPFILE</b> functionality.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When both\n<b>O_CREAT</b> and <b>O_DIRECTORY</b> are specified in\n<i>flags</i> and the file specified by <i>pathname</i> does\nnot exist, <b>open</b>() will create a regular file (i.e.,\n<b>O_DIRECTORY</b> is ignored).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/chmod\">chmod(2)</a>,\n<a href=\"https://man.page/2/chown\">chown(2)</a>, <a href=\"https://man.page/2/close\">close(2)</a>, <a href=\"https://man.page/2/dup\">dup(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, <a href=\"https://man.page/2/link\">link(2)</a>, <a href=\"https://man.page/2/lseek\">lseek(2)</a>,\n<a href=\"https://man.page/2/mknod\">mknod(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/mount\">mount(2)</a>,\n<a href=\"https://man.page/2/open_by_handle_at\">open_by_handle_at(2)</a>, <a href=\"https://man.page/2/openat2\">openat2(2)</a>,\n<a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/socket\">socket(2)</a>, <a href=\"https://man.page/2/stat\">stat(2)</a>,\n<a href=\"https://man.page/2/umask\">umask(2)</a>, <a href=\"https://man.page/2/unlink\">unlink(2)</a>, <a href=\"https://man.page/2/write\">write(2)</a>,\n<a href=\"https://man.page/3/fopen\">fopen(3)</a>, <a href=\"https://man.page/5/acl\">acl(5)</a>, <a href=\"https://man.page/7/fifo\">fifo(7)</a>,\n<a href=\"https://man.page/7/inode\">inode(7)</a>, <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>,\n<a href=\"https://man.page/7/symlink\">symlink(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}