{"name":"sigaction","body":"\n\n<h1 align=\"center\">SIGACTION</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">sigaction,\nrt_sigaction - examine and change a signal action</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;signal.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsigaction(int</b> <i>signum</i><b>, const struct sigaction\n*</b><i>act</i><b>, <br>\nstruct sigaction *</b><i>oldact</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaction</b>():\n_POSIX_C_SOURCE</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>siginfo_t</i>:\n_POSIX_C_SOURCE &gt;= 199309L</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>sigaction</b>() system call is used to change the action\ntaken by a process on receipt of a specific signal. (See\n<a href=\"https://man.page/7/signal\">signal(7)</a> for an overview of signals.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>signum</i>\nspecifies the signal and can be any valid signal except\n<b>SIGKILL</b> and <b>SIGSTOP</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>act</i>\nis non-NULL, the new action for signal <i>signum</i> is\ninstalled from <i>act</i>. If <i>oldact</i> is non-NULL, the\nprevious action is saved in <i>oldact</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sigaction</i> structure is defined as something like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nsigaction { <br>\nvoid (*sa_handler)(int); <br>\nvoid (*sa_sigaction)(int, siginfo_t *, void *); <br>\nsigset_t sa_mask; <br>\nint sa_flags; <br>\nvoid (*sa_restorer)(void); <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On some\narchitectures a union is involved: do not assign to both\n<i>sa_handler</i> and <i>sa_sigaction</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sa_restorer</i> field is not intended for application\nuse. (POSIX does not specify a <i>sa_restorer</i> field.)\nSome further details of the purpose of this field can be\nfound in <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sa_handler</i>\nspecifies the action to be associated with <i>signum</i> and\nis be one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>SIG_DFL</b> for the default action.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>SIG_IGN</b> to ignore this signal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>A pointer to a signal handling function. This function\nreceives the signal number as its only argument.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>SA_SIGINFO</b> is specified in <i>sa_flags</i>, then\n<i>sa_sigaction</i> (instead of <i>sa_handler</i>) specifies\nthe signal-handling function for <i>signum</i>. This\nfunction receives three arguments, as described below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sa_mask</i>\nspecifies a mask of signals which should be blocked (i.e.,\nadded to the signal mask of the thread in which the signal\nhandler is invoked) during execution of the signal handler.\nIn addition, the signal which triggered the handler will be\nblocked, unless the <b>SA_NODEFER</b> flag is used.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sa_flags</i>\nspecifies a set of flags which modify the behavior of the\nsignal. It is formed by the bitwise OR of zero or more of\nthe following: <b><br>\nSA_NOCLDSTOP</b></p>\n\n<p style=\"margin-left:22%;\">If <i>signum</i> is\n<b>SIGCHLD</b>, do not receive notification when child\nprocesses stop (i.e., when they receive one of\n<b>SIGSTOP</b>, <b>SIGTSTP</b>, <b>SIGTTIN</b>, or\n<b>SIGTTOU</b>) or resume (i.e., they receive\n<b>SIGCONT</b>) (see <a href=\"https://man.page/2/wait\">wait(2)</a>). This flag is\nmeaningful only when establishing a handler for\n<b>SIGCHLD</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_NOCLDWAIT</b> (since\nLinux 2.6)</p>\n\n<p style=\"margin-left:22%;\">If <i>signum</i> is\n<b>SIGCHLD</b>, do not transform children into zombies when\nthey terminate. See also <a href=\"https://man.page/2/waitpid\">waitpid(2)</a>. This flag is\nmeaningful only when establishing a handler for\n<b>SIGCHLD</b>, or when setting that signal&rsquo;s\ndisposition to <b>SIG_DFL</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b>SA_NOCLDWAIT</b> flag is set when establishing a handler\nfor <b>SIGCHLD</b>, POSIX.1 leaves it unspecified whether a\n<b>SIGCHLD</b> signal is generated when a child process\nterminates. On Linux, a <b>SIGCHLD</b> signal is generated\nin this case; on some other implementations, it is not.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_NODEFER</b></p>\n\n<p style=\"margin-left:22%;\">Do not add the signal to the\nthread&rsquo;s signal mask while the handler is executing,\nunless the signal is specified in <i>act.sa_mask</i>.\nConsequently, a further instance of the signal may be\ndelivered to the thread while it is executing the handler.\nThis flag is meaningful only when establishing a signal\nhandler.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>SA_NOMASK</b>\nis an obsolete, nonstandard synonym for this flag.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_ONSTACK</b></p>\n\n<p style=\"margin-left:22%;\">Call the signal handler on an\nalternate signal stack provided by <a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>. If\nan alternate stack is not available, the default stack will\nbe used. This flag is meaningful only when establishing a\nsignal handler.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_RESETHAND</b></p>\n\n<p style=\"margin-left:22%;\">Restore the signal action to\nthe default upon entry to the signal handler. This flag is\nmeaningful only when establishing a signal handler.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>SA_ONESHOT</b>\nis an obsolete, nonstandard synonym for this flag.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_RESTART</b></p>\n\n<p style=\"margin-left:22%;\">Provide behavior compatible\nwith BSD signal semantics by making certain system calls\nrestartable across signals. This flag is meaningful only\nwhen establishing a signal handler. See <a href=\"https://man.page/7/signal\">signal(7)</a> for\na discussion of system call restarting.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_RESTORER</b></p>\n\n<p style=\"margin-left:22%;\"><i>Not intended for application\nuse</i>. This flag is used by C libraries to indicate that\nthe <i>sa_restorer</i> field contains the address of a\n&quot;signal trampoline&quot;. See <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a> for\nmore details.</p>\n\n<p style=\"margin-left:11%;\"><b>SA_SIGINFO</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">The signal handler takes three\narguments, not one. In this case, <i>sa_sigaction</i> should\nbe set instead of <i>sa_handler</i>. This flag is meaningful\nonly when establishing a signal handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\nsiginfo_t argument to a SA_SIGINFO handler</b> <br>\nWhen the <b>SA_SIGINFO</b> flag is specified in\n<i>act.sa_flags</i>, the signal handler address is passed\nvia the <i>act.sa_sigaction</i> field. This handler takes\nthree arguments, as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">void <br>\nhandler(int sig, siginfo_t *info, void *ucontext) <br>\n{ <br>\n... <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These three\narguments are as follows</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>sig</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>The number of the signal that caused invocation of the\nhandler.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>info</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>A pointer to a <i>siginfo_t</i>, which is a structure\ncontaining further information about the signal, as\ndescribed below.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>ucontext</i></p>\n\n<p style=\"margin-left:22%;\">This is a pointer to a\n<i>ucontext_t</i> structure, cast to <i>void&nbsp;*</i>. The\nstructure pointed to by this field contains signal context\ninformation that was saved on the user-space stack by the\nkernel; for details, see <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a>. Further\ninformation about the <i>ucontext_t</i> structure can be\nfound in <a href=\"https://man.page/3/getcontext\">getcontext(3)</a> and <a href=\"https://man.page/7/signal\">signal(7)</a>.\nCommonly, the handler function doesn&rsquo;t make any use of\nthe third argument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>siginfo_t</i> data type is a structure with the following\nfields:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">siginfo_t {\n<br>\nint si_signo; /* Signal number */ <br>\nint si_errno; /* An errno value */ <br>\nint si_code; /* Signal code */ <br>\nint si_trapno; /* Trap number that caused <br>\nhardware-generated signal <br>\n(unused on most architectures) */ <br>\npid_t si_pid; /* Sending process ID */ <br>\nuid_t si_uid; /* Real user ID of sending process */ <br>\nint si_status; /* Exit value or signal */ <br>\nclock_t si_utime; /* User time consumed */ <br>\nclock_t si_stime; /* System time consumed */ <br>\nunion sigval si_value; /* Signal value */ <br>\nint si_int; /* POSIX.1b signal */ <br>\nvoid *si_ptr; /* POSIX.1b signal */ <br>\nint si_overrun; /* Timer overrun count; <br>\nPOSIX.1b timers */ <br>\nint si_timerid; /* Timer ID; POSIX.1b timers */ <br>\nvoid *si_addr; /* Memory location which caused fault */ <br>\nlong si_band; /* Band event (was <i>int</i> in <br>\nglibc 2.3.2 and earlier) */ <br>\nint si_fd; /* File descriptor */ <br>\nshort si_addr_lsb; /* Least significant bit of address <br>\n(since Linux 2.6.32) */ <br>\nvoid *si_lower; /* Lower bound when address violation <br>\noccurred (since Linux 3.19) */ <br>\nvoid *si_upper; /* Upper bound when address violation <br>\noccurred (since Linux 3.19) */ <br>\nint si_pkey; /* Protection key on PTE that caused <br>\nfault (since Linux 4.6) */ <br>\nvoid *si_call_addr; /* Address of system call instruction\n<br>\n(since Linux 3.5) */ <br>\nint si_syscall; /* Number of attempted system call <br>\n(since Linux 3.5) */ <br>\nunsigned int si_arch; /* Architecture of attempted system\ncall <br>\n(since Linux 3.5) */ <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>si_signo</i>,\n<i>si_errno</i> and <i>si_code</i> are defined for all\nsignals. (<i>si_errno</i> is generally unused on Linux.) The\nrest of the struct may be a union, so that one should read\nonly the fields that are meaningful for the given\nsignal:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Signals sent with <a href=\"https://man.page/2/kill\">kill(2)</a> and <a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>\nfill in <i>si_pid</i> and <i>si_uid</i>. In addition,\nsignals sent with <a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a> fill in <i>si_int</i>\nand <i>si_ptr</i> with the values specified by the sender of\nthe signal; see <a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a> for more details.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Signals sent by POSIX.1b timers (since Linux 2.6) fill\nin <i>si_overrun</i> and <i>si_timerid</i>. The\n<i>si_timerid</i> field is an internal ID used by the kernel\nto identify the timer; it is not the same as the timer ID\nreturned by <a href=\"https://man.page/2/timer_create\">timer_create(2)</a>. The <i>si_overrun</i>\nfield is the timer overrun count; this is the same\ninformation as is obtained by a call to\n<a href=\"https://man.page/2/timer_getoverrun\">timer_getoverrun(2)</a>. These fields are nonstandard\nLinux extensions.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Signals sent for message queue notification (see the\ndescription of <b>SIGEV_SIGNAL</b> in <a href=\"https://man.page/3/mq_notify\">mq_notify(3)</a>)\nfill in <i>si_int</i>/<i>si_ptr</i>, with the\n<i>sigev_value</i> supplied to <a href=\"https://man.page/3/mq_notify\">mq_notify(3)</a>;\n<i>si_pid</i>, with the process ID of the message sender;\nand <i>si_uid</i>, with the real user ID of the message\nsender.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>SIGCHLD</b> fills in <i>si_pid</i>, <i>si_uid</i>,\n<i>si_status</i>, <i>si_utime</i>, and <i>si_stime</i>,\nproviding information about the child. The <i>si_pid</i>\nfield is the process ID of the child; <i>si_uid</i> is the\nchild&rsquo;s real user ID. The <i>si_status</i> field\ncontains the exit status of the child (if <i>si_code</i> is\n<b>CLD_EXITED</b>), or the signal number that caused the\nprocess to change state. The <i>si_utime</i> and\n<i>si_stime</i> contain the user and system CPU time used by\nthe child process; these fields do not include the times\nused by waited-for children (unlike <a href=\"https://man.page/2/getrusage\">getrusage(2)</a> and\n<a href=\"https://man.page/2/times\">times(2)</a>). In kernels up to 2.6, and since 2.6.27,\nthese fields report CPU time in units of\n<i>sysconf(_SC_CLK_TCK)</i>. In 2.6 kernels before 2.6.27, a\nbug meant that these fields reported time in units of the\n(configurable) system jiffy (see <a href=\"https://man.page/7/time\">time(7)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>SIGILL</b>, <b>SIGFPE</b>, <b>SIGSEGV</b>,\n<b>SIGBUS</b>, and <b>SIGTRAP</b> fill in <i>si_addr</i>\nwith the address of the fault. On some architectures, these\nsignals also fill in the <i>si_trapno</i> field.</p></td></tr>\n</table>\n\n<p style=\"margin-left:14%; margin-top: 1em\">Some suberrors\nof <b>SIGBUS</b>, in particular <b>BUS_MCEERR_AO</b> and\n<b>BUS_MCEERR_AR</b>, also fill in <i>si_addr_lsb</i>. This\nfield indicates the least significant bit of the reported\naddress and therefore the extent of the corruption. For\nexample, if a full page was corrupted, <i>si_addr_lsb</i>\ncontains <i>log2(sysconf(_SC_PAGESIZE))</i>. When\n<b>SIGTRAP</b> is delivered in response to a\n<a href=\"https://man.page/2/ptrace\">ptrace(2)</a> event (PTRACE_EVENT_foo), <i>si_addr</i> is\nnot populated, but <i>si_pid</i> and <i>si_uid</i> are\npopulated with the respective process ID and user ID\nresponsible for delivering the trap. In the case of\n<a href=\"https://man.page/2/seccomp\">seccomp(2)</a>, the tracee will be shown as delivering\nthe event. <b>BUS_MCEERR_*</b> and <i>si_addr_lsb</i> are\nLinux-specific extensions.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>SEGV_BNDERR</b> suberror of <b>SIGSEGV</b> populates\n<i>si_lower</i> and <i>si_upper</i>.</p>\n\n<p style=\"margin-left:14%; margin-top: 1em\">The\n<b>SEGV_PKUERR</b> suberror of <b>SIGSEGV</b> populates\n<i>si_pkey</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\"><b>SIGIO</b>/<b>SIGPOLL</b> (the\ntwo names are synonyms on Linux) fills in <i>si_band</i> and\n<i>si_fd</i>. The <i>si_band</i> event is a bit mask\ncontaining the same values as are filled in the\n<i>revents</i> field by <a href=\"https://man.page/2/poll\">poll(2)</a>. The <i>si_fd</i>\nfield indicates the file descriptor for which the I/O event\noccurred; for further details, see the description of\n<b>F_SETSIG</b> in <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>SIGSYS</b>, generated (since Linux 3.5) when a\nseccomp filter returns <b>SECCOMP_RET_TRAP</b>, fills in\n<i>si_call_addr</i>, <i>si_syscall</i>, <i>si_arch</i>,\n<i>si_errno</i>, and other fields as described in\n<a href=\"https://man.page/2/seccomp\">seccomp(2)</a>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The si_code\nfield</b> <br>\nThe <i>si_code</i> field inside the <i>siginfo_t</i>\nargument that is passed to a <b>SA_SIGINFO</b> signal\nhandler is a value (not a bit mask) indicating why this\nsignal was sent. For a <a href=\"https://man.page/2/ptrace\">ptrace(2)</a> event,\n<i>si_code</i> will contain <b>SIGTRAP</b> and have the\nptrace event in the high byte:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">(SIGTRAP |\nPTRACE_EVENT_foo &lt;&lt; 8).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\nnon-<a href=\"https://man.page/2/ptrace\">ptrace(2)</a> event, the values that can appear in\n<i>si_code</i> are described in the remainder of this\nsection. Since glibc 2.20, the definitions of most of these\nsymbols are obtained from <i>&lt;signal.h&gt;</i> by\ndefining feature test macros (before including <i>any</i>\nheader file) as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p style=\"margin-top: 1em\"><b>_XOPEN_SOURCE</b> with the\nvalue 500 or greater;</p></td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><b>_XOPEN_SOURCE</b> and <b>_XOPEN_SOURCE_EXTENDED</b>;\nor</p> </td>\n<td width=\"8%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"77%\">\n\n\n<p><b>_POSIX_C_SOURCE</b> with the value 200809L or\ngreater.</p> </td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the\n<b>TRAP_*</b> constants, the symbol definitions are provided\nonly in the first two cases. Before glibc 2.20, no feature\ntest macros were required to obtain these symbols.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a regular\nsignal, the following list shows the values which can be\nplaced in <i>si_code</i> for any signal, along with the\nreason that the signal was generated.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_USER</b></p>\n\n<p style=\"margin-left:28%;\"><a href=\"https://man.page/2/kill\">kill(2)</a>.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_KERNEL</b></p>\n\n<p style=\"margin-left:28%;\">Sent by the kernel.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_QUEUE</b></p>\n\n<p style=\"margin-left:28%;\"><a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_TIMER</b></p>\n\n<p style=\"margin-left:28%;\">POSIX timer expired.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_MESGQ</b> (since Linux\n2.6.6)</p>\n\n<p style=\"margin-left:28%;\">POSIX message queue state\nchanged; see <a href=\"https://man.page/3/mq_notify\">mq_notify(3)</a>.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_ASYNCIO</b></p>\n\n<p style=\"margin-left:28%;\">AIO completed.</p>\n\n<p style=\"margin-left:17%;\"><b>SI_SIGIO</b></p>\n\n<p style=\"margin-left:28%;\">Queued <b>SIGIO</b> (only in\nkernels up to Linux 2.2; from Linux 2.4 onward\n<b>SIGIO</b>/<b>SIGPOLL</b> fills in <i>si_code</i> as\ndescribed below).</p>\n\n<p style=\"margin-left:17%;\"><b>SI_TKILL</b> (since Linux\n2.4.19)</p>\n\n<p style=\"margin-left:28%;\"><a href=\"https://man.page/2/tkill\">tkill(2)</a> or\n<a href=\"https://man.page/2/tgkill\">tgkill(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a <b>SIGILL</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_ILLOPC</b></p>\n\n<p style=\"margin-left:28%;\">Illegal opcode.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_ILLOPN</b></p>\n\n<p style=\"margin-left:28%;\">Illegal operand.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_ILLADR</b></p>\n\n<p style=\"margin-left:28%;\">Illegal addressing mode.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_ILLTRP</b></p>\n\n<p style=\"margin-left:28%;\">Illegal trap.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_PRVOPC</b></p>\n\n<p style=\"margin-left:28%;\">Privileged opcode.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_PRVREG</b></p>\n\n<p style=\"margin-left:28%;\">Privileged register.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_COPROC</b></p>\n\n<p style=\"margin-left:28%;\">Coprocessor error.</p>\n\n<p style=\"margin-left:17%;\"><b>ILL_BADSTK</b></p>\n\n<p style=\"margin-left:28%;\">Internal stack error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a <b>SIGFPE</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_INTDIV</b></p>\n\n<p style=\"margin-left:28%;\">Integer divide by zero.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_INTOVF</b></p>\n\n<p style=\"margin-left:28%;\">Integer overflow.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_FLTDIV</b></p>\n\n<p style=\"margin-left:28%;\">Floating-point divide by\nzero.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_FLTOVF</b></p>\n\n<p style=\"margin-left:28%;\">Floating-point overflow.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_FLTUND</b></p>\n\n<p style=\"margin-left:28%;\">Floating-point underflow.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_FLTRES</b></p>\n\n<p style=\"margin-left:28%;\">Floating-point inexact\nresult.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_FLTINV</b></p>\n\n<p style=\"margin-left:28%;\">Floating-point invalid\noperation.</p>\n\n<p style=\"margin-left:17%;\"><b>FPE_FLTSUB</b></p>\n\n<p style=\"margin-left:28%;\">Subscript out of range.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a <b>SIGSEGV</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>SEGV_MAPERR</b></p>\n\n<p style=\"margin-left:28%;\">Address not mapped to\nobject.</p>\n\n<p style=\"margin-left:17%;\"><b>SEGV_ACCERR</b></p>\n\n<p style=\"margin-left:28%;\">Invalid permissions for mapped\nobject.</p>\n\n<p style=\"margin-left:17%;\"><b>SEGV_BNDERR</b> (since Linux\n3.19)</p>\n\n<p style=\"margin-left:28%;\">Failed address bound\nchecks.</p>\n\n<p style=\"margin-left:17%;\"><b>SEGV_PKUERR</b> (since Linux\n4.6)</p>\n\n<p style=\"margin-left:28%;\">Access was denied by memory\nprotection keys. See <a href=\"https://man.page/7/pkeys\">pkeys(7)</a>. The protection key\nwhich applied to this access is available via\n<i>si_pkey</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a <b>SIGBUS</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>BUS_ADRALN</b></p>\n\n<p style=\"margin-left:28%;\">Invalid address alignment.</p>\n\n<p style=\"margin-left:17%;\"><b>BUS_ADRERR</b></p>\n\n<p style=\"margin-left:28%;\">Nonexistent physical\naddress.</p>\n\n<p style=\"margin-left:17%;\"><b>BUS_OBJERR</b></p>\n\n<p style=\"margin-left:28%;\">Object-specific hardware\nerror.</p>\n\n<p style=\"margin-left:17%;\"><b>BUS_MCEERR_AR</b> (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:28%;\">Hardware memory error consumed\non a machine check; action required.</p>\n\n<p style=\"margin-left:17%;\"><b>BUS_MCEERR_AO</b> (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:28%;\">Hardware memory error detected\nin process but not consumed; action optional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a <b>SIGTRAP</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>TRAP_BRKPT</b></p>\n\n<p style=\"margin-left:28%;\">Process breakpoint.</p>\n\n<p style=\"margin-left:17%;\"><b>TRAP_TRACE</b></p>\n\n<p style=\"margin-left:28%;\">Process trace trap.</p>\n\n<p style=\"margin-left:17%;\"><b>TRAP_BRANCH</b> (since Linux\n2.4, IA64 only)</p>\n\n<p style=\"margin-left:28%;\">Process taken branch trap.</p>\n\n<p style=\"margin-left:17%;\"><b>TRAP_HWBKPT</b> (since Linux\n2.4, IA64 only)</p>\n\n<p style=\"margin-left:28%;\">Hardware\nbreakpoint/watchpoint.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a <b>SIGCHLD</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>CLD_EXITED</b></p>\n\n<p style=\"margin-left:28%;\">Child has exited.</p>\n\n<p style=\"margin-left:17%;\"><b>CLD_KILLED</b></p>\n\n<p style=\"margin-left:28%;\">Child was killed.</p>\n\n<p style=\"margin-left:17%;\"><b>CLD_DUMPED</b></p>\n\n<p style=\"margin-left:28%;\">Child terminated\nabnormally.</p>\n\n<p style=\"margin-left:17%;\"><b>CLD_TRAPPED</b></p>\n\n<p style=\"margin-left:28%;\">Traced child has trapped.</p>\n\n<p style=\"margin-left:17%;\"><b>CLD_STOPPED</b></p>\n\n<p style=\"margin-left:28%;\">Child has stopped.</p>\n\n<p style=\"margin-left:17%;\"><b>CLD_CONTINUED</b> (since\nLinux 2.6.9)</p>\n\n<p style=\"margin-left:28%;\">Stopped child has\ncontinued.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalues can be placed in <i>si_code</i> for a\n<b>SIGIO</b>/<b>SIGPOLL</b> signal:</p>\n\n<p style=\"margin-left:17%;\"><b>POLL_IN</b></p>\n\n<p style=\"margin-left:28%;\">Data input available.</p>\n\n<p style=\"margin-left:17%;\"><b>POLL_OUT</b></p>\n\n<p style=\"margin-left:28%;\">Output buffers available.</p>\n\n<p style=\"margin-left:17%;\"><b>POLL_MSG</b></p>\n\n<p style=\"margin-left:28%;\">Input message available.</p>\n\n<p style=\"margin-left:17%;\"><b>POLL_ERR</b></p>\n\n<p style=\"margin-left:28%;\">I/O error.</p>\n\n<p style=\"margin-left:17%;\"><b>POLL_PRI</b></p>\n\n<p style=\"margin-left:28%;\">High priority input\navailable.</p>\n\n<p style=\"margin-left:17%;\"><b>POLL_HUP</b></p>\n\n<p style=\"margin-left:28%;\">Device disconnected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalue can be placed in <i>si_code</i> for a <b>SIGSYS</b>\nsignal:</p>\n\n<p style=\"margin-left:17%;\"><b>SYS_SECCOMP</b> (since Linux\n3.5)</p>\n\n<p style=\"margin-left:28%;\">Triggered by a\n<a href=\"https://man.page/2/seccomp\">seccomp(2)</a> filter rule.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaction</b>()\nreturns 0 on success; on error, -1 is returned, and\n<i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>act</i> or <i>oldact</i>\npoints to memory which is not a valid part of the process\naddress space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An invalid signal was specified. This will also be\ngenerated if an attempt is made to change the action for\n<b>SIGKILL</b> or <b>SIGSTOP</b>, which cannot be caught or\nignored.</p> </td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A child created\nvia <a href=\"https://man.page/2/fork\">fork(2)</a> inherits a copy of its parent&rsquo;s\nsignal dispositions. During an <a href=\"https://man.page/2/execve\">execve(2)</a>, the\ndispositions of handled signals are reset to the default;\nthe dispositions of ignored signals are left unchanged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">According to\nPOSIX, the behavior of a process is undefined after it\nignores a <b>SIGFPE</b>, <b>SIGILL</b>, or <b>SIGSEGV</b>\nsignal that was not generated by <a href=\"https://man.page/2/kill\">kill(2)</a> or\n<a href=\"https://man.page/3/raise\">raise(3)</a>. Integer division by zero has undefined\nresult. On some architectures it will generate a\n<b>SIGFPE</b> signal. (Also dividing the most negative\ninteger by -1 may generate <b>SIGFPE</b>.) Ignoring this\nsignal might lead to an endless loop.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-1990\ndisallowed setting the action for <b>SIGCHLD</b> to\n<b>SIG_IGN</b>. POSIX.1-2001 and later allow this\npossibility, so that ignoring <b>SIGCHLD</b> can be used to\nprevent the creation of zombies (see <a href=\"https://man.page/2/wait\">wait(2)</a>).\nNevertheless, the historical BSD and System&nbsp;V behaviors\nfor ignoring <b>SIGCHLD</b> differ, so that the only\ncompletely portable method of ensuring that terminated\nchildren do not become zombies is to catch the\n<b>SIGCHLD</b> signal and perform a <a href=\"https://man.page/2/wait\">wait(2)</a> or\nsimilar.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-1990\nspecified only <b>SA_NOCLDSTOP</b>. POSIX.1-2001 added\n<b>SA_NOCLDSTOP</b>, <b>SA_NOCLDWAIT</b>, <b>SA_NODEFER</b>,\n<b>SA_ONSTACK</b>, <b>SA_RESETHAND</b>, <b>SA_RESTART</b>,\nand <b>SA_SIGINFO</b>. Use of these latter values in\n<i>sa_flags</i> may be less portable in applications\nintended for older UNIX implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>SA_RESETHAND</b> flag is compatible with the SVr4 flag of\nthe same name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>SA_NODEFER</b> flag is compatible with the SVr4 flag of\nthe same name under kernels 1.3.9 and later. On older\nkernels the Linux implementation allowed the receipt of any\nsignal, not just the one we are installing (effectively\noverriding any <i>sa_mask</i> settings).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sigaction</b>()\ncan be called with a NULL second argument to query the\ncurrent signal handler. It can also be used to check whether\na given signal is valid for the current machine by calling\nit with NULL second and third arguments.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is not\npossible to block <b>SIGKILL</b> or <b>SIGSTOP</b> (by\nspecifying them in <i>sa_mask</i>). Attempts to do so are\nsilently ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/3/sigsetops\">sigsetops(3)</a> for details on manipulating signal\nsets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/7/signal-safety\">signal-safety(7)</a> for a list of the async-signal-safe\nfunctions that can be safely called inside from inside a\nsignal handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nThe glibc wrapper function for <b>sigaction</b>() gives an\nerror (<b>EINVAL</b>) on attempts to change the disposition\nof the two real-time signals used internally by the NPTL\nthreading implementation. See <a href=\"https://man.page/7/nptl\">nptl(7)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On\narchitectures where the signal trampoline resides in the C\nlibrary, the glibc wrapper function for <b>sigaction</b>()\nplaces the address of the trampoline code in the\n<i>act.sa_restorer</i> field and sets the <b>SA_RESTORER</b>\nflag in the <i>act.sa_flags</i> field. See\n<a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The original\nLinux system call was named <b>sigaction</b>(). However,\nwith the addition of real-time signals in Linux 2.2, the\nfixed-size, 32-bit <i>sigset_t</i> type supported by that\nsystem call was no longer fit for purpose. Consequently, a\nnew system call, <b>rt_sigaction</b>(), was added to support\nan enlarged <i>sigset_t</i> type. The new system call takes\na fourth argument, <i>size_t sigsetsize</i>, which specifies\nthe size in bytes of the signal sets in <i>act.sa_mask</i>\nand <i>oldact.sa_mask</i>. This argument is currently\nrequired to have the value <i>sizeof(sigset_t)</i> (or the\nerror <b>EINVAL</b> results). The glibc <b>sigaction</b>()\nwrapper function hides these details from us, transparently\ncalling <b>rt_sigaction</b>() when the kernel provides\nit.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Undocumented</b>\n<br>\nBefore the introduction of <b>SA_SIGINFO</b>, it was also\npossible to get some additional information about the\nsignal. This was done by providing an <i>sa_handler</i>\nsignal handler with a second argument of type <i>struct\nsigcontext</i>, which is the same structure as the one that\nis passed in the <i>uc_mcontext</i> field of the\n<i>ucontext</i> structure that is passed (via a pointer) in\nthe third argument of the <i>sa_sigaction</i> handler. See\nthe relevant Linux kernel sources for details. This use is\nobsolete now.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When delivering\na signal with a <b>SA_SIGINFO</b> handler, the kernel does\nnot always provide meaningful values for all of the fields\nof the <i>siginfo_t</i> that are relevant for that\nsignal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In kernels up\nto and including 2.6.13, specifying <b>SA_NODEFER</b> in\n<i>sa_flags</i> prevents not only the delivered signal from\nbeing masked during execution of the handler, but also the\nsignals specified in <i>sa_mask</i>. This bug was fixed in\nkernel 2.6.14.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/mprotect\">mprotect(2)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/kill\">kill(1)</a>,\n<a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/2/pause\">pause(2)</a>,\n<a href=\"https://man.page/2/pidfd_send_signal\">pidfd_send_signal(2)</a>, <a href=\"https://man.page/2/restart_syscall\">restart_syscall(2)</a>,\n<a href=\"https://man.page/2/seccomp\">seccomp(2)</a>, <a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>, <a href=\"https://man.page/2/signal\">signal(2)</a>,\n<a href=\"https://man.page/2/signalfd\">signalfd(2)</a>, <a href=\"https://man.page/2/sigpending\">sigpending(2)</a>,\n<a href=\"https://man.page/2/sigprocmask\">sigprocmask(2)</a>, <a href=\"https://man.page/2/sigreturn\">sigreturn(2)</a>,\n<a href=\"https://man.page/2/sigsuspend\">sigsuspend(2)</a>, <a href=\"https://man.page/2/wait\">wait(2)</a>, <a href=\"https://man.page/3/killpg\">killpg(3)</a>,\n<a href=\"https://man.page/3/raise\">raise(3)</a>, <a href=\"https://man.page/3/siginterrupt\">siginterrupt(3)</a>, <a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>,\n<a href=\"https://man.page/3/sigsetops\">sigsetops(3)</a>, <a href=\"https://man.page/3/sigvec\">sigvec(3)</a>, <a href=\"https://man.page/5/core\">core(5)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}