{"name":"getcpu","description":"getcpu -\ndetermine CPU and NUMA node on which the calling thread is\nrunning","body":"\n\n<h1 align=\"center\">GETCPU</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getcpu -\ndetermine CPU and NUMA node on which the calling thread is\nrunning</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;linux/getcpu.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetcpu(unsigned *</b><i>cpu</i><b>, unsigned\n*</b><i>node</i><b>, struct getcpu_cache\n*</b><i>tcache</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getcpu</b>() system call identifies the processor and\nnode on which the calling thread or process is currently\nrunning and writes them into the integers pointed to by the\n<i>cpu</i> and <i>node</i> arguments. The processor is a\nunique small integer identifying a CPU. The node is a unique\nsmall identifier identifying a NUMA node. When either\n<i>cpu</i> or <i>node</i> is NULL nothing is written to the\nrespective pointer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The third\nargument to this system call is nowadays unused, and should\nbe specified as NULL unless portability to Linux 2.6.23 or\nearlier is required (see NOTES).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The information\nplaced in <i>cpu</i> is guaranteed to be current only at the\ntime of the call: unless the CPU affinity has been fixed\nusing <a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>, the kernel might change\nthe CPU at any time. (Normally this does not happen because\nthe scheduler tries to minimize movements between CPUs to\nkeep caches hot, but it is possible.) The caller must allow\nfor the possibility that the information returned in\n<i>cpu</i> and <i>node</i> is no longer current by the time\nthe call returns.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success, 0\nis returned. On error, -1 is returned, and <i>errno</i> is\nset appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Arguments point outside the\ncalling process&rsquo;s address space.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getcpu</b>()\nwas added in kernel 2.6.19 for x86-64 and i386. Library\nsupport was added in glibc 2.29 (Earlier glibc versions did\nnot provide a wrapper for this system call, necessitating\nthe use of <a href=\"https://man.page/2/syscall\">syscall(2)</a>.)</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getcpu</b>()\nis Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux makes a\nbest effort to make this call as fast as possible. (On some\narchitectures, this is done via an implementation in the\n<a href=\"https://man.page/7/vdso\">vdso(7)</a>.) The intention of <b>getcpu</b>() is to\nallow programs to make optimizations with per-CPU data or\nfor NUMA optimization.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>tcache</i> argument is unused since Linux 2.6.24. In\nearlier kernels, if this argument was non-NULL, then it\nspecified a pointer to a caller-allocated buffer in\nthread-local storage that was used to provide a caching\nmechanism for <b>getcpu</b>(). Use of the cache could speed\n<b>getcpu</b>() calls, at the cost that there was a very\nsmall chance that the returned information would be out of\ndate. The caching mechanism was considered to cause problems\nwhen migrating threads between CPUs, and so the argument is\nnow ignored.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/mbind\">mbind(2)</a>,\n<a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>, <a href=\"https://man.page/2/set_mempolicy\">set_mempolicy(2)</a>,\n<a href=\"https://man.page/3/sched_getcpu\">sched_getcpu(3)</a>, <a href=\"https://man.page/7/cpuset\">cpuset(7)</a>, <a href=\"https://man.page/7/vdso\">vdso(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}