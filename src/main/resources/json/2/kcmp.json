{"name":"kcmp","description":"kcmp - compare\ntwo processes to determine if they share a kernel\nresource","body":"\n\n<h1 align=\"center\">KCMP</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">kcmp - compare\ntwo processes to determine if they share a kernel\nresource</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;linux/kcmp.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nkcmp(pid_t</b> <i>pid1</i><b>, pid_t</b> <i>pid2</i><b>,\nint</b> <i>type</i><b>, <br>\nunsigned long</b> <i>idx1</i><b>, unsigned long</b>\n<i>idx2</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nThere is no glibc wrapper for this system call; see\nNOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>kcmp</b>() system call can be used to check whether the\ntwo processes identified by <i>pid1</i> and <i>pid2</i>\nshare a kernel resource such as virtual memory, file\ndescriptors, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Permission to\nemploy <b>kcmp</b>() is governed by ptrace access mode\n<b>PTRACE_MODE_READ_REALCREDS</b> checks against both\n<i>pid1</i> and <i>pid2</i>; see <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>type</i>\nargument specifies which resource is to be compared in the\ntwo processes. It has one of the following values: <b><br>\nKCMP_FILE</b></p>\n\n<p style=\"margin-left:22%;\">Check whether a file descriptor\n<i>idx1</i> in the process <i>pid1</i> refers to the same\nopen file description (see <a href=\"https://man.page/2/open\">open(2)</a>) as file\ndescriptor <i>idx2</i> in the process <i>pid2</i>. The\nexistence of two file descriptors that refer to the same\nopen file description can occur as a result of <a href=\"https://man.page/2/dup\">dup(2)</a>\n(and similar) <a href=\"https://man.page/2/fork\">fork(2)</a>, or passing file descriptors\nvia a domain socket (see <a href=\"https://man.page/7/unix\">unix(7)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_FILES</b></p>\n\n<p style=\"margin-left:22%;\">Check whether the processes\nshare the same set of open file descriptors. The arguments\n<i>idx1</i> and <i>idx2</i> are ignored. See the discussion\nof the <b>CLONE_FILES</b> flag in <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_FS</b></p>\n\n<p style=\"margin-left:22%;\">Check whether the processes\nshare the same filesystem information (i.e., file mode\ncreation mask, working directory, and filesystem root). The\narguments <i>idx1</i> and <i>idx2</i> are ignored. See the\ndiscussion of the <b>CLONE_FS</b> flag in\n<a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_IO</b></p>\n\n<p style=\"margin-left:22%;\">Check whether the processes\nshare I/O context. The arguments <i>idx1</i> and <i>idx2</i>\nare ignored. See the discussion of the <b>CLONE_IO</b> flag\nin <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_SIGHAND</b></p>\n\n<p style=\"margin-left:22%;\">Check whether the processes\nshare the same table of signal dispositions. The arguments\n<i>idx1</i> and <i>idx2</i> are ignored. See the discussion\nof the <b>CLONE_SIGHAND</b> flag in <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_SYSVSEM</b></p>\n\n<p style=\"margin-left:22%;\">Check whether the processes\nshare the same list of System&nbsp;V semaphore undo\noperations. The arguments <i>idx1</i> and <i>idx2</i> are\nignored. See the discussion of the <b>CLONE_SYSVSEM</b> flag\nin <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_VM</b></p>\n\n<p style=\"margin-left:22%;\">Check whether the processes\nshare the same address space. The arguments <i>idx1</i> and\n<i>idx2</i> are ignored. See the discussion of the\n<b>CLONE_VM</b> flag in <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>KCMP_EPOLL_TFD</b> (since\nLinux 4.13)</p>\n\n<p style=\"margin-left:22%;\">Check whether the file\ndescriptor <i>idx1</i> of the process <i>pid1</i> is present\nin the <a href=\"https://man.page/7/epoll\">epoll(7)</a> instance described by <i>idx2</i> of\nthe process <i>pid2</i>. The argument <i>idx2</i> is a\npointer to a structure where the target file is described.\nThis structure has the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nkcmp_epoll_slot { <br>\n__u32 efd; <br>\n__u32 tfd; <br>\n__u64 toff; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Within this\nstructure, <i>efd</i> is an epoll file descriptor returned\nfrom <a href=\"https://man.page/2/epoll_create\">epoll_create(2)</a>, <i>tfd</i> is a target file\ndescriptor number, and <i>toff</i> is a target file offset\ncounted from zero. Several different targets may be\nregistered with the same file descriptor number and setting\na specific offset helps to investigate each of them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\n<b>kcmp</b>() is not protected against false positives which\nmay occur if the processes are currently running. One should\nstop the processes by sending <b>SIGSTOP</b> (see\n<a href=\"https://man.page/7/signal\">signal(7)</a>) prior to inspection with this system call\nto obtain meaningful results.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue of a successful call to <b>kcmp</b>() is simply the\nresult of arithmetic comparison of kernel pointers (when the\nkernel compares resources, it uses their memory\naddresses).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The easiest way\nto explain is to consider an example. Suppose that <i>v1</i>\nand <i>v2</i> are the addresses of appropriate resources,\nthen the return value is one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>v1</i> is equal to <i>v2</i>; in other words, the two\nprocesses share the resource.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>v1</i> is less than <i>v2</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>v1</i> is greater than <i>v2</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"1%\">\n\n\n<p>3</p></td>\n<td width=\"5%\"></td>\n<td width=\"77%\">\n\n\n<p><i>v1</i> is not equal to <i>v2</i>, but ordering\ninformation is unavailable.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error, -1 is\nreturned, and <i>errno</i> is set appropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>kcmp</b>()\nwas designed to return values suitable for sorting. This is\nparticularly handy if one needs to compare a large number of\nfile descriptors.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>type</i> is <b>KCMP_FILE</b>\nand <i>fd1</i> or <i>fd2</i> is not an open file\ndescriptor.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The epoll slot addressed by <i>idx2</i> is outside of\nthe user&rsquo;s address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>type</i> is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The target file is not present in <a href=\"https://man.page/7/epoll\">epoll(7)</a>\ninstance.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient permission to inspect process resources.\nThe <b>CAP_SYS_PTRACE</b> capability is required to inspect\nprocesses that you do not own. Other ptrace limitations may\nalso apply, such as <b>CONFIG_SECURITY_YAMA</b>, which, when\n<i>/proc/sys/kernel/yama/ptrace_scope</i> is 2, limits\n<b>kcmp</b>() to child processes; see <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Process <i>pid1</i> or <i>pid2</i> does not exist.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>kcmp</b>() system call first appeared in Linux 3.5.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>kcmp</b>()\nis Linux-specific and should not be used in programs\nintended to be portable.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide a wrapper for this system call; call it using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is available only if the kernel was configured with\n<b>CONFIG_CHECKPOINT_RESTORE</b>. The main use of the system\ncall is for the checkpoint/restore in user space (CRIU)\nfeature. The alternative to this system call would have been\nto expose suitable process information via the\n<a href=\"https://man.page/5/proc\">proc(5)</a> filesystem; this was deemed to be unsuitable\nfor security reasons.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/clone\">clone(2)</a> for some background information on the\nshared resources referred to on this page.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow uses <b>kcmp</b>() to test whether pairs of file\ndescriptors refer to the same open file description. The\nprogram tests different cases for the file descriptor pairs,\nas described in the program output. An example run of the\nprogram is as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nParent PID is 1144 <br>\nParent opened file on FD 3</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">PID of child of\nfork() is 1145</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>Compare duplicate FDs from different processes:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>kcmp(1145, 1144, KCMP_FILE, 3, 3) ==&gt; same</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">Child opened file on FD 4</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>Compare FDs from distinct open()s in same process:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>kcmp(1145, 1145, KCMP_FILE, 3, 4) ==&gt; different</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">Child duplicated FD 3 to create\nFD 5</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>Compare duplicated FDs in same process:</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n\n\n<p>kcmp(1145, 1145, KCMP_FILE, 3, 5) ==&gt; same</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _GNU_SOURCE <br>\n#include &lt;sys/syscall.h&gt; <br>\n#include &lt;sys/wait.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;stdint.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;linux/kcmp.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nerrExit(msg) do { perror(msg); exit(EXIT_FAILURE); \\ <br>\n} while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\nkcmp(pid_t pid1, pid_t pid2, int type, <br>\nunsigned long idx1, unsigned long idx2) <br>\n{ <br>\nreturn syscall(SYS_kcmp, pid1, pid2, type, idx1, idx2); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\ntest_kcmp(char *msg, pid_t pid1, pid_t pid2, int fd_a, int\nfd_b) <br>\n{ <br>\nprintf(&quot;\\t%s\\n&quot;, msg); <br>\nprintf(&quot;\\t\\tkcmp(%jd, %jd, KCMP_FILE, %d, %d) ==&gt;\n%s\\n&quot;, <br>\n(intmax_t) pid1, (intmax_t) pid2, fd_a, fd_b, <br>\n(kcmp(pid1, pid2, KCMP_FILE, fd_a, fd_b) == 0) ? <br>\n&quot;same&quot; : &quot;different&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint fd1, fd2, fd3; <br>\nchar pathname[] = &quot;/tmp/kcmp.test&quot;;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd1 =\nopen(pathname, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR); <br>\nif (fd1 == -1) <br>\nerrExit(&quot;open&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Parent\nPID is %jd\\n&quot;, (intmax_t) getpid()); <br>\nprintf(&quot;Parent opened file on FD %d\\n\\n&quot;,\nfd1);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">switch (fork())\n{ <br>\ncase -1: <br>\nerrExit(&quot;fork&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">case 0: <br>\nprintf(&quot;PID of child of fork() is %jd\\n&quot;,\n(intmax_t) getpid());</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">test_kcmp(&quot;Compare\nduplicate FDs from different processes:&quot;, <br>\ngetpid(), getppid(), fd1, fd1);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd2 =\nopen(pathname, O_CREAT | O_RDWR, S_IRUSR | S_IWUSR); <br>\nif (fd2 == -1) <br>\nerrExit(&quot;open&quot;); <br>\nprintf(&quot;Child opened file on FD %d\\n&quot;, fd2);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">test_kcmp(&quot;Compare\nFDs from distinct open()s in same process:&quot;, <br>\ngetpid(), getpid(), fd1, fd2);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd3 = dup(fd1);\n<br>\nif (fd3 == -1) <br>\nerrExit(&quot;dup&quot;); <br>\nprintf(&quot;Child duplicated FD %d to create FD %d\\n&quot;,\nfd1, fd3);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">test_kcmp(&quot;Compare\nduplicated FDs in same process:&quot;, <br>\ngetpid(), getpid(), fd1, fd3); <br>\nbreak;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">default: <br>\nwait(NULL); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/unshare\">unshare(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}