{"name":"ioprio_set","body":"\n\n<h1 align=\"center\">IOPRIO_SET</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ioprio_get,\nioprio_set - get/set I/O scheduling class and priority</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nioprio_get(int</b> <i>which</i><b>, int</b> <i>who</i><b>);\n<br>\nint ioprio_set(int</b> <i>which</i><b>, int</b>\n<i>who</i><b>, int</b> <i>ioprio</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nThere are no glibc wrappers for these system calls; see\nNOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>ioprio_get</b>() and <b>ioprio_set</b>() system calls get\nand set the I/O scheduling class and priority of one or more\nthreads.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>which</i> and <i>who</i> arguments identify the thread(s)\non which the system calls operate. The <i>which</i> argument\ndetermines how <i>who</i> is interpreted, and has one of the\nfollowing values: <b><br>\nIOPRIO_WHO_PROCESS</b></p>\n\n<p style=\"margin-left:22%;\"><i>who</i> is a process ID or\nthread ID identifying a single process or thread. If\n<i>who</i> is 0, then operate on the calling thread.</p>\n\n<p style=\"margin-left:11%;\"><b>IOPRIO_WHO_PGRP</b></p>\n\n<p style=\"margin-left:22%;\"><i>who</i> is a process group\nID identifying all the members of a process group. If\n<i>who</i> is 0, then operate on the process group of which\nthe caller is a member.</p>\n\n<p style=\"margin-left:11%;\"><b>IOPRIO_WHO_USER</b></p>\n\n<p style=\"margin-left:22%;\"><i>who</i> is a user ID\nidentifying all of the processes that have a matching real\nUID.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>which</i>\nis specified as <b>IOPRIO_WHO_PGRP</b> or\n<b>IOPRIO_WHO_USER</b> when calling <b>ioprio_get</b>(), and\nmore than one process matches <i>who</i>, then the returned\npriority will be the highest one found among all of the\nmatching processes. One priority is said to be higher than\nanother one if it belongs to a higher priority class\n(<b>IOPRIO_CLASS_RT</b> is the highest priority class;\n<b>IOPRIO_CLASS_IDLE</b> is the lowest) or if it belongs to\nthe same priority class as the other process but has a\nhigher priority level (a lower priority number means a\nhigher priority level).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ioprio</i> argument given to <b>ioprio_set</b>() is a bit\nmask that specifies both the scheduling class and the\npriority to be assigned to the target process(es). The\nfollowing macros are used for assembling and dissecting\n<i>ioprio</i> values: <b><br>\nIOPRIO_PRIO_VALUE(</b><i>class</i><b>,</b>\n<i>data</i><b>)</b></p>\n\n<p style=\"margin-left:22%;\">Given a scheduling <i>class</i>\nand priority (<i>data</i>), this macro combines the two\nvalues to produce an <i>ioprio</i> value, which is returned\nas the result of the macro.</p>\n\n\n<p style=\"margin-left:11%;\"><b>IOPRIO_PRIO_CLASS(</b><i>mask</i><b>)</b></p>\n\n<p style=\"margin-left:22%;\">Given <i>mask</i> (an\n<i>ioprio</i> value), this macro returns its I/O class\ncomponent, that is, one of the values\n<b>IOPRIO_CLASS_RT</b>, <b>IOPRIO_CLASS_BE</b>, or\n<b>IOPRIO_CLASS_IDLE</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>IOPRIO_PRIO_DATA(</b><i>mask</i><b>)</b></p>\n\n<p style=\"margin-left:22%;\">Given <i>mask</i> (an\n<i>ioprio</i> value), this macro returns its priority\n(<i>data</i>) component.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the NOTES\nsection for more information on scheduling classes and\npriorities, as well as the meaning of specifying\n<i>ioprio</i> as 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">I/O priorities\nare supported for reads and for synchronous\n(<b>O_DIRECT</b>, <b>O_SYNC</b>) writes. I/O priorities are\nnot supported for asynchronous writes because they are\nissued outside the context of the program dirtying the\nmemory, and thus program-specific priorities do not\napply.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>ioprio_get</b>() returns the <i>ioprio</i> value of the\nprocess with highest I/O priority of any of the processes\nthat match the criteria specified in <i>which</i> and\n<i>who</i>. On error, -1 is returned, and <i>errno</i> is\nset to indicate the error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>ioprio_set</b>() returns 0. On error, -1 is returned, and\n<i>errno</i> is set to indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Invalid value for <i>which</i>\nor <i>ioprio</i>. Refer to the NOTES section for available\nscheduler classes and priority levels for <i>ioprio</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process does not have the privilege needed\nto assign this <i>ioprio</i> to the specified process(es).\nSee the NOTES section for more information on required\nprivileges for <b>ioprio_set</b>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>No process(es) could be found that matched the\nspecification in <i>which</i> and <i>who</i>.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls have been available on Linux since kernel 2.6.13.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls are Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide a wrapper for these system calls; call them using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Two or more\nprocesses or threads can share an I/O context. This will be\nthe case when <a href=\"https://man.page/2/clone\">clone(2)</a> was called with the\n<b>CLONE_IO</b> flag. However, by default, the distinct\nthreads of a process will <b>not</b> share the same I/O\ncontext. This means that if you want to change the I/O\npriority of all threads in a process, you may need to call\n<b>ioprio_set</b>() on each of the threads. The thread ID\nthat you would need for this operation is the one that is\nreturned by <a href=\"https://man.page/2/gettid\">gettid(2)</a> or <a href=\"https://man.page/2/clone\">clone(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls have an effect only when used in conjunction with an\nI/O scheduler that supports I/O priorities. As at kernel\n2.6.17 the only such scheduler is the Completely Fair\nQueuing (CFQ) I/O scheduler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no I/O\nscheduler has been set for a thread, then by default the I/O\npriority will follow the CPU nice value\n(<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>). In Linux kernels before version\n2.6.24, once an I/O priority had been set using\n<b>ioprio_set</b>(), there was no way to reset the I/O\nscheduling behavior to the default. Since Linux 2.6.24,\nspecifying <i>ioprio</i> as 0 can be used to reset to the\ndefault I/O scheduling behavior.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Selecting an\nI/O scheduler</b> <br>\nI/O schedulers are selected on a per-device basis via the\nspecial file\n<i>/sys/block/&lt;device&gt;/queue/scheduler</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One can view\nthe current I/O scheduler via the <i>/sys</i> filesystem.\nFor example, the following command displays a list of all\nschedulers currently loaded in the kernel:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\n/sys/block/sda/queue/scheduler</b> <br>\nnoop anticipatory deadline [cfq]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The scheduler\nsurrounded by brackets is the one actually in use for the\ndevice (<i>sda</i> in the example). Setting another\nscheduler is done by writing the name of the new scheduler\nto this file. For example, the following command will set\nthe scheduler for the <i>sda</i> device to <i>cfq</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>su</b>\n<br>\nPassword: <br>\n# <b>echo cfq &gt; /sys/block/sda/queue/scheduler</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\nCompletely Fair Queuing (CFQ) I/O scheduler</b> <br>\nSince version 3 (also known as CFQ Time Sliced), CFQ\nimplements I/O nice levels similar to those of CPU\nscheduling. These nice levels are grouped into three\nscheduling classes, each one containing one or more priority\nlevels: <b><br>\nIOPRIO_CLASS_RT</b> (1)</p>\n\n<p style=\"margin-left:22%;\">This is the real-time I/O\nclass. This scheduling class is given higher priority than\nany other class: processes from this class are given first\naccess to the disk every time. Thus, this I/O class needs to\nbe used with some care: one I/O real-time process can starve\nthe entire system. Within the real-time class, there are 8\nlevels of class data (priority) that determine exactly how\nmuch time this process needs the disk for on each service.\nThe highest real-time priority level is 0; the lowest is 7.\nIn the future, this might change to be more directly\nmappable to performance, by passing in a desired data rate\ninstead.</p>\n\n<p style=\"margin-left:11%;\"><b>IOPRIO_CLASS_BE</b> (2)</p>\n\n<p style=\"margin-left:22%;\">This is the best-effort\nscheduling class, which is the default for any process that\nhasn&rsquo;t set a specific I/O priority. The class data\n(priority) determines how much I/O bandwidth the process\nwill get. Best-effort priority levels are analogous to CPU\nnice values (see <a href=\"https://man.page/2/getpriority\">getpriority(2)</a>). The priority level\ndetermines a priority relative to other processes in the\nbest-effort scheduling class. Priority levels range from 0\n(highest) to 7 (lowest).</p>\n\n<p style=\"margin-left:11%;\"><b>IOPRIO_CLASS_IDLE</b>\n(3)</p>\n\n<p style=\"margin-left:22%;\">This is the idle scheduling\nclass. Processes running at this level get I/O time only\nwhen no one else needs the disk. The idle class has no class\ndata. Attention is required when assigning this priority\nclass to a process, since it may become starved if higher\npriority processes are constantly accessing the disk.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Refer to the\nkernel source file <i>Documentation/block/ioprio.txt</i> for\nmore information on the CFQ I/O Scheduler and an example\nprogram.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Required\npermissions to set I/O priorities</b> <br>\nPermission to change a process&rsquo;s priority is granted\nor denied based on two criteria: <b><br>\nProcess ownership</b></p>\n\n<p style=\"margin-left:22%;\">An unprivileged process may set\nthe I/O priority only for a process whose real UID matches\nthe real or effective UID of the calling process. A process\nwhich has the <b>CAP_SYS_NICE</b> capability can change the\npriority of any process.</p>\n\n<p style=\"margin-left:11%;\"><b>What is the desired\npriority</b></p>\n\n<p style=\"margin-left:22%;\">Attempts to set very high\npriorities (<b>IOPRIO_CLASS_RT</b>) require the\n<b>CAP_SYS_ADMIN</b> capability. Kernel versions up to\n2.6.24 also required <b>CAP_SYS_ADMIN</b> to set a very low\npriority (<b>IOPRIO_CLASS_IDLE</b>), but since Linux 2.6.25,\nthis is no longer required.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A call to\n<b>ioprio_set</b>() must follow both rules, or the call will\nfail with the error <b>EPERM</b>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nyet provide a suitable header file defining the function\nprototypes and macros described on this page. Suitable\ndefinitions can be found in <i>linux/ioprio.h</i>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/ionice\">ionice(1)</a>,\n<a href=\"https://man.page/2/getpriority\">getpriority(2)</a>, <a href=\"https://man.page/2/open\">open(2)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/cgroups\">cgroups(7)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Documentation/block/ioprio.txt</i>\nin the Linux kernel source tree</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}