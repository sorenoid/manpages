{"name":"dup","body":"\n\n<h1 align=\"center\">DUP</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">dup, dup2, dup3\n- duplicate a file descriptor</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndup(int</b> <i>oldfd</i><b>); <br>\nint dup2(int</b> <i>oldfd</i><b>, int</b>\n<i>newfd</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;fcntl.h&gt;</b> /* Obtain O_* constant\ndefinitions */ <b><br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ndup3(int</b> <i>oldfd</i><b>, int</b> <i>newfd</i><b>,\nint</b> <i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>dup</b>() system call creates a copy of the file\ndescriptor <i>oldfd</i>, using the lowest-numbered unused\nfile descriptor for the new descriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After a\nsuccessful return, the old and new file descriptors may be\nused interchangeably. They refer to the same open file\ndescription (see <a href=\"https://man.page/2/open\">open(2)</a>) and thus share file offset\nand file status flags; for example, if the file offset is\nmodified by using <a href=\"https://man.page/2/lseek\">lseek(2)</a> on one of the file\ndescriptors, the offset is also changed for the other.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The two file\ndescriptors do not share file descriptor flags (the\nclose-on-exec flag). The close-on-exec flag\n(<b>FD_CLOEXEC</b>; see <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>) for the duplicate\ndescriptor is off.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dup2()</b>\n<br>\nThe <b>dup2</b>() system call performs the same task as\n<b>dup</b>(), but instead of using the lowest-numbered\nunused file descriptor, it uses the file descriptor number\nspecified in <i>newfd</i>. If the file descriptor\n<i>newfd</i> was previously open, it is silently closed\nbefore being reused.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The steps of\nclosing and reusing the file descriptor <i>newfd</i> are\nperformed <i>atomically</i>. This is important, because\ntrying to implement equivalent functionality using\n<a href=\"https://man.page/2/close\">close(2)</a> and <b>dup</b>() would be subject to race\nconditions, whereby <i>newfd</i> might be reused between the\ntwo steps. Such reuse could happen because the main program\nis interrupted by a signal handler that allocates a file\ndescriptor, or because a parallel thread allocates a file\ndescriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing points:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If <i>oldfd</i> is not a valid file descriptor, then the\ncall fails, and <i>newfd</i> is not closed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If <i>oldfd</i> is a valid file descriptor, and\n<i>newfd</i> has the same value as <i>oldfd</i>, then\n<b>dup2</b>() does nothing, and returns <i>newfd</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dup3() <br>\ndup3</b>() is the same as <b>dup2</b>(), except that:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The caller can force the\nclose-on-exec flag to be set for the new file descriptor by\nspecifying <b>O_CLOEXEC</b> in <i>flags</i>. See the\ndescription of the same flag in <a href=\"https://man.page/2/open\">open(2)</a> for reasons\nwhy this may be useful.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If <i>oldfd</i> equals <i>newfd</i>, then <b>dup3</b>()\nfails with the error <b>EINVAL</b>.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nthese system calls return the new file descriptor. On error,\n-1 is returned, and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>oldfd</i> isn&rsquo;t an open\nfile descriptor.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>newfd</i> is out of the allowed range for file\ndescriptors (see the discussion of <b>RLIMIT_NOFILE</b> in\n<a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(Linux only) This may be returned by <b>dup2</b>() or\n<b>dup3</b>() during a race condition with <a href=\"https://man.page/2/open\">open(2)</a>\nand <b>dup</b>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>dup2</b>() or <b>dup3</b>() call was interrupted\nby a signal; see <a href=\"https://man.page/7/signal\">signal(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>dup3</b>()) <i>flags</i> contain an invalid\nvalue.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>dup3</b>()) <i>oldfd</i> was equal to\n<i>newfd</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached (see the discussion of\n<b>RLIMIT_NOFILE</b> in <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>).</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dup3</b>()\nwas added to Linux in version 2.6.27; glibc support is\navailable starting with version 2.9.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dup</b>(),\n<b>dup2</b>(): POSIX.1-2001, POSIX.1-2008, SVr4, 4.3BSD.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>dup3</b>()\nis Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The error\nreturned by <b>dup2</b>() is different from that returned by\n<b>fcntl(</b>..., <b>F_DUPFD</b>, ...<b>)</b> when\n<i>newfd</i> is out of range. On some systems, <b>dup2</b>()\nalso sometimes returns <b>EINVAL</b> like\n<b>F_DUPFD</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>newfd</i>\nwas open, any errors that would have been reported at\n<a href=\"https://man.page/2/close\">close(2)</a> time are lost. If this is of concern,\nthen&mdash;unless the program is single-threaded and does\nnot allocate file descriptors in signal handlers&mdash;the\ncorrect approach is <i>not</i> to close <i>newfd</i> before\ncalling <b>dup2</b>(), because of the race condition\ndescribed above. Instead, code something like the following\ncould be used:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* Obtain a\nduplicate of 'newfd' that can subsequently <br>\nbe used to check for close() errors; an EBADF error <br>\nmeans that 'newfd' was not open. */</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">tmpfd =\ndup(newfd); <br>\nif (tmpfd == -1 &amp;&amp; errno != EBADF) { <br>\n/* Handle unexpected dup() error */ <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* Atomically\nduplicate 'oldfd' on 'newfd' */</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if (dup2(oldfd,\nnewfd) == -1) { <br>\n/* Handle dup2() error */ <br>\n}</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* Now check\nfor close() errors on the file originally <br>\nreferred to by 'newfd' */</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if (tmpfd !=\n-1) { <br>\nif (close(tmpfd) == -1) { <br>\n/* Handle errors from close */ <br>\n} <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/close\">close(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, <a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/pidfd_getfd\">pidfd_getfd(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}