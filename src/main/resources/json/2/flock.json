{"name":"flock","description":"flock - apply or remove an advisory lock on an open file","body":"\n\n<h1 align=\"center\">FLOCK</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">flock - apply\nor remove an advisory lock on an open file</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/file.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nflock(int</b> <i>fd</i><b>, int</b>\n<i>operation</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Apply or remove\nan advisory lock on the open file specified by <i>fd</i>.\nThe argument <i>operation</i> is one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p><b>LOCK_SH</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"69%\">\n\n\n<p>Place a shared lock. More than one process may hold a\nshared lock for a given file at a given time.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p><b>LOCK_EX</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"69%\">\n\n\n<p>Place an exclusive lock. Only one process may hold an\nexclusive lock for a given file at a given time.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"11%\">\n\n\n<p><b>LOCK_UN</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"69%\">\n\n\n<p>Remove an existing lock held by this process.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A call to\n<b>flock</b>() may block if an incompatible lock is held by\nanother process. To make a nonblocking request, include\n<b>LOCK_NB</b> (by ORing) with any of the above\noperations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A single file\nmay not simultaneously have both shared and exclusive\nlocks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Locks created\nby <b>flock</b>() are associated with an open file\ndescription (see <a href=\"https://man.page/2/open\">open(2)</a>). This means that duplicate\nfile descriptors (created by, for example, <a href=\"https://man.page/2/fork\">fork(2)</a> or\n<a href=\"https://man.page/2/dup\">dup(2)</a>) refer to the same lock, and this lock may be\nmodified or released using any of these file descriptors.\nFurthermore, the lock is released either by an explicit\n<b>LOCK_UN</b> operation on any of these duplicate file\ndescriptors, or when all such file descriptors have been\nclosed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a process\nuses <a href=\"https://man.page/2/open\">open(2)</a> (or similar) to obtain more than one\nfile descriptor for the same file, these file descriptors\nare treated independently by <b>flock</b>(). An attempt to\nlock the file using one of these file descriptors may be\ndenied by a lock that the calling process has already placed\nvia another file descriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A process may\nhold only one type of lock (shared or exclusive) on a file.\nSubsequent <b>flock</b>() calls on an already locked file\nwill convert an existing lock to the new lock mode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Locks created\nby <b>flock</b>() are preserved across an\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A shared or\nexclusive lock can be placed on a file regardless of the\nmode in which the file was opened.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>fd</i> is not an open file\ndescriptor.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>While waiting to acquire a lock, the call was\ninterrupted by delivery of a signal caught by a handler; see\n<a href=\"https://man.page/7/signal\">signal(7)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>operation</i> is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOLCK</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The kernel ran out of memory for allocating lock\nrecords.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EWOULDBLOCK</b></p>\n\n<p style=\"margin-left:22%;\">The file is locked and the\n<b>LOCK_NB</b> flag was selected.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">4.4BSD (the\n<b>flock</b>() call first appeared in 4.2BSD). A version of\n<b>flock</b>(), possibly implemented in terms of\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, appears on most UNIX systems.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since kernel\n2.0, <b>flock</b>() is implemented as a system call in its\nown right rather than being emulated in the GNU C library as\na call to <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>. With this implementation, there\nis no interaction between the types of lock placed by\n<b>flock</b>() and <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, and <b>flock</b>() does\nnot detect deadlock. (Note, however, that on some systems,\nsuch as the modern BSDs, <b>flock</b>() and <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>\nlocks <i>do</i> interact with one another.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>flock</b>()\nplaces advisory locks only; given suitable permissions on a\nfile, a process is free to ignore the use of <b>flock</b>()\nand perform I/O on the file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>flock</b>()\nand <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> locks have different semantics with\nrespect to forked processes and <a href=\"https://man.page/2/dup\">dup(2)</a>. On systems\nthat implement <b>flock</b>() using <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, the\nsemantics of <b>flock</b>() will be different from those\ndescribed in this manual page.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Converting a\nlock (shared to exclusive, or vice versa) is not guaranteed\nto be atomic: the existing lock is first removed, and then a\nnew lock is established. Between these two steps, a pending\nlock request by another process may be granted, with the\nresult that the conversion either blocks, or fails if\n<b>LOCK_NB</b> was specified. (This is the original BSD\nbehavior, and occurs on many other implementations.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>NFS\ndetails</b> <br>\nIn Linux kernels up to 2.6.11, <b>flock</b>() does not lock\nfiles over NFS (i.e., the scope of locks was limited to the\nlocal system). Instead, one could use <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>\nbyte-range locking, which does work over NFS, given a\nsufficiently recent version of Linux and a server which\nsupports locking.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.12, NFS clients support <b>flock</b>() locks by\nemulating them as <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> byte-range locks on the\nentire file. This means that <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> and\n<b>flock</b>() locks <i>do</i> interact with one another\nover NFS. It also means that in order to place an exclusive\nlock, the file must be opened for writing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n2.6.37, the kernel supports a compatibility mode that allows\n<b>flock</b>() locks (and also <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> byte region\nlocks) to be treated as local; see the discussion of the\n<i>local_lock</i> option in <a href=\"https://man.page/5/nfs\">nfs(5)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/flock\">flock(1)</a>,\n<a href=\"https://man.page/2/close\">close(2)</a>, <a href=\"https://man.page/2/dup\">dup(2)</a>, <a href=\"https://man.page/2/execve\">execve(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, <a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/open\">open(2)</a>,\n<a href=\"https://man.page/3/lockf\">lockf(3)</a>, <b>lslocks</b>(8)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Documentation/filesystems/locks.txt</i>\nin the Linux kernel source tree\n(<i>Documentation/locks.txt</i> in older kernels)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}