{"name":"mprotect","body":"\n\n<h1 align=\"center\">MPROTECT</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mprotect,\npkey_mprotect - set protection on a region of memory</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/mman.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmprotect(void *</b><i>addr</i><b>, size_t</b> <i>len</i><b>,\nint</b> <i>prot</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;sys/mman.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npkey_mprotect(void *</b><i>addr</i><b>, size_t</b>\n<i>len</i><b>, int</b> <i>prot</i><b>, int</b>\n<i>pkey</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mprotect</b>()\nchanges the access protections for the calling\nprocess&rsquo;s memory pages containing any part of the\naddress range in the interval\n[<i>addr</i>,&nbsp;<i>addr</i>+<i>len</i>-1]. <i>addr</i>\nmust be aligned to a page boundary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the calling\nprocess tries to access memory in a manner that violates the\nprotections, then the kernel generates a <b>SIGSEGV</b>\nsignal for the process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>prot</i> is\na combination of the following access flags:\n<b>PROT_NONE</b> or a bitwise-or of the other values in the\nfollowing list: <b><br>\nPROT_NONE</b></p>\n\n<p style=\"margin-left:22%;\">The memory cannot be accessed\nat all.</p>\n\n<p style=\"margin-left:11%;\"><b>PROT_READ</b></p>\n\n<p style=\"margin-left:22%;\">The memory can be read.</p>\n\n<p style=\"margin-left:11%;\"><b>PROT_WRITE</b></p>\n\n<p style=\"margin-left:22%;\">The memory can be modified.</p>\n\n<p style=\"margin-left:11%;\"><b>PROT_EXEC</b></p>\n\n<p style=\"margin-left:22%;\">The memory can be executed.</p>\n\n<p style=\"margin-left:11%;\"><b>PROT_SEM</b> (since Linux\n2.5.7)</p>\n\n<p style=\"margin-left:22%;\">The memory can be used for\natomic operations. This flag was introduced as part of the\n<a href=\"https://man.page/2/futex\">futex(2)</a> implementation (in order to guarantee the\nability to perform atomic operations required by commands\nsuch as <b>FUTEX_WAIT</b>), but is not currently used in on\nany architecture.</p>\n\n<p style=\"margin-left:11%;\"><b>PROT_SAO</b> (since Linux\n2.6.26)</p>\n\n<p style=\"margin-left:22%;\">The memory should have strong\naccess ordering. This feature is specific to the PowerPC\narchitecture (version 2.06 of the architecture specification\nadds the SAO CPU feature, and it is available on POWER 7 or\nPowerPC A2, for example).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additionally\n(since Linux 2.6.0), <i>prot</i> can have one of the\nfollowing flags set: <b><br>\nPROT_GROWSUP</b></p>\n\n<p style=\"margin-left:22%;\">Apply the protection mode up to\nthe end of a mapping that grows upwards. (Such mappings are\ncreated for the stack area on architectures&mdash;for\nexample, HP-PARISC&mdash;that have an upwardly growing\nstack.)</p>\n\n<p style=\"margin-left:11%;\"><b>PROT_GROWSDOWN</b></p>\n\n<p style=\"margin-left:22%;\">Apply the protection mode down\nto the beginning of a mapping that grows downward (which\nshould be a stack segment or a segment mapped with the\n<b>MAP_GROWSDOWN</b> flag set).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Like\n<b>mprotect</b>(), <b>pkey_mprotect</b>() changes the\nprotection on the pages specified by <i>addr</i> and\n<i>len</i>. The <i>pkey</i> argument specifies the\nprotection key (see <a href=\"https://man.page/7/pkeys\">pkeys(7)</a>) to assign to the\nmemory. The protection key must be allocated with\n<a href=\"https://man.page/2/pkey_alloc\">pkey_alloc(2)</a> before it is passed to\n<b>pkey_mprotect</b>(). For an example of the use of this\nsystem call, see <a href=\"https://man.page/7/pkeys\">pkeys(7)</a>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>mprotect</b>() and <b>pkey_mprotect</b>() return zero. On\nerror, these system calls return -1, and <i>errno</i> is set\nappropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The memory cannot be given the\nspecified access. This can happen, for example, if you\n<a href=\"https://man.page/2/mmap\">mmap(2)</a> a file to which you have read-only access,\nthen ask <b>mprotect</b>() to mark it <b>PROT_WRITE</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>addr</i> is not a valid pointer, or not a multiple of\nthe system page size.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(<b>pkey_mprotect</b>()) <i>pkey</i> has not been\nallocated with <a href=\"https://man.page/2/pkey_alloc\">pkey_alloc(2)</a></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Both <b>PROT_GROWSUP</b> and <b>PROT_GROWSDOWN</b> were\nspecified in <i>prot</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Invalid flags specified in <i>prot</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(PowerPC architecture) <b>PROT_SAO</b> was specified in\n<i>prot</i>, but SAO hardware feature is not available.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Internal kernel structures could not be allocated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Addresses in the range [<i>addr</i>,\n<i>addr</i>+<i>len</i>-1] are invalid for the address space\nof the process, or specify one or more pages that are not\nmapped. (Before kernel 2.4.19, the error <b>EFAULT</b> was\nincorrectly produced for these cases.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Changing the protection of a memory region would result\nin the total number of mappings with distinct attributes\n(e.g., read versus read/write protection) exceeding the\nallowed maximum. (For example, making the protection of a\nrange <b>PROT_READ</b> in the middle of a region currently\nprotected as <b>PROT_READ|PROT_WRITE</b> would result in\nthree mappings: two read/write mappings at each end and a\nread-only mapping in the middle.)</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pkey_mprotect</b>()\nfirst appeared in Linux 4.9; library support was added in\nglibc 2.27.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mprotect</b>():\nPOSIX.1-2001, POSIX.1-2008, SVr4. POSIX says that the\nbehavior of <b>mprotect</b>() is unspecified if it is\napplied to a region of memory that was not obtained via\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pkey_mprotect</b>()\nis a nonportable Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux, it is\nalways permissible to call <b>mprotect</b>() on any address\nin a process&rsquo;s address space (except for the kernel\nvsyscall area). In particular, it can be used to change\nexisting code mappings to be writable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Whether\n<b>PROT_EXEC</b> has any effect different from\n<b>PROT_READ</b> depends on processor architecture, kernel\nversion, and process state. If <b>READ_IMPLIES_EXEC</b> is\nset in the process&rsquo;s personality flags (see\n<a href=\"https://man.page/2/personality\">personality(2)</a>), specifying <b>PROT_READ</b> will\nimplicitly add <b>PROT_EXEC</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On some\nhardware architectures (e.g., i386), <b>PROT_WRITE</b>\nimplies <b>PROT_READ</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 says\nthat an implementation may permit access other than that\nspecified in <i>prot</i>, but at a minimum can allow write\naccess only if <b>PROT_WRITE</b> has been set, and must not\nallow any access if <b>PROT_NONE</b> has been set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Applications\nshould be careful when mixing use of <b>mprotect</b>() and\n<b>pkey_mprotect</b>(). On x86, when <b>mprotect</b>() is\nused with <i>prot</i> set to <b>PROT_EXEC</b> a pkey may be\nallocated and set on the memory implicitly by the kernel,\nbut only when the pkey was 0 previously.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On systems that\ndo not support protection keys in hardware,\n<b>pkey_mprotect</b>() may still be used, but <i>pkey</i>\nmust be set to -1. When called this way, the operation of\n<b>pkey_mprotect</b>() is equivalent to\n<b>mprotect</b>().</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>mprotect</b>(). The program\nallocates four pages of memory, makes the third of these\npages read-only, and then executes a loop that walks upward\nthrough the allocated region modifying bytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An example of\nwhat we might see when running the program is the\nfollowing:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>./a.out</b> <br>\nStart of region: 0x804c000 <br>\nGot SIGSEGV at address: 0x804e000</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;signal.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;malloc.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;errno.h&gt; <br>\n#include &lt;sys/mman.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error(msg) \\ <br>\ndo { perror(msg); exit(EXIT_FAILURE); } while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static char\n*buffer;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nhandler(int sig, siginfo_t *si, void *unused) <br>\n{ <br>\n/* Note: calling printf() from a signal handler is not safe\n<br>\n(and should not be done in production programs), since <br>\nprintf() is not async-signal-safe; see signal-safety(7).\n<br>\nNevertheless, we use printf() here as a simple way of <br>\nshowing that the handler was called. */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Got\nSIGSEGV at address: %p\\n&quot;, si-&gt;si_addr); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint pagesize; <br>\nstruct sigaction sa;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">sa.sa_flags =\nSA_SIGINFO; <br>\nsigemptyset(&amp;sa.sa_mask); <br>\nsa.sa_sigaction = handler; <br>\nif (sigaction(SIGSEGV, &amp;sa, NULL) == -1) <br>\nhandle_error(&quot;sigaction&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pagesize =\nsysconf(_SC_PAGE_SIZE); <br>\nif (pagesize == -1) <br>\nhandle_error(&quot;sysconf&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Allocate a\nbuffer aligned on a page boundary; <br>\ninitial protection is PROT_READ | PROT_WRITE */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">buffer =\nmemalign(pagesize, 4 * pagesize); <br>\nif (buffer == NULL) <br>\nhandle_error(&quot;memalign&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Start\nof region: %p\\n&quot;, buffer);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(mprotect(buffer + pagesize * 2, pagesize, <br>\nPROT_READ) == -1) <br>\nhandle_error(&quot;mprotect&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (char *p =\nbuffer ; ; ) <br>\n*(p++) = 'a';</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Loop\ncompleted\\n&quot;); /* Should never happen */ <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/mmap\">mmap(2)</a>,\n<a href=\"https://man.page/3/sysconf\">sysconf(3)</a>, <a href=\"https://man.page/7/pkeys\">pkeys(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}