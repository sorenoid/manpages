{"name":"init_module","body":"\n\n<h1 align=\"center\">INIT_MODULE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">init_module,\nfinit_module - load a kernel module</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ninit_module(void *</b><i>module_image</i><b>, unsigned\nlong</b> <i>len</i><b>, <br>\nconst char *</b><i>param_values</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nfinit_module(int</b> <i>fd</i><b>, const char\n*</b><i>param_values</i><b>, <br>\nint</b> <i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nglibc provides no header file declaration of\n<b>init_module</b>() and no wrapper function for\n<b>finit_module</b>(); see NOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>init_module</b>()\nloads an ELF image into kernel space, performs any necessary\nsymbol relocations, initializes module parameters to values\nprovided by the caller, and then runs the module&rsquo;s\n<i>init</i> function. This system call requires\nprivilege.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>module_image</i> argument points to a buffer containing\nthe binary image to be loaded; <i>len</i> specifies the size\nof that buffer. The module image should be a valid ELF\nimage, built for the running kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>param_values</i> argument is a string containing\nspace-delimited specifications of the values for module\nparameters (defined inside the module using\n<b>module_param</b>() and <b>module_param_array</b>()). The\nkernel parses this string and initializes the specified\nparameters. Each of the parameter specifications has the\nform:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>name</i>[<b>=</b><i>value</i>[<b>,</b><i>value</i>...]]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The parameter\n<i>name</i> is one of those defined within the module using\n<i>module_param</i>() (see the Linux kernel source file\n<i>include/linux/moduleparam.h</i>). The parameter\n<i>value</i> is optional in the case of <i>bool</i> and\n<i>invbool</i> parameters. Values for array parameters are\nspecified as a comma-separated list.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>finit_module()</b>\n<br>\nThe <b>finit_module</b>() system call is like\n<b>init_module</b>(), but reads the module to be loaded from\nthe file descriptor <i>fd</i>. It is useful when the\nauthenticity of a kernel module can be determined from its\nlocation in the filesystem; in cases where that is possible,\nthe overhead of using cryptographically signed modules to\ndetermine the authenticity of a module can be avoided. The\n<i>param_values</i> argument is as for\n<b>init_module</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument modifies the operation of\n<b>finit_module</b>(). It is a bit mask value created by\nORing together zero or more of the following flags: <b><br>\nMODULE_INIT_IGNORE_MODVERSIONS</b></p>\n\n<p style=\"margin-left:22%;\">Ignore symbol version\nhashes.</p>\n\n\n<p style=\"margin-left:11%;\"><b>MODULE_INIT_IGNORE_VERMAGIC</b></p>\n\n<p style=\"margin-left:22%;\">Ignore kernel version\nmagic.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are some\nsafety checks built into a module to ensure that it matches\nthe kernel against which it is loaded. These checks are\nrecorded when the module is built and verified when the\nmodule is loaded. First, the module records a\n&quot;vermagic&quot; string containing the kernel version\nnumber and prominent features (such as the CPU type).\nSecond, if the module was built with the\n<b>CONFIG_MODVERSIONS</b> configuration option enabled, a\nversion hash is recorded for each symbol the module uses.\nThis hash is based on the types of the arguments and return\nvalue for the function named by the symbol. In this case,\nthe kernel version number within the &quot;vermagic&quot;\nstring is ignored, as the symbol version hashes are assumed\nto be sufficiently reliable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n<b>MODULE_INIT_IGNORE_VERMAGIC</b> flag indicates that the\n&quot;vermagic&quot; string is to be ignored, and the\n<b>MODULE_INIT_IGNORE_MODVERSIONS</b> flag indicates that\nthe symbol version hashes are to be ignored. If the kernel\nis built to permit forced loading (i.e., configured with\n<b>CONFIG_MODULE_FORCE_LOAD</b>), then loading continues,\notherwise it fails with the error <b>ENOEXEC</b> as expected\nfor malformed modules.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nthese system calls return 0. On error, -1 is returned and\n<i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EBADMSG</b>\n(since Linux 3.7)</p>\n\n<p style=\"margin-left:22%;\">Module signature is\nmisformatted.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Timeout while trying to resolve a symbol reference by\nthis module.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An address argument referred to a location that is\noutside the process&rsquo;s accessible address space.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOKEY</b> (since Linux\n3.7)</p>\n\n<p style=\"margin-left:22%;\">Module signature is invalid or\nthe kernel does not have a key for this module. This error\nis returned only if the kernel was configured with\n<b>CONFIG_MODULE_SIG_FORCE</b>; if the kernel was not\nconfigured with this option, then an invalid or unsigned\nmodule simply taints the kernel.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of memory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller was not privileged (did not have the\n<b>CAP_SYS_MODULE</b> capability), or module loading is\ndisabled (see <i>/proc/sys/kernel/modules_disabled</i> in\n<a href=\"https://man.page/5/proc\">proc(5)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nerrors may additionally occur for <b>init_module</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EEXIST</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A module with this name is\nalready loaded.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>param_values</i> is invalid, or some part of the ELF\nimage in <i>module_image</i> contains inconsistencies.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOEXEC</b></p>\n\n<p style=\"margin-left:22%;\">The binary image supplied in\n<i>module_image</i> is not an ELF image, or is an ELF image\nthat is invalid or for a different architecture.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nerrors may additionally occur for <b>finit_module</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file referred to by <i>fd</i> is not opened for\nreading.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFBIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file referred to by <i>fd</i> is too large.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>flags</i> is invalid.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOEXEC</b></p>\n\n<p style=\"margin-left:22%;\"><i>fd</i> does not refer to an\nopen file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above errors, if the module&rsquo;s <i>init</i> function\nis executed and returns an error, then <b>init_module</b>()\nor <b>finit_module</b>() fails and <i>errno</i> is set to\nthe value returned by the <i>init</i> function.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>finit_module</b>()\nis available since Linux 3.8.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>init_module</b>()\nand <b>finit_module</b>() are Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>init_module</b>() system call is not supported by glibc.\nNo declaration is provided in glibc headers, but, through a\nquirk of history, glibc versions before 2.23 did export an\nABI for this system call. Therefore, in order to employ this\nsystem call, it is (before glibc 2.23) sufficient to\nmanually declare the interface in your code; alternatively,\nyou can invoke the system call using <a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide a wrapper for <b>finit_module</b>(); call it using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Information\nabout currently loaded modules can be found in\n<i>/proc/modules</i> and in the file trees under the\nper-module subdirectories under <i>/sys/module</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the Linux\nkernel source file <i>include/linux/module.h</i> for some\nuseful background information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux 2.4\nand earlier</b> <br>\nIn Linux 2.4 and earlier, the <b>init_module</b>() system\ncall was rather different:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;linux/module.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ninit_module(const char *</b><i>name</i><b>, struct module\n*</b><i>image</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">(User-space\napplications can detect which version of\n<b>init_module</b>() is available by calling\n<b>query_module</b>(); the latter call fails with the error\n<b>ENOSYS</b> on Linux 2.6 and later.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The older\nversion of the system call loads the relocated module image\npointed to by <i>image</i> into kernel space and runs the\nmodule&rsquo;s <i>init</i> function. The caller is\nresponsible for providing the relocated image (since Linux\n2.6, the <b>init_module</b>() system call does the\nrelocation).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The module\nimage begins with a module structure and is followed by code\nand data as appropriate. Since Linux 2.2, the module\nstructure is defined as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct module {\n<br>\nunsigned long size_of_struct; <br>\nstruct module *next; <br>\nconst char *name; <br>\nunsigned long size; <br>\nlong usecount; <br>\nunsigned long flags; <br>\nunsigned int nsyms; <br>\nunsigned int ndeps; <br>\nstruct module_symbol *syms; <br>\nstruct module_ref *deps; <br>\nstruct module_ref *refs; <br>\nint (*init)(void); <br>\nvoid (*cleanup)(void); <br>\nconst struct exception_table_entry *ex_table_start; <br>\nconst struct exception_table_entry *ex_table_end; <br>\n#ifdef __alpha__ <br>\nunsigned long gp; <br>\n#endif <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\npointer fields, with the exception of <i>next</i> and\n<i>refs</i>, are expected to point within the module body\nand be initialized as appropriate for kernel space, that is,\nrelocated with the rest of the module.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/create_module\">create_module(2)</a>,\n<a href=\"https://man.page/2/delete_module\">delete_module(2)</a>, <a href=\"https://man.page/2/query_module\">query_module(2)</a>,\n<b>lsmod</b>(8), <b>modprobe</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}