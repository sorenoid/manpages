{"name":"madvise","description":"madvise - give\nadvice about use of memory","body":"\n\n<h1 align=\"center\">MADVISE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">madvise - give\nadvice about use of memory</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/mman.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmadvise(void *</b><i>addr</i><b>, size_t</b>\n<i>length</i><b>, int</b> <i>advice</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>madvise</b>():</p>\n\n<p style=\"margin-left:17%;\">Since glibc 2.19:</p>\n\n<p style=\"margin-left:23%;\">_DEFAULT_SOURCE</p>\n\n<p style=\"margin-left:17%;\">Up to and including glibc\n2.19:</p>\n\n<p style=\"margin-left:23%;\">_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>madvise</b>() system call is used to give advice or\ndirections to the kernel about the address range beginning\nat address <i>addr</i> and with size <i>length</i> bytes In\nmost cases, the goal of such advice is to improve system or\napplication performance.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Initially, the\nsystem call supported a set of &quot;conventional&quot;\n<i>advice</i> values, which are also available on several\nother implementations. (Note, though, that <b>madvise</b>()\nis not specified in POSIX.) Subsequently, a number of\nLinux-specific <i>advice</i> values have been added.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Conventional\nadvice values</b> <br>\nThe <i>advice</i> values listed below allow an application\nto tell the kernel how it expects to use some mapped or\nshared memory areas, so that the kernel can choose\nappropriate read-ahead and caching techniques. These\n<i>advice</i> values do not influence the semantics of the\napplication (except in the case of <b>MADV_DONTNEED</b>),\nbut may influence its performance. All of the <i>advice</i>\nvalues listed here have analogs in the POSIX-specified\n<a href=\"https://man.page/3/posix_madvise\">posix_madvise(3)</a> function, and the values have the\nsame meanings, with the exception of\n<b>MADV_DONTNEED</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The advice is\nindicated in the <i>advice</i> argument, which is one of the\nfollowing: <b><br>\nMADV_NORMAL</b></p>\n\n<p style=\"margin-left:22%;\">No special treatment. This is\nthe default.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_RANDOM</b></p>\n\n<p style=\"margin-left:22%;\">Expect page references in\nrandom order. (Hence, read ahead may be less useful than\nnormally.)</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_SEQUENTIAL</b></p>\n\n<p style=\"margin-left:22%;\">Expect page references in\nsequential order. (Hence, pages in the given range can be\naggressively read ahead, and may be freed soon after they\nare accessed.)</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_WILLNEED</b></p>\n\n<p style=\"margin-left:22%;\">Expect access in the near\nfuture. (Hence, it might be a good idea to read some pages\nahead.)</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_DONTNEED</b></p>\n\n<p style=\"margin-left:22%;\">Do not expect access in the\nnear future. (For the time being, the application is\nfinished with the given range, so the kernel can free\nresources associated with it.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">After a\nsuccessful <b>MADV_DONTNEED</b> operation, the semantics of\nmemory access in the specified region are changed:\nsubsequent accesses of pages in the range will succeed, but\nwill result in either repopulating the memory contents from\nthe up-to-date contents of the underlying mapped file (for\nshared file mappings, shared anonymous mappings, and\nshmem-based techniques such as System V shared memory\nsegments) or zero-fill-on-demand pages for anonymous private\nmappings.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that, when\napplied to shared mappings, <b>MADV_DONTNEED</b> might not\nlead to immediate freeing of the pages in the range. The\nkernel is free to delay freeing the pages until an\nappropriate moment. The resident set size (RSS) of the\ncalling process will be immediately reduced however.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>MADV_DONTNEED</b>\ncannot be applied to locked pages, Huge TLB pages, or\n<b>VM_PFNMAP</b> pages. (Pages marked with the\nkernel-internal <b>VM_PFNMAP</b> flag are special memory\nareas that are not managed by the virtual memory subsystem.\nSuch pages are typically created by device drivers that map\nthe pages into user space.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux-specific\nadvice values</b> <br>\nThe following Linux-specific <i>advice</i> values have no\ncounterparts in the POSIX-specified <a href=\"https://man.page/3/posix_madvise\">posix_madvise(3)</a>,\nand may or may not have counterparts in the <b>madvise</b>()\ninterface available on other implementations. Note that some\nof these operations change the semantics of memory accesses.\n<b><br>\nMADV_REMOVE</b> (since Linux 2.6.16)</p>\n\n<p style=\"margin-left:22%;\">Free up a given range of pages\nand its associated backing store. This is equivalent to\npunching a hole in the corresponding byte range of the\nbacking store (see <a href=\"https://man.page/2/fallocate\">fallocate(2)</a>). Subsequent accesses\nin the specified address range will see bytes containing\nzero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The specified\naddress range must be mapped shared and writable. This flag\ncannot be applied to locked pages, Huge TLB pages, or\n<b>VM_PFNMAP</b> pages.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In the initial\nimplementation, only <a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a> was supported\n<b>MADV_REMOVE</b>; but since Linux 3.5, any filesystem\nwhich supports the <a href=\"https://man.page/2/fallocate\">fallocate(2)</a>\n<b>FALLOC_FL_PUNCH_HOLE</b> mode also supports\n<b>MADV_REMOVE</b>. Hugetlbfs fails with the error\n<b>EINVAL</b> and other filesystems fail with the error\n<b>EOPNOTSUPP</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_DONTFORK</b> (since\nLinux 2.6.16)</p>\n\n<p style=\"margin-left:22%;\">Do not make the pages in this\nrange available to the child after a <a href=\"https://man.page/2/fork\">fork(2)</a>. This is\nuseful to prevent copy-on-write semantics from changing the\nphysical location of a page if the parent writes to it after\na <a href=\"https://man.page/2/fork\">fork(2)</a>. (Such page relocations cause problems for\nhardware that DMAs into the page.)</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_DOFORK</b> (since Linux\n2.6.16)</p>\n\n<p style=\"margin-left:22%;\">Undo the effect of\n<b>MADV_DONTFORK</b>, restoring the default behavior,\nwhereby a mapping is inherited across <a href=\"https://man.page/2/fork\">fork(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_HWPOISON</b> (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Poison the pages in the range\nspecified by <i>addr</i> and <i>length</i> and handle\nsubsequent references to those pages like a hardware memory\ncorruption. This operation is available only for privileged\n(<b>CAP_SYS_ADMIN</b>) processes. This operation may result\nin the calling process receiving a <b>SIGBUS</b> and the\npage being unmapped.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This feature is\nintended for testing of memory error-handling code; it is\navailable only if the kernel was configured with\n<b>CONFIG_MEMORY_FAILURE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_MERGEABLE</b> (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Enable Kernel Samepage Merging\n(KSM) for the pages in the range specified by <i>addr</i>\nand <i>length</i>. The kernel regularly scans those areas of\nuser memory that have been marked as mergeable, looking for\npages with identical content. These are replaced by a single\nwrite-protected page (which is automatically copied if a\nprocess later wants to update the content of the page). KSM\nmerges only private anonymous pages (see\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The KSM feature\nis intended for applications that generate many instances of\nthe same data (e.g., virtualization systems such as KVM). It\ncan consume a lot of processing power; use with care. See\nthe Linux kernel source file\n<i>Documentation/admin-guide/mm/ksm.rst</i> for more\ndetails.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>MADV_MERGEABLE</b> and <b>MADV_UNMERGEABLE</b> operations\nare available only if the kernel was configured with\n<b>CONFIG_KSM</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_UNMERGEABLE</b> (since\nLinux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Undo the effect of an earlier\n<b>MADV_MERGEABLE</b> operation on the specified address\nrange; KSM unmerges whatever pages it had merged in the\naddress range specified by <i>addr</i> and\n<i>length</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_SOFT_OFFLINE</b> (since\nLinux 2.6.33)</p>\n\n<p style=\"margin-left:22%;\">Soft offline the pages in the\nrange specified by <i>addr</i> and <i>length</i>. The memory\nof each page in the specified range is preserved (i.e., when\nnext accessed, the same content will be visible, but in a\nnew physical page frame), and the original page is offlined\n(i.e., no longer used, and taken out of normal memory\nmanagement). The effect of the <b>MADV_SOFT_OFFLINE</b>\noperation is invisible to (i.e., does not change the\nsemantics of) the calling process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This feature is\nintended for testing of memory error-handling code; it is\navailable only if the kernel was configured with\n<b>CONFIG_MEMORY_FAILURE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_HUGEPAGE</b> (since\nLinux 2.6.38)</p>\n\n<p style=\"margin-left:22%;\">Enable Transparent Huge Pages\n(THP) for pages in the range specified by <i>addr</i> and\n<i>length</i>. Currently, Transparent Huge Pages work only\nwith private anonymous pages (see <a href=\"https://man.page/2/mmap\">mmap(2)</a>). The\nkernel will regularly scan the areas marked as huge page\ncandidates to replace them with huge pages. The kernel will\nalso allocate huge pages directly when the region is\nnaturally aligned to the huge page size (see\n<a href=\"https://man.page/2/posix_memalign\">posix_memalign(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This feature is\nprimarily aimed at applications that use large mappings of\ndata and access large regions of that memory at a time\n(e.g., virtualization systems such as QEMU). It can very\neasily waste memory (e.g., a 2&nbsp;MB mapping that only\never accesses 1 byte will result in 2&nbsp;MB of wired\nmemory instead of one 4&nbsp;KB page). See the Linux kernel\nsource file\n<i>Documentation/admin-guide/mm/transhuge.rst</i> for more\ndetails.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Most common\nkernels configurations provide <b>MADV_HUGEPAGE</b>-style\nbehavior by default, and thus <b>MADV_HUGEPAGE</b> is\nnormally not necessary. It is mostly intended for embedded\nsystems, where <b>MADV_HUGEPAGE</b>-style behavior may not\nbe enabled by default in the kernel. On such systems, this\nflag can be used in order to selectively enable THP.\nWhenever <b>MADV_HUGEPAGE</b> is used, it should always be\nin regions of memory with an access pattern that the\ndeveloper knows in advance won&rsquo;t risk to increase the\nmemory footprint of the application when transparent\nhugepages are enabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>MADV_HUGEPAGE</b> and <b>MADV_NOHUGEPAGE</b> operations\nare available only if the kernel was configured with\n<b>CONFIG_TRANSPARENT_HUGEPAGE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_NOHUGEPAGE</b> (since\nLinux 2.6.38)</p>\n\n<p style=\"margin-left:22%;\">Ensures that memory in the\naddress range specified by <i>addr</i> and <i>length</i>\nwill not be backed by transparent hugepages.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_DONTDUMP</b> (since\nLinux 3.4)</p>\n\n<p style=\"margin-left:22%;\">Exclude from a core dump those\npages in the range specified by <i>addr</i> and\n<i>length</i>. This is useful in applications that have\nlarge areas of memory that are known not to be useful in a\ncore dump. The effect of <b>MADV_DONTDUMP</b> takes\nprecedence over the bit mask that is set via the\n<i>/proc/[pid]/coredump_filter</i> file (see\n<a href=\"https://man.page/5/core\">core(5)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_DODUMP</b> (since Linux\n3.4)</p>\n\n<p style=\"margin-left:22%;\">Undo the effect of an earlier\n<b>MADV_DONTDUMP</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_FREE</b> (since Linux\n4.5)</p>\n\n<p style=\"margin-left:22%;\">The application no longer\nrequires the pages in the range specified by <i>addr</i> and\n<i>len</i>. The kernel can thus free these pages, but the\nfreeing could be delayed until memory pressure occurs. For\neach of the pages that has been marked to be freed but has\nnot yet been freed, the free operation will be canceled if\nthe caller writes into the page. After a successful\n<b>MADV_FREE</b> operation, any stale data (i.e., dirty,\nunwritten pages) will be lost when the kernel frees the\npages. However, subsequent writes to pages in the range will\nsucceed and then kernel cannot free those dirtied pages, so\nthat the caller can always see just written data. If there\nis no subsequent write, the kernel can free the pages at any\ntime. Once pages in the range have been freed, the caller\nwill see zero-fill-on-demand pages upon subsequent page\nreferences.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>MADV_FREE</b> operation can be applied only to private\nanonymous pages (see <a href=\"https://man.page/2/mmap\">mmap(2)</a>). In Linux before\nversion 4.12, when freeing pages on a swapless system, the\npages in the given range are freed instantly, regardless of\nmemory pressure.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_WIPEONFORK</b> (since\nLinux 4.14)</p>\n\n<p style=\"margin-left:22%;\">Present the child process with\nzero-filled memory in this range after a <a href=\"https://man.page/2/fork\">fork(2)</a>.\nThis is useful in forking servers in order to ensure that\nsensitive per-process data (for example, PRNG seeds,\ncryptographic secrets, and so on) is not handed to child\nprocesses.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>MADV_WIPEONFORK</b> operation can be applied only to\nprivate anonymous pages (see <a href=\"https://man.page/2/mmap\">mmap(2)</a>).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Within the\nchild created by <a href=\"https://man.page/2/fork\">fork(2)</a>, the <b>MADV_WIPEONFORK</b>\nsetting remains in place on the specified address range.\nThis setting is cleared during <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>MADV_KEEPONFORK</b> (since\nLinux 4.14)</p>\n\n<p style=\"margin-left:22%;\">Undo the effect of an earlier\n<b>MADV_WIPEONFORK</b>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>madvise</b>() returns zero. On error, it returns -1 and\n<i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>advice</i> is\n<b>MADV_REMOVE</b>, but the specified address range is not a\nshared writable mapping.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A kernel resource was temporarily unavailable.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The map exists, but the area maps something that\nisn&rsquo;t a file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>addr</i> is not page-aligned or <i>length</i> is\nnegative.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>advice</i> is not a valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>advice</i> is <b>MADV_DONTNEED</b> or\n<b>MADV_REMOVE</b> and the specified address range includes\nlocked, Huge TLB pages, or <b>VM_PFNMAP</b> pages.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>advice</i> is <b>MADV_MERGEABLE</b> or\n<b>MADV_UNMERGEABLE</b>, but the kernel was not configured\nwith <b>CONFIG_KSM</b>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>advice</i> is <b>MADV_FREE</b> or\n<b>MADV_WIPEONFORK</b> but the specified address range\nincludes file, Huge TLB, <b>MAP_SHARED</b>, or\n<b>VM_PFNMAP</b> ranges.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(for <b>MADV_WILLNEED</b>) Paging in this area would\nexceed the process&rsquo;s maximum resident set size.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(for <b>MADV_WILLNEED</b>) Not enough memory: paging in\nfailed.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Addresses in the specified range are not currently\nmapped, or are outside the address space of the process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>advice</i> is <b>MADV_HWPOISON</b>, but the caller\ndoes not have the <b>CAP_SYS_ADMIN</b> capability.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.18, support for this system call is optional, depending on\nthe setting of the <b>CONFIG_ADVISE_SYSCALLS</b>\nconfiguration option.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>madvise</b>()\nis not specified by any standards. Versions of this system\ncall, implementing a wide variety of <i>advice</i> values,\nexist on many other implementations. Other implementations\ntypically implement at least the flags listed above under\n<i>Conventional advice flags</i>, albeit with some variation\nin semantics.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001\ndescribes <a href=\"https://man.page/3/posix_madvise\">posix_madvise(3)</a> with constants\n<b>POSIX_MADV_NORMAL</b>, <b>POSIX_MADV_RANDOM</b>,\n<b>POSIX_MADV_SEQUENTIAL</b>, <b>POSIX_MADV_WILLNEED</b>,\nand <b>POSIX_MADV_DONTNEED</b>, and so on, with behavior\nclose to the similarly named flags listed above.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux\nnotes</b> <br>\nThe Linux implementation requires that the address\n<i>addr</i> be page-aligned, and allows <i>length</i> to be\nzero. If there are some parts of the specified address range\nthat are not mapped, the Linux version of <b>madvise</b>()\nignores them and applies the call to the rest (but returns\n<b>ENOMEM</b> from the system call, as it should).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>,\n<a href=\"https://man.page/2/mincore\">mincore(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/mprotect\">mprotect(2)</a>,\n<a href=\"https://man.page/2/msync\">msync(2)</a>, <a href=\"https://man.page/2/munmap\">munmap(2)</a>, <a href=\"https://man.page/2/prctl\">prctl(2)</a>,\n<a href=\"https://man.page/3/posix_madvise\">posix_madvise(3)</a>, <a href=\"https://man.page/5/core\">core(5)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}