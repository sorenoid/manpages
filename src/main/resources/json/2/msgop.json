{"name":"msgop","description":"msgrcv, msgsnd\n- System V message queue operations","body":"\n\n<h1 align=\"center\">MSGOP</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">msgrcv, msgsnd\n- System V message queue operations</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/ipc.h&gt; <br>\n#include &lt;sys/msg.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nmsgsnd(int</b> <i>msqid</i><b>, const void\n*</b><i>msgp</i><b>, size_t</b> <i>msgsz</i><b>, int</b>\n<i>msgflg</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\nmsgrcv(int</b> <i>msqid</i><b>, void *</b><i>msgp</i><b>,\nsize_t</b> <i>msgsz</i><b>, long</b> <i>msgtyp</i><b>, <br>\nint</b> <i>msgflg</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>msgsnd</b>() and <b>msgrcv</b>() system calls are used to\nsend messages to, and receive messages from, a System&nbsp;V\nmessage queue. The calling process must have write\npermission on the message queue in order to send a message,\nand read permission to receive a message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>msgp</i>\nargument is a pointer to a caller-defined structure of the\nfollowing general form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct msgbuf {\n<br>\nlong mtype; /* message type, must be &gt; 0 */ <br>\nchar mtext[1]; /* message data */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>mtext</i> field is an array (or other structure) whose\nsize is specified by <i>msgsz</i>, a nonnegative integer\nvalue. Messages of zero length (i.e., no <i>mtext</i> field)\nare permitted. The <i>mtype</i> field must have a strictly\npositive integer value. This value can be used by the\nreceiving process for message selection (see the description\nof <b>msgrcv</b>() below).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>msgsnd()</b>\n<br>\nThe <b>msgsnd</b>() system call appends a copy of the\nmessage pointed to by <i>msgp</i> to the message queue whose\nidentifier is specified by <i>msqid</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If sufficient\nspace is available in the queue, <b>msgsnd</b>() succeeds\nimmediately. The queue capacity is governed by the\n<i>msg_qbytes</i> field in the associated data structure for\nthe message queue. During queue creation this field is\ninitialized to <b>MSGMNB</b> bytes, but this limit can be\nmodified using <a href=\"https://man.page/2/msgctl\">msgctl(2)</a>. A message queue is\nconsidered to be full if either of the following conditions\nis true:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Adding a new message to the queue would cause the total\nnumber of bytes in the queue to exceed the queue&rsquo;s\nmaximum size (the <i>msg_qbytes</i> field).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>Adding another message to the queue would cause the\ntotal number of messages in the queue to exceed the\nqueue&rsquo;s maximum size (the <i>msg_qbytes</i> field).\nThis check is necessary to prevent an unlimited number of\nzero-length messages being placed on the queue. Although\nsuch messages contain no data, they nevertheless consume\n(locked) kernel memory.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If insufficient\nspace is available in the queue, then the default behavior\nof <b>msgsnd</b>() is to block until space becomes\navailable. If <b>IPC_NOWAIT</b> is specified in\n<i>msgflg</i>, then the call instead fails with the error\n<b>EAGAIN</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A blocked\n<b>msgsnd</b>() call may also fail if:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">the queue is removed, in which\ncase the system call fails with <i>errno</i> set to\n<b>EIDRM</b>; or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>a signal is caught, in which case the system call fails\nwith <i>errno</i> set to <b>EINTR</b>;<b>see signal</b>(7).\n(<b>msgsnd</b>() is never automatically restarted after\nbeing interrupted by a signal handler, regardless of the\nsetting of the <b>SA_RESTART</b> flag when establishing a\nsignal handler.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon successful\ncompletion the message queue data structure is updated as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\"><i>msg_lspid</i> is set to the\nprocess ID of the calling process.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>msg_qnum</i> is incremented by 1.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><i>msg_stime</i> is set to the current time.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>msgrcv()</b>\n<br>\nThe <b>msgrcv</b>() system call removes a message from the\nqueue specified by <i>msqid</i> and places it in the buffer\npointed to by <i>msgp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The argument\n<i>msgsz</i> specifies the maximum size in bytes for the\nmember <i>mtext</i> of the structure pointed to by the\n<i>msgp</i> argument. If the message text has length greater\nthan <i>msgsz</i>, then the behavior depends on whether\n<b>MSG_NOERROR</b> is specified in <i>msgflg</i>. If\n<b>MSG_NOERROR</b> is specified, then the message text will\nbe truncated (and the truncated part will be lost); if\n<b>MSG_NOERROR</b> is not specified, then the message\nisn&rsquo;t removed from the queue and the system call fails\nreturning -1 with <i>errno</i> set to <b>E2BIG</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unless\n<b>MSG_COPY</b> is specified in <i>msgflg</i> (see below),\nthe <i>msgtyp</i> argument specifies the type of message\nrequested, as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">If <i>msgtyp</i> is 0, then the\nfirst message in the queue is read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>If <i>msgtyp</i> is greater than 0, then the first\nmessage in the queue of type <i>msgtyp</i> is read, unless\n<b>MSG_EXCEPT</b> was specified in <i>msgflg</i>, in which\ncase the first message in the queue of type not equal to\n<i>msgtyp</i> will be read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>If <i>msgtyp</i> is less than 0, then the first message\nin the queue with the lowest type less than or equal to the\nabsolute value of <i>msgtyp</i> will be read.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>msgflg</i> argument is a bit mask constructed by ORing\ntogether zero or more of the following flags: <b><br>\nIPC_NOWAIT</b></p>\n\n<p style=\"margin-left:22%;\">Return immediately if no\nmessage of the requested type is in the queue. The system\ncall fails with <i>errno</i> set to <b>ENOMSG</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>MSG_COPY</b> (since Linux\n3.8)</p>\n\n<p style=\"margin-left:22%;\">Nondestructively fetch a copy\nof the message at the ordinal position in the queue\nspecified by <i>msgtyp</i> (messages are considered to be\nnumbered starting at 0).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This flag must\nbe specified in conjunction with <b>IPC_NOWAIT</b>, with the\nresult that, if there is no message available at the given\nposition, the call fails immediately with the error\n<b>ENOMSG</b>. Because they alter the meaning of\n<i>msgtyp</i> in orthogonal ways, <b>MSG_COPY</b> and\n<b>MSG_EXCEPT</b> may not both be specified in\n<i>msgflg</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>MSG_COPY</b> flag was added for the implementation of the\nkernel checkpoint-restore facility and is available only if\nthe kernel was built with the\n<b>CONFIG_CHECKPOINT_RESTORE</b> option.</p>\n\n<p style=\"margin-left:11%;\"><b>MSG_EXCEPT</b></p>\n\n<p style=\"margin-left:22%;\">Used with <i>msgtyp</i> greater\nthan 0 to read the first message in the queue with message\ntype that differs from <i>msgtyp</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>MSG_NOERROR</b></p>\n\n<p style=\"margin-left:22%;\">To truncate the message text if\nlonger than <i>msgsz</i> bytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no message\nof the requested type is available and <b>IPC_NOWAIT</b>\nisn&rsquo;t specified in <i>msgflg</i>, the calling process\nis blocked until one of the following conditions occurs:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>A message of the desired type is placed in the\nqueue.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The message queue is removed from the system. In this\ncase, the system call fails with <i>errno</i> set to\n<b>EIDRM</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The calling process catches a signal. In this case, the\nsystem call fails with <i>errno</i> set to <b>EINTR</b>.\n(<b>msgrcv</b>() is never automatically restarted after\nbeing interrupted by a signal handler, regardless of the\nsetting of the <b>SA_RESTART</b> flag when establishing a\nsignal handler.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon successful\ncompletion the message queue data structure is updated as\nfollows:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>msg_lrpid</i>\nis set to the process ID of the calling process.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>msg_qnum</i>\nis decremented by 1.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>msg_rtime</i>\nis set to the current time.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On failure both\nfunctions return -1 with <i>errno</i> indicating the error,\notherwise <b>msgsnd</b>() returns 0 and <b>msgrcv</b>()\nreturns the number of bytes actually copied into the\n<i>mtext</i> array.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>msgsnd</b>() fails, <i>errno</i> will be set to one among\nthe following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The calling process does not\nhave write permission on the message queue, and does not\nhave the <b>CAP_IPC_OWNER</b> capability in the user\nnamespace that governs its IPC namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The message can&rsquo;t be sent due to the\n<i>msg_qbytes</i> limit for the queue and <b>IPC_NOWAIT</b>\nwas specified in <i>msgflg</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The address pointed to by <i>msgp</i> isn&rsquo;t\naccessible.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIDRM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The message queue was removed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Sleeping on a full message queue condition, the process\ncaught a signal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Invalid <i>msqid</i> value, or nonpositive <i>mtype</i>\nvalue, or invalid <i>msgsz</i> value (less than 0 or greater\nthan the system value <b>MSGMAX</b>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system does not have enough memory to make a copy of\nthe message pointed to by <i>msgp</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\n<b>msgrcv</b>() fails, <i>errno</i> will be set to one among\nthe following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>E2BIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The message text length is\ngreater than <i>msgsz</i> and <b>MSG_NOERROR</b> isn&rsquo;t\nspecified in <i>msgflg</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process does not have read permission on the\nmessage queue, and does not have the <b>CAP_IPC_OWNER</b>\ncapability in the user namespace that governs its IPC\nnamespace.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The address pointed to by <i>msgp</i> isn&rsquo;t\naccessible.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIDRM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>While the process was sleeping to receive a message, the\nmessage queue was removed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>While the process was sleeping to receive a message, the\nprocess caught a signal; see <a href=\"https://man.page/7/signal\">signal(7)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>msqid</i> was invalid, or <i>msgsz</i> was less than\n0.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EINVAL</b> (since Linux\n3.14)</p>\n\n<p style=\"margin-left:22%;\"><i>msgflg</i> specified\n<b>MSG_COPY</b>, but not <b>IPC_NOWAIT</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>EINVAL</b> (since Linux\n3.14)</p>\n\n<p style=\"margin-left:22%;\"><i>msgflg</i> specified both\n<b>MSG_COPY</b> and <b>MSG_EXCEPT</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMSG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>IPC_NOWAIT</b> was specified in <i>msgflg</i> and no\nmessage of the requested type existed on the message\nqueue.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMSG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>IPC_NOWAIT</b> and <b>MSG_COPY</b> were specified in\n<i>msgflg</i> and the queue contains less than <i>msgtyp</i>\nmessages.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOSYS</b> (since Linux\n3.8)</p>\n\n<p style=\"margin-left:22%;\">Both <b>MSG_COPY</b> and\n<b>IPC_NOWAIT</b> were specified in <i>msgflg</i>, and this\nkernel was configured without\n<b>CONFIG_CHECKPOINT_RESTORE</b>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>MSG_EXCEPT</b> and <b>MSG_COPY</b> flags are\nLinux-specific; their definitions can be obtained by\ndefining the <b>_GNU_SOURCE</b> feature test macro.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The inclusion\nof <i>&lt;sys/types.h&gt;</i> and <i>&lt;sys/ipc.h&gt;</i>\nisn&rsquo;t required on Linux or by any version of POSIX.\nHowever, some old implementations required the inclusion of\nthese header files, and the SVID also documented their\ninclusion. Applications intended to be portable to such old\nsystems may need to include these header files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>msgp</i>\nargument is declared as <i>struct msgbuf&nbsp;*</i> in glibc\n2.0 and 2.1. It is declared as <i>void&nbsp;*</i> in glibc\n2.2 and later, as required by SUSv2 and SUSv3.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nlimits on message queue resources affect the <b>msgsnd</b>()\ncall:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>MSGMAX</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Maximum size of a message text, in bytes (default value:\n8192 bytes). On Linux, this limit can be read and modified\nvia <i>/proc/sys/kernel/msgmax</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>MSGMNB</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Maximum number of bytes that can be held in a message\nqueue (default value: 16384 bytes). On Linux, this limit can\nbe read and modified via <i>/proc/sys/kernel/msgmnb</i>. A\nprivileged process (Linux: a process with the\n<b>CAP_SYS_RESOURCE</b> capability) can increase the size of\na message queue beyond <b>MSGMNB</b> using the\n<a href=\"https://man.page/2/msgctl\">msgctl(2)</a> <b>IPC_SET</b> operation.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nimplementation has no intrinsic system-wide limits on the\nnumber of message headers (<b>MSGTQL</b>) and the number of\nbytes in the message pool (<b>MSGPOOL</b>).</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In Linux 3.13\nand earlier, if <b>msgrcv</b>() was called with the\n<b>MSG_COPY</b> flag, but without <b>IPC_NOWAIT</b>, and the\nmessage queue contained less than <i>msgtyp</i> messages,\nthen the call would block until the next message is written\nto the queue. At that point, the call would return a copy of\nthe message, <i>regardless</i> of whether that message was\nat the ordinal position <i>msgtyp</i>. This bug is fixed in\nLinux 3.14.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Specifying both\n<b>MSG_COPY</b> and <b>MSC_EXCEPT</b> in <i>msgflg</i> is a\nlogical error (since these flags impose different\ninterpretations on <i>msgtyp</i>). In Linux 3.13 and\nearlier, this error was not diagnosed by <b>msgrcv</b>().\nThis bug is fixed in Linux 3.14.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow demonstrates the use of <b>msgsnd</b>() and\n<b>msgrcv</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The example\nprogram is first run with the <b>-s</b> option to send a\nmessage and then run again with the <b>-r</b> option to\nreceive a message.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nshell session shows a sample run of the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n-s</b> <br>\nsent: a message at Wed Mar 4 16:25:45 2015</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>./a.out\n-r</b> <br>\nmessage received: a message at Wed Mar 4 16:25:45 2015</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;string.h&gt; <br>\n#include &lt;time.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;errno.h&gt; <br>\n#include &lt;sys/types.h&gt; <br>\n#include &lt;sys/ipc.h&gt; <br>\n#include &lt;sys/msg.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">struct msgbuf {\n<br>\nlong mtype; <br>\nchar mtext[80]; <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nusage(char *prog_name, char *msg) <br>\n{ <br>\nif (msg != NULL) <br>\nfputs(msg, stderr);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fprintf(stderr,\n&quot;Usage: %s [options]\\n&quot;, prog_name); <br>\nfprintf(stderr, &quot;Options are:\\n&quot;); <br>\nfprintf(stderr, &quot;-s send message using\nmsgsnd()\\n&quot;); <br>\nfprintf(stderr, &quot;-r read message using\nmsgrcv()\\n&quot;); <br>\nfprintf(stderr, &quot;-t message type (default is\n1)\\n&quot;); <br>\nfprintf(stderr, &quot;-k message queue key (default is\n1234)\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nsend_msg(int qid, int msgtype) <br>\n{ <br>\nstruct msgbuf msg; <br>\ntime_t t;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">msg.mtype =\nmsgtype;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">time(&amp;t);\n<br>\nsnprintf(msg.mtext, sizeof(msg.mtext), &quot;a message at\n%s&quot;, <br>\nctime(&amp;t));</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (msgsnd(qid,\n&amp;msg, sizeof(msg.mtext), <br>\nIPC_NOWAIT) == -1) { <br>\nperror(&quot;msgsnd error&quot;); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\nprintf(&quot;sent: %s\\n&quot;, msg.mtext); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nget_msg(int qid, int msgtype) <br>\n{ <br>\nstruct msgbuf msg;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (msgrcv(qid,\n&amp;msg, sizeof(msg.mtext), msgtype, <br>\nMSG_NOERROR | IPC_NOWAIT) == -1) { <br>\nif (errno != ENOMSG) { <br>\nperror(&quot;msgrcv&quot;); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\nprintf(&quot;No message available for msgrcv()\\n&quot;);\n<br>\n} else <br>\nprintf(&quot;message received: %s\\n&quot;, msg.mtext); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nint qid, opt; <br>\nint mode = 0; /* 1 = send, 2 = receive */ <br>\nint msgtype = 1; <br>\nint msgkey = 1234;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">while ((opt =\ngetopt(argc, argv, &quot;srt:k:&quot;)) != -1) { <br>\nswitch (opt) { <br>\ncase 's': <br>\nmode = 1; <br>\nbreak; <br>\ncase 'r': <br>\nmode = 2; <br>\nbreak; <br>\ncase 't': <br>\nmsgtype = atoi(optarg); <br>\nif (msgtype &lt;= 0) <br>\nusage(argv[0], &quot;-t option must be greater than\n0\\n&quot;); <br>\nbreak; <br>\ncase 'k': <br>\nmsgkey = atoi(optarg); <br>\nbreak; <br>\ndefault: <br>\nusage(argv[0], &quot;Unrecognized option\\n&quot;); <br>\n} <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (mode == 0)\n<br>\nusage(argv[0], &quot;must use either -s or -r\noption\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">qid =\nmsgget(msgkey, IPC_CREAT | 0666);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (qid == -1)\n{ <br>\nperror(&quot;msgget&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (mode == 2)\n<br>\nget_msg(qid, msgtype); <br>\nelse <br>\nsend_msg(qid, msgtype);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/msgctl\">msgctl(2)</a>,\n<a href=\"https://man.page/2/msgget\">msgget(2)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>,\n<a href=\"https://man.page/7/mq_overview\">mq_overview(7)</a>, <a href=\"https://man.page/7/sysvipc\">sysvipc(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}