{"name":"kill","description":"kill - send signal to a process","body":"\n\n<h1 align=\"center\">KILL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">kill - send\nsignal to a process</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;signal.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nkill(pid_t</b> <i>pid</i><b>, int</b>\n<i>sig</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>kill</b>():\n_POSIX_C_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>kill</b>() system call can be used to send any signal to\nany process group or process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>pid</i>\nis positive, then signal <i>sig</i> is sent to the process\nwith the ID specified by <i>pid</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>pid</i>\nequals 0, then <i>sig</i> is sent to every process in the\nprocess group of the calling process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>pid</i>\nequals -1, then <i>sig</i> is sent to every process for\nwhich the calling process has permission to send signals,\nexcept for process 1 (<i>init</i>), but see below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>pid</i>\nis less than -1, then <i>sig</i> is sent to every process in\nthe process group whose ID is <i>-pid</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>sig</i>\nis 0, then no signal is sent, but existence and permission\nchecks are still performed; this can be used to check for\nthe existence of a process ID or process group ID that the\ncaller is permitted to signal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a process\nto have permission to send a signal, it must either be\nprivileged (under Linux: have the <b>CAP_KILL</b> capability\nin the user namespace of the target process), or the real or\neffective user ID of the sending process must equal the real\nor saved set-user-ID of the target process. In the case of\n<b>SIGCONT</b>, it suffices when the sending and receiving\nprocesses belong to the same session. (Historically, the\nrules were different; see NOTES.)</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success (at\nleast one signal was sent), zero is returned. On error, -1\nis returned, and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">An invalid signal was\nspecified.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process does not have permission to send the\nsignal to any of the target processes.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The target process or process group does not exist. Note\nthat an existing process might be a zombie, a process that\nhas terminated execution, but has not yet been\n<a href=\"https://man.page/2/wait\">wait(2)</a>ed for.</p></td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4, 4.3BSD.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The only\nsignals that can be sent to process ID 1, the <i>init</i>\nprocess, are those for which <i>init</i> has explicitly\ninstalled signal handlers. This is done to assure the system\nis not brought down accidentally.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1\nrequires that <i>kill(-1,sig)</i> send <i>sig</i> to all\nprocesses that the calling process may send signals to,\nexcept possibly for some implementation-defined system\nprocesses. Linux allows a process to signal itself, but on\nLinux the call <i>kill(-1,sig)</i> does not signal the\ncalling process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1\nrequires that if a process sends a signal to itself, and the\nsending thread does not have the signal blocked, and no\nother thread has it unblocked or is waiting for it in\n<a href=\"https://man.page/3/sigwait\">sigwait(3)</a>, at least one unblocked signal must be\ndelivered to the sending thread before the <b>kill</b>()\nreturns.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux\nnotes</b> <br>\nAcross different kernel versions, Linux has enforced\ndifferent rules for the permissions required for an\nunprivileged process to send a signal to another process. In\nkernels 1.0 to 1.2.2, a signal could be sent if the\neffective user ID of the sender matched effective user ID of\nthe target, or the real user ID of the sender matched the\nreal user ID of the target. From kernel 1.2.3 until 1.3.77,\na signal could be sent if the effective user ID of the\nsender matched either the real or effective user ID of the\ntarget. The current rules, which conform to POSIX.1, were\nadopted in kernel 1.3.78.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In 2.6 kernels\nup to and including 2.6.7, there was a bug that meant that\nwhen sending signals to a process group, <b>kill</b>()\nfailed with the error <b>EPERM</b> if the caller did not\nhave permission to send the signal to <i>any</i> (rather\nthan <i>all</i>) of the members of the process group.\nNotwithstanding this error return, the signal was still\ndelivered to all of the processes for which the caller had\npermission to signal.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/kill\">kill(1)</a>,\n<a href=\"https://man.page/2/_exit\">_exit(2)</a>, <a href=\"https://man.page/2/pidfd_send_signal\">pidfd_send_signal(2)</a>,\n<a href=\"https://man.page/2/signal\">signal(2)</a>, <a href=\"https://man.page/2/tkill\">tkill(2)</a>, <a href=\"https://man.page/3/exit\">exit(3)</a>,\n<a href=\"https://man.page/3/killpg\">killpg(3)</a>, <a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}