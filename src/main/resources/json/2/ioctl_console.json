{"name":"ioctl_console","body":"\n\n<h1 align=\"center\">IOCTL_CONSOLE</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ioctl_console -\nioctls for console terminal and virtual consoles</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nLinux-specific <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> requests are supported for\nconsole terminals and virtual consoles. Each requires a\nthird argument, assumed here to be <i>argp</i>. <b><br>\nKDGETLED</b></p>\n\n<p style=\"margin-left:22%;\">Get state of LEDs. <i>argp</i>\npoints to a <i>char</i>. The lower three bits of\n<i>*argp</i> are set to the state of the LEDs, as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3245831.png\" alt=\"Image grohtml-3245831.png\"></p>\n\n<p style=\"margin-left:11%;\"><b>KDSETLED</b></p>\n\n<p style=\"margin-left:22%;\">Set the LEDs. The LEDs are set\nto correspond to the lower three bits of the unsigned long\ninteger in <i>argp</i>. However, if a higher order bit is\nset, the LEDs revert to normal: displaying the state of the\nkeyboard functions of caps lock, num lock, and scroll\nlock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before Linux\n1.1.54, the LEDs just reflected the state of the\ncorresponding keyboard flags, and KDGETLED/KDSETLED would\nalso change the keyboard flags. Since Linux 1.1.54 the LEDs\ncan be made to display arbitrary information, but by default\nthey display the keyboard flags. The following two ioctls\nare used to access the keyboard flags. <b><br>\nKDGKBLED</b></p>\n\n<p style=\"margin-left:22%;\">Get keyboard flags CapsLock,\nNumLock, ScrollLock (not lights). <i>argp</i> points to a\nchar which is set to the flag state. The low order three\nbits (mask 0x7) get the current flag state, and the low\norder bits of the next nibble (mask 0x70) get the default\nflag state. (Since Linux 1.1.54.)</p>\n\n<p style=\"margin-left:11%;\"><b>KDSKBLED</b></p>\n\n<p style=\"margin-left:22%;\">Set keyboard flags CapsLock,\nNumLock, ScrollLock (not lights). <i>argp</i> is an unsigned\nlong integer that has the desired flag state. The low order\nthree bits (mask 0x7) have the flag state, and the low order\nbits of the next nibble (mask 0x70) have the default flag\nstate. (Since Linux 1.1.54.)</p>\n\n<p style=\"margin-left:11%;\"><b>KDGKBTYPE</b></p>\n\n<p style=\"margin-left:22%;\">Get keyboard type. This returns\nthe value KB_101, defined as 0x02.</p>\n\n<p style=\"margin-left:11%;\"><b>KDADDIO</b></p>\n\n<p style=\"margin-left:22%;\">Add I/O port as valid.\nEquivalent to <i>ioperm(arg,1,1)</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDDELIO</b></p>\n\n<p style=\"margin-left:22%;\">Delete I/O port as valid.\nEquivalent to <i>ioperm(arg,1,0)</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDENABIO</b></p>\n\n<p style=\"margin-left:22%;\">Enable I/O to video board.\nEquivalent to <i>ioperm(0x3b4, 0x3df-0x3b4+1, 1)</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDDISABIO</b></p>\n\n<p style=\"margin-left:22%;\">Disable I/O to video board.\nEquivalent to <i>ioperm(0x3b4, 0x3df-0x3b4+1, 0)</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDSETMODE</b></p>\n\n<p style=\"margin-left:22%;\">Set text/graphics mode.\n<i>argp</i> is an unsigned integer containing one of:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"69%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3245832.png\" alt=\"Image grohtml-3245832.png\"></p>\n\n<p style=\"margin-left:11%;\"><b>KDGETMODE</b></p>\n\n<p style=\"margin-left:22%;\">Get text/graphics mode.\n<i>argp</i> points to an <i>int</i> which is set to one of\nthe values shown above for <b>KDSETMODE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDMKTONE</b></p>\n\n<p style=\"margin-left:22%;\">Generate tone of specified\nlength. The lower 16 bits of the unsigned long integer in\n<i>argp</i> specify the period in clock cycles, and the\nupper 16 bits give the duration in msec. If the duration is\nzero, the sound is turned off. Control returns immediately.\nFor example, <i>argp</i> = (125&lt;&lt;16) + 0x637 would\nspecify the beep normally associated with a ctrl-G. (Thus\nsince Linux 0.99pl1; broken in Linux 2.1.49-50.)</p>\n\n<p style=\"margin-left:11%;\"><b>KIOCSOUND</b></p>\n\n<p style=\"margin-left:22%;\">Start or stop sound generation.\nThe lower 16 bits of <i>argp</i> specify the period in clock\ncycles (that is, <i>argp</i> = 1193180/frequency).\n<i>argp</i> = 0 turns sound off. In either case, control\nreturns immediately.</p>\n\n<p style=\"margin-left:11%;\"><b>GIO_CMAP</b></p>\n\n<p style=\"margin-left:22%;\">Get the current default color\nmap from kernel. <i>argp</i> points to a 48-byte array.\n(Since Linux 1.3.3.)</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_CMAP</b></p>\n\n<p style=\"margin-left:22%;\">Change the default text-mode\ncolor map. <i>argp</i> points to a 48-byte array which\ncontains, in order, the Red, Green, and Blue values for the\n16 available screen colors: 0 is off, and 255 is full\nintensity. The default colors are, in order: black, dark\nred, dark green, brown, dark blue, dark purple, dark cyan,\nlight grey, dark grey, bright red, bright green, yellow,\nbright blue, bright purple, bright cyan and white. (Since\nLinux 1.3.3.)</p>\n\n<p style=\"margin-left:11%;\"><b>GIO_FONT</b></p>\n\n<p style=\"margin-left:22%;\">Gets 256-character screen font\nin expanded form. <i>argp</i> points to an 8192-byte array.\nFails with error code <b>EINVAL</b> if the currently loaded\nfont is a 512-character font, or if the console is not in\ntext mode.</p>\n\n<p style=\"margin-left:11%;\"><b>GIO_FONTX</b></p>\n\n<p style=\"margin-left:22%;\">Gets screen font and associated\ninformation. <i>argp</i> points to a <i>struct\nconsolefontdesc</i> (see <b>PIO_FONTX</b>). On call, the\n<i>charcount</i> field should be set to the maximum number\nof characters that would fit in the buffer pointed to by\n<i>chardata</i>. On return, the <i>charcount</i> and\n<i>charheight</i> are filled with the respective data for\nthe currently loaded font, and the <i>chardata</i> array\ncontains the font data if the initial value of\n<i>charcount</i> indicated enough space was available;\notherwise the buffer is untouched and <i>errno</i> is set to\n<b>ENOMEM</b>. (Since Linux 1.3.1.)</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_FONT</b></p>\n\n<p style=\"margin-left:22%;\">Sets 256-character screen font.\nLoad font into the EGA/VGA character generator. <i>argp</i>\npoints to an 8192-byte map, with 32 bytes per character.\nOnly the first <i>N</i> of them are used for an 8x<i>N</i>\nfont (0 &lt; <i>N</i> &lt;= 32). This call also invalidates\nthe Unicode mapping.</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_FONTX</b></p>\n\n<p style=\"margin-left:22%;\">Sets screen font and associated\nrendering information. <i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nconsolefontdesc { <br>\nunsigned short charcount; /* characters in font <br>\n(256 or 512) */ <br>\nunsigned short charheight; /* scan lines per <br>\ncharacter (1-32) */ <br>\nchar *chardata; /* font data in <br>\nexpanded form */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If necessary,\nthe screen will be appropriately resized, and\n<b>SIGWINCH</b> sent to the appropriate processes. This call\nalso invalidates the Unicode mapping. (Since Linux\n1.3.1.)</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_FONTRESET</b></p>\n\n<p style=\"margin-left:22%;\">Resets the screen font, size\nand Unicode mapping to the bootup defaults. <i>argp</i> is\nunused, but should be set to NULL to ensure compatibility\nwith future versions of Linux. (Since Linux 1.3.28.)</p>\n\n<p style=\"margin-left:11%;\"><b>GIO_SCRNMAP</b></p>\n\n<p style=\"margin-left:22%;\">Get screen mapping from kernel.\n<i>argp</i> points to an area of size E_TABSZ, which is\nloaded with the font positions used to display each\ncharacter. This call is likely to return useless information\nif the currently loaded font is more than 256\ncharacters.</p>\n\n<p style=\"margin-left:11%;\"><b>GIO_UNISCRNMAP</b></p>\n\n<p style=\"margin-left:22%;\">Get full Unicode screen mapping\nfrom kernel. <i>argp</i> points to an area of size\n<i>E_TABSZ*sizeof(unsigned short)</i>, which is loaded with\nthe Unicodes each character represent. A special set of\nUnicodes, starting at U+F000, are used to represent\n&quot;direct to font&quot; mappings. (Since Linux\n1.3.1.)</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_SCRNMAP</b></p>\n\n<p style=\"margin-left:22%;\">Loads the &quot;user\ndefinable&quot; (fourth) table in the kernel which maps\nbytes into console screen symbols. <i>argp</i> points to an\narea of size E_TABSZ.</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_UNISCRNMAP</b></p>\n\n<p style=\"margin-left:22%;\">Loads the &quot;user\ndefinable&quot; (fourth) table in the kernel which maps\nbytes into Unicodes, which are then translated into screen\nsymbols according to the currently loaded Unicode-to-font\nmap. Special Unicodes starting at U+F000 can be used to map\ndirectly to the font symbols. (Since Linux 1.3.1.)</p>\n\n<p style=\"margin-left:11%;\"><b>GIO_UNIMAP</b></p>\n\n<p style=\"margin-left:22%;\">Get Unicode-to-font mapping\nfrom kernel. <i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nunimapdesc { <br>\nunsigned short entry_ct; <br>\nstruct unipair *entries; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">where\n<i>entries</i> points to an array of</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct unipair\n{ <br>\nunsigned short unicode; <br>\nunsigned short fontpos; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">(Since Linux\n1.1.92.)</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_UNIMAP</b></p>\n\n<p style=\"margin-left:22%;\">Put unicode-to-font mapping in\nkernel. <i>argp</i> points to a <i>struct unimapdesc</i>.\n(Since Linux 1.1.92)</p>\n\n<p style=\"margin-left:11%;\"><b>PIO_UNIMAPCLR</b></p>\n\n<p style=\"margin-left:22%;\">Clear table, possibly advise\nhash algorithm. <i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nunimapinit { <br>\nunsigned short advised_hashsize; /* 0 if no opinion */ <br>\nunsigned short advised_hashstep; /* 0 if no opinion */ <br>\nunsigned short advised_hashlevel; /* 0 if no opinion */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">(Since Linux\n1.1.92.)</p>\n\n<p style=\"margin-left:11%;\"><b>KDGKBMODE</b></p>\n\n<p style=\"margin-left:22%;\">Gets current keyboard mode.\n<i>argp</i> points to a <i>long</i> which is set to one of\nthese:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3245833.png\" alt=\"Image grohtml-3245833.png\"></p>\n\n<p style=\"margin-left:11%;\"><b>KDSKBMODE</b></p>\n\n<p style=\"margin-left:22%;\">Sets current keyboard mode.\n<i>argp</i> is a <i>long</i> equal to one of the values\nshown for <b>KDGKBMODE</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDGKBMETA</b></p>\n\n<p style=\"margin-left:22%;\">Gets meta key handling mode.\n<i>argp</i> points to a <i>long</i> which is set to one of\nthese:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3245834.png\" alt=\"Image grohtml-3245834.png\"></p>\n\n<p style=\"margin-left:11%;\"><b>KDSKBMETA</b></p>\n\n<p style=\"margin-left:22%;\">Sets meta key handling mode.\n<i>argp</i> is a <i>long</i> equal to one of the values\nshown above for <b>KDGKBMETA</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDGKBENT</b></p>\n\n<p style=\"margin-left:22%;\">Gets one entry in key\ntranslation table (keycode to action code). <i>argp</i>\npoints to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct kbentry\n{ <br>\nunsigned char kb_table; <br>\nunsigned char kb_index; <br>\nunsigned short kb_value; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">with the first\ntwo members filled in: <i>kb_table</i> selects the key table\n(0 &lt;= <i>kb_table</i> &lt; MAX_NR_KEYMAPS), and\n<i>kb_index</i> is the keycode (0 &lt;= <i>kb_index</i> &lt;\nNR_KEYS). <i>kb_value</i> is set to the corresponding action\ncode, or K_HOLE if there is no such key, or K_NOSUCHMAP if\n<i>kb_table</i> is invalid.</p>\n\n<p style=\"margin-left:11%;\"><b>KDSKBENT</b></p>\n\n<p style=\"margin-left:22%;\">Sets one entry in translation\ntable. <i>argp</i> points to a <i>struct kbentry</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDGKBSENT</b></p>\n\n<p style=\"margin-left:22%;\">Gets one function key string.\n<i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct kbsentry\n{ <br>\nunsigned char kb_func; <br>\nunsigned char kb_string[512]; <br>\n};</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>kb_string</i>\nis set to the (null-terminated) string corresponding to the\n<i>kb_func</i>th function key action code.</p>\n\n<p style=\"margin-left:11%;\"><b>KDSKBSENT</b></p>\n\n<p style=\"margin-left:22%;\">Sets one function key string\nentry. <i>argp</i> points to a <i>struct kbsentry</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>KDGKBDIACR</b></p>\n\n<p style=\"margin-left:22%;\">Read kernel accent table.\n<i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct kbdiacrs\n{ <br>\nunsigned int kb_cnt; <br>\nstruct kbdiacr kbdiacr[256]; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">where\n<i>kb_cnt</i> is the number of entries in the array, each of\nwhich is a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct kbdiacr\n{ <br>\nunsigned char diacr; <br>\nunsigned char base; <br>\nunsigned char result; <br>\n};</p>\n\n<p style=\"margin-left:11%;\"><b>KDGETKEYCODE</b></p>\n\n<p style=\"margin-left:22%;\">Read kernel keycode table entry\n(scan code to keycode). <i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nkbkeycode { <br>\nunsigned int scancode; <br>\nunsigned int keycode; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>keycode</i>\nis set to correspond to the given <i>scancode</i>. (89 &lt;=\n<i>scancode</i> &lt;= 255 only. For 1 &lt;= <i>scancode</i>\n&lt;= 88, <i>keycode</i>==<i>scancode</i>.) (Since Linux\n1.1.63.)</p>\n\n<p style=\"margin-left:11%;\"><b>KDSETKEYCODE</b></p>\n\n<p style=\"margin-left:22%;\">Write kernel keycode table\nentry. <i>argp</i> points to a <i>struct kbkeycode</i>.\n(Since Linux 1.1.63.)</p>\n\n<p style=\"margin-left:11%;\"><b>KDSIGACCEPT</b></p>\n\n<p style=\"margin-left:22%;\">The calling process indicates\nits willingness to accept the signal <i>argp</i> when it is\ngenerated by pressing an appropriate key combination. (1\n&lt;= <i>argp</i> &lt;= NSIG). (See <i>spawn_console</i>()\nin <i>linux/drivers/char/keyboard.c</i>.)</p>\n\n<p style=\"margin-left:11%;\"><b>VT_OPENQRY</b></p>\n\n<p style=\"margin-left:22%;\">Returns the first available\n(non-opened) console. <i>argp</i> points to an <i>int</i>\nwhich is set to the number of the vt (1 &lt;= <i>*argp</i>\n&lt;= MAX_NR_CONSOLES).</p>\n\n<p style=\"margin-left:11%;\"><b>VT_GETMODE</b></p>\n\n<p style=\"margin-left:22%;\">Get mode of active vt.\n<i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct vt_mode\n{ <br>\nchar mode; /* vt mode */ <br>\nchar waitv; /* if set, hang on writes if not active */ <br>\nshort relsig; /* signal to raise on release req */ <br>\nshort acqsig; /* signal to raise on acquisition */ <br>\nshort frsig; /* unused (set to 0) */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">which is set to\nthe mode of the active vt. <i>mode</i> is set to one of\nthese values:</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3245835.png\" alt=\"Image grohtml-3245835.png\"></p>\n\n<p style=\"margin-left:11%;\"><b>VT_SETMODE</b></p>\n\n<p style=\"margin-left:22%;\">Set mode of active vt.\n<i>argp</i> points to a <i>struct vt_mode</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>VT_GETSTATE</b></p>\n\n<p style=\"margin-left:22%;\">Get global vt state info.\n<i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct vt_stat\n{ <br>\nunsigned short v_active; /* active vt */ <br>\nunsigned short v_signal; /* signal to send */ <br>\nunsigned short v_state; /* vt bit mask */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For each vt in\nuse, the corresponding bit in the <i>v_state</i> member is\nset. (Kernels 1.0 through 1.1.92.)</p>\n\n<p style=\"margin-left:11%;\"><b>VT_RELDISP</b></p>\n\n<p style=\"margin-left:22%;\">Release a display.</p>\n\n<p style=\"margin-left:11%;\"><b>VT_ACTIVATE</b></p>\n\n<p style=\"margin-left:22%;\">Switch to vt <i>argp</i> (1\n&lt;= <i>argp</i> &lt;= MAX_NR_CONSOLES).</p>\n\n<p style=\"margin-left:11%;\"><b>VT_WAITACTIVE</b></p>\n\n<p style=\"margin-left:22%;\">Wait until vt <i>argp</i> has\nbeen activated.</p>\n\n<p style=\"margin-left:11%;\"><b>VT_DISALLOCATE</b></p>\n\n<p style=\"margin-left:22%;\">Deallocate the memory\nassociated with vt <i>argp</i>. (Since Linux 1.1.54.)</p>\n\n<p style=\"margin-left:11%;\"><b>VT_RESIZE</b></p>\n\n<p style=\"margin-left:22%;\">Set the kernel&rsquo;s idea of\nscreensize. <i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct vt_sizes\n{ <br>\nunsigned short v_rows; /* # rows */ <br>\nunsigned short v_cols; /* # columns */ <br>\nunsigned short v_scrollsize; /* no longer used */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that this\ndoes not change the videomode. See <b>resizecons</b>(8).\n(Since Linux 1.1.54.)</p>\n\n<p style=\"margin-left:11%;\"><b>VT_RESIZEX</b></p>\n\n<p style=\"margin-left:22%;\">Set the kernel&rsquo;s idea of\nvarious screen parameters. <i>argp</i> points to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nvt_consize { <br>\nunsigned short v_rows; /* number of rows */ <br>\nunsigned short v_cols; /* number of columns */ <br>\nunsigned short v_vlin; /* number of pixel rows <br>\non screen */ <br>\nunsigned short v_clin; /* number of pixel rows <br>\nper character */ <br>\nunsigned short v_vcol; /* number of pixel columns <br>\non screen */ <br>\nunsigned short v_ccol; /* number of pixel columns <br>\nper character */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Any parameter\nmay be set to zero, indicating &quot;no change&quot;, but if\nmultiple parameters are set, they must be self-consistent.\nNote that this does not change the videomode. See\n<b>resizecons</b>(8). (Since Linux 1.3.3.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The action of\nthe following ioctls depends on the first byte in the struct\npointed to by <i>argp</i>, referred to here as the\n<i>subcode</i>. These are legal only for the superuser or\nthe owner of the current terminal. <b><br>\nTIOCLINUX, subcode=0</b></p>\n\n<p style=\"margin-left:22%;\">Dump the screen. Disappeared in\nLinux 1.1.92. (With kernel 1.1.92 or later, read from\n<i>/dev/vcsN</i> or <i>/dev/vcsaN</i> instead.)</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=1</b></p>\n\n<p style=\"margin-left:22%;\">Get task information.\nDisappeared in Linux 1.1.92.</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=2</b></p>\n\n<p style=\"margin-left:22%;\">Set selection. <i>argp</i>\npoints to a</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct { <br>\nchar subcode; <br>\nshort xs, ys, xe, ye; <br>\nshort sel_mode; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>xs</i> and\n<i>ys</i> are the starting column and row. <i>xe</i> and\n<i>ye</i> are the ending column and row. (Upper left corner\nis row=column=1.) <i>sel_mode</i> is 0 for\ncharacter-by-character selection, 1 for word-by-word\nselection, or 2 for line-by-line selection. The indicated\nscreen characters are highlighted and saved in the static\narray sel_buffer in <i>devices/char/console.c</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=3</b></p>\n\n<p style=\"margin-left:22%;\">Paste selection. The characters\nin the selection buffer are written to <i>fd</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=4</b></p>\n\n<p style=\"margin-left:22%;\">Unblank the screen.</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=5</b></p>\n\n<p style=\"margin-left:22%;\">Sets contents of a 256-bit look\nup table defining characters in a &quot;word&quot;, for\nword-by-word selection. (Since Linux 1.1.32.)</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=6</b></p>\n\n<p style=\"margin-left:22%;\"><i>argp</i> points to a char\nwhich is set to the value of the kernel variable\n<i>shift_state</i>. (Since Linux 1.1.32.)</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=7</b></p>\n\n<p style=\"margin-left:22%;\"><i>argp</i> points to a char\nwhich is set to the value of the kernel variable\n<i>report_mouse</i>. (Since Linux 1.1.33.)</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=8</b></p>\n\n<p style=\"margin-left:22%;\">Dump screen width and height,\ncursor position, and all the character-attribute pairs.\n(Kernels 1.1.67 through 1.1.91 only. With kernel 1.1.92 or\nlater, read from <i>/dev/vcsa*</i> instead.)</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX, subcode=9</b></p>\n\n<p style=\"margin-left:22%;\">Restore screen width and\nheight, cursor position, and all the character-attribute\npairs. (Kernels 1.1.67 through 1.1.91 only. With kernel\n1.1.92 or later, write to <i>/dev/vcsa*</i> instead.)</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCLINUX,\nsubcode=10</b></p>\n\n<p style=\"margin-left:22%;\">Handles the Power Saving\nfeature of the new generation of monitors. VESA screen\nblanking mode is set to <i>argp[1]</i>, which governs what\nscreen blanking does:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>0:</p></td>\n<td width=\"1%\"></td>\n<td width=\"74%\">\n\n\n<p>Screen blanking is disabled.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>1:</p></td>\n<td width=\"1%\"></td>\n<td width=\"74%\">\n\n\n<p>The current video adapter register settings are saved,\nthen the controller is programmed to turn off the vertical\nsynchronization pulses. This puts the monitor into\n&quot;standby&quot; mode. If your monitor has an Off_Mode\ntimer, then it will eventually power down by itself.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"3%\">\n\n\n<p>2:</p></td>\n<td width=\"1%\"></td>\n<td width=\"74%\">\n\n\n<p>The current settings are saved, then both the vertical\nand horizontal synchronization pulses are turned off. This\nputs the monitor into &quot;off&quot; mode. If your monitor\nhas no Off_Mode timer, or if you want your monitor to power\ndown immediately when the blank_timer times out, then you\nchoose this option. (<i>Caution:</i> Powering down\nfrequently will damage the monitor.) (Since Linux\n1.1.76.)</p> </td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success, 0\nis returned. On error, -1 is returned, and <i>errno</i> is\nset.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>errno</i>\nmay take on these values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The file descriptor is\ninvalid.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file descriptor or <i>argp</i> is invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOTTY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The file descriptor is not associated with a character\nspecial device, or the specified request does not apply to\nit.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient permission.</p></td></tr>\n</table>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Warning</b>:\nDo not regard this man page as documentation of the Linux\nconsole ioctls. This is provided for the curious only, as an\nalternative to reading the source. Ioctl&rsquo;s are\nundocumented Linux internals, liable to be changed without\nwarning. (And indeed, this page more or less describes the\nsituation as of kernel version 1.1.94; there are many minor\nand not-so-minor differences with earlier versions.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Very often,\nioctls are introduced for communication between the kernel\nand one particular well-known program (fdisk, hdparm,\nsetserial, tunelp, loadkeys, selection, setfont, etc.), and\ntheir behavior will be changed when required by this\nparticular program.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Programs using\nthese ioctls will not be portable to other versions of UNIX,\nwill not work on older versions of Linux, and will not work\non future versions of Linux.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use POSIX\nfunctions.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/dumpkeys\">dumpkeys(1)</a>,\n<a href=\"https://man.page/1/kbd_mode\">kbd_mode(1)</a>, <a href=\"https://man.page/1/loadkeys\">loadkeys(1)</a>, <a href=\"https://man.page/1/mknod\">mknod(1)</a>,\n<a href=\"https://man.page/1/setleds\">setleds(1)</a>, <a href=\"https://man.page/1/setmetamode\">setmetamode(1)</a>, <a href=\"https://man.page/2/execve\">execve(2)</a>,\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>, <a href=\"https://man.page/2/ioctl_tty\">ioctl_tty(2)</a>, <a href=\"https://man.page/2/ioperm\">ioperm(2)</a>,\n<a href=\"https://man.page/3/termios\">termios(3)</a>, <a href=\"https://man.page/4/console_codes\">console_codes(4)</a>, <a href=\"https://man.page/4/mt\">mt(4)</a>,\n<a href=\"https://man.page/4/sd\">sd(4)</a>, <a href=\"https://man.page/4/tty\">tty(4)</a>, <a href=\"https://man.page/4/ttyS\">ttyS(4)</a>, <a href=\"https://man.page/4/vcs\">vcs(4)</a>,\n<a href=\"https://man.page/4/vcsa\">vcsa(4)</a>, <a href=\"https://man.page/7/charsets\">charsets(7)</a>, <b>mapscrn</b>(8),\n<b>resizecons</b>(8), <b>setfont</b>(8)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/usr/include/linux/kd.h</i>,\n<i>/usr/include/linux/vt.h</i></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}