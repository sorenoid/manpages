{"name":"fork","description":"fork - create a child process","body":"\n\n<h1 align=\"center\">FORK</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fork - create a\nchild process</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pid_t\nfork(void);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fork</b>()\ncreates a new process by duplicating the calling process.\nThe new process is referred to as the <i>child</i> process.\nThe calling process is referred to as the <i>parent</i>\nprocess.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The child\nprocess and the parent process run in separate memory\nspaces. At the time of <b>fork</b>() both memory spaces have\nthe same content. Memory writes, file mappings\n(<a href=\"https://man.page/2/mmap\">mmap(2)</a>), and unmappings (<a href=\"https://man.page/2/munmap\">munmap(2)</a>)\nperformed by one of the processes do not affect the\nother.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The child\nprocess is an exact duplicate of the parent process except\nfor the following points:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child has its own unique process ID, and this PID\ndoes not match the ID of any existing process group\n(<a href=\"https://man.page/2/setpgid\">setpgid(2)</a>) or session.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child&rsquo;s parent process ID is the same as the\nparent&rsquo;s process ID.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child does not inherit its parent&rsquo;s memory\nlocks (<a href=\"https://man.page/2/mlock\">mlock(2)</a>, <a href=\"https://man.page/2/mlockall\">mlockall(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Process resource utilizations (<a href=\"https://man.page/2/getrusage\">getrusage(2)</a>) and\nCPU time counters (<a href=\"https://man.page/2/times\">times(2)</a>) are reset to zero in the\nchild.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child&rsquo;s set of pending signals is initially\nempty (<a href=\"https://man.page/2/sigpending\">sigpending(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child does not inherit semaphore adjustments from\nits parent (<a href=\"https://man.page/2/semop\">semop(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child does not inherit process-associated record\nlocks from its parent (<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>). (On the other hand,\nit does inherit <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> open file description locks\nand <a href=\"https://man.page/2/flock\">flock(2)</a> locks from its parent.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child does not inherit timers from its parent\n(<a href=\"https://man.page/2/setitimer\">setitimer(2)</a>, <a href=\"https://man.page/2/alarm\">alarm(2)</a>,\n<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child does not inherit outstanding asynchronous I/O\noperations from its parent (<a href=\"https://man.page/3/aio_read\">aio_read(3)</a>,\n<a href=\"https://man.page/3/aio_write\">aio_write(3)</a>), nor does it inherit any asynchronous\nI/O contexts from its parent (see <a href=\"https://man.page/2/io_setup\">io_setup(2)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The process\nattributes in the preceding list are all specified in\nPOSIX.1. The parent and child also differ with respect to\nthe following Linux-specific process attributes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The child does not inherit\ndirectory change notifications (dnotify) from its parent\n(see the description of <b>F_NOTIFY</b> in\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_PDEATHSIG</b> setting is\nreset so that the child does not receive a signal when its\nparent terminates.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The default timer slack value is set to the\nparent&rsquo;s current timer slack value. See the\ndescription of <b>PR_SET_TIMERSLACK</b> in\n<a href=\"https://man.page/2/prctl\">prctl(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Memory mappings that have been marked with the\n<a href=\"https://man.page/2/madvise\">madvise(2)</a> <b>MADV_DONTFORK</b> flag are not\ninherited across a <b>fork</b>().</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Memory in address ranges that have been marked with the\n<a href=\"https://man.page/2/madvise\">madvise(2)</a> <b>MADV_WIPEONFORK</b> flag is zeroed in\nthe child after a <b>fork</b>(). (The <b>MADV_WIPEONFORK</b>\nsetting remains in place for those address ranges in the\nchild.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The termination signal of the child is always\n<b>SIGCHLD</b> (see <a href=\"https://man.page/2/clone\">clone(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The port access permission bits set by <a href=\"https://man.page/2/ioperm\">ioperm(2)</a>\nare not inherited by the child; the child must turn on any\nbits that it requires using <a href=\"https://man.page/2/ioperm\">ioperm(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing further points:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The child process is created\nwith a single thread&mdash;the one that called\n<b>fork</b>(). The entire virtual address space of the\nparent is replicated in the child, including the states of\nmutexes, condition variables, and other pthreads objects;\nthe use of <a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a> may be helpful for\ndealing with problems that this can cause.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>After a <b>fork</b>() in a multithreaded program, the\nchild can safely call only async-signal-safe functions (see\n<a href=\"https://man.page/7/signal-safety\">signal-safety(7)</a>) until such time as it calls\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child inherits copies of the parent&rsquo;s set of\nopen file descriptors. Each file descriptor in the child\nrefers to the same open file description (see\n<a href=\"https://man.page/2/open\">open(2)</a>) as the corresponding file descriptor in the\nparent. This means that the two file descriptors share open\nfile status flags, file offset, and signal-driven I/O\nattributes (see the description of <b>F_SETOWN</b> and\n<b>F_SETSIG</b> in <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child inherits copies of the parent&rsquo;s set of\nopen message queue descriptors (see <a href=\"https://man.page/7/mq_overview\">mq_overview(7)</a>).\nEach file descriptor in the child refers to the same open\nmessage queue description as the corresponding file\ndescriptor in the parent. This means that the two file\ndescriptors share the same flags (<i>mq_flags</i>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The child inherits copies of the parent&rsquo;s set of\nopen directory streams (see <a href=\"https://man.page/3/opendir\">opendir(3)</a>). POSIX.1 says\nthat the corresponding directory streams in the parent and\nchild <i>may</i> share the directory stream positioning; on\nLinux/glibc they do not.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success, the\nPID of the child process is returned in the parent, and 0 is\nreturned in the child. On failure, -1 is returned in the\nparent, no child process is created, and <i>errno</i> is set\nappropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">A system-imposed limit on the\nnumber of threads was encountered. There are a number of\nlimits that may trigger this error:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">*</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\"></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">the <b>RLIMIT_NPROC</b> soft\nresource limit (set via <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>), which limits\nthe number of processes and threads for a real user ID, was\nreached;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the kernel&rsquo;s system-wide limit on the number of\nprocesses and threads, <i>/proc/sys/kernel/threads-max</i>,\nwas reached (see <a href=\"https://man.page/5/proc\">proc(5)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the maximum number of PIDs,\n<i>/proc/sys/kernel/pid_max</i>, was reached (see\n<a href=\"https://man.page/5/proc\">proc(5)</a>); or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the PID limit (<i>pids.max</i>) imposed by the cgroup\n&quot;process number&quot; (PIDs) controller was\nreached.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller is\noperating under the <b>SCHED_DEADLINE</b> scheduling policy\nand does not have the reset-on-fork flag set. See\n<a href=\"https://man.page/7/sched\">sched(7)</a>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><b>fork</b>() failed to allocate\nthe necessary kernel structures because memory is tight.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to create a child process in a PID\nnamespace whose &quot;init&quot; process has terminated. See\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>fork</b>() is not supported on this platform (for\nexample, hardware without a Memory-Management Unit).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ERESTARTNOINTR</b> (since\nLinux 2.6.17)</p>\n\n<p style=\"margin-left:22%;\">System call was interrupted by\na signal and will be restarted. (This can be seen only\nduring a trace.)</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001,\nPOSIX.1-2008, SVr4, 4.3BSD.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under Linux,\n<b>fork</b>() is implemented using copy-on-write pages, so\nthe only penalty that it incurs is the time and memory\nrequired to duplicate the parent&rsquo;s page tables, and to\ncreate a unique task structure for the child.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nSince version 2.3.3, rather than invoking the kernel&rsquo;s\n<b>fork</b>() system call, the glibc <b>fork</b>() wrapper\nthat is provided as part of the NPTL threading\nimplementation invokes <a href=\"https://man.page/2/clone\">clone(2)</a> with flags that\nprovide the same effect as the traditional system call. (A\ncall to <b>fork</b>() is equivalent to a call to\n<a href=\"https://man.page/2/clone\">clone(2)</a> specifying <i>flags</i> as just\n<b>SIGCHLD</b>.) The glibc wrapper invokes any fork handlers\nthat have been established using\n<a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/pipe\">pipe(2)</a> and <a href=\"https://man.page/2/wait\">wait(2)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/execve\">execve(2)</a>, <a href=\"https://man.page/2/exit\">exit(2)</a>, <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>,\n<a href=\"https://man.page/2/unshare\">unshare(2)</a>, <a href=\"https://man.page/2/vfork\">vfork(2)</a>, <a href=\"https://man.page/2/wait\">wait(2)</a>,\n<a href=\"https://man.page/3/daemon\">daemon(3)</a>, <a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}