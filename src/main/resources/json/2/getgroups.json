{"name":"getgroups","description":"getgroups, setgroups - get/set list of supplementary group IDs","body":"\n\n<h1 align=\"center\">GETGROUPS</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getgroups,\nsetgroups - get/set list of supplementary group IDs</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ngetgroups(int</b> <i>size</i><b>, gid_t</b>\n<i>list</i><b>[]);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;grp.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nsetgroups(size_t</b> <i>size</i><b>, const gid_t\n*</b><i>list</i><b>);</b></p>\n\n<p style=\"margin-left:5%; margin-top: 1em\">Feature Test\nMacro Requirements for glibc (see\n<a href=\"https://man.page/7/feature_test_macros\">feature_test_macros(7)</a>):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setgroups</b>():\n<br>\nSince glibc 2.19: <br>\n_DEFAULT_SOURCE <br>\nGlibc 2.19 and earlier: <br>\n_BSD_SOURCE</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getgroups</b>()\nreturns the supplementary group IDs of the calling process\nin <i>list</i>. The argument <i>size</i> should be set to\nthe maximum number of items that can be stored in the buffer\npointed to by <i>list</i>. If the calling process is a\nmember of more than <i>size</i> supplementary groups, then\nan error results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is\nunspecified whether the effective group ID of the calling\nprocess is included in the returned list. (Thus, an\napplication should also call <a href=\"https://man.page/2/getegid\">getegid(2)</a> and add or\nremove the resulting value.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>size</i>\nis zero, <i>list</i> is not modified, but the total number\nof supplementary group IDs for the process is returned. This\nallows the caller to determine the size of a dynamically\nallocated <i>list</i> to be used in a further call to\n<b>getgroups</b>().</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setgroups</b>()\nsets the supplementary group IDs for the calling process.\nAppropriate privileges are required (see the description of\nthe <b>EPERM</b> error, below). The <i>size</i> argument\nspecifies the number of supplementary group IDs in the\nbuffer pointed to by <i>list</i>. A process can drop all of\nits supplementary groups with the call:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">setgroups(0,\nNULL);</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>getgroups</b>() returns the number of supplementary group\nIDs. On error, -1 is returned, and <i>errno</i> is set\nappropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>setgroups</b>() returns 0. On error, -1 is returned, and\n<i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"43%\">\n\n\n<p style=\"margin-top: 1em\"><i>list</i> has an invalid\naddress.</p> </td>\n<td width=\"35%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getgroups</b>()\ncan additionally fail with the following error:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>size</i> is less than the\nnumber of supplementary group IDs, but is not zero.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setgroups</b>()\ncan additionally fail with the following errors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>size</i> is greater than\n<b>NGROUPS_MAX</b> (32 before Linux 2.6.4; 65536 since Linux\n2.6.4).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of memory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The calling process has insufficient privilege (the\ncaller does not have the <b>CAP_SETGID</b> capability in the\nuser namespace in which it resides).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EPERM</b> (since Linux\n3.19)</p>\n\n<p style=\"margin-left:22%;\">The use of <b>setgroups</b>()\nis denied in this user namespace. See the description of\n<i>/proc/[pid]/setgroups</i> in\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getgroups</b>():\nSVr4, 4.3BSD, POSIX.1-2001, POSIX.1-2008.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>setgroups</b>():\nSVr4, 4.3BSD. Since <b>setgroups</b>() requires privilege,\nit is not covered by POSIX.1.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A process can\nhave up to <b>NGROUPS_MAX</b> supplementary group IDs in\naddition to the effective group ID. The constant\n<b>NGROUPS_MAX</b> is defined in <i>&lt;limits.h&gt;</i>.\nThe set of supplementary group IDs is inherited from the\nparent process, and preserved across an\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The maximum\nnumber of supplementary group IDs can be found at run time\nusing <a href=\"https://man.page/3/sysconf\">sysconf(3)</a>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">long\nngroups_max; <br>\nngroups_max = sysconf(_SC_NGROUPS_MAX);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The maximum\nreturn value of <b>getgroups</b>() cannot be larger than one\nmore than this value. Since Linux 2.6.4, the maximum number\nof supplementary group IDs is also exposed via the\nLinux-specific read-only file,\n<i>/proc/sys/kernel/ngroups_max</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The original\nLinux <b>getgroups</b>() system call supported only 16-bit\ngroup IDs. Subsequently, Linux 2.4 added\n<b>getgroups32</b>(), supporting 32-bit IDs. The glibc\n<b>getgroups</b>() wrapper function transparently deals with\nthe variation across kernel versions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>C\nlibrary/kernel differences</b> <br>\nAt the kernel level, user IDs and group IDs are a per-thread\nattribute. However, POSIX requires that all threads in a\nprocess share the same credentials. The NPTL threading\nimplementation handles the POSIX requirements by providing\nwrapper functions for the various system calls that change\nprocess UIDs and GIDs. These wrapper functions (including\nthe one for <b>setgroups</b>()) employ a signal-based\ntechnique to ensure that when one thread changes\ncredentials, all of the other threads in the process also\nchange their credentials. For details, see\n<a href=\"https://man.page/7/nptl\">nptl(7)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getgid\">getgid(2)</a>,\n<a href=\"https://man.page/2/setgid\">setgid(2)</a>, <a href=\"https://man.page/3/getgrouplist\">getgrouplist(3)</a>,\n<a href=\"https://man.page/3/group_member\">group_member(3)</a>, <a href=\"https://man.page/3/initgroups\">initgroups(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}