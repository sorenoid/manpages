{"name":"capget","description":"capget, capset - set/get capabilities of thread(s)","body":"\n\n<h1 align=\"center\">CAPGET</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">capget, capset\n- set/get capabilities of thread(s)</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/capability.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ncapget(cap_user_header_t</b> <i>hdrp</i><b>,\ncap_user_data_t</b> <i>datap</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ncapset(cap_user_header_t</b> <i>hdrp</i><b>, const\ncap_user_data_t</b> <i>datap</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These two\nsystem calls are the raw kernel interface for getting and\nsetting thread capabilities. Not only are these system calls\nspecific to Linux, but the kernel API is likely to change\nand use of these system calls (in particular the format of\nthe <i>cap_user_*_t</i> types) is subject to extension with\neach kernel revision, but old programs will keep\nworking.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The portable\ninterfaces are <a href=\"https://man.page/3/cap_set_proc\">cap_set_proc(3)</a> and\n<a href=\"https://man.page/3/cap_get_proc\">cap_get_proc(3)</a>; if possible, you should use those\ninterfaces in applications.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Current\ndetails</b> <br>\nNow that you have been warned, some current kernel details.\nThe structures are defined as follows.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#define\n_LINUX_CAPABILITY_VERSION_1 0x19980330 <br>\n#define _LINUX_CAPABILITY_U32S_1 1</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* V2 added in\nLinux 2.6.25; deprecated */ <br>\n#define _LINUX_CAPABILITY_VERSION_2 0x20071026 <br>\n#define _LINUX_CAPABILITY_U32S_2 2</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* V3 added in\nLinux 2.6.26 */ <br>\n#define _LINUX_CAPABILITY_VERSION_3 0x20080522 <br>\n#define _LINUX_CAPABILITY_U32S_3 2</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n__user_cap_header_struct { <br>\n__u32 version; <br>\nint pid; <br>\n} *cap_user_header_t;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">typedef struct\n__user_cap_data_struct { <br>\n__u32 effective; <br>\n__u32 permitted; <br>\n__u32 inheritable; <br>\n} *cap_user_data_t;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>effective</i>, <i>permitted</i>, and <i>inheritable</i>\nfields are bit masks of the capabilities defined in\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>. Note that the <b>CAP_*</b> values\nare bit indexes and need to be bit-shifted before ORing into\nthe bit fields. To define the structures for passing to the\nsystem call, you have to use the <i>struct\n__user_cap_header_struct</i> and <i>struct\n__user_cap_data_struct</i> names because the typedefs are\nonly pointers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Kernels prior\nto 2.6.25 prefer 32-bit capabilities with version\n<b>_LINUX_CAPABILITY_VERSION_1</b>. Linux 2.6.25 added\n64-bit capability sets, with version\n<b>_LINUX_CAPABILITY_VERSION_2</b>. There was, however, an\nAPI glitch, and Linux 2.6.26 added\n<b>_LINUX_CAPABILITY_VERSION_3</b> to fix the problem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\n64-bit capabilities use <i>datap[0]</i> and <i>datap[1]</i>,\nwhereas 32-bit capabilities use only <i>datap[0]</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On kernels that\nsupport file capabilities (VFS capabilities support), these\nsystem calls behave slightly differently. This support was\nadded as an option in Linux 2.6.24, and became fixed\n(nonoptional) in Linux 2.6.33.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\n<b>capget</b>() calls, one can probe the capabilities of any\nprocess by specifying its process ID with the\n<i>hdrp-&gt;pid</i> field value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For details on\nthe data, see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>With VFS\ncapabilities support</b> <br>\nVFS capabilities employ a file extended attribute (see\n<a href=\"https://man.page/7/xattr\">xattr(7)</a>) to allow capabilities to be attached to\nexecutables. This privilege model obsoletes kernel support\nfor one process asynchronously setting the capabilities of\nanother. That is, on kernels that have VFS capabilities\nsupport, when calling <b>capset</b>(), the only permitted\nvalues for <i>hdrp-&gt;pid</i> are 0 or, equivalently, the\nvalue returned by <a href=\"https://man.page/2/gettid\">gettid(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Without VFS\ncapabilities support</b> <br>\nOn older kernels that do not provide VFS capabilities\nsupport <b>capset</b>() can, if the caller has the\n<b>CAP_SETPCAP</b> capability, be used to change not only\nthe caller&rsquo;s own capabilities, but also the\ncapabilities of other threads. The call operates on the\ncapabilities of the thread specified by the <i>pid</i> field\nof <i>hdrp</i> when that is nonzero, or on the capabilities\nof the calling thread if <i>pid</i> is 0. If <i>pid</i>\nrefers to a single-threaded process, then <i>pid</i> can be\nspecified as a traditional process ID; operating on a thread\nof a multithreaded process requires a thread ID of the type\nreturned by <a href=\"https://man.page/2/gettid\">gettid(2)</a>. For <b>capset</b>(),\n<i>pid</i> can also be: -1, meaning perform the change on\nall threads except the caller and <a href=\"https://man.page/1/init\">init(1)</a>; or a value\nless than -1, in which case the change is applied to all\nmembers of the process group whose ID is -<i>pid</i>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\nzero is returned. On error, -1 is returned, and <i>errno</i>\nis set appropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The calls fail\nwith the error <b>EINVAL</b>, and set the <i>version</i>\nfield of <i>hdrp</i> to the kernel preferred value of\n<b>_LINUX_CAPABILITY_VERSION_?</b> when an unsupported\n<i>version</i> value is specified. In this way, one can\nprobe what the current preferred capability revision is.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Bad memory address. <i>hdrp</i>\nmust not be NULL. <i>datap</i> may be NULL only when the\nuser is trying to determine the preferred capability version\nformat supported by the kernel.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>One of the arguments was invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to add a capability to the permitted\nset, or to set a capability in the effective set that is not\nin the permitted set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to add a capability to the\ninheritable set, and either:</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">*</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\"></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">that capability was not in the\ncaller&rsquo;s bounding set; or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the capability was not in the caller&rsquo;s permitted\nset and the caller lacked the <b>CAP_SETPCAP</b> capability\nin its effective set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"12%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The caller\nattempted to use <b>capset</b>() to modify the capabilities\nof a thread other than itself, but lacked sufficient\nprivilege. For kernels supporting VFS capabilities, this is\nnever permitted. For kernels lacking VFS support, the\n<b>CAP_SETPCAP</b> capability is required. (A bug in kernels\nbefore 2.6.11 meant that this error could also occur if a\nthread without this capability tried to change its own\ncapabilities by specifying the <i>pid</i> field as a nonzero\nvalue (i.e., the value returned by <a href=\"https://man.page/2/getpid\">getpid(2)</a>) instead\nof 0.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><b>ESRCH</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\">No such thread.</p></td>\n<td width=\"55%\">\n</td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls are Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The portable\ninterface to the capability querying and setting functions\nis provided by the <i>libcap</i> library and is available\nhere: <br>\n\n<a href=\"http://git.kernel.org/cgit/linux/kernel/git/morgan/libcap.git\">http://git.kernel.org/cgit/linux/kernel/git/morgan/libcap.git</a></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/gettid\">gettid(2)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}