{"name":"ioctl_userfaultfd","description":"ioctl_userfaultfd - create a file descriptor for handling page faults in user space","body":"\n\n<h1 align=\"center\">IOCTL_USERFAULTFD</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ioctl_userfaultfd\n- create a file descriptor for handling page faults in user\nspace</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/ioctl.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nioctl(int</b> <i>fd</i><b>, int</b> <i>cmd</i><b>,\n...);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations can be performed on a userfaultfd\nobject (created by a call to <a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a>) using\ncalls of the form:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ioctl(fd, cmd,\nargp);</p>\n\n<p style=\"margin-left:11%;\">In the above, <i>fd</i> is a\nfile descriptor referring to a userfaultfd object,\n<i>cmd</i> is one of the commands listed below, and\n<i>argp</i> is a pointer to a data structure that is\nspecific to <i>cmd</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The various\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations are described below. The\n<b>UFFDIO_API</b>, <b>UFFDIO_REGISTER</b>, and\n<b>UFFDIO_UNREGISTER</b> operations are used to\n<i>configure</i> userfaultfd behavior. These operations\nallow the caller to choose what features will be enabled and\nwhat kinds of events will be delivered to the application.\nThe remaining operations are <i>range</i> operations. These\noperations enable the calling application to resolve\npage-fault events.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UFFDIO_API</b>\n<br>\n(Since Linux 4.3.) Enable operation of the userfaultfd and\nperform API handshake.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>argp</i>\nargument is a pointer to a <i>uffdio_api</i> structure,\ndefined as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nuffdio_api { <br>\n__u64 api; /* Requested API version (input) */ <br>\n__u64 features; /* Requested features (input/output) */ <br>\n__u64 ioctls; /* Available ioctl() operations (output) */\n<br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>api</i>\nfield denotes the API version requested by the\napplication.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nverifies that it can support the requested API version, and\nsets the <i>features</i> and <i>ioctls</i> fields to bit\nmasks representing all the available features and the\ngeneric <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For Linux\nkernel versions before 4.11, the <i>features</i> field must\nbe initialized to zero before the call to <b>UFFDIO_API</b>,\nand zero (i.e., no feature bits) is placed in the\n<i>features</i> field by the kernel upon return from\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting from\nLinux 4.11, the <i>features</i> field can be used to ask\nwhether particular features are supported and explicitly\nenable userfaultfd features that are disabled by default.\nThe kernel always reports all the available features in the\n<i>features</i> field.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To enable\nuserfaultfd features the application should set a bit\ncorresponding to each feature it wants to enable in the\n<i>features</i> field. If the kernel supports all the\nrequested features it will enable them. Otherwise it will\nzero out the returned <i>uffdio_api</i> structure and return\n<b>EINVAL</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfeature bits may be set: <b><br>\nUFFD_FEATURE_EVENT_FORK</b> (since Linux 4.11)</p>\n\n<p style=\"margin-left:22%;\">When this feature is enabled,\nthe userfaultfd objects associated with a parent process are\nduplicated into the child process during <a href=\"https://man.page/2/fork\">fork(2)</a> and\na <b>UFFD_EVENT_FORK</b> event is delivered to the\nuserfaultfd monitor</p>\n\n\n<p style=\"margin-left:11%;\"><b>UFFD_FEATURE_EVENT_REMAP</b>\n(since Linux 4.11)</p>\n\n<p style=\"margin-left:22%;\">If this feature is enabled,\nwhen the faulting process invokes <a href=\"https://man.page/2/mremap\">mremap(2)</a>, the\nuserfaultfd monitor will receive an event of type\n<b>UFFD_EVENT_REMAP</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>UFFD_FEATURE_EVENT_REMOVE</b>\n(since Linux 4.11)</p>\n\n<p style=\"margin-left:22%;\">If this feature is enabled,\nwhen the faulting process calls <a href=\"https://man.page/2/madvise\">madvise(2)</a> with the\n<b>MADV_DONTNEED</b> or <b>MADV_REMOVE</b> advice value to\nfree a virtual memory area the userfaultfd monitor will\nreceive an event of type <b>UFFD_EVENT_REMOVE</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>UFFD_FEATURE_EVENT_UNMAP</b>\n(since Linux 4.11)</p>\n\n<p style=\"margin-left:22%;\">If this feature is enabled,\nwhen the faulting process unmaps virtual memory either\nexplicitly with <a href=\"https://man.page/2/munmap\">munmap(2)</a>, or implicitly during\neither <a href=\"https://man.page/2/mmap\">mmap(2)</a> or <a href=\"https://man.page/2/mremap\">mremap(2)</a>. the userfaultfd\nmonitor will receive an event of type\n<b>UFFD_EVENT_UNMAP</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>UFFD_FEATURE_MISSING_HUGETLBFS</b>\n(since Linux 4.11)</p>\n\n<p style=\"margin-left:22%;\">If this feature bit is set, the\nkernel supports registering userfaultfd ranges on hugetlbfs\nvirtual memory areas</p>\n\n\n<p style=\"margin-left:11%;\"><b>UFFD_FEATURE_MISSING_SHMEM</b>\n(since Linux 4.11)</p>\n\n<p style=\"margin-left:22%;\">If this feature bit is set, the\nkernel supports registering userfaultfd ranges on shared\nmemory areas. This includes all kernel shared memory APIs:\nSystem V shared memory, <a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a>, shared mappings of\n<i>/dev/zero</i>, <a href=\"https://man.page/2/mmap\">mmap(2)</a> with the <b>MAP_SHARED</b>\nflag set, <a href=\"https://man.page/2/memfd_create\">memfd_create(2)</a>, and so on.</p>\n\n<p style=\"margin-left:11%;\"><b>UFFD_FEATURE_SIGBUS</b>\n(since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">If this feature bit is set, no\npage-fault events (<b>UFFD_EVENT_PAGEFAULT</b>) will be\ndelivered. Instead, a <b>SIGBUS</b> signal will be sent to\nthe faulting process. Applications using this feature will\nnot require the use of a userfaultfd monitor for processing\nmemory accesses to the regions registered with\nuserfaultfd.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The returned\n<i>ioctls</i> field can contain the following bits: <b><br>\n1 &lt;&lt; _UFFDIO_API</b></p>\n\n<p style=\"margin-left:22%;\">The <b>UFFDIO_API</b> operation\nis supported.</p>\n\n<p style=\"margin-left:11%;\"><b>1 &lt;&lt;\n_UFFDIO_REGISTER</b></p>\n\n<p style=\"margin-left:22%;\">The <b>UFFDIO_REGISTER</b>\noperation is supported.</p>\n\n<p style=\"margin-left:11%;\"><b>1 &lt;&lt;\n_UFFDIO_UNREGISTER</b></p>\n\n<p style=\"margin-left:22%;\">The <b>UFFDIO_UNREGISTER</b>\noperation is supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operation returns 0 on success. On error, -1\nis returned and <i>errno</i> is set to indicate the cause of\nthe error. Possible errors include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>argp</i> refers to an address that is outside the\ncalling process&rsquo;s accessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The userfaultfd has already been enabled by a previous\n<b>UFFDIO_API</b> operation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The API version requested in the <i>api</i> field is not\nsupported by this kernel, or the <i>features</i> field\npassed to the kernel includes feature bits that are not\nsupported by the current kernel version.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UFFDIO_REGISTER</b>\n<br>\n(Since Linux 4.3.) Register a memory address range with the\nuserfaultfd object. The pages in the range must be\n&quot;compatible&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Up to Linux\nkernel 4.11, only private anonymous ranges are compatible\nfor registering with <b>UFFDIO_REGISTER</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n4.11, hugetlbfs and shared memory ranges are also compatible\nwith <b>UFFDIO_REGISTER</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>argp</i>\nargument is a pointer to a <i>uffdio_register</i> structure,\ndefined as:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nuffdio_range { <br>\n__u64 start; /* Start of range */ <br>\n__u64 len; /* Length of range (bytes) */ <br>\n};</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nuffdio_register { <br>\nstruct uffdio_range range; <br>\n__u64 mode; /* Desired mode of operation (input) */ <br>\n__u64 ioctls; /* Available ioctl() operations (output) */\n<br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>range</i> field defines a memory range starting at\n<i>start</i> and continuing for <i>len</i> bytes that should\nbe handled by the userfaultfd.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nfield defines the mode of operation desired for this memory\nregion. The following values may be bitwise ORed to set the\nuserfaultfd mode for the specified range: <b><br>\nUFFDIO_REGISTER_MODE_MISSING</b></p>\n\n<p style=\"margin-left:22%;\">Track page faults on missing\npages.</p>\n\n\n<p style=\"margin-left:11%;\"><b>UFFDIO_REGISTER_MODE_WP</b></p>\n\n<p style=\"margin-left:22%;\">Track page faults on\nwrite-protected pages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently, the\nonly supported mode is\n<b>UFFDIO_REGISTER_MODE_MISSING</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\noperation is successful, the kernel modifies the\n<i>ioctls</i> bit-mask field to indicate which\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations are available for the specified\nrange. This returned bit mask is as for\n<b>UFFDIO_API</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operation returns 0 on success. On error, -1\nis returned and <i>errno</i> is set to indicate the cause of\nthe error. Possible errors include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBUSY</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A mapping in the specified range is registered with\nanother userfaultfd object.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>argp</i> refers to an address that is outside the\ncalling process&rsquo;s accessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An invalid or unsupported bit was specified in the\n<i>mode</i> field; or the <i>mode</i> field was zero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There is no mapping in the specified address range.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>range.start</i> or <i>range.len</i> is not a multiple\nof the system page size; or, <i>range.len</i> is zero; or\nthese fields are otherwise invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There as an incompatible mapping in the specified\naddress range.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UFFDIO_UNREGISTER</b>\n<br>\n(Since Linux 4.3.) Unregister a memory address range from\nuserfaultfd. The pages in the range must be\n&quot;compatible&quot; (see the description of\n<b>UFFDIO_REGISTER</b>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The address\nrange to unregister is specified in the <i>uffdio_range</i>\nstructure pointed to by <i>argp</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operation returns 0 on success. On error, -1\nis returned and <i>errno</i> is set to indicate the cause of\nthe error. Possible errors include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Either the <i>start</i> or the\n<i>len</i> field of the <i>ufdio_range</i> structure was not\na multiple of the system page size; or the <i>len</i> field\nwas zero; or these fields were otherwise invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There as an incompatible mapping in the specified\naddress range.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There was no mapping in the specified address range.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UFFDIO_COPY</b>\n<br>\n(Since Linux 4.3.) Atomically copy a continuous memory chunk\ninto the userfault registered range and optionally wake up\nthe blocked thread. The source and destination addresses and\nthe number of bytes to copy are specified by the <i>src</i>,\n<i>dst</i>, and <i>len</i> fields of the <i>uffdio_copy</i>\nstructure pointed to by <i>argp</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nuffdio_copy { <br>\n__u64 dst; /* Destination of copy */ <br>\n__u64 src; /* Source of copy */ <br>\n__u64 len; /* Number of bytes to copy */ <br>\n__u64 mode; /* Flags controlling behavior of copy */ <br>\n__s64 copy; /* Number of bytes copied, or negated error */\n<br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalue may be bitwise ORed in <i>mode</i> to change the\nbehavior of the <b>UFFDIO_COPY</b> operation: <b><br>\nUFFDIO_COPY_MODE_DONTWAKE</b></p>\n\n<p style=\"margin-left:22%;\">Do not wake up the thread that\nwaits for page-fault resolution</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>copy</i>\nfield is used by the kernel to return the number of bytes\nthat was actually copied, or an error (a negated\n<i>errno</i>-style value). If the value returned in\n<i>copy</i> doesn&rsquo;t match the value that was specified\nin <i>len</i>, the operation fails with the error\n<b>EAGAIN</b>. The <i>copy</i> field is output-only; it is\nnot read by the <b>UFFDIO_COPY</b> operation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operation returns 0 on success. In this\ncase, the entire area was copied. On error, -1 is returned\nand <i>errno</i> is set to indicate the cause of the error.\nPossible errors include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The number of bytes copied (i.e., the value returned in\nthe <i>copy</i> field) does not equal the value that was\nspecified in the <i>len</i> field.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Either <i>dst</i> or <i>len</i> was not a multiple of\nthe system page size, or the range specified by <i>src</i>\nand <i>len</i> or <i>dst</i> and <i>len</i> was invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An invalid bit was specified in the <i>mode</i>\nfield.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOENT</b> (since Linux\n4.11)</p>\n\n<p style=\"margin-left:22%;\">The faulting process has\nchanged its virtual memory layout simultaneously with an\noutstanding <b>UFFDIO_COPY</b> operation.</p>\n\n<p style=\"margin-left:11%;\"><b>ENOSPC</b> (from Linux 4.11\nuntil Linux 4.13)</p>\n\n<p style=\"margin-left:22%;\">The faulting process has exited\nat the time of a <b>UFFDIO_COPY</b> operation.</p>\n\n<p style=\"margin-left:11%;\"><b>ESRCH</b> (since Linux\n4.13)</p>\n\n<p style=\"margin-left:22%;\">The faulting process has exited\nat the time of a <b>UFFDIO_COPY</b> operation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UFFDIO_ZEROPAGE</b>\n<br>\n(Since Linux 4.3.) Zero out a memory range registered with\nuserfaultfd.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The requested\nrange is specified by the <i>range</i> field of the\n<i>uffdio_zeropage</i> structure pointed to by\n<i>argp</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nuffdio_zeropage { <br>\nstruct uffdio_range range; <br>\n__u64 mode; /* Flags controlling behavior of copy */ <br>\n__s64 zeropage; /* Number of bytes zeroed, or negated error\n*/ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nvalue may be bitwise ORed in <i>mode</i> to change the\nbehavior of the <b>UFFDIO_ZEROPAGE</b> operation: <b><br>\nUFFDIO_ZEROPAGE_MODE_DONTWAKE</b></p>\n\n<p style=\"margin-left:22%;\">Do not wake up the thread that\nwaits for page-fault resolution.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>zeropage</i> field is used by the kernel to return the\nnumber of bytes that was actually zeroed, or an error in the\nsame manner as <b>UFFDIO_COPY</b>. If the value returned in\nthe <i>zeropage</i> field doesn&rsquo;t match the value that\nwas specified in <i>range.len</i>, the operation fails with\nthe error <b>EAGAIN</b>. The <i>zeropage</i> field is\noutput-only; it is not read by the <b>UFFDIO_ZEROPAGE</b>\noperation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operation returns 0 on success. In this\ncase, the entire area was zeroed. On error, -1 is returned\nand <i>errno</i> is set to indicate the cause of the error.\nPossible errors include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The number of bytes zeroed (i.e., the value returned in\nthe <i>zeropage</i> field) does not equal the value that was\nspecified in the <i>range.len</i> field.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Either <i>range.start</i> or <i>range.len</i> was not a\nmultiple of the system page size; or <i>range.len</i> was\nzero; or the range specified was invalid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An invalid bit was specified in the <i>mode</i>\nfield.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ESRCH</b> (since Linux\n4.13)</p>\n\n<p style=\"margin-left:22%;\">The faulting process has exited\nat the time of a <b>UFFDIO_ZEROPAGE</b> operation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>UFFDIO_WAKE</b>\n<br>\n(Since Linux 4.3.) Wake up the thread waiting for page-fault\nresolution on a specified memory address range.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>UFFDIO_WAKE</b> operation is used in conjunction with\n<b>UFFDIO_COPY</b> and <b>UFFDIO_ZEROPAGE</b> operations\nthat have the <b>UFFDIO_COPY_MODE_DONTWAKE</b> or\n<b>UFFDIO_ZEROPAGE_MODE_DONTWAKE</b> bit set in the\n<i>mode</i> field. The userfault monitor can perform several\n<b>UFFDIO_COPY</b> and <b>UFFDIO_ZEROPAGE</b> operations in\na batch and then explicitly wake up the faulting thread\nusing <b>UFFDIO_WAKE</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>argp</i>\nargument is a pointer to a <i>uffdio_range</i> structure\n(shown above) that specifies the address range.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operation returns 0 on success. On error, -1\nis returned and <i>errno</i> is set to indicate the cause of\nthe error. Possible errors include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>start</i> or the <i>len</i> field of the\n<i>ufdio_range</i> structure was not a multiple of the\nsystem page size; or <i>len</i> was zero; or the specified\nrange was otherwise invalid.</p></td></tr>\n</table>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\ndescriptions of the individual operations, above.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\ndescriptions of the individual operations, above. In\naddition, the following general errors can occur for all of\nthe operations described above:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>argp</i> does not point to a\nvalid memory address.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>(For all operations except <b>UFFDIO_API</b>.) The\nuserfaultfd object has not yet been enabled (via the\n<b>UFFDIO_API</b> operation).</p></td></tr>\n</table>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations are Linux-specific.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\ndetect available userfault features and enable some subset\nof those features the userfaultfd file descriptor must be\nclosed after the first <b>UFFDIO_API</b> operation that\nqueries features availability and reopened before the second\n<b>UFFDIO_API</b> operation that actually enables the\ndesired features.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/ioctl\">ioctl(2)</a>,\n<a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/userfaultfd\">userfaultfd(2)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Documentation/admin-guide/mm/userfaultfd.rst</i>\nin the Linux kernel source tree</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}