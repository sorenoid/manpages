{"name":"pidfd_open","body":"\n\n<h1 align=\"center\">PIDFD_OPEN</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pidfd_open -\nobtain a file descriptor that refers to a process</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\npidfd_open(pid_t</b> <i>pid</i><b>, unsigned int</b>\n<i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pidfd_open</b>() system call creates a file descriptor\nthat refers to the process whose PID is specified in\n<i>pid</i>. The file descriptor is returned as the function\nresult; the close-on-exec flag is set on the file\ndescriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is reserved for future use; currently,\nthis argument must be specified as 0.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>pidfd_open</b>() returns a file descriptor (a nonnegative\ninteger). On error, -1 is returned and <i>errno</i> is set\nto indicate the cause of the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>flags</i> is not 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pid</i> is not valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached (see the description of\n<b>RLIMIT_NOFILE</b> in <a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The anonymous inode filesystem is not available in this\nkernel.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Insufficient kernel memory was available.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ESRCH</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The process specified by <i>pid</i> does not exist.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pidfd_open</b>()\nfirst appeared in Linux 5.3.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pidfd_open</b>()\nis Linux specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently,\nthere is no glibc wrapper for this system call; call it\nusing <a href=\"https://man.page/2/syscall\">syscall(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ncode sequence can be used to obtain a file descriptor for\nthe child of <a href=\"https://man.page/2/fork\">fork(2)</a>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">pid = fork();\n<br>\nif (pid &gt; 0) { /* If parent */ <br>\npidfd = pidfd_open(pid, 0); <br>\n... <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Even if the\nchild has already terminated by the time of the\n<b>pidfd_open</b>() call, its PID will not have been\nrecycled and the returned file descriptor will refer to the\nresulting zombie process. Note, however, that this is\nguaranteed only if the following conditions hold true:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">the disposition of\n<b>SIGCHLD</b> has not been explicitly set to <b>SIG_IGN</b>\n(see <a href=\"https://man.page/2/sigaction\">sigaction(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>the <b>SA_NOCLDWAIT</b> flag was not specified while\nestablishing a handler for <b>SIGCHLD</b> or while setting\nthe disposition of that signal to <b>SIG_DFL</b> (see\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a>); and</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>the zombie process was not reaped elsewhere in the\nprogram (e.g., either by an asynchronously executed signal\nhandler or by <a href=\"https://man.page/2/wait\">wait(2)</a> or similar in another\nthread).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If any of these\nconditions does not hold, then the child process (along with\na PID file descriptor that refers to it) should instead be\ncreated using <a href=\"https://man.page/2/clone\">clone(2)</a> with the <b>CLONE_PIDFD</b>\nflag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Use cases\nfor PID file descriptors</b> <br>\nA PID file descriptor returned by <b>pidfd_open</b>() (or by\n<a href=\"https://man.page/2/clone\">clone(2)</a> with the <b>CLONE_PID</b> flag) can be used\nfor the following purposes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">The <a href=\"https://man.page/2/pidfd_send_signal\">pidfd_send_signal(2)</a>\nsystem call can be used to send a signal to the process\nreferred to by a PID file descriptor.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>A PID file descriptor can be monitored using\n<a href=\"https://man.page/2/poll\">poll(2)</a>, <a href=\"https://man.page/2/select\">select(2)</a>, and <a href=\"https://man.page/7/epoll\">epoll(7)</a>. When\nthe process that it refers to terminates, these interfaces\nindicate the file descriptor as readable. Note, however,\nthat in the current implementation, nothing can be read from\nthe file descriptor (<a href=\"https://man.page/2/read\">read(2)</a> on the file descriptor\nfails with the error <b>EINVAL</b>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>If the PID file descriptor refers to a child of the\ncalling process, then it can be waited on using\n<a href=\"https://man.page/2/waitid\">waitid(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The <a href=\"https://man.page/2/pidfd_getfd\">pidfd_getfd(2)</a> system call can be used to\nobtain a duplicate of a file descriptor of another process\nreferred to by a PID file descriptor.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>A PID file descriptor can be used as the argument of\n<a href=\"https://man.page/2/setns\">setns(2)</a> in order to move into one or more of the\nsame namespaces as the process referred to by the file\ndescriptor.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>pidfd_open</b>() system call is the preferred way of\nobtaining a PID file descriptor for an already existing\nprocess. The alternative is to obtain a file descriptor by\nopening a <i>/proc/[pid]</i> directory. However, the latter\ntechnique is possible only if the <a href=\"https://man.page/5/proc\">proc(5)</a> filesystem\nis mounted; furthermore, the file descriptor obtained in\nthis way is <i>not</i> pollable and can&rsquo;t be waited on\nwith <a href=\"https://man.page/2/waitid\">waitid(2)</a>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The program\nbelow opens a PID file descriptor for the process whose PID\nis specified as its command-line argument. It then uses\n<a href=\"https://man.page/2/poll\">poll(2)</a> to monitor the file descriptor for process\nexit, as indicated by an <b>EPOLLIN</b> event.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#define _GNU_SOURCE <br>\n#include &lt;sys/types.h&gt; <br>\n#include &lt;sys/syscall.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;poll.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#ifndef\n__NR_pidfd_open <br>\n#define __NR_pidfd_open 434 /* System call # on most\narchitectures */ <br>\n#endif</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static int <br>\npidfd_open(pid_t pid, unsigned int flags) <br>\n{ <br>\nreturn syscall(__NR_pidfd_open, pid, flags); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nstruct pollfd pollfd; <br>\nint pidfd, ready;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 2)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;pid&gt;\\n&quot;,\nargv[0]); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pidfd =\npidfd_open(atoi(argv[1]), 0); <br>\nif (pidfd == -1) { <br>\nperror(&quot;pidfd_open&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pollfd.fd =\npidfd; <br>\npollfd.events = POLLIN;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ready =\npoll(&amp;pollfd, 1, -1); <br>\nif (ready == -1) { <br>\nperror(&quot;poll&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">printf(&quot;Events\n(%#x): POLLIN is %sset\\n&quot;, pollfd.revents, <br>\n(pollfd.revents &amp; POLLIN) ? &quot;&quot; : &quot;not\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">close(pidfd);\n<br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/2/pidfd_getfd\">pidfd_getfd(2)</a>,\n<a href=\"https://man.page/2/pidfd_send_signal\">pidfd_send_signal(2)</a>, <a href=\"https://man.page/2/poll\">poll(2)</a>,\n<a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/setns\">setns(2)</a>, <a href=\"https://man.page/2/waitid\">waitid(2)</a>,\n<a href=\"https://man.page/7/epoll\">epoll(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}