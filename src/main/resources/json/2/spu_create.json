{"name":"spu_create","description":"spu_create - create a new spu context","body":"\n\n<h1 align=\"center\">SPU_CREATE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">spu_create -\ncreate a new spu context</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/types.h&gt; <br>\n#include &lt;sys/spu.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nspu_create(const char *</b><i>pathname</i><b>, int</b>\n<i>flags</i><b>, mode_t</b> <i>mode</i><b>, <br>\nint</b> <i>neighbor_fd</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nThere is no glibc wrapper for this system call; see\nNOTES.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>spu_create</b>() system call is used on PowerPC machines\nthat implement the Cell Broadband Engine Architecture in\norder to access Synergistic Processor Units (SPUs). It\ncreates a new logical context for an SPU in <i>pathname</i>\nand returns a file descriptor associated with it.\n<i>pathname</i> must refer to a nonexistent directory in the\nmount point of the SPU filesystem (<b>spufs</b>). If\n<b>spu_create</b>() is successful, a directory is created at\n<i>pathname</i> and it is populated with the files described\nin <a href=\"https://man.page/7/spufs\">spufs(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a context\nis created, the returned file descriptor can only be passed\nto <a href=\"https://man.page/2/spu_run\">spu_run(2)</a>, used as the <i>dirfd</i> argument to\nthe <b>*at</b> family of system calls (e.g.,\n<a href=\"https://man.page/2/openat\">openat(2)</a>), or closed; other operations are not\ndefined. A logical SPU context is destroyed (along with all\nfiles created within the context&rsquo;s <i>pathname</i>\ndirectory) once the last reference to the context has gone;\nthis usually occurs when the file descriptor returned by\n<b>spu_create</b>() is closed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>mode</i>\nargument (minus any bits set in the process&rsquo;s\n<a href=\"https://man.page/2/umask\">umask(2)</a>) specifies the permissions used for creating\nthe new directory in <b>spufs</b>. See <a href=\"https://man.page/2/stat\">stat(2)</a> for a\nfull list of the possible <i>mode</i> values.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>neighbor_fd</i> is used only when the\n<b>SPU_CREATE_AFFINITY_SPU</b> flag is specified; see\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument can be zero or any bitwise OR-ed\ncombination of the following constants: <b><br>\nSPU_CREATE_EVENTS_ENABLED</b></p>\n\n<p style=\"margin-left:22%;\">Rather than using signals for\nreporting DMA errors, use the <i>event</i> argument to\n<a href=\"https://man.page/2/spu_run\">spu_run(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>SPU_CREATE_GANG</b></p>\n\n<p style=\"margin-left:22%;\">Create an SPU gang instead of a\ncontext. (A gang is a group of SPU contexts that are\nfunctionally related to each other and which share common\nscheduling parameters&mdash;priority and policy. In the\nfuture, gang scheduling may be implemented causing the group\nto be switched in and out as a single unit.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A new directory\nwill be created at the location specified by the\n<i>pathname</i> argument. This gang may be used to hold\nother SPU contexts, by providing a pathname that is within\nthe gang directory to further calls to\n<b>spu_create</b>().</p>\n\n<p style=\"margin-left:11%;\"><b>SPU_CREATE_NOSCHED</b></p>\n\n<p style=\"margin-left:22%;\">Create a context that is not\naffected by the SPU scheduler. Once the context is run, it\nwill not be scheduled out until it is destroyed by the\ncreating process.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because the\ncontext cannot be removed from the SPU, some functionality\nis disabled for <b>SPU_CREATE_NOSCHED</b> contexts. Only a\nsubset of the files will be available in this context\ndirectory in <b>spufs</b>. Additionally,\n<b>SPU_CREATE_NOSCHED</b> contexts cannot dump a core file\nwhen crashing.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Creating\n<b>SPU_CREATE_NOSCHED</b> contexts requires the\n<b>CAP_SYS_NICE</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>SPU_CREATE_ISOLATE</b></p>\n\n<p style=\"margin-left:22%;\">Create an isolated SPU context.\nIsolated contexts are protected from some PPE (PowerPC\nProcessing Element) operations, such as access to the SPU\nlocal store and the NPC register.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Creating\n<b>SPU_CREATE_ISOLATE</b> contexts also requires the\n<b>SPU_CREATE_NOSCHED</b> flag.</p>\n\n<p style=\"margin-left:11%;\"><b>SPU_CREATE_AFFINITY_SPU</b>\n(since Linux 2.6.23)</p>\n\n<p style=\"margin-left:22%;\">Create a context with affinity\nto another SPU context. This affinity information is used\nwithin the SPU scheduling algorithm. Using this flag\nrequires that a file descriptor referring to the other SPU\ncontext be passed in the <i>neighbor_fd</i> argument.</p>\n\n<p style=\"margin-left:11%;\"><b>SPU_CREATE_AFFINITY_MEM</b>\n(since Linux 2.6.23)</p>\n\n<p style=\"margin-left:22%;\">Create a context with affinity\nto system memory. This affinity information is used within\nthe SPU scheduling algorithm.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>spu_create</b>() returns a new file descriptor. On error,\n-1 is returned, and <i>errno</i> is set to one of the error\ncodes listed below.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The current user does not have\nwrite access to the <a href=\"https://man.page/7/spufs\">spufs(7)</a> mount point.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EEXIST</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An SPU context already exists at the given pathname.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> is not a valid string pointer in the\ncalling process&rsquo;s address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>pathname</i> is not a directory in the\n<a href=\"https://man.page/7/spufs\">spufs(7)</a> mount point, or invalid flags have been\nprovided.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ELOOP</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Too many symbolic links were found while resolving\n<i>pathname</i>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENAMETOOLONG</b></p>\n\n<p style=\"margin-left:22%;\"><i>pathname</i> is too\nlong.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An isolated context was requested, but the hardware does\nnot support SPU isolation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Part of <i>pathname</i> could not be resolved.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The kernel could not allocate all resources\nrequired.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSPC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There are not enough SPU resources available to create a\nnew context or the user-specific limit for the number of SPU\ncontexts has been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The functionality is not provided by the current system,\nbecause either the hardware does not provide SPUs or the\nspufs module is not loaded.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOTDIR</b></p>\n\n<p style=\"margin-left:22%;\">A part of <i>pathname</i> is\nnot a directory.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>SPU_CREATE_NOSCHED</b> flag has been given, but\nthe user does not have the <b>CAP_SYS_NICE</b>\ncapability.</p> </td></tr>\n</table>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>pathname</i>\nmust point to a location beneath the mount point of\n<b>spufs</b>. By convention, it gets mounted in\n<i>/spu</i>.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>spu_create</b>() system call was added to Linux in kernel\n2.6.16.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This call is\nLinux-specific and implemented only on the PowerPC\narchitecture. Programs using this system call are not\nportable.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Glibc does not\nprovide a wrapper for this system call; call it using\n<a href=\"https://man.page/2/syscall\">syscall(2)</a>. Note however, that <b>spu_create</b>() is\nmeant to be used from libraries that implement a more\nabstract interface to SPUs, not to be used from regular\napplications. See\n<a href=\"http://www.bsc.es/projects/deepcomputing/linuxoncell/\">http://www.bsc.es/projects/deepcomputing/linuxoncell/</a>\nfor the recommended libraries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Prior to the\naddition of the <b>SPU_CREATE_AFFINITY_SPU</b> flag in Linux\n2.6.23, the <b>spu_create</b>() system call took only three\narguments (i.e., there was no <i>neighbor_fd</i>\nargument).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/spu_run\">spu_run(2)</a> for an example of the use of\n<b>spu_create</b>()</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/close\">close(2)</a>,\n<a href=\"https://man.page/2/spu_run\">spu_run(2)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>,\n<a href=\"https://man.page/7/spufs\">spufs(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}