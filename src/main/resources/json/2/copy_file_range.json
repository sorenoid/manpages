{"name":"copy_file_range","body":"\n\n<h1 align=\"center\">COPY_FILE_RANGE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">copy_file_range\n- Copy a range of data from one file to another</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE <br>\n#include &lt;unistd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\ncopy_file_range(int</b> <i>fd_in</i><b>, loff_t\n*</b><i>off_in</i><b>, <br>\nint</b> <i>fd_out</i><b>, loff_t *</b><i>off_out</i><b>,\n<br>\nsize_t</b> <i>len</i><b>, unsigned int</b>\n<i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>copy_file_range</b>() system call performs an in-kernel\ncopy between two file descriptors without the additional\ncost of transferring data from the kernel to user space and\nthen back into the kernel. It copies up to <i>len</i> bytes\nof data from the source file descriptor <i>fd_in</i> to the\ntarget file descriptor <i>fd_out</i>, overwriting any data\nthat exists within the requested range of the target\nfile.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nsemantics apply for <i>off_in</i>, and similar statements\napply to <i>off_out</i>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If <i>off_in</i> is NULL, then bytes are read from\n<i>fd_in</i> starting from the file offset, and the file\noffset is adjusted by the number of bytes copied.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If <i>off_in</i> is not NULL, then <i>off_in</i> must\npoint to a buffer that specifies the starting offset where\nbytes from <i>fd_in</i> will be read. The file offset of\n<i>fd_in</i> is not changed, but <i>off_in</i> is adjusted\nappropriately.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>fd_in</i>\nand <i>fd_out</i> can refer to the same file. If they refer\nto the same file, then the source and target ranges are not\nallowed to overlap.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is provided to allow for future\nextensions and currently must be set to 0.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon successful\ncompletion, <b>copy_file_range</b>() will return the number\nof bytes copied between files. This could be less than the\nlength originally requested. If the file offset of\n<i>fd_in</i> is at or past the end of file, no bytes are\ncopied, and <b>copy_file_range</b>() returns zero.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error,\n<b>copy_file_range</b>() returns -1 and <i>errno</i> is set\nto indicate the error.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">One or more file descriptors are\nnot valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd_in</i> is not open for reading; or <i>fd_out</i>\nis not open for writing.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <b>O_APPEND</b> flag is set for the open file\ndescription (see <a href=\"https://man.page/2/open\">open(2)</a>) referred to by the file\ndescriptor <i>fd_out</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFBIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to write at a position past the\nmaximum file offset the kernel supports.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFBIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to write a range that exceeds the\nallowed maximum file size. The maximum file size differs\nbetween filesystem implementations and can be different from\nthe maximum allowed file offset.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFBIG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An attempt was made to write beyond the process&rsquo;s\nfile size resource limit. This may also result in the\nprocess receiving a <b>SIGXFSZ</b> signal.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>flags</i> argument is not 0.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd_in</i> and <i>fd_out</i> refer to the same file\nand the source and target ranges overlap.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Either <i>fd_in</i> or <i>fd_out</i> is not a regular\nfile.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EIO</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A low-level I/O error occurred while copying.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EISDIR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Either <i>fd_in</i> or <i>fd_out</i> refers to a\ndirectory.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Out of memory.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSPC</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There is not enough space on the target filesystem to\ncomplete the copy.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EOVERFLOW</b></p>\n\n<p style=\"margin-left:22%;\">The requested source or\ndestination range is too large to represent in the specified\ndata types.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"53%\">\n\n\n<p><i>fd_out</i> refers to an immutable file.</p></td>\n<td width=\"25%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETXTBSY</b></p>\n\n<p style=\"margin-left:22%;\">Either <i>fd_in</i> or\n<i>fd_out</i> refers to an active swap file.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EXDEV</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The files referred to by <i>fd_in</i> and <i>fd_out</i>\nare not on the same mounted filesystem (pre Linux 5.3).</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>copy_file_range</b>() system call first appeared in Linux\n4.5, but glibc 2.27 provides a user-space emulation when it\nis not available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A major rework\nof the kernel implementation occurred in 5.3. Areas of the\nAPI that weren&rsquo;t clearly defined were clarified and\nthe API bounds are much more strictly checked than on\nearlier kernels. Applications should target the behaviour\nand requirements of 5.3 kernels.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First support\nfor cross-filesystem copies was introduced in Linux 5.3.\nOlder kernels will return -EXDEV when cross-filesystem\ncopies are attempted.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>copy_file_range</b>() system call is a nonstandard Linux\nand GNU extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If <i>fd_in</i>\nis a sparse file, then <b>copy_file_range</b>() may expand\nany holes existing in the requested range. Users may benefit\nfrom calling <b>copy_file_range</b>() in a loop, and using\nthe <a href=\"https://man.page/2/lseek\">lseek(2)</a> <b>SEEK_DATA</b> and <b>SEEK_HOLE</b>\noperations to find the locations of data segments.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>copy_file_range</b>()\ngives filesystems an opportunity to implement &quot;copy\nacceleration&quot; techniques, such as the use of reflinks\n(i.e., two or more inodes that share pointers to the same\ncopy-on-write disk blocks) or server-side-copy (in the case\nof NFS).</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\n_GNU_SOURCE <br>\n#include &lt;fcntl.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;sys/stat.h&gt; <br>\n#include &lt;sys/syscall.h&gt; <br>\n#include &lt;unistd.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* On versions\nof glibc before 2.27, we must invoke copy_file_range() <br>\nusing syscall(2) */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static loff_t\n<br>\ncopy_file_range(int fd_in, loff_t *off_in, int fd_out, <br>\nloff_t *off_out, size_t len, unsigned int flags) <br>\n{ <br>\nreturn syscall(__NR_copy_file_range, fd_in, off_in, fd_out,\n<br>\noff_out, len, flags); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char **argv) <br>\n{ <br>\nint fd_in, fd_out; <br>\nstruct stat stat; <br>\nloff_t len, ret;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (argc != 3)\n{ <br>\nfprintf(stderr, &quot;Usage: %s &lt;source&gt;\n&lt;destination&gt;\\n&quot;, argv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd_in =\nopen(argv[1], O_RDONLY); <br>\nif (fd_in == -1) { <br>\nperror(&quot;open (argv[1])&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(fstat(fd_in, &amp;stat) == -1) { <br>\nperror(&quot;fstat&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">len =\nstat.st_size;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd_out =\nopen(argv[2], O_CREAT | O_WRONLY | O_TRUNC, 0644); <br>\nif (fd_out == -1) { <br>\nperror(&quot;open (argv[2])&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">do { <br>\nret = copy_file_range(fd_in, NULL, fd_out, NULL, len, 0);\n<br>\nif (ret == -1) { <br>\nperror(&quot;copy_file_range&quot;); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">len -= ret;\n<br>\n} while (len &gt; 0 &amp;&amp; ret &gt; 0);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">close(fd_in);\n<br>\nclose(fd_out); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/lseek\">lseek(2)</a>,\n<a href=\"https://man.page/2/sendfile\">sendfile(2)</a>, <a href=\"https://man.page/2/splice\">splice(2)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}