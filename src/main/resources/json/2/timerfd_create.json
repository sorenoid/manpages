{"name":"timerfd_create","body":"\n\n<h1 align=\"center\">TIMERFD_CREATE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">timerfd_create,\ntimerfd_settime, timerfd_gettime - timers that notify via\nfile descriptors</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/timerfd.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntimerfd_create(int</b> <i>clockid</i><b>, int</b>\n<i>flags</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntimerfd_settime(int</b> <i>fd</i><b>, int</b>\n<i>flags</i><b>, <br>\nconst struct itimerspec *</b><i>new_value</i><b>, <br>\nstruct itimerspec *</b><i>old_value</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\ntimerfd_gettime(int</b> <i>fd</i><b>, struct itimerspec\n*</b><i>curr_value</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls create and operate on a timer that delivers timer\nexpiration notifications via a file descriptor. They provide\nan alternative to the use of <a href=\"https://man.page/2/setitimer\">setitimer(2)</a> or\n<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>, with the advantage that the file\ndescriptor may be monitored by <a href=\"https://man.page/2/select\">select(2)</a>,\n<a href=\"https://man.page/2/poll\">poll(2)</a>, and <a href=\"https://man.page/7/epoll\">epoll(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The use of\nthese three system calls is analogous to the use of\n<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>, <a href=\"https://man.page/2/timer_settime\">timer_settime(2)</a>, and\n<a href=\"https://man.page/2/timer_gettime\">timer_gettime(2)</a>. (There is no analog of\n<a href=\"https://man.page/2/timer_getoverrun\">timer_getoverrun(2)</a>, since that functionality is\nprovided by <a href=\"https://man.page/2/read\">read(2)</a>, as described below.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_create()\n<br>\ntimerfd_create</b>() creates a new timer object, and returns\na file descriptor that refers to that timer. The\n<i>clockid</i> argument specifies the clock that is used to\nmark the progress of the timer, and must be one of the\nfollowing: <b><br>\nCLOCK_REALTIME</b></p>\n\n<p style=\"margin-left:22%;\">A settable system-wide\nreal-time clock.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_MONOTONIC</b></p>\n\n<p style=\"margin-left:22%;\">A nonsettable monotonically\nincreasing clock that measures time from some unspecified\npoint in the past that does not change after system\nstartup.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_BOOTTIME</b> (Since\nLinux 3.15)</p>\n\n<p style=\"margin-left:22%;\">Like <b>CLOCK_MONOTONIC</b>,\nthis is a monotonically increasing clock. However, whereas\nthe <b>CLOCK_MONOTONIC</b> clock does not measure the time\nwhile a system is suspended, the <b>CLOCK_BOOTTIME</b> clock\ndoes include the time during which the system is suspended.\nThis is useful for applications that need to be\nsuspend-aware. <b>CLOCK_REALTIME</b> is not suitable for\nsuch applications, since that clock is affected by\ndiscontinuous changes to the system clock.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_REALTIME_ALARM</b>\n(since Linux 3.11)</p>\n\n<p style=\"margin-left:22%;\">This clock is like\n<b>CLOCK_REALTIME</b>, but will wake the system if it is\nsuspended. The caller must have the <b>CAP_WAKE_ALARM</b>\ncapability in order to set a timer against this clock.</p>\n\n<p style=\"margin-left:11%;\"><b>CLOCK_BOOTTIME_ALARM</b>\n(since Linux 3.11)</p>\n\n<p style=\"margin-left:22%;\">This clock is like\n<b>CLOCK_BOOTTIME</b>, but will wake the system if it is\nsuspended. The caller must have the <b>CAP_WAKE_ALARM</b>\ncapability in order to set a timer against this clock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/clock_getres\">clock_getres(2)</a> for some further details on the above\nclocks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The current\nvalue of each of these clocks can be retrieved using\n<a href=\"https://man.page/2/clock_gettime\">clock_gettime(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting with\nLinux 2.6.27, the following values may be bitwise ORed in\n<i>flags</i> to change the behavior of\n<b>timerfd_create</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p><b>TFD_NONBLOCK</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Set the <b>O_NONBLOCK</b> file status flag on the open\nfile description (see <a href=\"https://man.page/2/open\">open(2)</a>) referred to by the new\nfile descriptor. Using this flag saves extra calls to\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> to achieve the same result.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"18%\">\n\n\n<p><b>TFD_CLOEXEC</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Set the close-on-exec (<b>FD_CLOEXEC</b>) flag on the\nnew file descriptor. See the description of the\n<b>O_CLOEXEC</b> flag in <a href=\"https://man.page/2/open\">open(2)</a> for reasons why this\nmay be useful.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In Linux\nversions up to and including 2.6.26, <i>flags</i> must be\nspecified as zero.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_settime()\n<br>\ntimerfd_settime</b>() arms (starts) or disarms (stops) the\ntimer referred to by the file descriptor <i>fd</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>new_value</i> argument specifies the initial expiration\nand interval for the timer. The <i>itimerspec</i> structure\nused for this argument contains two fields, each of which is\nin turn a structure of type <i>timespec</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct timespec\n{ <br>\ntime_t tv_sec; /* Seconds */ <br>\nlong tv_nsec; /* Nanoseconds */ <br>\n};</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nitimerspec { <br>\nstruct timespec it_interval; /* Interval for periodic timer\n*/ <br>\nstruct timespec it_value; /* Initial expiration */ <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>new_value.it_value</i>\nspecifies the initial expiration of the timer, in seconds\nand nanoseconds. Setting either field of\n<i>new_value.it_value</i> to a nonzero value arms the timer.\nSetting both fields of <i>new_value.it_value</i> to zero\ndisarms the timer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Setting one or\nboth fields of <i>new_value.it_interval</i> to nonzero\nvalues specifies the period, in seconds and nanoseconds, for\nrepeated timer expirations after the initial expiration. If\nboth fields of <i>new_value.it_interval</i> are zero, the\ntimer expires just once, at the time specified by\n<i>new_value.it_value</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\ninitial expiration time specified in <i>new_value</i> is\ninterpreted relative to the current time on the\ntimer&rsquo;s clock at the time of the call (i.e.,\n<i>new_value.it_value</i> specifies a time relative to the\ncurrent value of the clock specified by <i>clockid</i>). An\nabsolute timeout can be selected via the <i>flags</i>\nargument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is a bit mask that can include the\nfollowing values: <b><br>\nTFD_TIMER_ABSTIME</b></p>\n\n<p style=\"margin-left:22%;\">Interpret\n<i>new_value.it_value</i> as an absolute value on the\ntimer&rsquo;s clock. The timer will expire when the value of\nthe timer&rsquo;s clock reaches the value specified in\n<i>new_value.it_value</i>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>TFD_TIMER_CANCEL_ON_SET</b></p>\n\n<p style=\"margin-left:22%;\">If this flag is specified along\nwith <b>TFD_TIMER_ABSTIME</b> and the clock for this timer\nis <b>CLOCK_REALTIME</b> or <b>CLOCK_REALTIME_ALARM</b>,\nthen mark this timer as cancelable if the real-time clock\nundergoes a discontinuous change (<a href=\"https://man.page/2/settimeofday\">settimeofday(2)</a>,\n<a href=\"https://man.page/2/clock_settime\">clock_settime(2)</a>, or similar). When such changes\noccur, a current or future <a href=\"https://man.page/2/read\">read(2)</a> from the file\ndescriptor will fail with the error <b>ECANCELED</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>old_value</i> argument is not NULL, then the\n<i>itimerspec</i> structure that it points to is used to\nreturn the setting of the timer that was current at the time\nof the call; see the description of <b>timerfd_gettime</b>()\nfollowing.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_gettime()\n<br>\ntimerfd_gettime</b>() returns, in <i>curr_value</i>, an\n<i>itimerspec</i> structure that contains the current\nsetting of the timer referred to by the file descriptor\n<i>fd</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>it_value</i> field returns the amount of time until the\ntimer will next expire. If both fields of this structure are\nzero, then the timer is currently disarmed. This field\nalways contains a relative value, regardless of whether the\n<b>TFD_TIMER_ABSTIME</b> flag was specified when setting the\ntimer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>it_interval</i> field returns the interval of the timer.\nIf both fields of this structure are zero, then the timer is\nset to expire just once, at the time specified by\n<i>curr_value.it_value</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Operating on\na timer file descriptor</b> <br>\nThe file descriptor returned by <b>timerfd_create</b>()\nsupports the following additional operations: <b><br>\nread</b>(2)</p>\n\n<p style=\"margin-left:22%;\">If the timer has already\nexpired one or more times since its settings were last\nmodified using <b>timerfd_settime</b>(), or since the last\nsuccessful <a href=\"https://man.page/2/read\">read(2)</a>, then the buffer given to\n<a href=\"https://man.page/2/read\">read(2)</a> returns an unsigned 8-byte integer\n(<i>uint64_t</i>) containing the number of expirations that\nhave occurred. (The returned value is in host byte\norder&mdash;that is, the native byte order for integers on\nthe host machine.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If no timer\nexpirations have occurred at the time of the <a href=\"https://man.page/2/read\">read(2)</a>,\nthen the call either blocks until the next timer expiration,\nor fails with the error <b>EAGAIN</b> if the file descriptor\nhas been made nonblocking (via the use of the\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_SETFL</b> operation to set the\n<b>O_NONBLOCK</b> flag).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A\n<a href=\"https://man.page/2/read\">read(2)</a> fails with the error <b>EINVAL</b> if the\nsize of the supplied buffer is less than 8 bytes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\nassociated clock is either <b>CLOCK_REALTIME</b> or\n<b>CLOCK_REALTIME_ALARM</b>, the timer is absolute\n(<b>TFD_TIMER_ABSTIME</b>), and the flag\n<b>TFD_TIMER_CANCEL_ON_SET</b> was specified when calling\n<b>timerfd_settime</b>(), then <a href=\"https://man.page/2/read\">read(2)</a> fails with the\nerror <b>ECANCELED</b> if the real-time clock undergoes a\ndiscontinuous change. (This allows the reading application\nto discover such discontinuous changes to the clock.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\nassociated clock is either <b>CLOCK_REALTIME</b> or\n<b>CLOCK_REALTIME_ALARM</b>, the timer is absolute\n(<b>TFD_TIMER_ABSTIME</b>), and the flag\n<b>TFD_TIMER_CANCEL_ON_SET</b> was <i>not</i> specified when\ncalling <b>timerfd_settime</b>(), then a discontinuous\nnegative change to the clock (e.g., <a href=\"https://man.page/2/clock_settime\">clock_settime(2)</a>)\nmay cause <a href=\"https://man.page/2/read\">read(2)</a> to unblock, but return a value of 0\n(i.e., no bytes read), if the clock change occurs after the\ntime expired, but before the <a href=\"https://man.page/2/read\">read(2)</a> on the file\ndescriptor.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/poll\">poll(2)</a>,\n<a href=\"https://man.page/2/select\">select(2)</a> (and similar)</p>\n\n<p style=\"margin-left:22%;\">The file descriptor is readable\n(the <a href=\"https://man.page/2/select\">select(2)</a> <i>readfds</i> argument; the\n<a href=\"https://man.page/2/poll\">poll(2)</a> <b>POLLIN</b> flag) if one or more timer\nexpirations have occurred.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The file\ndescriptor also supports the other file-descriptor\nmultiplexing APIs: <a href=\"https://man.page/2/pselect\">pselect(2)</a>, <a href=\"https://man.page/2/ppoll\">ppoll(2)</a>, and\n<a href=\"https://man.page/7/epoll\">epoll(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/ioctl\">ioctl(2)</a></p>\n\n<p style=\"margin-left:22%;\">The following timerfd-specific\ncommand is supported: <b><br>\nTFD_IOC_SET_TICKS</b> (since Linux 3.17)</p>\n\n<p style=\"margin-left:32%;\">Adjust the number of timer\nexpirations that have occurred. The argument is a pointer to\na nonzero 8-byte integer (<i>uint64_t</i>*) containing the\nnew number of expirations. Once the number is set, any\nwaiter on the timer is woken up. The only purpose of this\ncommand is to restore the expirations for the purpose of\ncheckpoint/restore. This operation is available only if the\nkernel was configured with the\n<b>CONFIG_CHECKPOINT_RESTORE</b> option.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/close\">close(2)</a></p>\n\n<p style=\"margin-left:22%;\">When the file descriptor is no\nlonger required it should be closed. When all file\ndescriptors associated with the same timer object have been\nclosed, the timer is disarmed and its resources are freed by\nthe kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>fork(2)\nsemantics</b> <br>\nAfter a <a href=\"https://man.page/2/fork\">fork(2)</a>, the child inherits a copy of the\nfile descriptor created by <b>timerfd_create</b>(). The file\ndescriptor refers to the same underlying timer object as the\ncorresponding file descriptor in the parent, and\n<a href=\"https://man.page/2/read\">read(2)</a>s in the child will return information about\nexpirations of the timer.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>execve(2)\nsemantics</b> <br>\nA file descriptor created by <b>timerfd_create</b>() is\npreserved across <a href=\"https://man.page/2/execve\">execve(2)</a>, and continues to generate\ntimer expirations if the timer was armed.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>timerfd_create</b>() returns a new file descriptor. On\nerror, -1 is returned and <i>errno</i> is set to indicate\nthe error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_settime</b>()\nand <b>timerfd_gettime</b>() return 0 on success; on error\nthey return -1, and set <i>errno</i> to indicate the\nerror.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_create</b>()\ncan fail with the following errors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The <i>clockid</i> is not valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>flags</i> is invalid; or, in Linux 2.6.26 or earlier,\n<i>flags</i> is nonzero.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EMFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The per-process limit on the number of open file\ndescriptors has been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENFILE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The system-wide limit on the total number of open files\nhas been reached.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Could not mount (internal) anonymous inode device.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOMEM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>There was insufficient kernel memory to create the\ntimer.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>clockid</i> was <b>CLOCK_REALTIME_ALARM</b> or\n<b>CLOCK_BOOTTIME_ALARM</b> but the caller did not have the\n<b>CAP_WAKE_ALARM</b> capability.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_settime</b>()\nand <b>timerfd_gettime</b>() can fail with the following\nerrors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EBADF</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\"><i>fd</i> is not a valid file\ndescriptor.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>new_value</i>, <i>old_value</i>, or <i>curr_value</i>\nis not valid a pointer.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>fd</i> is not a valid timerfd file descriptor.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>timerfd_settime</b>()\ncan also fail with the following errors: <b><br>\nECANCELED</b></p>\n\n<p style=\"margin-left:22%;\">See NOTES.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>new_value</i> is not properly initialized (one of the\n<i>tv_nsec</i> falls outside the range zero to\n999,999,999).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><i>flags</i> is invalid.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls are available on Linux since kernel 2.6.25. Library\nsupport is provided by glibc since version 2.8.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These system\ncalls are Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suppose the\nfollowing scenario for <b>CLOCK_REALTIME</b> or\n<b>CLOCK_REALTIME_ALARM</b> timer that was created with\n<b>timerfd_create</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\">(a)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The timer has been started\n(<b>timerfd_settime</b>()) with the <b>TFD_TIMER_ABSTIME</b>\nand <b>TFD_TIMER_CANCEL_ON_SET</b> flags;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(b)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>A discontinuous change (e.g., <a href=\"https://man.page/2/settimeofday\">settimeofday(2)</a>) is\nsubsequently made to the <b>CLOCK_REALTIME</b> clock;\nand</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(c)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>the caller once more calls <b>timerfd_settime</b>() to\nrearm the timer (without first doing a <a href=\"https://man.page/2/read\">read(2)</a> on the\nfile descriptor).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this case\nthe following occurs:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">The <b>timerfd_settime</b>()\nreturns -1 with <i>errno</i> set to <b>ECANCELED</b>. (This\nenables the caller to know that the previous timer was\naffected by a discontinuous change to the clock.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>The timer <i>is successfully rearmed</i> with the\nsettings provided in the second <b>timerfd_settime</b>()\ncall. (This was probably an implementation accident, but\nwon&rsquo;t be fixed now, in case there are applications\nthat depend on this behaviour.)</p></td></tr>\n</table>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently,\n<b>timerfd_create</b>() supports fewer types of clock IDs\nthan <a href=\"https://man.page/2/timer_create\">timer_create(2)</a>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nprogram creates a timer and then monitors its progress. The\nprogram accepts up to three command-line arguments. The\nfirst argument specifies the number of seconds for the\ninitial expiration of the timer. The second argument\nspecifies the interval for the timer, in seconds. The third\nargument specifies the number of times the program should\nallow the timer to expire before terminating. The second and\nthird command-line arguments are optional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nshell session demonstrates the use of the program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>a.out 3 1\n100</b> <br>\n0.000: timer started <br>\n3.000: read: 1; total=1 <br>\n4.000: read: 1; total=2 <b><br>\n^Z</b> # type control-Z to suspend the program <br>\n[1]+ Stopped ./timerfd3_demo 3 1 100 <br>\n$ <b>fg</b> # Resume execution after a few seconds <br>\na.out 3 1 100 <br>\n9.660: read: 5; total=7 <br>\n10.000: read: 1; total=8 <br>\n11.000: read: 1; total=9 <b><br>\n^C</b> # type control-C to suspend the program</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Program\nsource</b> <br>\n#include &lt;sys/timerfd.h&gt; <br>\n#include &lt;time.h&gt; <br>\n#include &lt;unistd.h&gt; <br>\n#include &lt;inttypes.h&gt; /* Definition of PRIu64 */ <br>\n#include &lt;stdlib.h&gt; <br>\n#include &lt;stdio.h&gt; <br>\n#include &lt;stdint.h&gt; /* Definition of uint64_t */</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#define\nhandle_error(msg) \\ <br>\ndo { perror(msg); exit(EXIT_FAILURE); } while (0)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">static void\n<br>\nprint_elapsed_time(void) <br>\n{ <br>\nstatic struct timespec start; <br>\nstruct timespec curr; <br>\nstatic int first_call = 1; <br>\nint secs, nsecs;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if (first_call)\n{ <br>\nfirst_call = 0; <br>\nif (clock_gettime(CLOCK_MONOTONIC, &amp;start) == -1) <br>\nhandle_error(&quot;clock_gettime&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(clock_gettime(CLOCK_MONOTONIC, &amp;curr) == -1) <br>\nhandle_error(&quot;clock_gettime&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">secs =\ncurr.tv_sec - start.tv_sec; <br>\nnsecs = curr.tv_nsec - start.tv_nsec; <br>\nif (nsecs &lt; 0) { <br>\nsecs--; <br>\nnsecs += 1000000000; <br>\n} <br>\nprintf(&quot;%d.%03d: &quot;, secs, (nsecs + 500000) /\n1000000); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int <br>\nmain(int argc, char *argv[]) <br>\n{ <br>\nstruct itimerspec new_value; <br>\nint max_exp, fd; <br>\nstruct timespec now; <br>\nuint64_t exp, tot_exp; <br>\nssize_t s;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if ((argc != 2)\n&amp;&amp; (argc != 4)) { <br>\nfprintf(stderr, &quot;%s init-secs [interval-secs\nmax-exp]\\n&quot;, <br>\nargv[0]); <br>\nexit(EXIT_FAILURE); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(clock_gettime(CLOCK_REALTIME, &amp;now) == -1) <br>\nhandle_error(&quot;clock_gettime&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* Create a\nCLOCK_REALTIME absolute timer with initial <br>\nexpiration and interval as specified in command line */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">new_value.it_value.tv_sec\n= now.tv_sec + atoi(argv[1]); <br>\nnew_value.it_value.tv_nsec = now.tv_nsec; <br>\nif (argc == 2) { <br>\nnew_value.it_interval.tv_sec = 0; <br>\nmax_exp = 1; <br>\n} else { <br>\nnew_value.it_interval.tv_sec = atoi(argv[2]); <br>\nmax_exp = atoi(argv[3]); <br>\n} <br>\nnew_value.it_interval.tv_nsec = 0;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fd =\ntimerfd_create(CLOCK_REALTIME, 0); <br>\nif (fd == -1) <br>\nhandle_error(&quot;timerfd_create&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">if\n(timerfd_settime(fd, TFD_TIMER_ABSTIME, &amp;new_value,\nNULL) == -1) <br>\nhandle_error(&quot;timerfd_settime&quot;);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">print_elapsed_time();\n<br>\nprintf(&quot;timer started\\n&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">for (tot_exp =\n0; tot_exp &lt; max_exp;) { <br>\ns = read(fd, &amp;exp, sizeof(uint64_t)); <br>\nif (s != sizeof(uint64_t)) <br>\nhandle_error(&quot;read&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tot_exp += exp;\n<br>\nprint_elapsed_time(); <br>\nprintf(&quot;read: %&quot; PRIu64 &quot;; total=%&quot;\nPRIu64 &quot;\\n&quot;, exp, tot_exp); <br>\n}</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">exit(EXIT_SUCCESS);\n<br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/eventfd\">eventfd(2)</a>,\n<a href=\"https://man.page/2/poll\">poll(2)</a>, <a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/select\">select(2)</a>,\n<a href=\"https://man.page/2/setitimer\">setitimer(2)</a>, <a href=\"https://man.page/2/signalfd\">signalfd(2)</a>,\n<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>, <a href=\"https://man.page/2/timer_gettime\">timer_gettime(2)</a>,\n<a href=\"https://man.page/2/timer_settime\">timer_settime(2)</a>, <a href=\"https://man.page/7/epoll\">epoll(7)</a>, <a href=\"https://man.page/7/time\">time(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}