{"name":"getrandom","description":"getrandom - obtain a series of random bytes","body":"\n\n<h1 align=\"center\">GETRANDOM</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">getrandom -\nobtain a series of random bytes</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/random.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ssize_t\ngetrandom(void *</b><i>buf</i><b>, size_t</b>\n<i>buflen</i><b>, unsigned int</b> <i>flags</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>getrandom</b>() system call fills the buffer pointed to\nby <i>buf</i> with up to <i>buflen</i> random bytes. These\nbytes can be used to seed user-space random number\ngenerators or for cryptographic purposes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\n<b>getrandom</b>() draws entropy from the <i>urandom</i>\nsource (i.e., the same source as the <i>/dev/urandom</i>\ndevice). This behavior can be changed via the <i>flags</i>\nargument.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>urandom</i> source has been initialized, reads of up to\n256 bytes will always return as many bytes as requested and\nwill not be interrupted by signals. No such guarantees apply\nfor larger buffer sizes. For example, if the call is\ninterrupted by a signal handler, it may return a partially\nfilled buffer, or fail with the error <b>EINTR</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<i>urandom</i> source has not yet been initialized, then\n<b>getrandom</b>() will block, unless <b>GRND_NONBLOCK</b>\nis specified in <i>flags</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is a bit mask that can contain zero or\nmore of the following values ORed together: <b><br>\nGRND_RANDOM</b></p>\n\n<p style=\"margin-left:22%;\">If this bit is set, then random\nbytes are drawn from the <i>random</i> source (i.e., the\nsame source as the <i>/dev/random</i> device) instead of the\n<i>urandom</i> source. The <i>random</i> source is limited\nbased on the entropy that can be obtained from environmental\nnoise. If the number of available bytes in the <i>random</i>\nsource is less than requested in <i>buflen</i>, the call\nreturns just the available random bytes. If no random bytes\nare available, the behavior depends on the presence of\n<b>GRND_NONBLOCK</b> in the <i>flags</i> argument.</p>\n\n<p style=\"margin-left:11%;\"><b>GRND_NONBLOCK</b></p>\n\n<p style=\"margin-left:22%;\">By default, when reading from\nthe <i>random</i> source, <b>getrandom</b>() blocks if no\nrandom bytes are available, and when reading from the\n<i>urandom</i> source, it blocks if the entropy pool has not\nyet been initialized. If the <b>GRND_NONBLOCK</b> flag is\nset, then <b>getrandom</b>() does not block in these cases,\nbut instead immediately returns -1 with <i>errno</i> set to\n<b>EAGAIN</b>.</p>\n\n<h2>RETURN VALUE\n<a name=\"RETURN VALUE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">On success,\n<b>getrandom</b>() returns the number of bytes that were\ncopied to the buffer <i>buf</i>. This may be less than the\nnumber of bytes requested via <i>buflen</i> if either\n<b>GRND_RANDOM</b> was specified in <i>flags</i> and\ninsufficient entropy was present in the <i>random</i> source\nor the system call was interrupted by a signal.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On error, -1 is\nreturned, and <i>errno</i> is set appropriately.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The requested entropy was not\navailable, and <b>getrandom</b>() would have blocked if the\n<b>GRND_NONBLOCK</b> flag was not set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EFAULT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The address referred to by <i>buf</i> is outside the\naccessible address space.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINTR</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The call was interrupted by a signal handler; see the\ndescription of how interrupted <a href=\"https://man.page/2/read\">read(2)</a> calls on\n&quot;slow&quot; devices are handled with and without the\n<b>SA_RESTART</b> flag in the <a href=\"https://man.page/7/signal\">signal(7)</a> man page.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An invalid flag was specified in <i>flags</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOSYS</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The glibc wrapper function for <b>getrandom</b>()\ndetermined that the underlying kernel does not implement\nthis system call.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>getrandom</b>()\nwas introduced in version 3.17 of the Linux kernel. Support\nwas added to glibc in version 2.25.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This system\ncall is Linux-specific.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an overview\nand comparison of the various interfaces that can be used to\nobtain randomness, see <a href=\"https://man.page/7/random\">random(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Unlike\n<i>/dev/random</i> and <i>/dev/urandom</i>,\n<b>getrandom</b>() does not involve the use of pathnames or\nfile descriptors. Thus, <b>getrandom</b>() can be useful in\ncases where <a href=\"https://man.page/2/chroot\">chroot(2)</a> makes <i>/dev</i> pathnames\ninvisible, and where an application (e.g., a daemon during\nstart-up) closes a file descriptor for one of these files\nthat was opened by a library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Maximum\nnumber of bytes returned</b> <br>\nAs of Linux 3.19 the following limits apply:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">When reading from the\n<i>urandom</i> source, a maximum of 33554431 bytes is\nreturned by a single call to <b>getrandom</b>() on systems\nwhere <i>int</i> has a size of 32 bits.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>When reading from the <i>random</i> source, a maximum of\n512 bytes is returned.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Interruption\nby a signal handler</b> <br>\nWhen reading from the <i>urandom</i> source\n(<b>GRND_RANDOM</b> is not set), <b>getrandom</b>() will\nblock until the entropy pool has been initialized (unless\nthe <b>GRND_NONBLOCK</b> flag was specified). If a request\nis made to read a large number of bytes (more than 256),\n<b>getrandom</b>() will block until those bytes have been\ngenerated and transferred from kernel memory to <i>buf</i>.\nWhen reading from the <i>random</i> source\n(<b>GRND_RANDOM</b> is set), <b>getrandom</b>() will block\nuntil some random bytes become available (unless the\n<b>GRND_NONBLOCK</b> flag was specified).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The behavior\nwhen a call to <b>getrandom</b>() that is blocked while\nreading from the <i>urandom</i> source is interrupted by a\nsignal handler depends on the initialization state of the\nentropy buffer and on the request size, <i>buflen</i>. If\nthe entropy is not yet initialized, then the call fails with\nthe <b>EINTR</b> error. If the entropy pool has been\ninitialized and the request size is large\n(<i>buflen&nbsp;</i>&gt;&nbsp;256), the call either\nsucceeds, returning a partially filled buffer, or fails with\nthe error <b>EINTR</b>. If the entropy pool has been\ninitialized and the request size is small\n(<i>buflen&nbsp;</i>&lt;=&nbsp;256), then <b>getrandom</b>()\nwill not fail with <b>EINTR</b>. Instead, it will return all\nof the bytes that have been requested.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When reading\nfrom the <i>random</i> source, blocking requests of any size\ncan be interrupted by a signal handler (the call fails with\nthe error <b>EINTR</b>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using\n<b>getrandom</b>() to read small buffers (&lt;=&nbsp;256\nbytes) from the <i>urandom</i> source is the preferred mode\nof usage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The special\ntreatment of small values of <i>buflen</i> was designed for\ncompatibility with OpenBSD&rsquo;s <a href=\"https://man.page/3/getentropy\">getentropy(3)</a>,\nwhich is nowadays supported by glibc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The user of\n<b>getrandom</b>() <i>must</i> always check the return\nvalue, to determine whether either an error occurred or\nfewer bytes than requested were returned. In the case where\n<b>GRND_RANDOM</b> is not specified and <i>buflen</i> is\nless than or equal to 256, a return of fewer bytes than\nrequested should never happen, but the careful programmer\nwill check for this anyway!</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">As of Linux\n3.19, the following bug exists:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Depending on CPU load,\n<b>getrandom</b>() does not react to interrupts before\nreading all bytes requested.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/getentropy\">getentropy(3)</a>,\n<a href=\"https://man.page/4/random\">random(4)</a>, <a href=\"https://man.page/4/urandom\">urandom(4)</a>, <a href=\"https://man.page/7/random\">random(7)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUE\">RETURN VALUE</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":2}