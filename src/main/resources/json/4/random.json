{"name":"random","body":"\n\n<h1 align=\"center\">RANDOM</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">random, urandom\n- kernel random number source devices</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;linux/random.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nioctl(</b><i>fd</i><b>, RND</b><i>request</i><b>,</b>\n<i>param</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The character\nspecial files <i>/dev/random</i> and <i>/dev/urandom</i>\n(present since Linux 1.3.30) provide an interface to the\nkernel&rsquo;s random number generator. The file\n<i>/dev/random</i> has major device number 1 and minor\ndevice number 8. The file <i>/dev/urandom</i> has major\ndevice number 1 and minor device number 9.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The random\nnumber generator gathers environmental noise from device\ndrivers and other sources into an entropy pool. The\ngenerator also keeps an estimate of the number of bits of\nnoise in the entropy pool. From this entropy pool, random\nnumbers are created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux 3.17 and\nlater provides the simpler and safer <a href=\"https://man.page/2/getrandom\">getrandom(2)</a>\ninterface which requires no special files; see the\n<a href=\"https://man.page/2/getrandom\">getrandom(2)</a> manual page for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When read, the\n<i>/dev/urandom</i> device returns random bytes using a\npseudorandom number generator seeded from the entropy pool.\nReads from this device do not block (i.e., the CPU is not\nyielded), but can incur an appreciable delay when requesting\nlarge amounts of data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When read\nduring early boot time, <i>/dev/urandom</i> may return data\nprior to the entropy pool being initialized. If this is of\nconcern in your application, use <a href=\"https://man.page/2/getrandom\">getrandom(2)</a> or\n<i>/dev/random</i> instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>/dev/random</i> device is a legacy interface which dates\nback to a time where the cryptographic primitives used in\nthe implementation of <i>/dev/urandom</i> were not widely\ntrusted. It will return random bytes only within the\nestimated number of bits of fresh noise in the entropy pool,\nblocking if necessary. <i>/dev/random</i> is suitable for\napplications that need high quality randomness, and can\nafford indeterminate delays.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\nentropy pool is empty, reads from <i>/dev/random</i> will\nblock until additional environmental noise is gathered. If\n<a href=\"https://man.page/2/open\">open(2)</a> is called for <i>/dev/random</i> with the\n<b>O_NONBLOCK</b> flag, a subsequent <a href=\"https://man.page/2/read\">read(2)</a> will not\nblock if the requested number of bytes is not available.\nInstead, the available bytes are returned. If no byte is\navailable, <a href=\"https://man.page/2/read\">read(2)</a> will return -1 and <i>errno</i>\nwill be set to <b>EAGAIN</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>O_NONBLOCK</b> flag has no effect when opening\n<i>/dev/urandom</i>. When calling <a href=\"https://man.page/2/read\">read(2)</a> for the\ndevice <i>/dev/urandom</i>, reads of up to 256 bytes will\nreturn as many bytes as are requested and will not be\ninterrupted by a signal handler. Reads with a buffer over\nthis limit may return less than the requested number of\nbytes or fail with the error <b>EINTR</b>, if interrupted by\na signal handler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.16, a <a href=\"https://man.page/2/read\">read(2)</a> from <i>/dev/urandom</i> will return\nat most 32&nbsp;MB. A <a href=\"https://man.page/2/read\">read(2)</a> from <i>/dev/random</i>\nwill return at most 512 bytes (340 bytes on Linux kernels\nbefore version 2.6.12).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Writing to\n<i>/dev/random</i> or <i>/dev/urandom</i> will update the\nentropy pool with the data written, but this will not result\nin a higher entropy count. This means that it will impact\nthe contents read from both files, but it will not make\nreads from <i>/dev/random</i> faster.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Usage</b>\n<br>\nThe <i>/dev/random</i> interface is considered a legacy\ninterface, and <i>/dev/urandom</i> is preferred and\nsufficient in all use cases, with the exception of\napplications which require randomness during early boot\ntime; for these applications, <a href=\"https://man.page/2/getrandom\">getrandom(2)</a> must be\nused instead, because it will block until the entropy pool\nis initialized.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a seed file\nis saved across reboots as recommended below, the output is\ncryptographically secure against attackers without local\nroot access as soon as it is reloaded in the boot sequence,\nand perfectly adequate for network encryption session keys.\n(All major Linux distributions have saved the seed file\nacross reboots since 2000 at least.) Since reads from\n<i>/dev/random</i> may block, users will usually want to\nopen it in nonblocking mode (or perform a read with\ntimeout), and provide some sort of user notification if the\ndesired entropy is not immediately available.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Configuration</b>\n<br>\nIf your system does not have <i>/dev/random</i> and\n<i>/dev/urandom</i> created already, they can be created\nwith the following commands:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mknod -m 666\n/dev/random c 1 8 <br>\nmknod -m 666 /dev/urandom c 1 9 <br>\nchown root:root /dev/random /dev/urandom</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a Linux\nsystem starts up without much operator interaction, the\nentropy pool may be in a fairly predictable state. This\nreduces the actual amount of noise in the entropy pool below\nthe estimate. In order to counteract this effect, it helps\nto carry entropy pool information across shut-downs and\nstart-ups. To do this, add the lines to an appropriate\nscript which is run during the Linux system start-up\nsequence:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">echo\n&quot;Initializing random number generator...&quot; <br>\nrandom_seed=/var/run/random-seed <br>\n# Carry a random seed from start-up to start-up <br>\n# Load and then save the whole entropy pool <br>\nif [ -f $random_seed ]; then <br>\ncat $random_seed &gt;/dev/urandom <br>\nelse <br>\ntouch $random_seed <br>\nfi <br>\nchmod 600 $random_seed <br>\npoolfile=/proc/sys/kernel/random/poolsize <br>\n[ -r $poolfile ] &amp;&amp; bits=$(cat $poolfile) ||\nbits=4096 <br>\nbytes=$(expr $bits / 8) <br>\ndd if=/dev/urandom of=$random_seed count=1 bs=$bytes</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also, add the\nfollowing lines in an appropriate script which is run during\nthe Linux system shutdown:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Carry a\nrandom seed from shut-down to start-up <br>\n# Save the whole entropy pool <br>\necho &quot;Saving random seed...&quot; <br>\nrandom_seed=/var/run/random-seed <br>\ntouch $random_seed <br>\nchmod 600 $random_seed <br>\npoolfile=/proc/sys/kernel/random/poolsize <br>\n[ -r $poolfile ] &amp;&amp; bits=$(cat $poolfile) ||\nbits=4096 <br>\nbytes=$(expr $bits / 8) <br>\ndd if=/dev/urandom of=$random_seed count=1 bs=$bytes</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above\nexamples, we assume Linux 2.6.0 or later, where\n<i>/proc/sys/kernel/random/poolsize</i> returns the size of\nthe entropy pool in bits (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\ninterfaces</b> <br>\nThe files in the directory <i>/proc/sys/kernel/random</i>\n(present since 2.3.16) provide additional information about\nthe <i>/dev/random</i> device: <i><br>\nentropy_avail</i></p>\n\n<p style=\"margin-left:22%;\">This read-only file gives the\navailable entropy, in bits. This will be a number in the\nrange 0 to 4096.</p>\n\n<p style=\"margin-left:11%;\"><i>poolsize</i></p>\n\n<p style=\"margin-left:22%;\">This file gives the size of the\nentropy pool. The semantics of this file vary across kernel\nversions: <br>\nLinux 2.4:</p>\n\n<p style=\"margin-left:32%;\">This file gives the size of the\nentropy pool in <i>bytes</i>. Normally, this file will have\nthe value 512, but it is writable, and can be changed to any\nvalue for which an algorithm is available. The choices are\n32, 64, 128, 256, 512, 1024, or 2048.</p>\n\n<p style=\"margin-left:22%;\">Linux 2.6 and later:</p>\n\n<p style=\"margin-left:32%;\">This file is read-only, and\ngives the size of the entropy pool in <i>bits</i>. It\ncontains the value 4096.</p>\n\n\n<p style=\"margin-left:11%;\"><i>read_wakeup_threshold</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the number\nof bits of entropy required for waking up processes that\nsleep waiting for entropy from <i>/dev/random</i>. The\ndefault is 64.</p>\n\n\n<p style=\"margin-left:11%;\"><i>write_wakeup_threshold</i></p>\n\n<p style=\"margin-left:22%;\">This file contains the number\nof bits of entropy below which we wake up processes that do\na <a href=\"https://man.page/2/select\">select(2)</a> or <a href=\"https://man.page/2/poll\">poll(2)</a> for write access to\n<i>/dev/random</i>. These values can be changed by writing\nto the files.</p>\n\n<p style=\"margin-left:11%;\"><i>uuid</i> and\n<i>boot_id</i></p>\n\n<p style=\"margin-left:22%;\">These read-only files contain\nrandom strings like 6fd5a44b-35f4-4ad4-a9b9-6b9be13e1fe9.\nThe former is generated afresh for each read, the latter was\ngenerated once.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ioctl(2)\ninterface</b> <br>\nThe following <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> requests are defined on file\ndescriptors connected to either <i>/dev/random</i> or\n<i>/dev/urandom</i>. All requests performed will interact\nwith the input entropy pool impacting both\n<i>/dev/random</i> and <i>/dev/urandom</i>. The\n<b>CAP_SYS_ADMIN</b> capability is required for all requests\nexcept <b>RNDGETENTCNT</b>. <b><br>\nRNDGETENTCNT</b></p>\n\n<p style=\"margin-left:22%;\">Retrieve the entropy count of\nthe input pool, the contents will be the same as the\n<i>entropy_avail</i> file under proc. The result will be\nstored in the int pointed to by the argument.</p>\n\n<p style=\"margin-left:11%;\"><b>RNDADDTOENTCNT</b></p>\n\n<p style=\"margin-left:22%;\">Increment or decrement the\nentropy count of the input pool by the value pointed to by\nthe argument.</p>\n\n<p style=\"margin-left:11%;\"><b>RNDGETPOOL</b></p>\n\n<p style=\"margin-left:22%;\">Removed in Linux 2.6.9.</p>\n\n<p style=\"margin-left:11%;\"><b>RNDADDENTROPY</b></p>\n\n<p style=\"margin-left:22%;\">Add some additional entropy to\nthe input pool, incrementing the entropy count. This differs\nfrom writing to <i>/dev/random</i> or <i>/dev/urandom</i>,\nwhich only adds some data but does not increment the entropy\ncount. The following structure is used:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nrand_pool_info { <br>\nint entropy_count; <br>\nint buf_size; <br>\n__u32 buf[0]; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Here\n<i>entropy_count</i> is the value added to (or subtracted\nfrom) the entropy count, and <i>buf</i> is the buffer of\nsize <i>buf_size</i> which gets added to the entropy\npool.</p>\n\n<p style=\"margin-left:11%;\"><b>RNDZAPENTCNT</b>,\n<b>RNDCLEARPOOL</b></p>\n\n<p style=\"margin-left:22%;\">Zero the entropy count of all\npools and add some system data (such as wall clock) to the\npools.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/dev/random\n<br>\n/dev/urandom</i></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an overview\nand comparison of the various interfaces that can be used to\nobtain randomness, see <a href=\"https://man.page/7/random\">random(7)</a>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">During early\nboot time, reads from <i>/dev/urandom</i> may return data\nprior to the entropy pool being initialized.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/mknod\">mknod(1)</a>,\n<a href=\"https://man.page/2/getrandom\">getrandom(2)</a>, <a href=\"https://man.page/7/random\">random(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC&nbsp;1750,\n&quot;Randomness Recommendations for Security&quot;</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":4}