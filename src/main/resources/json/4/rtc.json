{"name":"rtc","description":"rtc - real-time\nclock","body":"\n\n<h1 align=\"center\">RTC</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">rtc - real-time\nclock</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;linux/rtc.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>int\nioctl(</b><i>fd</i><b>, RTC_</b><i>request</i><b>,</b>\n<i>param</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is the\ninterface to drivers for real-time clocks (RTCs).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most computers\nhave one or more hardware clocks which record the current\n&quot;wall clock&quot; time. These are called &quot;Real\nTime Clocks&quot; (RTCs). One of these usually has battery\nbackup power so that it tracks the time even while the\ncomputer is turned off. RTCs often provide alarms and other\ninterrupts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All i386 PCs,\nand ACPI-based systems, have an RTC that is compatible with\nthe Motorola MC146818 chip on the original PC/AT. Today such\nan RTC is usually integrated into the mainboard&rsquo;s\nchipset (south bridge), and uses a replaceable coin-sized\nbackup battery.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Non-PC systems,\nsuch as embedded systems built around system-on-chip\nprocessors, use other implementations. They usually\nwon&rsquo;t offer the same functionality as the RTC from a\nPC/AT.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>RTC vs\nsystem clock</b> <br>\nRTCs should not be confused with the system clock, which is\na software clock maintained by the kernel and used to\nimplement <a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a> and <a href=\"https://man.page/2/time\">time(2)</a>, as well\nas setting timestamps on files, and so on. The system clock\nreports seconds and microseconds since a start point,\ndefined to be the POSIX Epoch: 1970-01-01 00:00:00 +0000\n(UTC). (One common implementation counts timer interrupts,\nonce per &quot;jiffy&quot;, at a frequency of 100, 250, or\n1000 Hz.) That is, it is supposed to report wall clock time,\nwhich RTCs also do.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A key\ndifference between an RTC and the system clock is that RTCs\nrun even when the system is in a low power state (including\n&quot;off&quot;), and the system clock can&rsquo;t. Until it\nis initialized, the system clock can only report time since\nsystem boot ... not since the POSIX Epoch. So at boot time,\nand after resuming from a system low power state, the system\nclock will often be set to the current wall clock time using\nan RTC. Systems without an RTC need to set the system clock\nusing another clock, maybe across the network or by entering\nthat data manually.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>RTC\nfunctionality</b> <br>\nRTCs can be read and written with <b>hwclock</b>(8), or\ndirectly with the <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> requests listed below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Besides\ntracking the date and time, many RTCs can also generate\ninterrupts</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>on every clock update (i.e., once per second);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>at periodic intervals with a frequency that can be set\nto any power-of-2 multiple in the range 2 Hz to 8192 Hz;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>on reaching a previously specified alarm time.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of those\ninterrupt sources can be enabled or disabled separately. On\nmany systems, the alarm interrupt can be configured as a\nsystem wakeup event, which can resume the system from a low\npower state such as Suspend-to-RAM (STR, called S3 in ACPI\nsystems), Hibernation (called S4 in ACPI systems), or even\n&quot;off&quot; (called S5 in ACPI systems). On some\nsystems, the battery backed RTC can&rsquo;t issue\ninterrupts, but another one can.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>/dev/rtc</i> (or <i>/dev/rtc0</i>, <i>/dev/rtc1</i>,\netc.) device can be opened only once (until it is closed)\nand it is read-only. On <a href=\"https://man.page/2/read\">read(2)</a> and <a href=\"https://man.page/2/select\">select(2)</a>\nthe calling process is blocked until the next interrupt from\nthat RTC is received. Following the interrupt, the process\ncan read a long integer, of which the least significant byte\ncontains a bit mask encoding the types of interrupt that\noccurred, while the remaining 3 bytes contain the number of\ninterrupts since the last <a href=\"https://man.page/2/read\">read(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ioctl(2)\ninterface</b> <br>\nThe following <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> requests are defined on file\ndescriptors connected to RTC devices: <b><br>\nRTC_RD_TIME</b></p>\n\n<p style=\"margin-left:22%;\">Returns this RTC&rsquo;s time\nin the following structure:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct rtc_time\n{ <br>\nint tm_sec; <br>\nint tm_min; <br>\nint tm_hour; <br>\nint tm_mday; <br>\nint tm_mon; <br>\nint tm_year; <br>\nint tm_wday; /* unused */ <br>\nint tm_yday; /* unused */ <br>\nint tm_isdst; /* unused */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields in\nthis structure have the same meaning and ranges as for the\n<i>tm</i> structure described in <a href=\"https://man.page/3/gmtime\">gmtime(3)</a>. A pointer\nto this structure should be passed as the third\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> argument.</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_SET_TIME</b></p>\n\n<p style=\"margin-left:22%;\">Sets this RTC&rsquo;s time to\nthe time specified by the <i>rtc_time</i> structure pointed\nto by the third <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> argument. To set the\nRTC&rsquo;s time the process must be privileged (i.e., have\nthe <b>CAP_SYS_TIME</b> capability).</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_ALM_READ</b>,\n<b>RTC_ALM_SET</b></p>\n\n<p style=\"margin-left:22%;\">Read and set the alarm time,\nfor RTCs that support alarms. The alarm interrupt must be\nseparately enabled or disabled using the <b>RTC_AIE_ON</b>,\n<b>RTC_AIE_OFF</b> requests. The third <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\nargument is a pointer to an <i>rtc_time</i> structure. Only\nthe <i>tm_sec</i>, <i>tm_min</i>, and <i>tm_hour</i> fields\nof this structure are used.</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_IRQP_READ</b>,\n<b>RTC_IRQP_SET</b></p>\n\n<p style=\"margin-left:22%;\">Read and set the frequency for\nperiodic interrupts, for RTCs that support periodic\ninterrupts. The periodic interrupt must be separately\nenabled or disabled using the <b>RTC_PIE_ON</b>,\n<b>RTC_PIE_OFF</b> requests. The third <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\nargument is an <i>unsigned long&nbsp;*</i> or an <i>unsigned\nlong</i>, respectively. The value is the frequency in\ninterrupts per second. The set of allowable frequencies is\nthe multiples of two in the range 2 to 8192. Only a\nprivileged process (i.e., one having the\n<b>CAP_SYS_RESOURCE</b> capability) can set frequencies\nabove the value specified in\n<i>/proc/sys/dev/rtc/max-user-freq</i>. (This file contains\nthe value 64 by default.)</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_AIE_ON</b>,\n<b>RTC_AIE_OFF</b></p>\n\n<p style=\"margin-left:22%;\">Enable or disable the alarm\ninterrupt, for RTCs that support alarms. The third\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> argument is ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_UIE_ON</b>,\n<b>RTC_UIE_OFF</b></p>\n\n<p style=\"margin-left:22%;\">Enable or disable the interrupt\non every clock update, for RTCs that support this\nonce-per-second interrupt. The third <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\nargument is ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_PIE_ON</b>,\n<b>RTC_PIE_OFF</b></p>\n\n<p style=\"margin-left:22%;\">Enable or disable the periodic\ninterrupt, for RTCs that support these periodic interrupts.\nThe third <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> argument is ignored. Only a\nprivileged process (i.e., one having the\n<b>CAP_SYS_RESOURCE</b> capability) can enable the periodic\ninterrupt if the frequency is currently set above the value\nspecified in <i>/proc/sys/dev/rtc/max-user-freq</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_EPOCH_READ</b>,\n<b>RTC_EPOCH_SET</b></p>\n\n<p style=\"margin-left:22%;\">Many RTCs encode the year in an\n8-bit register which is either interpreted as an 8-bit\nbinary number or as a BCD number. In both cases, the number\nis interpreted relative to this RTC&rsquo;s Epoch. The\nRTC&rsquo;s Epoch is initialized to 1900 on most systems but\non Alpha and MIPS it might also be initialized to 1952,\n1980, or 2000, depending on the value of an RTC register for\nthe year. With some RTCs, these operations can be used to\nread or to set the RTC&rsquo;s Epoch, respectively. The\nthird <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> argument is an <i>unsigned\nlong&nbsp;*</i> or an <i>unsigned long</i>, respectively,\nand the value returned (or assigned) is the Epoch. To set\nthe RTC&rsquo;s Epoch the process must be privileged (i.e.,\nhave the <b>CAP_SYS_TIME</b> capability).</p>\n\n<p style=\"margin-left:11%;\"><b>RTC_WKALM_RD</b>,\n<b>RTC_WKALM_SET</b></p>\n\n<p style=\"margin-left:22%;\">Some RTCs support a more\npowerful alarm interface, using these ioctls to read or\nwrite the RTC&rsquo;s alarm time (respectively) with this\nstructure:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nrtc_wkalrm { <br>\nunsigned char enabled; <br>\nunsigned char pending; <br>\nstruct rtc_time time; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>enabled</i> flag is used to enable or disable the alarm\ninterrupt, or to read its current status; when using these\ncalls, <b>RTC_AIE_ON</b> and <b>RTC_AIE_OFF</b> are not\nused. The <i>pending</i> flag is used by <b>RTC_WKALM_RD</b>\nto report a pending interrupt (so it&rsquo;s mostly useless\non Linux, except when talking to the RTC managed by EFI\nfirmware). The <i>time</i> field is as used with\n<b>RTC_ALM_READ</b> and <b>RTC_ALM_SET</b> except that the\n<i>tm_mday</i>, <i>tm_mon</i>, and <i>tm_year</i> fields are\nalso valid. A pointer to this structure should be passed as\nthe third <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> argument.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/dev/rtc</i>,\n<i>/dev/rtc0</i>, <i>/dev/rtc1</i>, etc.</p>\n\n<p style=\"margin-left:22%;\">RTC special character device\nfiles.</p>\n\n<p style=\"margin-left:11%;\"><i>/proc/driver/rtc</i></p>\n\n<p style=\"margin-left:22%;\">status of the (first) RTC.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\nkernel&rsquo;s system time is synchronized with an external\nreference using <a href=\"https://man.page/2/adjtimex\">adjtimex(2)</a> it will update a\ndesignated RTC periodically every 11 minutes. To do so, the\nkernel has to briefly turn off periodic interrupts; this\nmight affect programs using that RTC.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An RTC&rsquo;s\nEpoch has nothing to do with the POSIX Epoch which is used\nonly for the system clock.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the year\naccording to the RTC&rsquo;s Epoch and the year register is\nless than 1970 it is assumed to be 100 years later, that is,\nbetween 2000 and 2069.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some RTCs\nsupport &quot;wildcard&quot; values in alarm fields, to\nsupport scenarios like periodic alarms at fifteen minutes\nafter every hour, or on the first day of each month. Such\nusage is nonportable; portable user-space code expects only\na single alarm interrupt, and will either disable or\nreinitialize the alarm after receiving it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some RTCs\nsupport periodic interrupts with periods that are multiples\nof a second rather than fractions of a second; multiple\nalarms; programmable output clock signals; nonvolatile\nmemory; and other hardware capabilities that are not\ncurrently exposed by this API.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/date\">date(1)</a>,\n<a href=\"https://man.page/2/adjtimex\">adjtimex(2)</a>, <a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a>,\n<a href=\"https://man.page/2/settimeofday\">settimeofday(2)</a>, <a href=\"https://man.page/2/stime\">stime(2)</a>, <a href=\"https://man.page/2/time\">time(2)</a>,\n<a href=\"https://man.page/3/gmtime\">gmtime(3)</a>, <a href=\"https://man.page/7/time\">time(7)</a>, <b>hwclock</b>(8)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Documentation/rtc.txt</i>\nin the Linux kernel source tree</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":4}