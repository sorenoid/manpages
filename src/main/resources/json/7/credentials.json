{"name":"credentials","body":"\n\n<h1 align=\"center\">CREDENTIALS</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">credentials -\nprocess identifiers</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Process ID\n(PID)</b> <br>\nEach process has a unique nonnegative integer identifier\nthat is assigned when the process is created using\n<a href=\"https://man.page/2/fork\">fork(2)</a>. A process can obtain its PID using\n<a href=\"https://man.page/2/getpid\">getpid(2)</a>. A PID is represented using the type\n<i>pid_t</i> (defined in <i>&lt;sys/types.h&gt;</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">PIDs are used\nin a range of system calls to identify the process affected\nby the call, for example: <a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>,\n<a href=\"https://man.page/2/setpriority\">setpriority(2)</a> <a href=\"https://man.page/2/setpgid\">setpgid(2)</a>, <a href=\"https://man.page/2/setsid\">setsid(2)</a>,\n<a href=\"https://man.page/3/sigqueue\">sigqueue(3)</a>, and <a href=\"https://man.page/2/waitpid\">waitpid(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nprocess&rsquo;s PID is preserved across an\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Parent\nprocess ID (PPID)</b> <br>\nA process&rsquo;s parent process ID identifies the process\nthat created this process using <a href=\"https://man.page/2/fork\">fork(2)</a>. A process\ncan obtain its PPID using <a href=\"https://man.page/2/getppid\">getppid(2)</a>. A PPID is\nrepresented using the type <i>pid_t</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\nprocess&rsquo;s PPID is preserved across an\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Process\ngroup ID and session ID</b> <br>\nEach process has a session ID and a process group ID, both\nrepresented using the type <i>pid_t</i>. A process can\nobtain its session ID using <a href=\"https://man.page/2/getsid\">getsid(2)</a>, and its\nprocess group ID using <a href=\"https://man.page/2/getpgrp\">getpgrp(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A child created\nby <a href=\"https://man.page/2/fork\">fork(2)</a> inherits its parent&rsquo;s session ID and\nprocess group ID. A process&rsquo;s session ID and process\ngroup ID are preserved across an <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Sessions and\nprocess groups are abstractions devised to support shell job\ncontrol. A process group (sometimes called a\n&quot;job&quot;) is a collection of processes that share the\nsame process group ID; the shell creates a new process group\nfor the process(es) used to execute single command or\npipeline (e.g., the two processes created to execute the\ncommand &quot;ls&nbsp;|&nbsp;wc&quot; are placed in the same\nprocess group). A process&rsquo;s group membership can be\nset using <a href=\"https://man.page/2/setpgid\">setpgid(2)</a>. The process whose process ID is\nthe same as its process group ID is the <i>process group\nleader</i> for that group.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A session is a\ncollection of processes that share the same session ID. All\nof the members of a process group also have the same session\nID (i.e., all of the members of a process group always\nbelong to the same session, so that sessions and process\ngroups form a strict two-level hierarchy of processes.) A\nnew session is created when a process calls\n<a href=\"https://man.page/2/setsid\">setsid(2)</a>, which creates a new session whose session\nID is the same as the PID of the process that called\n<a href=\"https://man.page/2/setsid\">setsid(2)</a>. The creator of the session is called the\n<i>session leader</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nprocesses in a session share a <i>controlling terminal</i>.\nThe controlling terminal is established when the session\nleader first opens a terminal (unless the <b>O_NOCTTY</b>\nflag is specified when calling <a href=\"https://man.page/2/open\">open(2)</a>). A terminal\nmay be the controlling terminal of at most one session.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">At most one of\nthe jobs in a session may be the <i>foreground job</i>;\nother jobs in the session are <i>background jobs</i>. Only\nthe foreground job may read from the terminal; when a\nprocess in the background attempts to read from the\nterminal, its process group is sent a <b>SIGTTIN</b> signal,\nwhich suspends the job. If the <b>TOSTOP</b> flag has been\nset for the terminal (see <a href=\"https://man.page/3/termios\">termios(3)</a>), then only the\nforeground job may write to the terminal; writes from\nbackground job cause a <b>SIGTTOU</b> signal to be\ngenerated, which suspends the job. When terminal keys that\ngenerate a signal (such as the <i>interrupt</i> key,\nnormally control-C) are pressed, the signal is sent to the\nprocesses in the foreground job.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various system\ncalls and library functions may operate on all members of a\nprocess group, including <a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/3/killpg\">killpg(3)</a>,\n<a href=\"https://man.page/2/getpriority\">getpriority(2)</a>, <a href=\"https://man.page/2/setpriority\">setpriority(2)</a>,\n<a href=\"https://man.page/2/ioprio_get\">ioprio_get(2)</a>, <a href=\"https://man.page/2/ioprio_set\">ioprio_set(2)</a>,\n<a href=\"https://man.page/2/waitid\">waitid(2)</a>, and <a href=\"https://man.page/2/waitpid\">waitpid(2)</a>. See also the\ndiscussion of the <b>F_GETOWN</b>, <b>F_GETOWN_EX</b>,\n<b>F_SETOWN</b>, and <b>F_SETOWN_EX</b> operations in\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>User and\ngroup identifiers</b> <br>\nEach process has various associated user and group IDs.\nThese IDs are integers, respectively represented using the\ntypes <i>uid_t</i> and <i>gid_t</i> (defined in\n<i>&lt;sys/types.h&gt;</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On Linux, each\nprocess has the following user and group identifiers:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Real user ID and real group ID. These IDs determine who\nowns the process. A process can obtain its real user (group)\nID using <a href=\"https://man.page/2/getuid\">getuid(2)</a> (<a href=\"https://man.page/2/getgid\">getgid(2)</a>).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Effective user ID and effective group ID. These IDs are\nused by the kernel to determine the permissions that the\nprocess will have when accessing shared resources such as\nmessage queues, shared memory, and semaphores. On most UNIX\nsystems, these IDs also determine the permissions when\naccessing files. However, Linux uses the filesystem IDs\ndescribed below for this task. A process can obtain its\neffective user (group) ID using <a href=\"https://man.page/2/geteuid\">geteuid(2)</a>\n(<a href=\"https://man.page/2/getegid\">getegid(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Saved set-user-ID and saved set-group-ID. These IDs are\nused in set-user-ID and set-group-ID programs to save a copy\nof the corresponding effective IDs that were set when the\nprogram was executed (see <a href=\"https://man.page/2/execve\">execve(2)</a>). A set-user-ID\nprogram can assume and drop privileges by switching its\neffective user ID back and forth between the values in its\nreal user ID and saved set-user-ID. This switching is done\nvia calls to <a href=\"https://man.page/2/seteuid\">seteuid(2)</a>, <a href=\"https://man.page/2/setreuid\">setreuid(2)</a>, or\n<a href=\"https://man.page/2/setresuid\">setresuid(2)</a>. A set-group-ID program performs the\nanalogous tasks using <a href=\"https://man.page/2/setegid\">setegid(2)</a>, <a href=\"https://man.page/2/setregid\">setregid(2)</a>,\nor <a href=\"https://man.page/2/setresgid\">setresgid(2)</a>. A process can obtain its saved\nset-user-ID (set-group-ID) using <a href=\"https://man.page/2/getresuid\">getresuid(2)</a>\n(<a href=\"https://man.page/2/getresgid\">getresgid(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Filesystem user ID and filesystem group ID\n(Linux-specific). These IDs, in conjunction with the\nsupplementary group IDs described below, are used to\ndetermine permissions for accessing files; see\n<a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a> for details. Whenever a\nprocess&rsquo;s effective user (group) ID is changed, the\nkernel also automatically changes the filesystem user\n(group) ID to the same value. Consequently, the filesystem\nIDs normally have the same values as the corresponding\neffective ID, and the semantics for file-permission checks\nare thus the same on Linux as on other UNIX systems. The\nfilesystem IDs can be made to differ from the effective IDs\nby calling <a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a> and <a href=\"https://man.page/2/setfsgid\">setfsgid(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Supplementary group IDs. This is a set of additional\ngroup IDs that are used for permission checks when accessing\nfiles and other shared resources. On Linux kernels before\n2.6.4, a process can be a member of up to 32 supplementary\ngroups; since kernel 2.6.4, a process can be a member of up\nto 65536 supplementary groups. The call\n<i>sysconf(_SC_NGROUPS_MAX)</i> can be used to determine the\nnumber of supplementary groups of which a process may be a\nmember. A process can obtain its set of supplementary group\nIDs using <a href=\"https://man.page/2/getgroups\">getgroups(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A child process\ncreated by <a href=\"https://man.page/2/fork\">fork(2)</a> inherits copies of its\nparent&rsquo;s user and groups IDs. During an\n<a href=\"https://man.page/2/execve\">execve(2)</a>, a process&rsquo;s real user and group ID\nand supplementary group IDs are preserved; the effective and\nsaved set IDs may be changed, as described in\n<a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Aside from the\npurposes noted above, a process&rsquo;s user IDs are also\nemployed in a number of other contexts:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">when determining the permissions\nfor sending signals (see <a href=\"https://man.page/2/kill\">kill(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>when determining the permissions for setting\nprocess-scheduling parameters (nice value, real time\nscheduling policy and priority, CPU affinity, I/O priority)\nusing <a href=\"https://man.page/2/setpriority\">setpriority(2)</a>, <a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>,\n<a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>, <a href=\"https://man.page/2/sched_setparam\">sched_setparam(2)</a>,\n<a href=\"https://man.page/2/sched_setattr\">sched_setattr(2)</a>, and <a href=\"https://man.page/2/ioprio_set\">ioprio_set(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>when checking resource limits (see\n<a href=\"https://man.page/2/getrlimit\">getrlimit(2)</a>);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>when checking the limit on the number of inotify\ninstances that the process may create (see\n<a href=\"https://man.page/7/inotify\">inotify(7)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Modifying\nprocess user and group IDs</b> <br>\nSubject to rules described in the relevant manual pages, a\nprocess can use the following APIs to modify its user and\ngroup IDs: <b><br>\nsetuid</b>(2) (<a href=\"https://man.page/2/setgid\">setgid(2)</a>)</p>\n\n<p style=\"margin-left:22%;\">Modify the process&rsquo;s real\n(and possibly effective and saved-set) user (group) IDs.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/seteuid\">seteuid(2)</a>\n(<a href=\"https://man.page/2/setegid\">setegid(2)</a>)</p>\n\n<p style=\"margin-left:22%;\">Modify the process&rsquo;s\neffective user (group) ID.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>\n(<a href=\"https://man.page/2/setfsgid\">setfsgid(2)</a>)</p>\n\n<p style=\"margin-left:22%;\">Modify the process&rsquo;s\nfilesystem user (group) ID.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/setreuid\">setreuid(2)</a>\n(<a href=\"https://man.page/2/setregid\">setregid(2)</a>)</p>\n\n<p style=\"margin-left:22%;\">Modify the process&rsquo;s real\nand effective (and possibly saved-set) user (group) IDs.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/setresuid\">setresuid(2)</a>\n(<a href=\"https://man.page/2/setresgid\">setresgid(2)</a>)</p>\n\n<p style=\"margin-left:22%;\">Modify the process&rsquo;s\nreal, effective, and saved-set user (group) IDs.</p>\n\n<p style=\"margin-left:11%;\"><a href=\"https://man.page/2/setgroups\">setgroups(2)</a></p>\n\n<p style=\"margin-left:22%;\">Modify the process&rsquo;s\nsupplementary group list.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any changes to\na process&rsquo;s effective user (group) ID are\nautomatically carried over to the process&rsquo;s filesystem\nuser (group) ID. Changes to a process&rsquo;s effective user\nor group ID can also affect the process &quot;dumpable&quot;\nattribute, as described in <a href=\"https://man.page/2/prctl\">prctl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Changes to\nprocess user and group IDs can affect the capabilities of\nthe process, as described in <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Process IDs,\nparent process IDs, process group IDs, and session IDs are\nspecified in POSIX.1. The real, effective, and saved set\nuser and groups IDs, and the supplementary group IDs, are\nspecified in POSIX.1. The filesystem user and group IDs are\na Linux extension.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various fields\nin the <i>/proc/[pid]/status</i> file show the process\ncredentials described above. See <a href=\"https://man.page/5/proc\">proc(5)</a> for further\ninformation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The POSIX\nthreads specification requires that credentials are shared\nby all of the threads in a process. However, at the kernel\nlevel, Linux maintains separate user and group credentials\nfor each thread. The NPTL threading implementation does some\nwork to ensure that any change to user or group credentials\n(e.g., calls to <a href=\"https://man.page/2/setuid\">setuid(2)</a>, <a href=\"https://man.page/2/setresuid\">setresuid(2)</a>) is\ncarried through to all of the POSIX threads in a process.\nSee <a href=\"https://man.page/7/nptl\">nptl(7)</a> for further details.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/bash\">bash(1)</a>,\n<a href=\"https://man.page/1/csh\">csh(1)</a>, <a href=\"https://man.page/1/groups\">groups(1)</a>, <a href=\"https://man.page/1/id\">id(1)</a>,\n<a href=\"https://man.page/1/newgrp\">newgrp(1)</a>, <a href=\"https://man.page/1/ps\">ps(1)</a>, <a href=\"https://man.page/1/runuser\">runuser(1)</a>,\n<a href=\"https://man.page/1/setpriv\">setpriv(1)</a>, <a href=\"https://man.page/1/sg\">sg(1)</a>, <a href=\"https://man.page/1/su\">su(1)</a>,\n<a href=\"https://man.page/2/access\">access(2)</a>, <a href=\"https://man.page/2/execve\">execve(2)</a>, <a href=\"https://man.page/2/faccessat\">faccessat(2)</a>,\n<a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/getgroups\">getgroups(2)</a>, <a href=\"https://man.page/2/getpgrp\">getpgrp(2)</a>,\n<a href=\"https://man.page/2/getpid\">getpid(2)</a>, <a href=\"https://man.page/2/getppid\">getppid(2)</a>, <a href=\"https://man.page/2/getsid\">getsid(2)</a>,\n<a href=\"https://man.page/2/kill\">kill(2)</a>, <a href=\"https://man.page/2/setegid\">setegid(2)</a>, <a href=\"https://man.page/2/seteuid\">seteuid(2)</a>,\n<a href=\"https://man.page/2/setfsgid\">setfsgid(2)</a>, <a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>, <a href=\"https://man.page/2/setgid\">setgid(2)</a>,\n<a href=\"https://man.page/2/setgroups\">setgroups(2)</a>, <a href=\"https://man.page/2/setpgid\">setpgid(2)</a>, <a href=\"https://man.page/2/setresgid\">setresgid(2)</a>,\n<a href=\"https://man.page/2/setresuid\">setresuid(2)</a>, <a href=\"https://man.page/2/setsid\">setsid(2)</a>, <a href=\"https://man.page/2/setuid\">setuid(2)</a>,\n<a href=\"https://man.page/2/waitpid\">waitpid(2)</a>, <a href=\"https://man.page/3/euidaccess\">euidaccess(3)</a>,\n<a href=\"https://man.page/3/initgroups\">initgroups(3)</a>, <a href=\"https://man.page/3/killpg\">killpg(3)</a>, <a href=\"https://man.page/3/tcgetpgrp\">tcgetpgrp(3)</a>,\n<a href=\"https://man.page/3/tcgetsid\">tcgetsid(3)</a>, <a href=\"https://man.page/3/tcsetpgrp\">tcsetpgrp(3)</a>, <a href=\"https://man.page/5/group\">group(5)</a>,\n<a href=\"https://man.page/5/passwd\">passwd(5)</a>, <a href=\"https://man.page/5/shadow\">shadow(5)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>,\n<a href=\"https://man.page/7/namespaces\">namespaces(7)</a>, <a href=\"https://man.page/7/path_resolution\">path_resolution(7)</a>,\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a>, <a href=\"https://man.page/7/system_data_types\">system_data_types(7)</a>,\n<a href=\"https://man.page/7/unix\">unix(7)</a>, <a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>,\n<b>sudo</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}