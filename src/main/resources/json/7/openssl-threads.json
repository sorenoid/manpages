{"name":"openssl-threads","body":"\n\n<h1 align=\"center\">OPENSSL-THREADS</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">openssl-threads\n- Overview of thread safety in OpenSSL</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this man\npage, we use the term <b>thread-safe</b> to indicate that an\nobject or function can be used by multiple threads at the\nsame time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OpenSSL can be\nbuilt with or without threads support. The most important\nuse of this support is so that OpenSSL itself can use a\nsingle consistent <small>API,</small> as shown in &quot;\n<small>EXAMPLES&quot;</small> in\n<a href=\"https://man.page/3/CRYPTO_THREAD_run_once\">CRYPTO_THREAD_run_once(3)</a>. Multi-platform\napplications can also use this <small>API.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In particular,\nbeing configured for threads support does not imply that all\nOpenSSL objects are thread-safe. To emphasize: <i>most\nobjects are not safe for simultaneous use</i>. Exceptions to\nthis should be documented on the specific manual pages, and\nsome general high-level guidance is given here.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One major use\nof the OpenSSL thread <small>API</small> is to implement\nreference counting. Many objects within OpenSSL are\nreference-counted, so resources are not released, until the\nlast reference is removed. References are often increased\nautomatically (such as when an <b>X509</b> certificate\nobject is added into an <b>X509_STORE</b> trust store).\nThere is often an <b><i>object</i></b><b>_up_ref</b>()\nfunction that can be used to increase the reference count.\nFailure to match <b><i>object</i></b><b>_up_ref</b>() calls\nwith the right number of <b><i>object</i></b><b>_free</b>()\ncalls is a common source of memory leaks when a program\nexits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many objects\nhave set and get <small>API</small> &rsquo;s to set\nattributes in the object. A &quot;set0&quot; passes\nownership from the caller to the object and a\n&quot;get0&quot; returns a pointer but the attribute\nownership remains with the object and a reference to it is\nreturned. A &quot;set1&quot; or &quot;get1&quot; function\ndoes not change the ownership, but instead updates the\nattribute&rsquo;s reference count so that the object is\nshared between the caller and the object; the caller must\nfree the returned attribute when finished. Functions that\ninvolve attributes that have reference counts themselves,\nbut are named with just &quot;set&quot; or &quot;get&quot;\nare historical; and the documentation must state how the\nreferences are handled. Get methods are often thread-safe as\nlong as the ownership requirements are met and shared\nobjects are not modified. Set methods, or modifying shared\nobjects, are generally not thread-safe as discussed\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Objects are\nthread-safe as long as the <small>API</small> &rsquo;s being\ninvoked don&rsquo;t modify the object; in this case the\nparameter is usually marked in the <small>API</small> as\n&quot;const&quot;. Not all parameters are marked this way.\nNote that a &quot;const&quot; declaration does not mean\nimmutable; for example <a href=\"https://man.page/3/X509_cmp\">X509_cmp(3)</a> takes pointers to\n&quot;const&quot; objects, but the implementation uses a C\ncast to remove that so it can lock objects, generate and\ncache a <small>DER</small> encoding, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Another\ninstance of thread-safety is when updates to an\nobject&rsquo;s internal state, such as cached values, are\ndone with locks. One example of this is the reference\ncounting <small>API</small> &rsquo;s described above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In all cases,\nhowever, it is generally not safe for one thread to mutate\nan object, such as setting elements of a private or public\nkey, while another thread is using that object, such as\nverifying a signature.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The same\n<small>API</small> &rsquo;s can usually be used\nsimultaneously on different objects without interference.\nFor example, two threads can calculate a signature using two\ndifferent <b><small>EVP_PKEY_CTX</small></b> objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For implicit\nglobal state or singletons, thread-safety depends on the\nfacility. The <a href=\"https://man.page/3/CRYPTO_secure_malloc\">CRYPTO_secure_malloc(3)</a> and related\n<small>API</small> &rsquo;s have their own lock, while\n<a href=\"https://man.page/3/CRYPTO_malloc\">CRYPTO_malloc(3)</a> assumes the underlying platform\nallocation will do any necessary locking. Some\n<small>API</small> &rsquo;s, such as <a href=\"https://man.page/3/NCONF_load\">NCONF_load(3)</a>\nand related, or <a href=\"https://man.page/3/OBJ_create\">OBJ_create(3)</a> do no locking at all;\nthis can be considered a bug.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A separate,\nalthough related, issue is modifying &quot;factory&quot;\nobjects when other objects have been created from that. For\nexample, an <b><small>SSL_CTX</small></b> object created by\n<a href=\"https://man.page/3/SSL_CTX_new\">SSL_CTX_new(3)</a> is used to create per-connection\n<b><small>SSL</small></b> objects by calling\n<a href=\"https://man.page/3/SSL_new\">SSL_new(3)</a>. In this specific case, and probably for\nfactory methods in general, it is not safe to modify the\nfactory object after it has been used to create other\nobjects.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/CRYPTO_THREAD_run_once\">CRYPTO_THREAD_run_once(3)</a>,\nlocal system threads documentation.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\nadmittedly very incomplete.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 2021\nThe OpenSSL Project Authors. All Rights Reserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}