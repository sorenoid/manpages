{"name":"rtld-audit","description":"rtld-audit - auditing API for the dynamic linker","body":"\n\n<h1 align=\"center\">RTLD-AUDIT</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">rtld-audit -\nauditing API for the dynamic linker</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#define\n_GNU_SOURCE</b> /* See feature_test_macros(7) */ <b><br>\n#include &lt;link.h&gt;</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The GNU dynamic\nlinker (run-time linker) provides an auditing API that\nallows an application to be notified when various dynamic\nlinking events occur. This API is very similar to the\nauditing interface provided by the Solaris run-time linker.\nThe necessary constants and prototypes are defined by\nincluding <i>&lt;link.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To use this\ninterface, the programmer creates a shared library that\nimplements a standard set of function names. Not all of the\nfunctions need to be implemented: in most cases, if the\nprogrammer is not interested in a particular class of\nauditing event, then no implementation needs to be provided\nfor the corresponding auditing function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To employ the\nauditing interface, the environment variable <b>LD_AUDIT</b>\nmust be defined to contain a colon-separated list of shared\nlibraries, each of which can implement (parts of) the\nauditing API. When an auditable event occurs, the\ncorresponding function is invoked in each library, in the\norder that the libraries are listed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_version()\n<br>\nunsigned int la_version(unsigned int</b>\n<i>version</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is the\nonly function that <i>must</i> be defined by an auditing\nlibrary: it performs the initial handshake between the\ndynamic linker and the auditing library. When invoking this\nfunction, the dynamic linker passes, in <i>version</i>, the\nhighest version of the auditing interface that the linker\nsupports.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A typical\nimplementation of this function simply returns the constant\n<b>LAV_CURRENT</b>, which indicates the version of\n<i>&lt;link.h&gt;</i> that was used to build the audit\nmodule. If the dynamic linker does not support this version\nof the audit interface, it will refuse to activate this\naudit module. If the function returns zero, the dynamic\nlinker also does not activate this audit module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In order to\nenable backwards compatibility with older dynamic linkers,\nan audit module can examine the <i>version</i> argument and\nreturn an earlier version than <b>LAV_CURRENT</b>, assuming\nthe module can adjust its implementation to match the\nrequirements of the previous version of the audit interface.\nThe <b>la_version</b> function should not return the value\nof <i>version</i> without further checks because it could\ncorrespond to an interface that does not match the\n<i>&lt;link.h&gt;</i> definitions used to build the audit\nmodule.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_objsearch()\n<br>\nchar *la_objsearch(const char *</b><i>name</i><b>, uintptr_t\n*</b><i>cookie</i><b>, <br>\nunsigned int</b> <i>flag</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The dynamic\nlinker invokes this function to inform the auditing library\nthat it is about to search for a shared object. The\n<i>name</i> argument is the filename or pathname that is to\nbe searched for. <i>cookie</i> identifies the shared object\nthat initiated the search. <i>flag</i> is set to one of the\nfollowing values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>LA_SER_ORIG</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"63%\">\n\n\n<p>This is the original name that is being searched for.\nTypically, this name comes from an ELF <b>DT_NEEDED</b>\nentry, or is the <i>filename</i> argument given to\n<a href=\"https://man.page/3/dlopen\">dlopen(3)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>LA_SER_LIBPATH</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"63%\">\n\n\n<p><i>name</i> was created using a directory specified in\n<b>LD_LIBRARY_PATH</b>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>LA_SER_RUNPATH</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"63%\">\n\n\n<p><i>name</i> was created using a directory specified in\nan ELF <b>DT_RPATH</b> or <b>DT_RUNPATH</b> list.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>LA_SER_CONFIG</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"63%\">\n\n\n<p><i>name</i> was found via the <b>ldconfig</b>(8) cache\n(<i>/etc/ld.so.cache</i>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>LA_SER_DEFAULT</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"63%\">\n\n\n<p><i>name</i> was found via a search of one of the default\ndirectories.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"21%\">\n\n\n<p><b>LA_SER_SECURE</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"63%\">\n\n\n<p><i>name</i> is specific to a secure object (unused on\nLinux).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As its function\nresult, <b>la_objsearch</b>() returns the pathname that the\ndynamic linker should use for further processing. If NULL is\nreturned, then this pathname is ignored for further\nprocessing. If this audit library simply intends to monitor\nsearch paths, then <i>name</i> should be returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_activity()\n<br>\nvoid la_activity( uintptr_t *</b><i>cookie</i><b>, unsigned\nint</b> <i>flag</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The dynamic\nlinker calls this function to inform the auditing library\nthat link-map activity is occurring. <i>cookie</i>\nidentifies the object at the head of the link map. When the\ndynamic linker invokes this function, <i>flag</i> is set to\none of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\"><b>LA_ACT_ADD</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"60%\">\n\n\n<p style=\"margin-top: 1em\">New objects are being added to\nthe link map.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"26%\">\n\n\n<p><b>LA_ACT_DELETE</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"60%\">\n\n\n<p>Objects are being removed from the link map.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"26%\">\n\n\n<p><b>LA_ACT_CONSISTENT</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"60%\">\n\n\n<p>Link-map activity has been completed: the map is once\nagain consistent.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_objopen()\n<br>\nunsigned int la_objopen(struct link_map *</b><i>map</i><b>,\nLmid_t</b> <i>lmid</i><b>, <br>\nuintptr_t *</b><i>cookie</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The dynamic\nlinker calls this function when a new shared object is\nloaded. The <i>map</i> argument is a pointer to a link-map\nstructure that describes the object. The <i>lmid</i> field\nhas one of the following values</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p style=\"margin-top: 1em\"><b>LM_ID_BASE</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\">Link map is part of the initial\nnamespace.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"17%\">\n\n\n<p><b>LM_ID_NEWLM</b></p></td>\n<td width=\"9%\"></td>\n<td width=\"63%\">\n\n\n<p>Link map is part of a new namespace requested via\n<a href=\"https://man.page/3/dlmopen\">dlmopen(3)</a>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>cookie</i>\nis a pointer to an identifier for this object. The\nidentifier is provided to later calls to functions in the\nauditing library in order to identify this object. This\nidentifier is initialized to point to object&rsquo;s link\nmap, but the audit library can change the identifier to some\nother value that it may prefer to use to identify the\nobject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As its return\nvalue, <b>la_objopen</b>() returns a bit mask created by\nORing zero or more of the following constants, which allow\nthe auditing library to select the objects to be monitored\nby <b>la_symbind*</b>():</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"23%\">\n\n\n<p style=\"margin-top: 1em\"><b>LA_FLG_BINDTO</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"60%\">\n\n\n<p style=\"margin-top: 1em\">Audit symbol bindings to this\nobject.</p> </td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"23%\">\n\n\n<p><b>LA_FLG_BINDFROM</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"60%\">\n\n\n<p>Audit symbol bindings from this object.</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A return value\nof 0 from <b>la_objopen</b>() indicates that no symbol\nbindings should be audited for this object.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_objclose()\n<br>\nunsigned int la_objclose(uintptr_t\n*</b><i>cookie</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The dynamic\nlinker invokes this function after any finalization code for\nthe object has been executed, before the object is unloaded.\nThe <i>cookie</i> argument is the identifier obtained from a\nprevious invocation of <b>la_objopen</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the current\nimplementation, the value returned by <b>la_objclose</b>()\nis ignored.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_preinit()\n<br>\nvoid la_preinit(uintptr_t *</b><i>cookie</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The dynamic\nlinker invokes this function after all shared objects have\nbeen loaded, before control is passed to the application\n(i.e., before calling <i>main</i>()). Note that\n<i>main</i>() may still later dynamically load objects using\n<a href=\"https://man.page/3/dlopen\">dlopen(3)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_symbind*()\n<br>\nuintptr_t la_symbind32(Elf32_Sym *</b><i>sym</i><b>,\nunsigned int</b> <i>ndx</i><b>, <br>\nuintptr_t *</b><i>refcook</i><b>, uintptr_t\n*</b><i>defcook</i><b>, <br>\nunsigned int *</b><i>flags</i><b>, const char\n*</b><i>symname</i><b>); <br>\nuintptr_t la_symbind64(Elf64_Sym *</b><i>sym</i><b>,\nunsigned int</b> <i>ndx</i><b>, <br>\nuintptr_t *</b><i>refcook</i><b>, uintptr_t\n*</b><i>defcook</i><b>, <br>\nunsigned int *</b><i>flags</i><b>, const char\n*</b><i>symname</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The dynamic\nlinker invokes one of these functions when a symbol binding\noccurs between two shared objects that have been marked for\nauditing notification by <b>la_objopen</b>(). The\n<b>la_symbind32</b>() function is employed on 32-bit\nplatforms; the <b>la_symbind64</b>() function is employed on\n64-bit platforms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>sym</i>\nargument is a pointer to a structure that provides\ninformation about the symbol being bound. The structure\ndefinition is shown in <i>&lt;elf.h&gt;</i>. Among the\nfields of this structure, <i>st_value</i> indicates the\naddress to which the symbol is bound.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>ndx</i>\nargument gives the index of the symbol in the symbol table\nof the bound shared object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>refcook</i> argument identifies the shared object that is\nmaking the symbol reference; this is the same identifier\nthat is provided to the <b>la_objopen</b>() function that\nreturned <b>LA_FLG_BINDFROM</b>. The <i>defcook</i> argument\nidentifies the shared object that defines the referenced\nsymbol; this is the same identifier that is provided to the\n<b>la_objopen</b>() function that returned\n<b>LA_FLG_BINDTO</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>symname</i> argument points a string containing the name\nof the symbol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument is a bit mask that both provides\ninformation about the symbol and can be used to modify\nfurther auditing of this PLT (Procedure Linkage Table)\nentry. The dynamic linker may supply the following bit\nvalues in this argument:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"24%\">\n\n\n<p style=\"margin-top: 1em\"><b>LA_SYMB_DLSYM</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"55%\">\n\n\n<p style=\"margin-top: 1em\">The binding resulted from a call\nto <a href=\"https://man.page/3/dlsym\">dlsym(3)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"24%\">\n\n\n<p><b>LA_SYMB_ALTVALUE</b></p></td>\n<td width=\"10%\"></td>\n<td width=\"55%\">\n\n\n<p>A previous <b>la_symbind*</b>() call returned an\nalternate value for this symbol.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, if\nthe auditing library implements <b>la_pltenter</b>() and\n<b>la_pltexit</b>() functions (see below), then these\nfunctions are invoked, after <b>la_symbind</b>(), for PLT\nentries, each time the symbol is referenced. The following\nflags can be ORed into <i>*flags</i> to change this default\nbehavior:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"27%\">\n\n\n<p style=\"margin-top: 1em\"><b>LA_SYMB_NOPLTENTER</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"55%\">\n\n\n<p style=\"margin-top: 1em\">Don&rsquo;t call\n<b>la_pltenter</b>() for this symbol.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"27%\">\n\n\n<p><b>LA_SYMB_NOPLTEXIT</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"55%\">\n\n\n<p>Don&rsquo;t call <b>la_pltexit</b>() for this\nsymbol.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue of <b>la_symbind32</b>() and <b>la_symbind64</b>() is\nthe address to which control should be passed after the\nfunction returns. If the auditing library is simply\nmonitoring symbol bindings, then it should return\n<i>sym-&gt;st_value</i>. A different value may be returned\nif the library wishes to direct control to an alternate\nlocation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_pltenter()</b>\n<br>\nThe precise name and argument types for this function depend\non the hardware platform. (The appropriate definition is\nsupplied by <i>&lt;link.h&gt;</i>.) Here is the definition\nfor x86-32:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Elf32_Addr\nla_i86_gnu_pltenter(Elf32_Sym *</b><i>sym</i><b>, unsigned\nint</b> <i>ndx</i><b>, <br>\nuintptr_t *</b><i>refcook</i><b>, uintptr_t\n*</b><i>defcook</i><b>, <br>\nLa_i86_regs *</b><i>regs</i><b>, unsigned int\n*</b><i>flags</i><b>, <br>\nconst char *</b><i>symname</i><b>, long\n*</b><i>framesizep</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis invoked just before a PLT entry is called, between two\nshared objects that have been marked for binding\nnotification.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>sym</i>,\n<i>ndx</i>, <i>refcook</i>, <i>defcook</i>, and\n<i>symname</i> are as for <b>la_symbind*</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>regs</i>\nargument points to a structure (defined in\n<i>&lt;link.h&gt;</i>) containing the values of registers to\nbe used for the call to this PLT entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>flags</i> argument points to a bit mask that conveys\ninformation about, and can be used to modify subsequent\nauditing of, this PLT entry, as for\n<b>la_symbind*</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>framesizep</i> argument points to a <i>long&nbsp;int</i>\nbuffer that can be used to explicitly set the frame size\nused for the call to this PLT entry. If different\n<b>la_pltenter</b>() invocations for this symbol return\ndifferent values, then the maximum returned value is used.\nThe <b>la_pltexit</b>() function is called only if this\nbuffer is explicitly set to a suitable value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The return\nvalue of <b>la_pltenter</b>() is as for\n<b>la_symbind*</b>().</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>la_pltexit()</b>\n<br>\nThe precise name and argument types for this function depend\non the hardware platform. (The appropriate definition is\nsupplied by <i>&lt;link.h&gt;</i>.) Here is the definition\nfor x86-32:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>unsigned int\nla_i86_gnu_pltexit(Elf32_Sym *</b><i>sym</i><b>, unsigned\nint</b> <i>ndx</i><b>, <br>\nuintptr_t *</b><i>refcook</i><b>, uintptr_t\n*</b><i>defcook</i><b>, <br>\nconst La_i86_regs *</b><i>inregs</i><b>, La_i86_retval\n*</b><i>outregs</i><b>, <br>\nconst char *</b><i>symname</i><b>);</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This function\nis called when a PLT entry, made between two shared objects\nthat have been marked for binding notification, returns. The\nfunction is called just before control returns to the caller\nof the PLT entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>sym</i>,\n<i>ndx</i>, <i>refcook</i>, <i>defcook</i>, and\n<i>symname</i> are as for <b>la_symbind*</b>().</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>inregs</i> argument points to a structure (defined in\n<i>&lt;link.h&gt;</i>) containing the values of registers\nused for the call to this PLT entry. The <i>outregs</i>\nargument points to a structure (defined in\n<i>&lt;link.h&gt;</i>) containing return values for the call\nto this PLT entry. These values can be modified by the\ncaller, and the changes will be visible to the caller of the\nPLT entry.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the current\nGNU implementation, the return value of <b>la_pltexit</b>()\nis ignored.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This API is\nnonstandard, but very similar to the Solaris API, described\nin the Solaris <i>Linker and Libraries Guide</i>, in the\nchapter <i>Runtime Linker Auditing Interface</i>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing differences from the Solaris dynamic linker\nauditing API:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The Solaris\n<b>la_objfilter</b>() interface is not supported by the GNU\nimplementation.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The Solaris <b>la_symbind32</b>() and\n<b>la_pltexit</b>() functions do not provide a\n<i>symname</i> argument.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The Solaris <b>la_pltexit</b>() function does not\nprovide <i>inregs</i> and <i>outregs</i> arguments (but does\nprovide a <i>retval</i> argument with the function return\nvalue).</p> </td></tr>\n</table>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In glibc\nversions up to and include 2.9, specifying more than one\naudit library in <b>LD_AUDIT</b> results in a run-time\ncrash. This is reportedly fixed in glibc 2.10.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;link.h&gt; <br>\n#include &lt;stdio.h&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unsigned int\n<br>\nla_version(unsigned int version) <br>\n{ <br>\nprintf(&quot;la_version(): version = %u; LAV_CURRENT =\n%u\\n&quot;, <br>\nversion, LAV_CURRENT);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return\nLAV_CURRENT; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">char * <br>\nla_objsearch(const char *name, uintptr_t *cookie, unsigned\nint flag) <br>\n{ <br>\nprintf(&quot;la_objsearch(): name = %s; cookie = %p&quot;,\nname, cookie); <br>\nprintf(&quot;; flag = %s\\n&quot;, <br>\n(flag == LA_SER_ORIG) ? &quot;LA_SER_ORIG&quot; : <br>\n(flag == LA_SER_LIBPATH) ? &quot;LA_SER_LIBPATH&quot; : <br>\n(flag == LA_SER_RUNPATH) ? &quot;LA_SER_RUNPATH&quot; : <br>\n(flag == LA_SER_DEFAULT) ? &quot;LA_SER_DEFAULT&quot; : <br>\n(flag == LA_SER_CONFIG) ? &quot;LA_SER_CONFIG&quot; : <br>\n(flag == LA_SER_SECURE) ? &quot;LA_SER_SECURE&quot; : <br>\n&quot;???&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return name;\n<br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">void <br>\nla_activity (uintptr_t *cookie, unsigned int flag) <br>\n{ <br>\nprintf(&quot;la_activity(): cookie = %p; flag = %s\\n&quot;,\ncookie, <br>\n(flag == LA_ACT_CONSISTENT) ? &quot;LA_ACT_CONSISTENT&quot;\n: <br>\n(flag == LA_ACT_ADD) ? &quot;LA_ACT_ADD&quot; : <br>\n(flag == LA_ACT_DELETE) ? &quot;LA_ACT_DELETE&quot; : <br>\n&quot;???&quot;); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unsigned int\n<br>\nla_objopen(struct link_map *map, Lmid_t lmid, uintptr_t\n*cookie) <br>\n{ <br>\nprintf(&quot;la_objopen(): loading \\&quot;%s\\&quot;; lmid =\n%s; cookie=%p\\n&quot;, <br>\nmap-&gt;l_name, <br>\n(lmid == LM_ID_BASE) ? &quot;LM_ID_BASE&quot; : <br>\n(lmid == LM_ID_NEWLM) ? &quot;LM_ID_NEWLM&quot; : <br>\n&quot;???&quot;, <br>\ncookie);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return\nLA_FLG_BINDTO | LA_FLG_BINDFROM; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unsigned int\n<br>\nla_objclose (uintptr_t *cookie) <br>\n{ <br>\nprintf(&quot;la_objclose(): %p\\n&quot;, cookie);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return 0; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">void <br>\nla_preinit(uintptr_t *cookie) <br>\n{ <br>\nprintf(&quot;la_preinit(): %p\\n&quot;, cookie); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">uintptr_t <br>\nla_symbind32(Elf32_Sym *sym, unsigned int ndx, uintptr_t\n*refcook, <br>\nuintptr_t *defcook, unsigned int *flags, const char\n*symname) <br>\n{ <br>\nprintf(&quot;la_symbind32(): symname = %s; sym-&gt;st_value\n= %p\\n&quot;, <br>\nsymname, sym-&gt;st_value); <br>\nprintf(&quot; ndx = %u; flags = %#x&quot;, ndx, *flags);\n<br>\nprintf(&quot;; refcook = %p; defcook = %p\\n&quot;, refcook,\ndefcook);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return\nsym-&gt;st_value; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">uintptr_t <br>\nla_symbind64(Elf64_Sym *sym, unsigned int ndx, uintptr_t\n*refcook, <br>\nuintptr_t *defcook, unsigned int *flags, const char\n*symname) <br>\n{ <br>\nprintf(&quot;la_symbind64(): symname = %s; sym-&gt;st_value\n= %p\\n&quot;, <br>\nsymname, sym-&gt;st_value); <br>\nprintf(&quot; ndx = %u; flags = %#x&quot;, ndx, *flags);\n<br>\nprintf(&quot;; refcook = %p; defcook = %p\\n&quot;, refcook,\ndefcook);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return\nsym-&gt;st_value; <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Elf32_Addr <br>\nla_i86_gnu_pltenter(Elf32_Sym *sym, unsigned int ndx, <br>\nuintptr_t *refcook, uintptr_t *defcook, La_i86_regs *regs,\n<br>\nunsigned int *flags, const char *symname, long *framesizep)\n<br>\n{ <br>\nprintf(&quot;la_i86_gnu_pltenter(): %s (%p)\\n&quot;,\nsymname, sym-&gt;st_value);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">return\nsym-&gt;st_value; <br>\n}</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/ldd\">ldd(1)</a>,\n<a href=\"https://man.page/3/dlopen\">dlopen(3)</a>, <b>ld.so</b>(8), <b>ldconfig</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}