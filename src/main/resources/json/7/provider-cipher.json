{"name":"provider-cipher","body":"\n\n<h1 align=\"center\">PROVIDER-CIPHER</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-cipher\n- The cipher library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n#include &lt;openssl/core_names.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Context management */ <br>\nvoid *OSSL_FUNC_cipher_newctx(void *provctx); <br>\nvoid OSSL_FUNC_cipher_freectx(void *cctx); <br>\nvoid *OSSL_FUNC_cipher_dupctx(void *cctx); <br>\n/* Encryption/decryption */ <br>\nint OSSL_FUNC_cipher_encrypt_init(void *cctx, const unsigned\nchar *key, <br>\nsize_t keylen, const unsigned char *iv, <br>\nsize_t ivlen, const OSSL_PARAM params[]); <br>\nint OSSL_FUNC_cipher_decrypt_init(void *cctx, const unsigned\nchar *key, <br>\nsize_t keylen, const unsigned char *iv, <br>\nsize_t ivlen, const OSSL_PARAM params[]); <br>\nint OSSL_FUNC_cipher_update(void *cctx, unsigned char *out,\nsize_t *outl, <br>\nsize_t outsize, const unsigned char *in, size_t inl); <br>\nint OSSL_FUNC_cipher_final(void *cctx, unsigned char *out,\nsize_t *outl, <br>\nsize_t outsize); <br>\nint OSSL_FUNC_cipher_cipher(void *cctx, unsigned char *out,\nsize_t *outl, <br>\nsize_t outsize, const unsigned char *in, size_t inl); <br>\n/* Cipher parameter descriptors */ <br>\nconst OSSL_PARAM *OSSL_FUNC_cipher_gettable_params(void\n*provctx); <br>\n/* Cipher operation parameter descriptors */ <br>\nconst OSSL_PARAM *OSSL_FUNC_cipher_gettable_ctx_params(void\n*cctx, <br>\nvoid *provctx); <br>\nconst OSSL_PARAM *OSSL_FUNC_cipher_settable_ctx_params(void\n*cctx, <br>\nvoid *provctx); <br>\n/* Cipher parameters */ <br>\nint OSSL_FUNC_cipher_get_params(OSSL_PARAM params[]); <br>\n/* Cipher operation parameters */ <br>\nint OSSL_FUNC_cipher_get_ctx_params(void *cctx, OSSL_PARAM\nparams[]); <br>\nint OSSL_FUNC_cipher_set_ctx_params(void *cctx, const\nOSSL_PARAM params[]);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ndocumentation is primarily aimed at provider authors. See\n<a href=\"https://man.page/7/provider\">provider(7)</a> for further information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>CIPHER</small> operation enables providers to\nimplement cipher algorithms and make them available to\napplications via the <small>API</small> functions\n<a href=\"https://man.page/3/EVP_EncryptInit_ex\">EVP_EncryptInit_ex(3)</a>, <a href=\"https://man.page/3/EVP_EncryptUpdate\">EVP_EncryptUpdate(3)</a>\nand <a href=\"https://man.page/3/EVP_EncryptFinal\">EVP_EncryptFinal(3)</a> (as well as the decrypt\nequivalents and other related functions).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from an\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_FUNC_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_cipher_newctx()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef void\n*(OSSL_OSSL_FUNC_cipher_newctx_fn)(void *provctx); <br>\nstatic ossl_inline OSSL_OSSL_FUNC_cipher_newctx_fn <br>\nOSSL_FUNC_cipher_newctx(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_cipher_newctx\nOSSL_FUNC_CIPHER_NEWCTX <br>\nOSSL_FUNC_cipher_freectx OSSL_FUNC_CIPHER_FREECTX <br>\nOSSL_FUNC_cipher_dupctx OSSL_FUNC_CIPHER_DUPCTX <br>\nOSSL_FUNC_cipher_encrypt_init OSSL_FUNC_CIPHER_ENCRYPT_INIT\n<br>\nOSSL_FUNC_cipher_decrypt_init OSSL_FUNC_CIPHER_DECRYPT_INIT\n<br>\nOSSL_FUNC_cipher_update OSSL_FUNC_CIPHER_UPDATE <br>\nOSSL_FUNC_cipher_final OSSL_FUNC_CIPHER_FINAL <br>\nOSSL_FUNC_cipher_cipher OSSL_FUNC_CIPHER_CIPHER <br>\nOSSL_FUNC_cipher_get_params OSSL_FUNC_CIPHER_GET_PARAMS <br>\nOSSL_FUNC_cipher_get_ctx_params\nOSSL_FUNC_CIPHER_GET_CTX_PARAMS <br>\nOSSL_FUNC_cipher_set_ctx_params\nOSSL_FUNC_CIPHER_SET_CTX_PARAMS <br>\nOSSL_FUNC_cipher_gettable_params\nOSSL_FUNC_CIPHER_GETTABLE_PARAMS <br>\nOSSL_FUNC_cipher_gettable_ctx_params\nOSSL_FUNC_CIPHER_GETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_cipher_settable_ctx_params\nOSSL_FUNC_CIPHER_SETTABLE_CTX_PARAMS</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A cipher\nalgorithm implementation may not implement all of these\nfunctions. In order to be a consistent set of functions\nthere must at least be a complete set of &quot;encrypt&quot;\nfunctions, or a complete set of &quot;decrypt&quot;\nfunctions, or a single &quot;cipher&quot; function. In all\ncases both the OSSL_FUNC_cipher_newctx and\nOSSL_FUNC_cipher_freectx functions must be present. All\nother functions are optional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nManagement Functions <br>\nOSSL_FUNC_cipher_newctx()</b> should create and return a\npointer to a provider side structure for holding context\ninformation during a cipher operation. A pointer to this\ncontext will be passed back in a number of the other cipher\noperation function calls. The parameter <i>provctx</i> is\nthe provider context generated during provider\ninitialisation (see <a href=\"https://man.page/7/provider\">provider(7)</a>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_freectx()</b>\nis passed a pointer to the provider side cipher context in\nthe <i>cctx</i> parameter. This function should free any\nresources associated with that context.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_dupctx()</b>\nshould duplicate the provider side cipher context in the\n<i>cctx</i> parameter and return the duplicate copy.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Encryption/Decryption\nFunctions <br>\nOSSL_FUNC_cipher_encrypt_init()</b> initialises a cipher\noperation for encryption given a newly created provider side\ncipher context in the <i>cctx</i> parameter. The key to be\nused is given in <i>key</i> which is <i>keylen</i> bytes\nlong. The <small>IV</small> to be used is given in <i>iv</i>\nwhich is <i>ivlen</i> bytes long. The <i>params</i>, if not\n<small>NULL,</small> should be set on the context in a\nmanner similar to using\n<b>OSSL_FUNC_cipher_set_ctx_params()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_decrypt_init()</b>\nis the same as <b>OSSL_FUNC_cipher_encrypt_init()</b> except\nthat it initialises the context for a decryption\noperation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_update()</b>\nis called to supply data to be encrypted/decrypted as part\nof a previously initialised cipher operation. The\n<i>cctx</i> parameter contains a pointer to a previously\ninitialised provider side context.\n<b>OSSL_FUNC_cipher_update()</b> should encrypt/decrypt\n<i>inl</i> bytes of data at the location pointed to by\n<i>in</i>. The encrypted data should be stored in <i>out</i>\nand the amount of data written to <i>*outl</i> which should\nnot exceed <i>outsize</i> bytes.\n<b>OSSL_FUNC_cipher_update()</b> may be called multiple\ntimes for a single cipher operation. It is the\nresponsibility of the cipher implementation to handle input\nlengths that are not multiples of the block length. In such\ncases a cipher implementation will typically cache partial\nblocks of input data until a complete block is obtained.\n<i>out</i> may be the same location as <i>in</i> but it\nshould not partially overlap. The same expectations apply to\n<i>outsize</i> as documented for <a href=\"https://man.page/3/EVP_EncryptUpdate\">EVP_EncryptUpdate(3)</a>\nand <a href=\"https://man.page/3/EVP_DecryptUpdate\">EVP_DecryptUpdate(3)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_final()</b>\ncompletes an encryption or decryption started through\nprevious <b>OSSL_FUNC_cipher_encrypt_init()</b> or\n<b>OSSL_FUNC_cipher_decrypt_init()</b>, and\n<b>OSSL_FUNC_cipher_update()</b> calls. The <i>cctx</i>\nparameter contains a pointer to the provider side context.\nAny final encryption/decryption output should be written to\n<i>out</i> and the amount of data written to <i>*outl</i>\nwhich should not exceed <i>outsize</i> bytes. The same\nexpectations apply to <i>outsize</i> as documented for\n<a href=\"https://man.page/3/EVP_EncryptFinal\">EVP_EncryptFinal(3)</a> and\n<a href=\"https://man.page/3/EVP_DecryptFinal\">EVP_DecryptFinal(3)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_cipher()</b>\nperforms encryption/decryption using the provider side\ncipher context in the <i>cctx</i> parameter that should have\nbeen previously initialised via a call to\n<b>OSSL_FUNC_cipher_encrypt_init()</b> or\n<b>OSSL_FUNC_cipher_decrypt_init()</b>. This should call the\nraw underlying cipher function without any padding. This\nwill be invoked in the provider as a result of the\napplication calling <a href=\"https://man.page/3/EVP_Cipher\">EVP_Cipher(3)</a>. The application is\nresponsible for ensuring that the input is a multiple of the\nblock length. The data to be encrypted/decrypted will be in\n<i>in</i>, and it will be <i>inl</i> bytes in length. The\noutput from the encryption/decryption should be stored in\n<i>out</i> and the amount of data stored should be put in\n<i>*outl</i> which should be no more than <i>outsize</i>\nbytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Cipher\nParameters</b> <br>\nSee <b><small>OSSL_PARAM</small></b> (3) for further details\non the parameters structure used by these functions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_get_params()</b>\ngets details of the algorithm implementation and stores them\nin <i>params</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_set_ctx_params()</b>\nsets cipher operation parameters for the provider side\ncipher context <i>cctx</i> to <i>params</i>. Any parameter\nsettings are additional to any that were previously set.\nPassing <small>NULL</small> for <i>params</i> should return\ntrue.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_get_ctx_params()</b>\ngets cipher operation details details from the given\nprovider side cipher context <i>cctx</i> and stores them in\n<i>params</i>. Passing <small>NULL</small> for <i>params</i>\nshould return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_gettable_params()</b>,\n<b>OSSL_FUNC_cipher_gettable_ctx_params()</b>, and\n<b>OSSL_FUNC_cipher_settable_ctx_params()</b> all return\nconstant <b><small>OSSL_PARAM</small></b> arrays as\ndescriptors of the parameters that\n<b>OSSL_FUNC_cipher_get_params()</b>,\n<b>OSSL_FUNC_cipher_get_ctx_params()</b>, and\n<b>OSSL_FUNC_cipher_set_ctx_params()</b> can handle,\nrespectively. <b>OSSL_FUNC_cipher_gettable_ctx_params()</b>\nand <b>OSSL_FUNC_cipher_settable_ctx_params()</b> will\nreturn the parameters associated with the provider side\ncontext <i>cctx</i> in its current state if it is not\n<small>NULL.</small> Otherwise, they return the parameters\nassociated with the provider side algorithm\n<i>provctx</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameters\ncurrently recognised by built-in ciphers are listed in\n&quot; <small>PARAMETERS&quot;</small> in\n<a href=\"https://man.page/3/EVP_EncryptInit\">EVP_EncryptInit(3)</a>. Not all parameters are relevant\nto, or are understood by all ciphers.</p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_newctx()</b>\nand <b>OSSL_FUNC_cipher_dupctx()</b> should return the newly\ncreated provider side cipher context, or <small>NULL</small>\non failure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_encrypt_init()</b>,\n<b>OSSL_FUNC_cipher_decrypt_init()</b>,\n<b>OSSL_FUNC_cipher_update()</b>,\n<b>OSSL_FUNC_cipher_final()</b>,\n<b>OSSL_FUNC_cipher_cipher()</b>,\n<b>OSSL_FUNC_cipher_get_params()</b>,\n<b>OSSL_FUNC_cipher_get_ctx_params()</b> and\n<b>OSSL_FUNC_cipher_set_ctx_params()</b> should return 1 for\nsuccess or 0 on error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_cipher_gettable_params()</b>,\n<b>OSSL_FUNC_cipher_gettable_ctx_params()</b> and\n<b>OSSL_FUNC_cipher_settable_ctx_params()</b> should return\na constant <b><small>OSSL_PARAM</small></b> array, or\n<small>NULL</small> if none is offered.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a>,\n<b><small>OSSL_PROVIDER-FIPS</small></b> (7),\n<a href=\"https://man.page/7/OSSL_PROVIDER-default\">OSSL_PROVIDER-default(7)</a>,\n<a href=\"https://man.page/7/OSSL_PROVIDER-legacy\">OSSL_PROVIDER-legacy(7)</a>,\n<b><small>EVP_CIPHER-AES</small></b> (7),\n<b><small>EVP_CIPHER-ARIA</small></b> (7),\n<b><small>EVP_CIPHER-BLOWFISH</small></b> (7),\n<b><small>EVP_CIPHER-CAMELLIA</small></b> (7),\n<b><small>EVP_CIPHER-CAST</small></b> (7),\n<b><small>EVP_CIPHER-CHACHA</small></b> (7),\n<b><small>EVP_CIPHER-DES</small></b> (7),\n<b><small>EVP_CIPHER-IDEA</small></b> (7),\n<b><small>EVP_CIPHER-RC2</small></b> (7),\n<b><small>EVP_CIPHER-RC4</small></b> (7),\n<b><small>EVP_CIPHER-RC5</small></b> (7),\n<b><small>EVP_CIPHER-SEED</small></b> (7),\n<b><small>EVP_CIPHER-SM4</small></b> (7),\n<a href=\"https://man.page/7/life_cycle-cipher\">life_cycle-cipher(7)</a>, <a href=\"https://man.page/3/EVP_EncryptInit\">EVP_EncryptInit(3)</a></p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The provider\n<small>CIPHER</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}