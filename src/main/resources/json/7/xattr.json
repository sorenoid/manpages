{"name":"xattr","description":"xattr -\nExtended attributes\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nExtended\nattributes are name:value pairs associated permanently with\nfiles and directories, similar to the environment strings\nassociated with a process. An attribute may be defined or\nundefined. If it is defined, its value may be empty or\nnon-empty.\n\nExtended\nattributes are extensions to the normal attributes which are\nassociated with all inodes in the system (i.e., the\n<a href=\"https://man.page/2/stat\">stat(2)</a> data). They are often used to provide\nadditional functionality to a filesystem&mdash;for example,\nadditional security features such as Access Control Lists\n(ACLs) may be implemented using extended attributes.\n\nUsers with\nsearch access to a file or directory may use\n<a href=\"https://man.page/2/listxattr\">listxattr(2)</a> to retrieve a list of attribute names\ndefined for that file or directory.\n\nExtended\nattributes are accessed as atomic objects. Reading\n(<a href=\"https://man.page/2/getxattr\">getxattr(2)</a>) retrieves the whole value of an\nattribute and stores it in a buffer. Writing\n(<a href=\"https://man.page/2/setxattr\">setxattr(2)</a>) replaces any previous value with the\nnew value.\n\nSpace consumed\nfor extended attributes may be counted towards the disk\nquotas of the file owner and file group.\n\n<b>Extended\nattribute namespaces</b> <br>\nAttribute names are null-terminated strings. The attribute\nname is always specified in the fully qualified\n<i>namespace.attribute</i> form, for example,\n<i>user.mime_type</i>, <i>trusted.md5sum</i>,\n<i>system.posix_acl_access</i>, or\n<i>security.selinux</i>.\n\nThe namespace\nmechanism is used to define different classes of extended\nattributes. These different classes exist for several\nreasons; for example, the permissions and capabilities\nrequired for manipulating extended attributes of one\nnamespace may differ to another.\n\nCurrently, the\n<i>security</i>, <i>system</i>, <i>trusted</i>, and\n<i>user</i> extended attribute classes are defined as\ndescribed below. Additional classes may be added in the\nfuture.\n\n<b>Extended\nsecurity attributes</b> <br>\nThe security attribute namespace is used by kernel security\nmodules, such as Security Enhanced Linux, and also to\nimplement file capabilities (see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).\nRead and write access permissions to security attributes\ndepend on the policy implemented for each security attribute\nby the security module. When no security module is loaded,\nall processes have read access to extended security\nattributes, and write access is limited to processes that\nhave the <b>CAP_SYS_ADMIN</b> capability.\n\n<b>System\nextended attributes</b> <br>\nSystem extended attributes are used by the kernel to store\nsystem objects such as Access Control Lists. Read and write\naccess permissions to system attributes depend on the policy\nimplemented for each system attribute implemented by\nfilesystems in the kernel.\n\n<b>Trusted\nextended attributes</b> <br>\nTrusted extended attributes are visible and accessible only\nto processes that have the <b>CAP_SYS_ADMIN</b> capability.\nAttributes in this class are used to implement mechanisms in\nuser space (i.e., outside the kernel) which keep information\nin extended attributes to which ordinary processes should\nnot have access.\n\n<b>User\nextended attributes</b> <br>\nUser extended attributes may be assigned to files and\ndirectories for storing arbitrary additional information\nsuch as the mime type, character set or encoding of a file.\nThe access permissions for user attributes are defined by\nthe file permission bits: read permission is required to\nretrieve the attribute value, and writer permission is\nrequired to change it.\n\nThe file\npermission bits of regular files and directories are\ninterpreted differently from the file permission bits of\nspecial files and symbolic links. For regular files and\ndirectories the file permission bits define access to the\nfile&rsquo;s contents, while for device special files they\ndefine access to the device described by the special file.\nThe file permissions of symbolic links are not used in\naccess checks. These differences would allow users to\nconsume filesystem resources in a way not controllable by\ndisk quotas for group or world writable special files and\ndirectories.\n\nFor this\nreason, user extended attributes are allowed only for\nregular files and directories, and access to user extended\nattributes is restricted to the owner and to users with\nappropriate capabilities for directories with the sticky bit\nset (see the <a href=\"https://man.page/1/chmod\">chmod(1)</a> manual page for an explanation\nof the sticky bit).\n\n<b>Filesystem\ndifferences</b> <br>\nThe kernel and the filesystem may place limits on the\nmaximum number and size of extended attributes that can be\nassociated with a file. The VFS imposes limitations that an\nattribute names is limited to 255 bytes and an attribute\nvalue is limited to 64&nbsp;kB. The list of attribute names\nthat can be returned is also limited to 64&nbsp;kB (see BUGS\nin <a href=\"https://man.page/2/listxattr\">listxattr(2)</a>).\n\nSome\nfilesystems, such as Reiserfs (and, historically, ext2 and\next3), require the filesystem to be mounted with the\n<b>user_xattr</b> mount option in order for user extended\nattributes to be used.\n\nIn the current\next2, ext3, and ext4 filesystem implementations, the total\nbytes used by the names and values of all of a file&rsquo;s\nextended attributes must fit in a single filesystem block\n(1024, 2048 or 4096 bytes, depending on the block size\nspecified when the filesystem was created).\n\nIn the Btrfs,\nXFS, and Reiserfs filesystem implementations, there is no\npractical limit on the number of extended attributes\nassociated with a file, and the algorithms used to store\nextended attribute information on disk are scalable.\n\nIn the JFS,\nXFS, and Reiserfs filesystem implementations, the limit on\nbytes used in an EA value is the ceiling imposed by the\nVFS.\n\nIn the Btrfs\nfilesystem implementation, the total bytes used for the\nname, value, and implementation overhead bytes is limited to\nthe filesystem <i>nodesize</i> value (16&nbsp;kB by\ndefault).\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\nExtended\nattributes are not specified in POSIX.1, but some other\nsystems (e.g., the BSDs and Solaris) provide a similar\nfeature.\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\nSince the\nfilesystems on which extended attributes are stored might\nalso be used on architectures with a different byte order\nand machine word size, care should be taken to store\nattribute values in an architecture-independent format.\n\nThis page was\nformerly named <a href=\"https://man.page/5/attr\">attr(5)</a>.\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/1/attr\">attr(1)</a>,\n<a href=\"https://man.page/1/getfattr\">getfattr(1)</a>, <a href=\"https://man.page/1/setfattr\">setfattr(1)</a>, <a href=\"https://man.page/2/getxattr\">getxattr(2)</a>,\n<a href=\"https://man.page/2/ioctl_iflags\">ioctl_iflags(2)</a>, <a href=\"https://man.page/2/listxattr\">listxattr(2)</a>,\n<a href=\"https://man.page/2/removexattr\">removexattr(2)</a>, <a href=\"https://man.page/2/setxattr\">setxattr(2)</a>, <a href=\"https://man.page/5/acl\">acl(5)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <b>selinux</b>(8)\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\nThis page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.","body":"\n\n<h1 align=\"center\">XATTR</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">xattr -\nExtended attributes</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Extended\nattributes are name:value pairs associated permanently with\nfiles and directories, similar to the environment strings\nassociated with a process. An attribute may be defined or\nundefined. If it is defined, its value may be empty or\nnon-empty.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Extended\nattributes are extensions to the normal attributes which are\nassociated with all inodes in the system (i.e., the\n<a href=\"https://man.page/2/stat\">stat(2)</a> data). They are often used to provide\nadditional functionality to a filesystem&mdash;for example,\nadditional security features such as Access Control Lists\n(ACLs) may be implemented using extended attributes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Users with\nsearch access to a file or directory may use\n<a href=\"https://man.page/2/listxattr\">listxattr(2)</a> to retrieve a list of attribute names\ndefined for that file or directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Extended\nattributes are accessed as atomic objects. Reading\n(<a href=\"https://man.page/2/getxattr\">getxattr(2)</a>) retrieves the whole value of an\nattribute and stores it in a buffer. Writing\n(<a href=\"https://man.page/2/setxattr\">setxattr(2)</a>) replaces any previous value with the\nnew value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Space consumed\nfor extended attributes may be counted towards the disk\nquotas of the file owner and file group.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Extended\nattribute namespaces</b> <br>\nAttribute names are null-terminated strings. The attribute\nname is always specified in the fully qualified\n<i>namespace.attribute</i> form, for example,\n<i>user.mime_type</i>, <i>trusted.md5sum</i>,\n<i>system.posix_acl_access</i>, or\n<i>security.selinux</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The namespace\nmechanism is used to define different classes of extended\nattributes. These different classes exist for several\nreasons; for example, the permissions and capabilities\nrequired for manipulating extended attributes of one\nnamespace may differ to another.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently, the\n<i>security</i>, <i>system</i>, <i>trusted</i>, and\n<i>user</i> extended attribute classes are defined as\ndescribed below. Additional classes may be added in the\nfuture.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Extended\nsecurity attributes</b> <br>\nThe security attribute namespace is used by kernel security\nmodules, such as Security Enhanced Linux, and also to\nimplement file capabilities (see <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>).\nRead and write access permissions to security attributes\ndepend on the policy implemented for each security attribute\nby the security module. When no security module is loaded,\nall processes have read access to extended security\nattributes, and write access is limited to processes that\nhave the <b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>System\nextended attributes</b> <br>\nSystem extended attributes are used by the kernel to store\nsystem objects such as Access Control Lists. Read and write\naccess permissions to system attributes depend on the policy\nimplemented for each system attribute implemented by\nfilesystems in the kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Trusted\nextended attributes</b> <br>\nTrusted extended attributes are visible and accessible only\nto processes that have the <b>CAP_SYS_ADMIN</b> capability.\nAttributes in this class are used to implement mechanisms in\nuser space (i.e., outside the kernel) which keep information\nin extended attributes to which ordinary processes should\nnot have access.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>User\nextended attributes</b> <br>\nUser extended attributes may be assigned to files and\ndirectories for storing arbitrary additional information\nsuch as the mime type, character set or encoding of a file.\nThe access permissions for user attributes are defined by\nthe file permission bits: read permission is required to\nretrieve the attribute value, and writer permission is\nrequired to change it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The file\npermission bits of regular files and directories are\ninterpreted differently from the file permission bits of\nspecial files and symbolic links. For regular files and\ndirectories the file permission bits define access to the\nfile&rsquo;s contents, while for device special files they\ndefine access to the device described by the special file.\nThe file permissions of symbolic links are not used in\naccess checks. These differences would allow users to\nconsume filesystem resources in a way not controllable by\ndisk quotas for group or world writable special files and\ndirectories.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For this\nreason, user extended attributes are allowed only for\nregular files and directories, and access to user extended\nattributes is restricted to the owner and to users with\nappropriate capabilities for directories with the sticky bit\nset (see the <a href=\"https://man.page/1/chmod\">chmod(1)</a> manual page for an explanation\nof the sticky bit).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filesystem\ndifferences</b> <br>\nThe kernel and the filesystem may place limits on the\nmaximum number and size of extended attributes that can be\nassociated with a file. The VFS imposes limitations that an\nattribute names is limited to 255 bytes and an attribute\nvalue is limited to 64&nbsp;kB. The list of attribute names\nthat can be returned is also limited to 64&nbsp;kB (see BUGS\nin <a href=\"https://man.page/2/listxattr\">listxattr(2)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some\nfilesystems, such as Reiserfs (and, historically, ext2 and\next3), require the filesystem to be mounted with the\n<b>user_xattr</b> mount option in order for user extended\nattributes to be used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the current\next2, ext3, and ext4 filesystem implementations, the total\nbytes used by the names and values of all of a file&rsquo;s\nextended attributes must fit in a single filesystem block\n(1024, 2048 or 4096 bytes, depending on the block size\nspecified when the filesystem was created).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the Btrfs,\nXFS, and Reiserfs filesystem implementations, there is no\npractical limit on the number of extended attributes\nassociated with a file, and the algorithms used to store\nextended attribute information on disk are scalable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the JFS,\nXFS, and Reiserfs filesystem implementations, the limit on\nbytes used in an EA value is the ceiling imposed by the\nVFS.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the Btrfs\nfilesystem implementation, the total bytes used for the\nname, value, and implementation overhead bytes is limited to\nthe filesystem <i>nodesize</i> value (16&nbsp;kB by\ndefault).</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Extended\nattributes are not specified in POSIX.1, but some other\nsystems (e.g., the BSDs and Solaris) provide a similar\nfeature.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since the\nfilesystems on which extended attributes are stored might\nalso be used on architectures with a different byte order\nand machine word size, care should be taken to store\nattribute values in an architecture-independent format.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page was\nformerly named <a href=\"https://man.page/5/attr\">attr(5)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/attr\">attr(1)</a>,\n<a href=\"https://man.page/1/getfattr\">getfattr(1)</a>, <a href=\"https://man.page/1/setfattr\">setfattr(1)</a>, <a href=\"https://man.page/2/getxattr\">getxattr(2)</a>,\n<a href=\"https://man.page/2/ioctl_iflags\">ioctl_iflags(2)</a>, <a href=\"https://man.page/2/listxattr\">listxattr(2)</a>,\n<a href=\"https://man.page/2/removexattr\">removexattr(2)</a>, <a href=\"https://man.page/2/setxattr\">setxattr(2)</a>, <a href=\"https://man.page/5/acl\">acl(5)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <b>selinux</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}