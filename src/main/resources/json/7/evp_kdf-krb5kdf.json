{"name":"evp_kdf-krb5kdf","description":"EVP_KDF-KRB5KDF - The RFC3961 Krb5 KDF EVP_KDF implementation","body":"\n\n<h1 align=\"center\">EVP_KDF-KRB5KDF</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF-KRB5KDF\n- The RFC3961 Krb5 KDF EVP_KDF implementation</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Support for\ncomputing the <b><small>KRB5KDF</small></b>\n<small>KDF</small> through the <b><small>EVP_KDF</small></b>\n<small>API.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>EVP_KDF-KRB5KDF</small> algorithm implements the key\nderivation function defined in <small>RFC 3961,</small>\nsection 5.1 and is used by Krb5 to derive session keys.\nThree inputs are required to perform key derivation: a\ncipher, (for example <small>AES-128-CBC</small> ), the\ninitial key, and a constant.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Identity</b>\n<br>\n&quot; <small>KRB5KDF&quot;</small> is the name for this\nimplementation; it can be used with the\n<b>EVP_KDF_fetch()</b> function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Supported\nparameters</b> <br>\nThe supported parameters are: <br>\n&quot;properties&quot; (\n<b><small>OSSL_KDF_PARAM_PROPERTIES</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;cipher&quot; (\n<b><small>OSSL_KDF_PARAM_CIPHER</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;key&quot; ( <b><small>OSSL_KDF_PARAM_KEY</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">These parameters work as\ndescribed in &quot; <small>PARAMETERS&quot;</small> in\n<b><small>EVP_KDF</small></b> (3).</p>\n\n<p style=\"margin-left:11%;\">&quot;constant&quot; (\n<b><small>OSSL_KDF_PARAM_CONSTANT</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">This parameter sets the\nconstant value for the <small>KDF.</small> If a value is\nalready set, the contents are replaced.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A context for\n<small>KRB5KDF</small> can be obtained by calling:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF *kdf =\nEVP_KDF_fetch(NULL, &quot;KRB5KDF&quot;, NULL); <br>\nEVP_KDF_CTX *kctx = EVP_KDF_CTX_new(kdf);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The output\nlength of the <small>KRB5KDF</small> derivation is specified\nvia the <i>keylen</i> parameter to the\n<a href=\"https://man.page/3/EVP_KDF_derive\">EVP_KDF_derive(3)</a> function, and <small>MUST</small>\nmatch the key length for the chosen cipher or an error is\nreturned. Moreover, the constant&rsquo;s length must not\nexceed the block size of the cipher. Since the\n<small>KRB5KDF</small> output length depends on the chosen\ncipher, calling <a href=\"https://man.page/3/EVP_KDF_CTX_get_kdf_size\">EVP_KDF_CTX_get_kdf_size(3)</a> to obtain\nthe requisite length returns the correct length only after\nthe cipher is set. Prior to that\n<b><small>EVP_MAX_KEY_LENGTH</small></b> is returned. The\ncaller must allocate a buffer of the correct length for the\nchosen cipher, and pass that buffer to the\n<a href=\"https://man.page/3/EVP_KDF_derive\">EVP_KDF_derive(3)</a> function along with that\nlength.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nderives a key using the <small>AES-128-CBC</small>\ncipher:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF *kdf;\n<br>\nEVP_KDF_CTX *kctx; <br>\nunsigned char key[16] = &quot;01234...&quot;; <br>\nunsigned char constant[] = &quot;I'm a constant&quot;; <br>\nunsigned char out[16]; <br>\nsize_t outlen = sizeof(out); <br>\nOSSL_PARAM params[4], *p = params; <br>\nkdf = EVP_KDF_fetch(NULL, &quot;KRB5KDF&quot;, NULL); <br>\nkctx = EVP_KDF_CTX_new(kdf); <br>\nEVP_KDF_free(kdf); <br>\n*p++ =\nOSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_CIPHER, <br>\nSN_aes_128_cbc, <br>\nstrlen(SN_aes_128_cbc)); <br>\n*p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_KEY,\n<br>\nkey, (size_t)16); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_CONSTANT,\n<br>\nconstant, strlen(constant)); <br>\n*p = OSSL_PARAM_construct_end(); <br>\nif (EVP_KDF_derive(kctx, out, outlen, params) &lt;= 0) <br>\n/* Error */ <br>\nEVP_KDF_CTX_free(kctx);</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>RFC\n3961</small></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small><b>EVP_KDF</b></small>\n(3), <a href=\"https://man.page/3/EVP_KDF_CTX_free\">EVP_KDF_CTX_free(3)</a>,\n<a href=\"https://man.page/3/EVP_KDF_CTX_get_kdf_size\">EVP_KDF_CTX_get_kdf_size(3)</a>,\n<a href=\"https://man.page/3/EVP_KDF_derive\">EVP_KDF_derive(3)</a>, &quot;\n<small>PARAMETERS&quot;</small> in\n<b><small>EVP_KDF</small></b> (3)</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\nfunctionality was added to OpenSSL 3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2016-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}