{"name":"keyrings","description":"keyrings -\nin-kernel key management and retention facility\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nThe Linux\nkey-management facility is primarily a way for various\nkernel components to retain or cache security data,\nauthentication keys, encryption keys, and other data in the\nkernel.\n\nSystem call\ninterfaces are provided so that user-space programs can\nmanage those objects and also use the facility for their own\npurposes; see <a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/request_key\">request_key(2)</a>, and\n<a href=\"https://man.page/2/keyctl\">keyctl(2)</a>.\n\nA library and\nsome user-space utilities are provided to allow access to\nthe facility. See <a href=\"https://man.page/1/keyctl\">keyctl(1)</a>, <a href=\"https://man.page/3/keyctl\">keyctl(3)</a>, and\n<a href=\"https://man.page/7/keyutils\">keyutils(7)</a> for more information.\n\n<b>Keys</b>\n<br>\nA key has the following attributes: <br>\nSerial number (ID)\n\n<p style=\"margin-left:22%;\">This is a unique integer handle\nby which a key is referred to in system calls. The serial\nnumber is sometimes synonymously referred as the key ID.\nProgrammatically, key serial numbers are represented using\nthe type <i>key_serial_t</i>.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>Type</td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>A key&rsquo;s type defines what sort of data can be held\nin the key, how the proposed content of the key will be\nparsed, and how the payload will be used.</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are a\nnumber of general-purpose types available, plus some\nspecialist types defined by specific kernel components.\n\n<p style=\"margin-left:11%;\">Description (name)\n\n<p style=\"margin-left:22%;\">The key description is a\nprintable string that is used as the search term for the key\n(in conjunction with the key type) as well as a display\nname. During searches, the description may be partially\nmatched or exactly matched.\n\n<p style=\"margin-left:11%;\">Payload (data)\n\n<p style=\"margin-left:22%;\">The payload is the actual\ncontent of a key. This is usually set when a key is created,\nbut it is possible for the kernel to upcall to user space to\nfinish the instantiation of a key if that key wasn&rsquo;t\nalready known to the kernel when it was requested. For\nfurther details, see <a href=\"https://man.page/2/request_key\">request_key(2)</a>.\n\n<p style=\"margin-left:22%; margin-top: 1em\">A key&rsquo;s\npayload can be read and updated if the key type supports it\nand if suitable permission is granted to the caller.\n\n<p style=\"margin-left:11%;\">Access rights\n\n<p style=\"margin-left:22%;\">Much as files do, each key has\nan owning user ID, an owning group ID, and a security label.\nEach key also has a set of permissions, though there are\nmore than for a normal UNIX file, and there is an additional\ncategory&mdash;possessor&mdash;beyond the usual user, group,\nand other (see <i>Possession</i>, below).\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that keys\nare quota controlled, since they require unswappable kernel\nmemory. The owning user ID specifies whose quota is to be\ndebited.\n\n<p style=\"margin-left:11%;\">Expiration time\n\n<p style=\"margin-left:22%;\">Each key can have an expiration\ntime set. When that time is reached, the key is marked as\nbeing expired and accesses to it fail with the error\n<b>EKEYEXPIRED</b>. If not deleted, updated, or replaced,\nthen, after a set amount of time, an expired key is\nautomatically removed (garbage collected) along with all\nlinks to it, and attempts to access the key fail with the\nerror <b>ENOKEY</b>.\n\n<p style=\"margin-left:11%;\">Reference count\n\n<p style=\"margin-left:22%;\">Each key has a reference count.\nKeys are referenced by keyrings, by currently active users,\nand by a process&rsquo;s credentials. When the reference\ncount reaches zero, the key is scheduled for garbage\ncollection.\n\n<b>Key\ntypes</b> <br>\nThe kernel provides several basic types of key: <i><br>\n&quot;keyring&quot;</i>\n\n<p style=\"margin-left:22%;\">Keyrings are special keys which\nstore a set of links to other keys (including other\nkeyrings), analogous to a directory holding links to files.\nThe main purpose of a keyring is to prevent other keys from\nbeing garbage collected because nothing refers to them.\n\n<p style=\"margin-left:22%; margin-top: 1em\">Keyrings with\ndescriptions (names) that begin with a period ('.') are\nreserved to the implementation.\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>&quot;user&quot;</i></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This is a general-purpose key type. The key is kept\nentirely within kernel memory. The payload may be read and\nupdated by user-space applications.</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The payload for\nkeys of this type is a blob of arbitrary data of up to\n32,767 bytes.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The description\nmay be any valid string, though it is preferred that it\nstart with a colon-delimited prefix representing the service\nto which the key is of interest (for instance\n<i>&quot;afs:mykey&quot;</i>).\n\n<p style=\"margin-left:11%;\"><i>&quot;logon&quot;</i> (since\nLinux 3.3)\n\n<p style=\"margin-left:22%;\">This key type is essentially\nthe same as <i>&quot;user&quot;</i>, but it does not provide\nreading (i.e., the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a> <b>KEYCTL_READ</b>\noperation), meaning that the key payload is never visible\nfrom user space. This is suitable for storing\nusername-password pairs that should not be readable from\nuser space.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The description\nof a <i>&quot;logon&quot;</i> key <i>must</i> start with a\nnon-empty colon-delimited prefix whose purpose is to\nidentify the service to which the key belongs. (Note that\nthis differs from keys of the <i>&quot;user&quot;</i> type,\nwhere the inclusion of a prefix is recommended but is not\nenforced.)\n\n<p style=\"margin-left:11%;\"><i>&quot;big_key&quot;</i>\n(since Linux 3.13)\n\n<p style=\"margin-left:22%;\">This key type is similar to the\n<i>&quot;user&quot;</i> key type, but it may hold a payload\nof up to 1&nbsp;MiB in size. This key type is useful for\npurposes such as holding Kerberos ticket caches.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The payload\ndata may be stored in a tmpfs filesystem, rather than in\nkernel memory, if the data size exceeds the overhead of\nstoring the data in the filesystem. (Storing the data in a\nfilesystem requires filesystem structures to be allocated in\nthe kernel. The size of these structures determines the size\nthreshold above which the tmpfs storage method is used.)\nSince Linux 4.8, the payload data is encrypted when stored\nin tmpfs, thereby preventing it from being written\nunencrypted into swap space.\n\nThere are more\nspecialized key types available also, but they aren&rsquo;t\ndiscussed here because they aren&rsquo;t intended for normal\nuser-space use.\n\nKey type names\nthat begin with a period ('.') are reserved to the\nimplementation.\n\n\n<b>Keyrings</b>\n<br>\nAs previously mentioned, keyrings are a special type of key\nthat contain links to other keys (which may include other\nkeyrings). Keys may be linked to by multiple keyrings.\nKeyrings may be considered as analogous to UNIX directories\nwhere each directory contains a set of hard links to\nfiles.\n\nVarious\noperations (system calls) may be applied only to\nkeyrings:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>Adding</td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A key may be added to a keyring by system calls that\ncreate keys. This prevents the new key from being\nimmediately deleted when the system call releases its last\nreference to the key.</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Linking\n\n<p style=\"margin-left:22%;\">A link may be added to a\nkeyring pointing to a key that is already known, provided\nthis does not create a self-referential cycle.\n\n<p style=\"margin-left:11%;\">Unlinking\n\n<p style=\"margin-left:22%;\">A link may be removed from a\nkeyring. When the last link to a key is removed, that key\nwill be scheduled for deletion by the garbage collector.\n\n<p style=\"margin-left:11%;\">Clearing\n\n<p style=\"margin-left:22%;\">All the links may be removed\nfrom a keyring.\n\n<p style=\"margin-left:11%;\">Searching\n\n<p style=\"margin-left:22%;\">A keyring may be considered the\nroot of a tree or subtree in which keyrings form the\nbranches and non-keyrings the leaves. This tree may be\nsearched for a key matching a particular type and\ndescription.\n\nSee\n<a href=\"https://man.page/3/keyctl_clear\">keyctl_clear(3)</a>, <a href=\"https://man.page/3/keyctl_link\">keyctl_link(3)</a>,\n<a href=\"https://man.page/3/keyctl_search\">keyctl_search(3)</a>, and <a href=\"https://man.page/3/keyctl_unlink\">keyctl_unlink(3)</a> for\nmore information.\n\n<b>Anchoring\nkeys</b> <br>\nTo prevent a key from being garbage collected, it must be\nanchored to keep its reference count elevated when it is not\nin active use by the kernel.\n\nKeyrings are\nused to anchor other keys: each link is a reference on a\nkey. Note that keyrings themselves are just keys and are\nalso subject to the same anchoring requirement to prevent\nthem being garbage collected.\n\nThe kernel\nmakes available a number of anchor keyrings. Note that some\nof these keyrings will be created only when first accessed.\n<br>\nProcess keyrings\n\n<p style=\"margin-left:22%;\">Process credentials themselves\nreference keyrings with specific semantics. These keyrings\nare pinned as long as the set of credentials exists, which\nis usually as long as the process exists.\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are three\nkeyrings with different inheritance/sharing rules: the\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a> (inherited and shared by all child\nprocesses), the <a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a> (shared by all\nthreads in a process) and the <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>\n(specific to a particular thread).\n\n<p style=\"margin-left:22%; margin-top: 1em\">As an\nalternative to using the actual keyring IDs, in calls to\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, and\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, the special keyring values\n<b>KEY_SPEC_SESSION_KEYRING</b>,\n<b>KEY_SPEC_PROCESS_KEYRING</b>, and\n<b>KEY_SPEC_THREAD_KEYRING</b> can be used to refer to the\ncaller&rsquo;s own instances of these keyrings.\n\n<p style=\"margin-left:11%;\">User keyrings\n\n<p style=\"margin-left:22%;\">Each UID known to the kernel\nhas a record that contains two keyrings: the\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a> and the\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>. These exist for as long as\nthe UID record in the kernel exists.\n\n<p style=\"margin-left:22%; margin-top: 1em\">As an\nalternative to using the actual keyring IDs, in calls to\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, and\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, the special keyring values\n<b>KEY_SPEC_USER_KEYRING</b> and\n<b>KEY_SPEC_USER_SESSION_KEYRING</b> can be used to refer to\nthe caller&rsquo;s own instances of these keyrings.\n\n<p style=\"margin-left:22%; margin-top: 1em\">A link to the\nuser keyring is placed in a new session keyring by\n<b>pam_keyinit</b>(8) when a new login session is\ninitiated.\n\n<p style=\"margin-left:11%;\">Persistent keyrings\n\n<p style=\"margin-left:22%;\">There is a\n<a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a> available to each UID known to\nthe system. It may persist beyond the life of the UID record\npreviously mentioned, but has an expiration time set such\nthat it is automatically cleaned up after a set time. The\npersistent keyring permits, for example, <b>cron</b>(8)\nscripts to use credentials that are left in the persistent\nkeyring after the user logs out.\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that the\nexpiration time of the persistent keyring is reset every\ntime the persistent key is requested.\n\n<p style=\"margin-left:11%;\">Special keyrings\n\n<p style=\"margin-left:22%;\">There are special keyrings\nowned by the kernel that can anchor keys for special\npurposes. An example of this is the <i>system keyring</i>\nused for holding encryption keys for module signature\nverification.\n\n<p style=\"margin-left:22%; margin-top: 1em\">These special\nkeyrings are usually closed to direct alteration by user\nspace.\n\nAn originally\nplanned &quot;group keyring&quot;, for storing keys\nassociated with each GID known to the kernel, is not so far\nimplemented, is unlikely to be implemented. Nevertheless,\nthe constant <b>KEY_SPEC_GROUP_KEYRING</b> has been defined\nfor this keyring.\n\n\n<b>Possession</b>\n<br>\nThe concept of possession is important to understanding the\nkeyrings security model. Whether a thread possesses a key is\ndetermined by the following rules:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Any key or keyring that does not grant <i>search</i>\npermission to the caller is ignored in all the following\nrules. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>A thread possesses its <a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>,\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>, and <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>\ndirectly because those keyrings are referred to by its\ncredentials. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(3)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a keyring is possessed, then any key it links to is\nalso possessed.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If any key a keyring links to is itself a keyring, then\nrule (3) applies recursively.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(5)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a process is upcalled from the kernel to instantiate\na key (see <a href=\"https://man.page/2/request_key\">request_key(2)</a>), then it also possesses\nthe requester&rsquo;s keyrings as in rule (1) as if it were\nthe requester.</td></tr>\n</table>\n\nNote that\npossession is not a fundamental property of a key, but must\nrather be calculated each time the key is needed.\n\nPossession is\ndesigned to allow set-user-ID programs run from, say a\nuser&rsquo;s shell to access the user&rsquo;s keys. Granting\npermissions to the key possessor while denying them to the\nkey owner and group allows the prevention of access to keys\non the basis of UID and GID matches.\n\nWhen it creates\nthe session keyring, <b>pam_keyinit</b>(8) adds a link to\nthe <a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>, thus making the user keyring and\nanything it contains possessed by default.\n\n<b>Access\nrights</b> <br>\nEach key has the following security-related attributes:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p style=\"margin-top: 1em\">The owning user ID</td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>The ID of a group that is permitted to access the\nkey </td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>A security label</td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>A permissions mask</td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\nThe permissions\nmask contains four sets of rights. The first three sets are\nmutually exclusive. One and only one will be in force for a\nparticular access check. In order of descending priority,\nthese three sets are:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><i>user</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The set specifies the rights\ngranted if the key&rsquo;s user ID matches the\ncaller&rsquo;s filesystem user ID.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>group</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The set specifies the rights granted if the user ID\ndidn&rsquo;t match and the key&rsquo;s group ID matches the\ncaller&rsquo;s filesystem GID or one of the caller&rsquo;s\nsupplementary group IDs.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>other</i></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The set specifies the rights granted if neither the\nkey&rsquo;s user ID nor group ID matched.</td></tr>\n</table>\n\nThe fourth set\nof rights is: <i><br>\npossessor</i>\n\n<p style=\"margin-left:22%;\">The set specifies the rights\ngranted if a key is determined to be possessed by the\ncaller.\n\nThe complete\nset of rights for a key is the union of whichever of the\nfirst three sets is applicable plus the fourth set if the\nkey is possessed.\n\nThe set of\nrights that may be granted in each of the four masks is as\nfollows:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>view</i></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The attributes of the key may be read. This includes the\ntype, description, and access rights (excluding the security\nlabel). </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>read</i></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>For a key: the payload of the key may be read. For a\nkeyring: the list of serial numbers (keys) to which the\nkeyring has links may be read.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>write</i></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The payload of the key may be updated and the key may be\nrevoked. For a keyring, links may be added to or removed\nfrom the keyring, and the keyring may be cleared completely\n(all links are removed),</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>search</i></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>For a key (or a keyring): the key may be found by a\nsearch. For a keyring: keys and keyrings that are linked to\nby the keyring may be searched.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>link</i></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Links may be created from keyrings to the key. The\ninitial link to a key that is established when the key is\ncreated doesn&rsquo;t require this permission.</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>setattr</i>\n\n<p style=\"margin-left:22%;\">The ownership details and\nsecurity label of the key may be changed, the key&rsquo;s\nexpiration time may be set, and the key may be revoked.\n\nIn addition to\naccess rights, any active Linux Security Module (LSM) may\nprevent access to a key if its policy so dictates. A key may\nbe given a security label or other attribute by the LSM;\nthis label is retrievable via\n<a href=\"https://man.page/3/keyctl_get_security\">keyctl_get_security(3)</a>.\n\nSee\n<a href=\"https://man.page/3/keyctl_chown\">keyctl_chown(3)</a>, <a href=\"https://man.page/3/keyctl_describe\">keyctl_describe(3)</a>,\n<a href=\"https://man.page/3/keyctl_get_security\">keyctl_get_security(3)</a>, <a href=\"https://man.page/3/keyctl_setperm\">keyctl_setperm(3)</a>, and\n<b>selinux</b>(8) for more information.\n\n<b>Searching\nfor keys</b> <br>\nOne of the key features of the Linux key-management facility\nis the ability to find a key that a process is retaining.\nThe <a href=\"https://man.page/2/request_key\">request_key(2)</a> system call is the primary point\nof access for user-space applications to find a key.\n(Internally, the kernel has something similar available for\nuse by internal components that make use of keys.)\n\nThe search\nalgorithm works as follows:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>The process keyrings are searched in the following\norder: the thread <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a> if it exists, the\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a> if it exists, and then either the\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a> if it exists or the\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a> if that exists.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If the caller was a process that was invoked by the\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> upcall mechanism, then the keyrings of\nthe original caller of <a href=\"https://man.page/2/request_key\">request_key(2)</a> will be\nsearched as well.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(3)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>The search of a keyring tree is in breadth-first order:\neach keyring is searched first for a match, then the\nkeyrings referred to by that keyring are searched.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a matching key is found that is valid, then the\nsearch terminates and that key is returned.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(5)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a matching key is found that has an error state\nattached, that error state is noted and the search\ncontinues. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(6)</td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If no valid matching key is found, then the first noted\nerror state is returned; otherwise, an <b>ENOKEY</b> error\nis returned.</td></tr>\n</table>\n\nIt is also\npossible to search a specific keyring, in which case only\nsteps (3) to (6) apply.\n\nSee\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> and <a href=\"https://man.page/3/keyctl_search\">keyctl_search(3)</a> for more\ninformation.\n\n<b>On-demand\nkey creation</b> <br>\nIf a key cannot be found, <a href=\"https://man.page/2/request_key\">request_key(2)</a> will, if\ngiven a <i>callout_info</i> argument, create a new key and\nthen upcall to user space to instantiate the key. This\nallows keys to be created on an as-needed basis.\n\nTypically, this\nwill involve the kernel creating a new process that executes\nthe <b>request-key</b>(8) program, which will then execute\nthe appropriate handler based on its configuration.\n\nThe handler is\npassed a special authorization key that allows it and only\nit to instantiate the new key. This is also used to permit\nsearches performed by the handler program to also search the\nrequester&rsquo;s keyrings.\n\nSee\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, <a href=\"https://man.page/3/keyctl_assume_authority\">keyctl_assume_authority(3)</a>,\n<a href=\"https://man.page/3/keyctl_instantiate\">keyctl_instantiate(3)</a>, <a href=\"https://man.page/3/keyctl_negate\">keyctl_negate(3)</a>,\n<a href=\"https://man.page/3/keyctl_reject\">keyctl_reject(3)</a>, <b>request-key</b>(8), and\n<b>request-key.conf</b>(5) for more information.\n\n<b>/proc\nfiles</b> <br>\nThe kernel provides various <i>/proc</i> files that expose\ninformation about keys or define limits on key usage.\n<i><br>\n/proc/keys</i> (since Linux 2.6.10)\n\n<p style=\"margin-left:22%;\">This file exposes a list of the\nkeys for which the reading thread has <i>view</i>\npermission, providing various information about each key.\nThe thread need not possess the key for it to be visible in\nthis file.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The only keys\nincluded in the list are those that grant <i>view</i>\npermission to the reading process (regardless of whether or\nnot it possesses them). LSM security checks are still\nperformed, and may filter out further keys that the process\nis not authorized to view.\n\n<p style=\"margin-left:22%; margin-top: 1em\">An example of\nthe data that one might see in this file (with the columns\nnumbered for easy reference below) is the following:\n\n<p style=\"margin-left:22%; margin-top: 1em\">(1) (2) (3)(4)\n(5) (6) (7) (8) (9) <br>\n009a2028 I--Q--- 1 perm 3f010000 1000 1000 user\nkrb_ccache:primary: 12 <br>\n1806c4ba I--Q--- 1 perm 3f010000 1000 1000 keyring _pid: 2\n<br>\n25d3a08f I--Q--- 1 perm 1f3f0000 1000 65534 keyring\n_uid_ses.1000: 1 <br>\n28576bd8 I--Q--- 3 perm 3f010000 1000 1000 keyring _krb: 1\n<br>\n2c546d21 I--Q--- 190 perm 3f030000 1000 1000 keyring _ses: 2\n<br>\n30a4e0be I------ 4 2d 1f030000 1000 65534 keyring\n_persistent.1000: 1 <br>\n32100fab I--Q--- 4 perm 1f3f0000 1000 65534 keyring\n_uid.1000: 2 <br>\n32a387ea I--Q--- 1 perm 3f010000 1000 1000 keyring _pid: 2\n<br>\n3ce56aea I--Q--- 5 perm 3f030000 1000 1000 keyring _ses:\n1\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields\nshown in each line of this file are as follows:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>ID (1)</td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The ID (serial number) of the key, expressed in\nhexadecimal. </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">Flags (2)\n\n<p style=\"margin-left:32%;\">A set of flags describing the\nstate of the key:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>I</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key has been instantiated.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>R</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key has been revoked.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>D</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key is dead (i.e., the key type has been\nunregistered). (A key may be briefly in this state during\ngarbage collection.)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>Q</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key contributes to the user&rsquo;s quota.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>U</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key is under construction via a callback to user\nspace; see <a href=\"https://man.page/2/request-key\">request-key(2)</a>.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>N</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key is negatively instantiated.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>i</td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key has been invalidated.</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">Usage (3)\n\n<p style=\"margin-left:32%;\">This is a count of the number\nof kernel credential structures that are pinning the key\n(approximately: the number of threads and open file\nreferences that refer to this key).\n\n<p style=\"margin-left:22%;\">Timeout (4)\n\n<p style=\"margin-left:32%;\">The amount of time until the\nkey will expire, expressed in human-readable form (weeks,\ndays, hours, minutes, and seconds). The string <i>perm</i>\nhere means that the key is permanent (no timeout). The\nstring <i>expd</i> means that the key has already expired,\nbut has not yet been garbage collected.\n\n<p style=\"margin-left:22%;\">Permissions (5)\n\n<p style=\"margin-left:32%;\">The key permissions, expressed\nas four hexadecimal bytes containing, from left to right,\nthe possessor, user, group, and other permissions. Within\neach byte, the permission bits are as follows:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x01</td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>view</i></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>Ox02</td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>read</i></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x04</td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>write</i></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x08</td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>search</i></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x10</td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>link</i></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x20</td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>setattr</i></td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">UID (6)\n\n<p style=\"margin-left:32%;\">The user ID of the key\nowner.\n\n<p style=\"margin-left:22%;\">GID (7)\n\n<p style=\"margin-left:32%;\">The group ID of the key. The\nvalue -1 here means that the key has no group ID; this can\noccur in certain circumstances for keys created by the\nkernel.\n\n<p style=\"margin-left:22%;\">Type (8)\n\n<p style=\"margin-left:32%;\">The key type (user, keyring,\netc.)\n\n<p style=\"margin-left:22%;\">Description (9)\n\n<p style=\"margin-left:32%;\">The key description (name).\nThis field contains descriptive information about the key.\nFor most key types, it has the form\n\n<p style=\"margin-left:32%; margin-top: 1em\">name[:\nextra-info]\n\n<p style=\"margin-left:32%; margin-top: 1em\">The <i>name</i>\nsubfield is the key&rsquo;s description (name). The optional\n<i>extra-info</i> field provides some further information\nabout the key. The information that appears here depends on\nthe key type, as follows: <i><br>\n&quot;user&quot;</i> and <i>&quot;logon&quot;</i>\n\n<p style=\"margin-left:43%;\">The size in bytes of the key\npayload (expressed in decimal).\n\n<p style=\"margin-left:32%;\"><i>&quot;keyring&quot;</i>\n\n<p style=\"margin-left:43%;\">The number of keys linked to\nthe keyring, or the string <i>empty</i> if there are no keys\nlinked to the keyring.\n\n<p style=\"margin-left:32%;\"><i>&quot;big_key&quot;</i>\n\n<p style=\"margin-left:43%;\">The payload size in bytes,\nfollowed either by the string <i>[file]</i>, if the key\npayload exceeds the threshold that means that the payload is\nstored in a (swappable) <a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a> filesystem, or\notherwise the string <i>[buff]</i>, indicating that the key\nis small enough to reside in kernel memory.\n\n<p style=\"margin-left:32%; margin-top: 1em\">For the\n<i>&quot;.request_key_auth&quot;</i> key type (authorization\nkey; see <a href=\"https://man.page/2/request_key\">request_key(2)</a>), the description field has\nthe form shown in the following example:\n\n<p style=\"margin-left:32%; margin-top: 1em\">key:c9a9b19\npid:28880 ci:10\n\n<p style=\"margin-left:32%; margin-top: 1em\">The three\nsubfields are as follows:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"5%\">\n\n\n<p><i>key</i></td>\n<td width=\"6%\"></td>\n<td width=\"57%\">\n\n\n<p>The hexadecimal ID of the key being instantiated in the\nrequesting program.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"5%\">\n\n\n<p><i>pid</i></td>\n<td width=\"6%\"></td>\n<td width=\"57%\">\n\n\n<p>The PID of the requesting program.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"5%\">\n\n\n<p><i>ci</i></td>\n<td width=\"6%\"></td>\n<td width=\"57%\">\n\n\n<p>The length of the callout data with which the requested\nkey should be instantiated (i.e., the length of the payload\nassociated with the authorization key).</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>/proc/key-users</i> (since\nLinux 2.6.10)\n\n<p style=\"margin-left:22%;\">This file lists various\ninformation for each user ID that has at least one key on\nthe system. An example of the data that one might see in\nthis file is the following:\n\n<p style=\"margin-left:28%; margin-top: 1em\">0: 10 9/9\n2/1000000 22/25000000 <br>\n42: 9 9/9 8/200 106/20000 <br>\n1000: 11 11/11 10/200 271/20000\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields\nshown in each line are as follows:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>uid</i></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>The user ID.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>usage</i></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is a kernel-internal usage count for the kernel\nstructure used to record key users.</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>nkeys</i>/<i>nikeys</i>\n\n<p style=\"margin-left:32%;\">The total number of keys owned\nby the user, and the number of those keys that have been\ninstantiated.\n\n\n<p style=\"margin-left:22%;\"><i>qnkeys</i>/<i>maxkeys</i>\n\n<p style=\"margin-left:32%;\">The number of keys owned by the\nuser, and the maximum number of keys that the user may\nown.\n\n\n<p style=\"margin-left:22%;\"><i>qnbytes</i>/<i>maxbytes</i>\n\n<p style=\"margin-left:32%;\">The number of bytes consumed in\npayloads of the keys owned by this user, and the upper limit\non the number of bytes in key payloads for that user.\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/gc_delay</i>\n(since Linux 2.6.32)\n\n<p style=\"margin-left:22%;\">The value in this file\nspecifies the interval, in seconds, after which revoked and\nexpired keys will be garbage collected. The purpose of\nhaving such an interval is so that there is a window of time\nwhere user space can see an error (respectively\n<b>EKEYREVOKED</b> and <b>EKEYEXPIRED</b>) that indicates\nwhat happened to the key.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 300 (i.e., 5 minutes).\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/persistent_keyring_expiry</i>\n(since Linux 3.13)\n\n<p style=\"margin-left:22%;\">This file defines an interval,\nin seconds, to which the persistent keyring&rsquo;s\nexpiration timer is reset each time the keyring is accessed\n(via <a href=\"https://man.page/3/keyctl_get_persistent\">keyctl_get_persistent(3)</a> or the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>\n<b>KEYCTL_GET_PERSISTENT</b> operation.)\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 259200 (i.e., 3 days).\n\nThe following\nfiles (which are writable by privileged processes) are used\nto enforce quotas on the number of keys and number of bytes\nof data that can be stored in key payloads: <i><br>\n/proc/sys/kernel/keys/maxbytes</i> (since Linux 2.6.26)\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nbytes of data that a nonroot user can hold in the payloads\nof the keys owned by the user.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 20,000.\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/maxkeys</i>\n(since Linux 2.6.26)\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nkeys that a nonroot user may own.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 200.\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/root_maxbytes</i>\n(since Linux 2.6.26)\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nbytes of data that the root user (UID 0 in the root user\nnamespace) can hold in the payloads of the keys owned by\nroot.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 25,000,000 (20,000 before Linux\n3.17).\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/root_maxkeys</i>\n(since Linux 2.6.26)\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nkeys that the root user (UID 0 in the root user namespace)\nmay own.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 1,000,000 (200 before Linux 3.17).\n\nWith respect to\nkeyrings, note that each link in a keyring consumes 4 bytes\nof the keyring payload.\n\n<b>Users</b>\n<br>\nThe Linux key-management facility has a number of users and\nusages, but is not limited to those that already exist.\n\nIn-kernel users\nof this facility include: <br>\nNetwork filesystems - DNS\n\n<p style=\"margin-left:22%;\">The kernel uses the upcall\nmechanism provided by the keys to upcall to user space to do\nDNS lookups and then to cache the results.\n\n<p style=\"margin-left:11%;\">AF_RXRPC and kAFS -\nAuthentication\n\n<p style=\"margin-left:22%;\">The AF_RXRPC network protocol\nand the in-kernel AFS filesystem use keys to store the\nticket needed to do secured or encrypted traffic. These are\nthen looked up by network operations on AF_RXRPC and\nfilesystem operations on kAFS.\n\n<p style=\"margin-left:11%;\">NFS - User ID mapping\n\n<p style=\"margin-left:22%;\">The NFS filesystem uses keys to\nstore mappings of foreign user IDs to local user IDs.\n\n<p style=\"margin-left:11%;\">CIFS - Password\n\n<p style=\"margin-left:22%;\">The CIFS filesystem uses keys\nto store passwords for accessing remote shares.\n\n<p style=\"margin-left:11%;\">Module verification\n\n<p style=\"margin-left:22%;\">The kernel build process can be\nmade to cryptographically sign modules. That signature is\nthen checked when a module is loaded.\n\nUser-space\nusers of this facility include: <br>\nKerberos key storage\n\n<p style=\"margin-left:22%;\">The MIT Kerberos 5 facility\n(libkrb5) can use keys to store authentication tokens which\ncan be made to be automatically cleaned up a set time after\nthe user last uses them, but until then permits them to hang\naround after the user has logged out so that <b>cron</b>(8)\nscripts can use them.\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/1/keyctl\">keyctl(1)</a>,\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, <a href=\"https://man.page/2/request_key\">request_key(2)</a>,\n<a href=\"https://man.page/3/keyctl\">keyctl(3)</a>, <a href=\"https://man.page/7/keyutils\">keyutils(7)</a>,\n<a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a>, <a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>,\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>, <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>,\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>, <a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>,\n<b>pam_keyinit</b>(8), <b>request-key</b>(8)\n\nThe kernel\nsource files <i>Documentation/crypto/asymmetric-keys.txt</i>\nand under <i>Documentation/security/keys</i> (or, before\nLinux 4.13, in the file\n<i>Documentation/security/keys.txt</i>).\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\nThis page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.","body":"\n\n<h1 align=\"center\">KEYRINGS</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">keyrings -\nin-kernel key management and retention facility</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Linux\nkey-management facility is primarily a way for various\nkernel components to retain or cache security data,\nauthentication keys, encryption keys, and other data in the\nkernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">System call\ninterfaces are provided so that user-space programs can\nmanage those objects and also use the facility for their own\npurposes; see <a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/request_key\">request_key(2)</a>, and\n<a href=\"https://man.page/2/keyctl\">keyctl(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A library and\nsome user-space utilities are provided to allow access to\nthe facility. See <a href=\"https://man.page/1/keyctl\">keyctl(1)</a>, <a href=\"https://man.page/3/keyctl\">keyctl(3)</a>, and\n<a href=\"https://man.page/7/keyutils\">keyutils(7)</a> for more information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Keys</b>\n<br>\nA key has the following attributes: <br>\nSerial number (ID)</p>\n\n<p style=\"margin-left:22%;\">This is a unique integer handle\nby which a key is referred to in system calls. The serial\nnumber is sometimes synonymously referred as the key ID.\nProgrammatically, key serial numbers are represented using\nthe type <i>key_serial_t</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>Type</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>A key&rsquo;s type defines what sort of data can be held\nin the key, how the proposed content of the key will be\nparsed, and how the payload will be used.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are a\nnumber of general-purpose types available, plus some\nspecialist types defined by specific kernel components.</p>\n\n<p style=\"margin-left:11%;\">Description (name)</p>\n\n<p style=\"margin-left:22%;\">The key description is a\nprintable string that is used as the search term for the key\n(in conjunction with the key type) as well as a display\nname. During searches, the description may be partially\nmatched or exactly matched.</p>\n\n<p style=\"margin-left:11%;\">Payload (data)</p>\n\n<p style=\"margin-left:22%;\">The payload is the actual\ncontent of a key. This is usually set when a key is created,\nbut it is possible for the kernel to upcall to user space to\nfinish the instantiation of a key if that key wasn&rsquo;t\nalready known to the kernel when it was requested. For\nfurther details, see <a href=\"https://man.page/2/request_key\">request_key(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A key&rsquo;s\npayload can be read and updated if the key type supports it\nand if suitable permission is granted to the caller.</p>\n\n<p style=\"margin-left:11%;\">Access rights</p>\n\n<p style=\"margin-left:22%;\">Much as files do, each key has\nan owning user ID, an owning group ID, and a security label.\nEach key also has a set of permissions, though there are\nmore than for a normal UNIX file, and there is an additional\ncategory&mdash;possessor&mdash;beyond the usual user, group,\nand other (see <i>Possession</i>, below).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that keys\nare quota controlled, since they require unswappable kernel\nmemory. The owning user ID specifies whose quota is to be\ndebited.</p>\n\n<p style=\"margin-left:11%;\">Expiration time</p>\n\n<p style=\"margin-left:22%;\">Each key can have an expiration\ntime set. When that time is reached, the key is marked as\nbeing expired and accesses to it fail with the error\n<b>EKEYEXPIRED</b>. If not deleted, updated, or replaced,\nthen, after a set amount of time, an expired key is\nautomatically removed (garbage collected) along with all\nlinks to it, and attempts to access the key fail with the\nerror <b>ENOKEY</b>.</p>\n\n<p style=\"margin-left:11%;\">Reference count</p>\n\n<p style=\"margin-left:22%;\">Each key has a reference count.\nKeys are referenced by keyrings, by currently active users,\nand by a process&rsquo;s credentials. When the reference\ncount reaches zero, the key is scheduled for garbage\ncollection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key\ntypes</b> <br>\nThe kernel provides several basic types of key: <i><br>\n&quot;keyring&quot;</i></p>\n\n<p style=\"margin-left:22%;\">Keyrings are special keys which\nstore a set of links to other keys (including other\nkeyrings), analogous to a directory holding links to files.\nThe main purpose of a keyring is to prevent other keys from\nbeing garbage collected because nothing refers to them.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Keyrings with\ndescriptions (names) that begin with a period ('.') are\nreserved to the implementation.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>&quot;user&quot;</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>This is a general-purpose key type. The key is kept\nentirely within kernel memory. The payload may be read and\nupdated by user-space applications.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The payload for\nkeys of this type is a blob of arbitrary data of up to\n32,767 bytes.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The description\nmay be any valid string, though it is preferred that it\nstart with a colon-delimited prefix representing the service\nto which the key is of interest (for instance\n<i>&quot;afs:mykey&quot;</i>).</p>\n\n<p style=\"margin-left:11%;\"><i>&quot;logon&quot;</i> (since\nLinux 3.3)</p>\n\n<p style=\"margin-left:22%;\">This key type is essentially\nthe same as <i>&quot;user&quot;</i>, but it does not provide\nreading (i.e., the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a> <b>KEYCTL_READ</b>\noperation), meaning that the key payload is never visible\nfrom user space. This is suitable for storing\nusername-password pairs that should not be readable from\nuser space.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The description\nof a <i>&quot;logon&quot;</i> key <i>must</i> start with a\nnon-empty colon-delimited prefix whose purpose is to\nidentify the service to which the key belongs. (Note that\nthis differs from keys of the <i>&quot;user&quot;</i> type,\nwhere the inclusion of a prefix is recommended but is not\nenforced.)</p>\n\n<p style=\"margin-left:11%;\"><i>&quot;big_key&quot;</i>\n(since Linux 3.13)</p>\n\n<p style=\"margin-left:22%;\">This key type is similar to the\n<i>&quot;user&quot;</i> key type, but it may hold a payload\nof up to 1&nbsp;MiB in size. This key type is useful for\npurposes such as holding Kerberos ticket caches.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The payload\ndata may be stored in a tmpfs filesystem, rather than in\nkernel memory, if the data size exceeds the overhead of\nstoring the data in the filesystem. (Storing the data in a\nfilesystem requires filesystem structures to be allocated in\nthe kernel. The size of these structures determines the size\nthreshold above which the tmpfs storage method is used.)\nSince Linux 4.8, the payload data is encrypted when stored\nin tmpfs, thereby preventing it from being written\nunencrypted into swap space.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are more\nspecialized key types available also, but they aren&rsquo;t\ndiscussed here because they aren&rsquo;t intended for normal\nuser-space use.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Key type names\nthat begin with a period ('.') are reserved to the\nimplementation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Keyrings</b>\n<br>\nAs previously mentioned, keyrings are a special type of key\nthat contain links to other keys (which may include other\nkeyrings). Keys may be linked to by multiple keyrings.\nKeyrings may be considered as analogous to UNIX directories\nwhere each directory contains a set of hard links to\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\noperations (system calls) may be applied only to\nkeyrings:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>Adding</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A key may be added to a keyring by system calls that\ncreate keys. This prevents the new key from being\nimmediately deleted when the system call releases its last\nreference to the key.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Linking</p>\n\n<p style=\"margin-left:22%;\">A link may be added to a\nkeyring pointing to a key that is already known, provided\nthis does not create a self-referential cycle.</p>\n\n<p style=\"margin-left:11%;\">Unlinking</p>\n\n<p style=\"margin-left:22%;\">A link may be removed from a\nkeyring. When the last link to a key is removed, that key\nwill be scheduled for deletion by the garbage collector.</p>\n\n<p style=\"margin-left:11%;\">Clearing</p>\n\n<p style=\"margin-left:22%;\">All the links may be removed\nfrom a keyring.</p>\n\n<p style=\"margin-left:11%;\">Searching</p>\n\n<p style=\"margin-left:22%;\">A keyring may be considered the\nroot of a tree or subtree in which keyrings form the\nbranches and non-keyrings the leaves. This tree may be\nsearched for a key matching a particular type and\ndescription.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/3/keyctl_clear\">keyctl_clear(3)</a>, <a href=\"https://man.page/3/keyctl_link\">keyctl_link(3)</a>,\n<a href=\"https://man.page/3/keyctl_search\">keyctl_search(3)</a>, and <a href=\"https://man.page/3/keyctl_unlink\">keyctl_unlink(3)</a> for\nmore information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Anchoring\nkeys</b> <br>\nTo prevent a key from being garbage collected, it must be\nanchored to keep its reference count elevated when it is not\nin active use by the kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Keyrings are\nused to anchor other keys: each link is a reference on a\nkey. Note that keyrings themselves are just keys and are\nalso subject to the same anchoring requirement to prevent\nthem being garbage collected.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nmakes available a number of anchor keyrings. Note that some\nof these keyrings will be created only when first accessed.\n<br>\nProcess keyrings</p>\n\n<p style=\"margin-left:22%;\">Process credentials themselves\nreference keyrings with specific semantics. These keyrings\nare pinned as long as the set of credentials exists, which\nis usually as long as the process exists.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">There are three\nkeyrings with different inheritance/sharing rules: the\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a> (inherited and shared by all child\nprocesses), the <a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a> (shared by all\nthreads in a process) and the <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>\n(specific to a particular thread).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">As an\nalternative to using the actual keyring IDs, in calls to\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, and\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, the special keyring values\n<b>KEY_SPEC_SESSION_KEYRING</b>,\n<b>KEY_SPEC_PROCESS_KEYRING</b>, and\n<b>KEY_SPEC_THREAD_KEYRING</b> can be used to refer to the\ncaller&rsquo;s own instances of these keyrings.</p>\n\n<p style=\"margin-left:11%;\">User keyrings</p>\n\n<p style=\"margin-left:22%;\">Each UID known to the kernel\nhas a record that contains two keyrings: the\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a> and the\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>. These exist for as long as\nthe UID record in the kernel exists.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">As an\nalternative to using the actual keyring IDs, in calls to\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, and\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, the special keyring values\n<b>KEY_SPEC_USER_KEYRING</b> and\n<b>KEY_SPEC_USER_SESSION_KEYRING</b> can be used to refer to\nthe caller&rsquo;s own instances of these keyrings.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A link to the\nuser keyring is placed in a new session keyring by\n<b>pam_keyinit</b>(8) when a new login session is\ninitiated.</p>\n\n<p style=\"margin-left:11%;\">Persistent keyrings</p>\n\n<p style=\"margin-left:22%;\">There is a\n<a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a> available to each UID known to\nthe system. It may persist beyond the life of the UID record\npreviously mentioned, but has an expiration time set such\nthat it is automatically cleaned up after a set time. The\npersistent keyring permits, for example, <b>cron</b>(8)\nscripts to use credentials that are left in the persistent\nkeyring after the user logs out.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that the\nexpiration time of the persistent keyring is reset every\ntime the persistent key is requested.</p>\n\n<p style=\"margin-left:11%;\">Special keyrings</p>\n\n<p style=\"margin-left:22%;\">There are special keyrings\nowned by the kernel that can anchor keys for special\npurposes. An example of this is the <i>system keyring</i>\nused for holding encryption keys for module signature\nverification.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">These special\nkeyrings are usually closed to direct alteration by user\nspace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An originally\nplanned &quot;group keyring&quot;, for storing keys\nassociated with each GID known to the kernel, is not so far\nimplemented, is unlikely to be implemented. Nevertheless,\nthe constant <b>KEY_SPEC_GROUP_KEYRING</b> has been defined\nfor this keyring.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Possession</b>\n<br>\nThe concept of possession is important to understanding the\nkeyrings security model. Whether a thread possesses a key is\ndetermined by the following rules:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Any key or keyring that does not grant <i>search</i>\npermission to the caller is ignored in all the following\nrules.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>A thread possesses its <a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>,\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>, and <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>\ndirectly because those keyrings are referred to by its\ncredentials.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(3)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a keyring is possessed, then any key it links to is\nalso possessed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If any key a keyring links to is itself a keyring, then\nrule (3) applies recursively.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(5)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a process is upcalled from the kernel to instantiate\na key (see <a href=\"https://man.page/2/request_key\">request_key(2)</a>), then it also possesses\nthe requester&rsquo;s keyrings as in rule (1) as if it were\nthe requester.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\npossession is not a fundamental property of a key, but must\nrather be calculated each time the key is needed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Possession is\ndesigned to allow set-user-ID programs run from, say a\nuser&rsquo;s shell to access the user&rsquo;s keys. Granting\npermissions to the key possessor while denying them to the\nkey owner and group allows the prevention of access to keys\non the basis of UID and GID matches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When it creates\nthe session keyring, <b>pam_keyinit</b>(8) adds a link to\nthe <a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>, thus making the user keyring and\nanything it contains possessed by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Access\nrights</b> <br>\nEach key has the following security-related attributes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p style=\"margin-top: 1em\">The owning user ID</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>The ID of a group that is permitted to access the\nkey</p> </td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>A security label</p></td>\n<td width=\"3%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"82%\">\n\n\n<p>A permissions mask</p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The permissions\nmask contains four sets of rights. The first three sets are\nmutually exclusive. One and only one will be in force for a\nparticular access check. In order of descending priority,\nthese three sets are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><i>user</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The set specifies the rights\ngranted if the key&rsquo;s user ID matches the\ncaller&rsquo;s filesystem user ID.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>group</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The set specifies the rights granted if the user ID\ndidn&rsquo;t match and the key&rsquo;s group ID matches the\ncaller&rsquo;s filesystem GID or one of the caller&rsquo;s\nsupplementary group IDs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>other</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The set specifies the rights granted if neither the\nkey&rsquo;s user ID nor group ID matched.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The fourth set\nof rights is: <i><br>\npossessor</i></p>\n\n<p style=\"margin-left:22%;\">The set specifies the rights\ngranted if a key is determined to be possessed by the\ncaller.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The complete\nset of rights for a key is the union of whichever of the\nfirst three sets is applicable plus the fourth set if the\nkey is possessed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The set of\nrights that may be granted in each of the four masks is as\nfollows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>view</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The attributes of the key may be read. This includes the\ntype, description, and access rights (excluding the security\nlabel).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>read</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>For a key: the payload of the key may be read. For a\nkeyring: the list of serial numbers (keys) to which the\nkeyring has links may be read.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>write</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The payload of the key may be updated and the key may be\nrevoked. For a keyring, links may be added to or removed\nfrom the keyring, and the keyring may be cleared completely\n(all links are removed),</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>search</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>For a key (or a keyring): the key may be found by a\nsearch. For a keyring: keys and keyrings that are linked to\nby the keyring may be searched.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><i>link</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Links may be created from keyrings to the key. The\ninitial link to a key that is established when the key is\ncreated doesn&rsquo;t require this permission.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>setattr</i></p>\n\n<p style=\"margin-left:22%;\">The ownership details and\nsecurity label of the key may be changed, the key&rsquo;s\nexpiration time may be set, and the key may be revoked.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\naccess rights, any active Linux Security Module (LSM) may\nprevent access to a key if its policy so dictates. A key may\nbe given a security label or other attribute by the LSM;\nthis label is retrievable via\n<a href=\"https://man.page/3/keyctl_get_security\">keyctl_get_security(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/3/keyctl_chown\">keyctl_chown(3)</a>, <a href=\"https://man.page/3/keyctl_describe\">keyctl_describe(3)</a>,\n<a href=\"https://man.page/3/keyctl_get_security\">keyctl_get_security(3)</a>, <a href=\"https://man.page/3/keyctl_setperm\">keyctl_setperm(3)</a>, and\n<b>selinux</b>(8) for more information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Searching\nfor keys</b> <br>\nOne of the key features of the Linux key-management facility\nis the ability to find a key that a process is retaining.\nThe <a href=\"https://man.page/2/request_key\">request_key(2)</a> system call is the primary point\nof access for user-space applications to find a key.\n(Internally, the kernel has something similar available for\nuse by internal components that make use of keys.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The search\nalgorithm works as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>The process keyrings are searched in the following\norder: the thread <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a> if it exists, the\n<a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a> if it exists, and then either the\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a> if it exists or the\n<a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a> if that exists.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If the caller was a process that was invoked by the\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> upcall mechanism, then the keyrings of\nthe original caller of <a href=\"https://man.page/2/request_key\">request_key(2)</a> will be\nsearched as well.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(3)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>The search of a keyring tree is in breadth-first order:\neach keyring is searched first for a match, then the\nkeyrings referred to by that keyring are searched.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(4)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a matching key is found that is valid, then the\nsearch terminates and that key is returned.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(5)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a matching key is found that has an error state\nattached, that error state is noted and the search\ncontinues.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(6)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If no valid matching key is found, then the first noted\nerror state is returned; otherwise, an <b>ENOKEY</b> error\nis returned.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is also\npossible to search a specific keyring, in which case only\nsteps (3) to (6) apply.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/request_key\">request_key(2)</a> and <a href=\"https://man.page/3/keyctl_search\">keyctl_search(3)</a> for more\ninformation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>On-demand\nkey creation</b> <br>\nIf a key cannot be found, <a href=\"https://man.page/2/request_key\">request_key(2)</a> will, if\ngiven a <i>callout_info</i> argument, create a new key and\nthen upcall to user space to instantiate the key. This\nallows keys to be created on an as-needed basis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Typically, this\nwill involve the kernel creating a new process that executes\nthe <b>request-key</b>(8) program, which will then execute\nthe appropriate handler based on its configuration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The handler is\npassed a special authorization key that allows it and only\nit to instantiate the new key. This is also used to permit\nsearches performed by the handler program to also search the\nrequester&rsquo;s keyrings.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/request_key\">request_key(2)</a>, <a href=\"https://man.page/3/keyctl_assume_authority\">keyctl_assume_authority(3)</a>,\n<a href=\"https://man.page/3/keyctl_instantiate\">keyctl_instantiate(3)</a>, <a href=\"https://man.page/3/keyctl_negate\">keyctl_negate(3)</a>,\n<a href=\"https://man.page/3/keyctl_reject\">keyctl_reject(3)</a>, <b>request-key</b>(8), and\n<b>request-key.conf</b>(5) for more information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\nfiles</b> <br>\nThe kernel provides various <i>/proc</i> files that expose\ninformation about keys or define limits on key usage.\n<i><br>\n/proc/keys</i> (since Linux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">This file exposes a list of the\nkeys for which the reading thread has <i>view</i>\npermission, providing various information about each key.\nThe thread need not possess the key for it to be visible in\nthis file.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The only keys\nincluded in the list are those that grant <i>view</i>\npermission to the reading process (regardless of whether or\nnot it possesses them). LSM security checks are still\nperformed, and may filter out further keys that the process\nis not authorized to view.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">An example of\nthe data that one might see in this file (with the columns\nnumbered for easy reference below) is the following:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">(1) (2) (3)(4)\n(5) (6) (7) (8) (9) <br>\n009a2028 I--Q--- 1 perm 3f010000 1000 1000 user\nkrb_ccache:primary: 12 <br>\n1806c4ba I--Q--- 1 perm 3f010000 1000 1000 keyring _pid: 2\n<br>\n25d3a08f I--Q--- 1 perm 1f3f0000 1000 65534 keyring\n_uid_ses.1000: 1 <br>\n28576bd8 I--Q--- 3 perm 3f010000 1000 1000 keyring _krb: 1\n<br>\n2c546d21 I--Q--- 190 perm 3f030000 1000 1000 keyring _ses: 2\n<br>\n30a4e0be I------ 4 2d 1f030000 1000 65534 keyring\n_persistent.1000: 1 <br>\n32100fab I--Q--- 4 perm 1f3f0000 1000 65534 keyring\n_uid.1000: 2 <br>\n32a387ea I--Q--- 1 perm 3f010000 1000 1000 keyring _pid: 2\n<br>\n3ce56aea I--Q--- 5 perm 3f030000 1000 1000 keyring _ses:\n1</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields\nshown in each line of this file are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p>ID (1)</p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p>The ID (serial number) of the key, expressed in\nhexadecimal.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">Flags (2)</p>\n\n<p style=\"margin-left:32%;\">A set of flags describing the\nstate of the key:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>I</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key has been instantiated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>R</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key has been revoked.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>D</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key is dead (i.e., the key type has been\nunregistered). (A key may be briefly in this state during\ngarbage collection.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>Q</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key contributes to the user&rsquo;s quota.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>U</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key is under construction via a callback to user\nspace; see <a href=\"https://man.page/2/request-key\">request-key(2)</a>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>N</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key is negatively instantiated.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>i</p></td>\n<td width=\"4%\"></td>\n<td width=\"62%\">\n\n\n<p>The key has been invalidated.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">Usage (3)</p>\n\n<p style=\"margin-left:32%;\">This is a count of the number\nof kernel credential structures that are pinning the key\n(approximately: the number of threads and open file\nreferences that refer to this key).</p>\n\n<p style=\"margin-left:22%;\">Timeout (4)</p>\n\n<p style=\"margin-left:32%;\">The amount of time until the\nkey will expire, expressed in human-readable form (weeks,\ndays, hours, minutes, and seconds). The string <i>perm</i>\nhere means that the key is permanent (no timeout). The\nstring <i>expd</i> means that the key has already expired,\nbut has not yet been garbage collected.</p>\n\n<p style=\"margin-left:22%;\">Permissions (5)</p>\n\n<p style=\"margin-left:32%;\">The key permissions, expressed\nas four hexadecimal bytes containing, from left to right,\nthe possessor, user, group, and other permissions. Within\neach byte, the permission bits are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x01</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>view</i></p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>Ox02</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>read</i></p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x04</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>write</i></p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x08</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>search</i></p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x10</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>link</i></p></td>\n<td width=\"38%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"40%\"></td>\n<td width=\"6%\">\n\n\n<p>0x20</p></td>\n<td width=\"5%\"></td>\n<td width=\"11%\">\n\n\n<p><i>setattr</i></p></td>\n<td width=\"38%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">UID (6)</p>\n\n<p style=\"margin-left:32%;\">The user ID of the key\nowner.</p>\n\n<p style=\"margin-left:22%;\">GID (7)</p>\n\n<p style=\"margin-left:32%;\">The group ID of the key. The\nvalue -1 here means that the key has no group ID; this can\noccur in certain circumstances for keys created by the\nkernel.</p>\n\n<p style=\"margin-left:22%;\">Type (8)</p>\n\n<p style=\"margin-left:32%;\">The key type (user, keyring,\netc.)</p>\n\n<p style=\"margin-left:22%;\">Description (9)</p>\n\n<p style=\"margin-left:32%;\">The key description (name).\nThis field contains descriptive information about the key.\nFor most key types, it has the form</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">name[:\nextra-info]</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The <i>name</i>\nsubfield is the key&rsquo;s description (name). The optional\n<i>extra-info</i> field provides some further information\nabout the key. The information that appears here depends on\nthe key type, as follows: <i><br>\n&quot;user&quot;</i> and <i>&quot;logon&quot;</i></p>\n\n<p style=\"margin-left:43%;\">The size in bytes of the key\npayload (expressed in decimal).</p>\n\n<p style=\"margin-left:32%;\"><i>&quot;keyring&quot;</i></p>\n\n<p style=\"margin-left:43%;\">The number of keys linked to\nthe keyring, or the string <i>empty</i> if there are no keys\nlinked to the keyring.</p>\n\n<p style=\"margin-left:32%;\"><i>&quot;big_key&quot;</i></p>\n\n<p style=\"margin-left:43%;\">The payload size in bytes,\nfollowed either by the string <i>[file]</i>, if the key\npayload exceeds the threshold that means that the payload is\nstored in a (swappable) <a href=\"https://man.page/5/tmpfs\">tmpfs(5)</a> filesystem, or\notherwise the string <i>[buff]</i>, indicating that the key\nis small enough to reside in kernel memory.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">For the\n<i>&quot;.request_key_auth&quot;</i> key type (authorization\nkey; see <a href=\"https://man.page/2/request_key\">request_key(2)</a>), the description field has\nthe form shown in the following example:</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">key:c9a9b19\npid:28880 ci:10</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The three\nsubfields are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"5%\">\n\n\n<p><i>key</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"57%\">\n\n\n<p>The hexadecimal ID of the key being instantiated in the\nrequesting program.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"5%\">\n\n\n<p><i>pid</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"57%\">\n\n\n<p>The PID of the requesting program.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"5%\">\n\n\n<p><i>ci</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"57%\">\n\n\n<p>The length of the callout data with which the requested\nkey should be instantiated (i.e., the length of the payload\nassociated with the authorization key).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>/proc/key-users</i> (since\nLinux 2.6.10)</p>\n\n<p style=\"margin-left:22%;\">This file lists various\ninformation for each user ID that has at least one key on\nthe system. An example of the data that one might see in\nthis file is the following:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">0: 10 9/9\n2/1000000 22/25000000 <br>\n42: 9 9/9 8/200 106/20000 <br>\n1000: 11 11/11 10/200 271/20000</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The fields\nshown in each line are as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>uid</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>The user ID.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><i>usage</i></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>This is a kernel-internal usage count for the kernel\nstructure used to record key users.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>nkeys</i>/<i>nikeys</i></p>\n\n<p style=\"margin-left:32%;\">The total number of keys owned\nby the user, and the number of those keys that have been\ninstantiated.</p>\n\n\n<p style=\"margin-left:22%;\"><i>qnkeys</i>/<i>maxkeys</i></p>\n\n<p style=\"margin-left:32%;\">The number of keys owned by the\nuser, and the maximum number of keys that the user may\nown.</p>\n\n\n<p style=\"margin-left:22%;\"><i>qnbytes</i>/<i>maxbytes</i></p>\n\n<p style=\"margin-left:32%;\">The number of bytes consumed in\npayloads of the keys owned by this user, and the upper limit\non the number of bytes in key payloads for that user.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/gc_delay</i>\n(since Linux 2.6.32)</p>\n\n<p style=\"margin-left:22%;\">The value in this file\nspecifies the interval, in seconds, after which revoked and\nexpired keys will be garbage collected. The purpose of\nhaving such an interval is so that there is a window of time\nwhere user space can see an error (respectively\n<b>EKEYREVOKED</b> and <b>EKEYEXPIRED</b>) that indicates\nwhat happened to the key.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 300 (i.e., 5 minutes).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/persistent_keyring_expiry</i>\n(since Linux 3.13)</p>\n\n<p style=\"margin-left:22%;\">This file defines an interval,\nin seconds, to which the persistent keyring&rsquo;s\nexpiration timer is reset each time the keyring is accessed\n(via <a href=\"https://man.page/3/keyctl_get_persistent\">keyctl_get_persistent(3)</a> or the <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>\n<b>KEYCTL_GET_PERSISTENT</b> operation.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 259200 (i.e., 3 days).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfiles (which are writable by privileged processes) are used\nto enforce quotas on the number of keys and number of bytes\nof data that can be stored in key payloads: <i><br>\n/proc/sys/kernel/keys/maxbytes</i> (since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nbytes of data that a nonroot user can hold in the payloads\nof the keys owned by the user.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 20,000.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/maxkeys</i>\n(since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nkeys that a nonroot user may own.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 200.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/root_maxbytes</i>\n(since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nbytes of data that the root user (UID 0 in the root user\nnamespace) can hold in the payloads of the keys owned by\nroot.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 25,000,000 (20,000 before Linux\n3.17).</p>\n\n\n<p style=\"margin-left:11%;\"><i>/proc/sys/kernel/keys/root_maxkeys</i>\n(since Linux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This is the maximum number of\nkeys that the root user (UID 0 in the root user namespace)\nmay own.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue in this file is 1,000,000 (200 before Linux 3.17).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With respect to\nkeyrings, note that each link in a keyring consumes 4 bytes\nof the keyring payload.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Users</b>\n<br>\nThe Linux key-management facility has a number of users and\nusages, but is not limited to those that already exist.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In-kernel users\nof this facility include: <br>\nNetwork filesystems - DNS</p>\n\n<p style=\"margin-left:22%;\">The kernel uses the upcall\nmechanism provided by the keys to upcall to user space to do\nDNS lookups and then to cache the results.</p>\n\n<p style=\"margin-left:11%;\">AF_RXRPC and kAFS -\nAuthentication</p>\n\n<p style=\"margin-left:22%;\">The AF_RXRPC network protocol\nand the in-kernel AFS filesystem use keys to store the\nticket needed to do secured or encrypted traffic. These are\nthen looked up by network operations on AF_RXRPC and\nfilesystem operations on kAFS.</p>\n\n<p style=\"margin-left:11%;\">NFS - User ID mapping</p>\n\n<p style=\"margin-left:22%;\">The NFS filesystem uses keys to\nstore mappings of foreign user IDs to local user IDs.</p>\n\n<p style=\"margin-left:11%;\">CIFS - Password</p>\n\n<p style=\"margin-left:22%;\">The CIFS filesystem uses keys\nto store passwords for accessing remote shares.</p>\n\n<p style=\"margin-left:11%;\">Module verification</p>\n\n<p style=\"margin-left:22%;\">The kernel build process can be\nmade to cryptographically sign modules. That signature is\nthen checked when a module is loaded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">User-space\nusers of this facility include: <br>\nKerberos key storage</p>\n\n<p style=\"margin-left:22%;\">The MIT Kerberos 5 facility\n(libkrb5) can use keys to store authentication tokens which\ncan be made to be automatically cleaned up a set time after\nthe user last uses them, but until then permits them to hang\naround after the user has logged out so that <b>cron</b>(8)\nscripts can use them.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/keyctl\">keyctl(1)</a>,\n<a href=\"https://man.page/2/add_key\">add_key(2)</a>, <a href=\"https://man.page/2/keyctl\">keyctl(2)</a>, <a href=\"https://man.page/2/request_key\">request_key(2)</a>,\n<a href=\"https://man.page/3/keyctl\">keyctl(3)</a>, <a href=\"https://man.page/7/keyutils\">keyutils(7)</a>,\n<a href=\"https://man.page/7/persistent-keyring\">persistent-keyring(7)</a>, <a href=\"https://man.page/7/process-keyring\">process-keyring(7)</a>,\n<a href=\"https://man.page/7/session-keyring\">session-keyring(7)</a>, <a href=\"https://man.page/7/thread-keyring\">thread-keyring(7)</a>,\n<a href=\"https://man.page/7/user-keyring\">user-keyring(7)</a>, <a href=\"https://man.page/7/user-session-keyring\">user-session-keyring(7)</a>,\n<b>pam_keyinit</b>(8), <b>request-key</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource files <i>Documentation/crypto/asymmetric-keys.txt</i>\nand under <i>Documentation/security/keys</i> (or, before\nLinux 4.13, in the file\n<i>Documentation/security/keys.txt</i>).</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}