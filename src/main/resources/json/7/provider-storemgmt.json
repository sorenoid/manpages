{"name":"provider-storemgmt","description":"provider-storemgmt\n- The OSSL_STORE library &lt;-&gt; provider functions","body":"\n\n<h1 align=\"center\">PROVIDER-STOREMGMT</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-storemgmt\n- The OSSL_STORE library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\nvoid *OSSL_FUNC_store_open(void *provctx, const char *uri);\n<br>\nvoid *OSSL_FUNC_store_attach(void *provctx, OSSL_CORE_BIO\n*bio); <br>\nconst OSSL_PARAM *store_settable_ctx_params(void *provctx);\n<br>\nint OSSL_FUNC_store_set_ctx_params(void *loaderctx, const\nOSSL_PARAM[]); <br>\nint OSSL_FUNC_store_load(void *loaderctx, <br>\nOSSL_CALLBACK *object_cb, void *object_cbarg, <br>\nOSSL_PASSPHRASE_CALLBACK *pw_cb, void *pw_cbarg); <br>\nint OSSL_FUNC_store_eof(void *loaderctx); <br>\nint OSSL_FUNC_store_close(void *loaderctx); <br>\nint OSSL_FUNC_store_export_object <br>\n(void *loaderctx, const void *objref, size_t objref_sz, <br>\nOSSL_CALLBACK *export_cb, void *export_cbarg);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>STORE</small> operation is the provider side of the\n<a href=\"https://man.page/7/ossl_store\">ossl_store(7)</a> <small>API.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The primary\nresponsibility of the <small>STORE</small> operation is to\nload all sorts of objects from a container indicated by\n<small>URI.</small> These objects are given to the OpenSSL\nlibrary in provider-native object abstraction form (see\n<a href=\"https://man.page/7/provider-object\">provider-object(7)</a>). The OpenSSL library is then\nresponsible for passing on that abstraction to suitable\nprovided functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Examples of\nfunctions that the OpenSSL library can pass the abstraction\nto include <b>OSSL_FUNC_keymgmt_load()</b>\n(<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>),\n<b>OSSL_FUNC_store_export_object()</b> (which exports the\nobject in parameterized form).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from a\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_get_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_store_load()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef void\n*(OSSL_OSSL_FUNC_store_load_fn)(void *provctx, <br>\nconst OSSL_PARAM params[]); <br>\nstatic ossl_inline OSSL_OSSL_FUNC_store_load_fn <br>\nOSSL_OSSL_FUNC_store_load(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_store_open\nOSSL_FUNC_STORE_OPEN <br>\nOSSL_FUNC_store_attach OSSL_FUNC_STORE_ATTACH <br>\nOSSL_FUNC_store_settable_ctx_params\nOSSL_FUNC_STORE_SETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_store_set_ctx_params\nOSSL_FUNC_STORE_SET_CTX_PARAMS <br>\nOSSL_FUNC_store_load OSSL_FUNC_STORE_LOAD <br>\nOSSL_FUNC_store_eof OSSL_FUNC_STORE_EOF <br>\nOSSL_FUNC_store_close OSSL_FUNC_STORE_CLOSE <br>\nOSSL_FUNC_store_export_object\nOSSL_FUNC_STORE_EXPORT_OBJECT</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Functions\n<br>\nOSSL_FUNC_store_open()</b> should create a provider side\ncontext with data based on the input <i>uri</i>. The\nimplementation is entirely responsible for the\ninterpretation of the <small>URI.</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_store_attach()</b>\nshould create a provider side context with the core\n<b><small>BIO</small></b> <i>bio</i> attached. This is an\nalternative to using a <small>URI</small> to find storage,\nsupporting <a href=\"https://man.page/3/OSSL_STORE_attach\">OSSL_STORE_attach(3)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_store_settable_ctx_params()</b>\nshould return a constant array of descriptor\n<b><small>OSSL_PARAM</small></b> , for parameters that\n<b>OSSL_FUNC_store_set_ctx_params()</b> can handle.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_store_set_ctx_params()</b>\nshould set additional parameters, such as what kind of data\nto expect, search criteria, and so on. More on those below,\nin &quot;Load Parameters&quot;. Whether unrecognised\nparameters are an error or simply ignored is at the\nimplementation&rsquo;s discretion. Passing\n<small>NULL</small> for <i>params</i> should return\ntrue.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_store_load()</b>\nloads the next object from the <small>URI</small> opened by\n<b>OSSL_FUNC_store_open()</b>, creates an object abstraction\nfor it (see <a href=\"https://man.page/7/provider-object\">provider-object(7)</a>), and calls\n<i>object_cb</i> with it as well as <i>object_cbarg</i>.\n<i>object_cb</i> will then interpret the object abstraction\nand do what it can to wrap it or decode it into an OpenSSL\nstructure. In case a passphrase needs to be prompted to\nunlock an object, <i>pw_cb</i> should be called.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_store_eof()</b>\nindicates if the end of the set of objects from the\n<small>URI</small> has been reached. When that happens,\nthere&rsquo;s no point trying to do any further loading.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_store_close()</b>\nfrees the provider side context <i>ctx</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Load\nParameters</b> <br>\n&quot;expect&quot; (\n<b><small>OSSL_STORE_PARAM_EXPECT</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Is a hint of what type of data\nthe OpenSSL library expects to get. This is only useful for\noptimization, as the library will check that the object\ntypes match the expectation too.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The number that\ncan be given through this parameter is found in\n<i>&lt;openssl/store.h&gt;</i>, with the macros having names\nstarting with &quot;OSSL_STORE_INFO_&quot;. These are\nfurther described in &quot; <small>SUPPORTED\nOBJECTS&quot;</small> in\n<b><small>OSSL_STORE_INFO</small></b> (3).</p>\n\n<p style=\"margin-left:11%;\">&quot;subject&quot; (\n<b><small>OSSL_STORE_PARAM_SUBJECT</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">Indicates that the caller wants\nto search for an object with the given subject associated.\nThis can be used to select specific certificates by\nsubject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The contents of\nthe octet string is expected to be in <small>DER</small>\nform.</p>\n\n<p style=\"margin-left:11%;\">&quot;issuer&quot; (\n<b><small>OSSL_STORE_PARAM_ISSUER</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">Indicates that the caller wants\nto search for an object with the given issuer associated.\nThis can be used to select specific certificates by\nissuer.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The contents of\nthe octet string is expected to be in <small>DER</small>\nform.</p>\n\n<p style=\"margin-left:11%;\">&quot;serial&quot; (\n<b><small>OSSL_STORE_PARAM_SERIAL</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Indicates that the caller wants\nto search for an object with the given serial number\nassociated.</p>\n\n<p style=\"margin-left:11%;\">&quot;digest&quot; (\n<b><small>OSSL_STORE_PARAM_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;fingerprint&quot; (\n<b><small>OSSL_STORE_PARAM_FINGERPRINT</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">Indicates that the caller wants\nto search for an object with the given fingerprint, computed\nwith the given digest.</p>\n\n<p style=\"margin-left:11%;\">&quot;alias&quot; (\n<b><small>OSSL_STORE_PARAM_ALIAS</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Indicates that the caller wants\nto search for an object with the given alias (some call it a\n&quot;friendly name&quot;).</p>\n\n<p style=\"margin-left:11%;\">&quot;properties&quot; (\n<b><small>OSSL_STORE_PARAM_PROPERTIES</small> ) &lt;utf8\nstring</b></p>\n\n<p style=\"margin-left:17%;\">Property string to use when\nquerying for algorithms such as the\n<b><small>OSSL_DECODER</small></b> decoder\nimplementations.</p>\n\n<p style=\"margin-left:11%;\">&quot;input-type&quot; (\n<b><small>OSSL_STORE_PARAM_INPUT_TYPE</small> ) &lt;utf8\nstring</b></p>\n\n<p style=\"margin-left:17%;\">Type of the input format as a\nhint to use when decoding the objects in the store.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Several of\nthese search criteria may be combined. For example, to\nsearch for a certificate by issuer+serial, both the\n&quot;issuer&quot; and the &quot;serial&quot; parameters\nwill be given.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a></p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>STORE</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}