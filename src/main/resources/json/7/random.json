{"name":"random","body":"\n\n<h1 align=\"center\">RANDOM</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">random -\noverview of interfaces for obtaining randomness</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nrandom-number generator relies on entropy gathered from\ndevice drivers and other sources of environmental noise to\nseed a cryptographically secure pseudorandom number\ngenerator (CSPRNG). It is designed for security, rather than\nspeed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ninterfaces provide access to output from the kernel\nCSPRNG:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <i>/dev/urandom</i> and <i>/dev/random</i> devices,\nboth described in <a href=\"https://man.page/4/random\">random(4)</a>. These devices have been\npresent on Linux since early times, and are also available\non many other systems.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The Linux-specific <a href=\"https://man.page/2/getrandom\">getrandom(2)</a> system call,\navailable since Linux 3.17. This system call provides access\neither to the same source as <i>/dev/urandom</i> (called the\n<i>urandom</i> source in this page) or to the same source as\n<i>/dev/random</i> (called the <i>random</i> source in this\npage). The default is the <i>urandom</i> source; the\n<i>random</i> source is selected by specifying the\n<b>GRND_RANDOM</b> flag to the system call. (The\n<a href=\"https://man.page/3/getentropy\">getentropy(3)</a> function provides a slightly more\nportable interface on top of <a href=\"https://man.page/2/getrandom\">getrandom(2)</a>.)</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Initialization\nof the entropy pool</b> <br>\nThe kernel collects bits of entropy from the environment.\nWhen a sufficient number of random bits has been collected,\nthe entropy pool is considered to be initialized.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Choice of\nrandom source</b> <br>\nUnless you are doing long-term key generation (and most\nlikely not even then), you probably shouldn&rsquo;t be\nreading from the <i>/dev/random</i> device or employing\n<a href=\"https://man.page/2/getrandom\">getrandom(2)</a> with the <b>GRND_RANDOM</b> flag.\nInstead, either read from the <i>/dev/urandom</i> device or\nemploy <a href=\"https://man.page/2/getrandom\">getrandom(2)</a> without the <b>GRND_RANDOM</b>\nflag. The cryptographic algorithms used for the\n<i>urandom</i> source are quite conservative, and so should\nbe sufficient for all purposes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ndisadvantage of <b>GRND_RANDOM</b> and reads from\n<i>/dev/random</i> is that the operation can block for an\nindefinite period of time. Furthermore, dealing with the\npartially fulfilled requests that can occur when using\n<b>GRND_RANDOM</b> or when reading from <i>/dev/random</i>\nincreases code complexity.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Monte Carlo\nand other probabilistic sampling applications</b> <br>\nUsing these interfaces to provide large quantities of data\nfor Monte Carlo simulations or other programs/algorithms\nwhich are doing probabilistic sampling will be slow.\nFurthermore, it is unnecessary, because such applications do\nnot need cryptographically secure random numbers. Instead,\nuse the interfaces described in this page to obtain a small\namount of data to seed a user-space pseudorandom number\ngenerator for use by such applications.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Comparison\nbetween getrandom, /dev/urandom, and /dev/random</b> <br>\nThe following table summarizes the behavior of the various\ninterfaces that can be used to obtain randomness.\n<b>GRND_NONBLOCK</b> is a flag that can be used to control\nthe blocking behavior of <a href=\"https://man.page/2/getrandom\">getrandom(2)</a>. The final\ncolumn of the table considers the case that can occur in\nearly boot time when the entropy pool is not yet\ninitialized.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3531701.png\" alt=\"Image grohtml-3531701.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Generating\ncryptographic keys</b> <br>\nThe amount of seed material required to generate a\ncryptographic key equals the effective key size of the key.\nFor example, a 3072-bit RSA or Diffie-Hellman private key\nhas an effective key size of 128 bits (it requires about\n2^128 operations to break) so a key generator needs only 128\nbits (16 bytes) of seed material from\n<i>/dev/random</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While some\nsafety margin above that minimum is reasonable, as a guard\nagainst flaws in the CSPRNG algorithm, no cryptographic\nprimitive available today can hope to promise more than 256\nbits of security, so if any program reads more than 256 bits\n(32 bytes) from the kernel random pool per invocation, or\nper reasonable reseed interval (not less than one minute),\nthat should be taken as a sign that its cryptography is\n<i>not</i> skillfully implemented.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getrandom\">getrandom(2)</a>,\n<a href=\"https://man.page/3/getauxval\">getauxval(3)</a>, <a href=\"https://man.page/3/getentropy\">getentropy(3)</a>, <a href=\"https://man.page/4/random\">random(4)</a>,\n<a href=\"https://man.page/4/urandom\">urandom(4)</a>, <a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}