{"name":"gittutorial-2","body":"\n\n<h1 align=\"center\">GITTUTORIAL-2</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gittutorial-2 -\nA tutorial introduction to Git: part two</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git *</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You should work\nthrough <a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a> before reading this\ntutorial.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The goal of\nthis tutorial is to introduce two fundamental pieces of\nGit&rsquo;s architecture&mdash;the object database and the\nindex file&mdash;and to provide the reader with everything\nnecessary to understand the rest of the Git\ndocumentation.</p>\n\n<h2>THE GIT OBJECT DATABASE\n<a name=\"THE GIT OBJECT DATABASE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Let&rsquo;s\nstart a new project and create a small amount of\nhistory:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ mkdir\ntest-project <br>\n$ cd test-project <br>\n$ git init <br>\nInitialized empty Git repository in .git/ <br>\n$ echo 'hello world' &gt; file.txt <br>\n$ git add . <br>\n$ git commit -a -m &quot;initial commit&quot; <br>\n[master (root-commit) 54196cc] initial commit <br>\n1 file changed, 1 insertion(+) <br>\ncreate mode 100644 file.txt <br>\n$ echo 'hello world!' &gt;file.txt <br>\n$ git commit -a -m &quot;add emphasis&quot; <br>\n[master c4d59f3] add emphasis <br>\n1 file changed, 1 insertion(+), 1 deletion(-)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">What are the 7\ndigits of hex that Git responded to the commit with?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We saw in part\none of the tutorial that commits have names like this. It\nturns out that every object in the Git history is stored\nunder a 40-digit hex name. That name is the SHA-1 hash of\nthe object&rsquo;s contents; among other things, this\nensures that Git will never store the same data twice (since\nidentical data is given an identical SHA-1 name), and that\nthe contents of a Git object will never change (since that\nwould change the object&rsquo;s name as well). The 7 char\nhex strings here are simply the abbreviation of such 40\ncharacter long strings. Abbreviations can be used everywhere\nwhere the 40 character strings can be used, so long as they\nare unambiguous.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is expected\nthat the content of the commit object you created while\nfollowing the example above generates a different SHA-1 hash\nthan the one shown above because the commit object records\nthe time when it was created and the name of the person\nperforming the commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We can ask Git\nabout this particular object with the <b>cat-file</b>\ncommand. Don&rsquo;t copy the 40 hex digits from this\nexample but use those from your own version. Note that you\ncan shorten it to only a few characters to save yourself\ntyping all 40 hex digits:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cat-file\n-t 54196cc2 <br>\ncommit <br>\n$ git cat-file commit 54196cc2 <br>\ntree 92b8b694ffb1675e5975148e1121810081dbdffe <br>\nauthor J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt;\n1143414668 -0500 <br>\ncommitter J. Bruce Fields\n&lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">initial\ncommit</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A tree can\nrefer to one or more &quot;blob&quot; objects, each\ncorresponding to a file. In addition, a tree can also refer\nto other tree objects, thus creating a directory hierarchy.\nYou can examine the contents of any tree using ls-tree\n(remember that a long enough initial portion of the SHA-1\nwill also work):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git ls-tree\n92b8b694 <br>\n100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad\nfile.txt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus we see\nthat this tree has one file in it. The SHA-1 hash is a\nreference to that file&rsquo;s data:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cat-file\n-t 3b18e512 <br>\nblob</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n&quot;blob&quot; is just file data, which we can also\nexamine with cat-file:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cat-file\nblob 3b18e512 <br>\nhello world</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that this\nis the old file data; so the object that Git named in its\nresponse to the initial tree was a tree with a snapshot of\nthe directory state that was recorded by the first\ncommit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of these\nobjects are stored under their SHA-1 names inside the Git\ndirectory:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ find\n.git/objects/ <br>\n.git/objects/ <br>\n.git/objects/pack <br>\n.git/objects/info <br>\n.git/objects/3b <br>\n.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad <br>\n.git/objects/92 <br>\n.git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe <br>\n.git/objects/54 <br>\n.git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7 <br>\n.git/objects/a0 <br>\n.git/objects/a0/423896973644771497bdc03eb99d5281615b51 <br>\n.git/objects/d0 <br>\n.git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59 <br>\n.git/objects/c4 <br>\n.git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and the\ncontents of these files is just the compressed data plus a\nheader identifying their length and their type. The type is\neither a blob, a tree, a commit, or a tag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The simplest\ncommit to find is the HEAD commit, which we can find from\n.git/HEAD:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ cat .git/HEAD\n<br>\nref: refs/heads/master</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As you can see,\nthis tells us which branch we&rsquo;re currently on, and it\ntells us this by naming a file under the .git directory,\nwhich itself contains a SHA-1 name referring to a commit\nobject, which we can examine with cat-file:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ cat\n.git/refs/heads/master <br>\nc4d59f390b9cfd4318117afde11d601c1085f241 <br>\n$ git cat-file -t c4d59f39 <br>\ncommit <br>\n$ git cat-file commit c4d59f39 <br>\ntree d0492b368b66bdabf2ac1fd8c92b39d3db916e59 <br>\nparent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7 <br>\nauthor J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt;\n1143418702 -0500 <br>\ncommitter J. Bruce Fields\n&lt;bfields@puzzle.fieldses.org&gt; 1143418702 -0500</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">add\nemphasis</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;tree&quot; object here refers to the new state of the\ntree:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git ls-tree\nd0492b36 <br>\n100644 blob a0423896973644771497bdc03eb99d5281615b51\nfile.txt <br>\n$ git cat-file blob a0423896 <br>\nhello world!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and the\n&quot;parent&quot; object refers to the previous commit:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cat-file\ncommit 54196cc2 <br>\ntree 92b8b694ffb1675e5975148e1121810081dbdffe <br>\nauthor J. Bruce Fields &lt;bfields@puzzle.fieldses.org&gt;\n1143414668 -0500 <br>\ncommitter J. Bruce Fields\n&lt;bfields@puzzle.fieldses.org&gt; 1143414668 -0500</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">initial\ncommit</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The tree object\nis the tree we examined first, and this commit is unusual in\nthat it lacks any parent.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most commits\nhave only one parent, but it is also common for a commit to\nhave multiple parents. In that case the commit represents a\nmerge, with the parent references pointing to the heads of\nthe merged branches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Besides blobs,\ntrees, and commits, the only remaining type of object is a\n&quot;tag&quot;, which we won&rsquo;t discuss here; refer to\n<a href=\"https://man.page/1/git-tag\">git-tag(1)</a> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So now we know\nhow Git uses the object database to represent a\nproject&rsquo;s history:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;commit&quot; objects refer to &quot;tree&quot; objects\nrepresenting the snapshot of a directory tree at a\nparticular point in the history, and refer to\n&quot;parent&quot; commits to show how they&rsquo;re\nconnected into the project history.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;tree&quot; objects represent the state of a single\ndirectory, associating directory names to &quot;blob&quot;\nobjects containing file data and &quot;tree&quot; objects\ncontaining subdirectory information.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;blob&quot; objects contain file data without any other\nstructure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nReferences to commit objects at the head of each branch are\nstored in files under .git/refs/heads/.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The name\nof the current branch is stored in .git/HEAD.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note, by the\nway, that lots of commands take a tree as an argument. But\nas we can see above, a tree can be referred to in many\ndifferent ways&mdash;by the SHA-1 name for that tree, by the\nname of a commit that refers to the tree, by the name of a\nbranch whose head refers to that tree, etc.--and most such\ncommands can accept any of these names.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In command\nsynopses, the word &quot;tree-ish&quot; is sometimes used to\ndesignate such an argument.</p>\n\n<h2>THE INDEX FILE\n<a name=\"THE INDEX FILE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The primary\ntool we&rsquo;ve been using to create commits is\n<b>git-commit -a</b>, which creates a commit including every\nchange you&rsquo;ve made to your working tree. But what if\nyou want to commit changes only to certain files? Or only\ncertain changes to certain files?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If we look at\nthe way commits are created under the cover, we&rsquo;ll see\nthat there are more flexible ways creating commits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Continuing with\nour test-project, let&rsquo;s modify file.txt again:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ echo\n&quot;hello world, again&quot; &gt;&gt;file.txt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">but this time\ninstead of immediately making the commit, let&rsquo;s take\nan intermediate step, and ask for diffs along the way to\nkeep track of what&rsquo;s happening:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git diff <br>\n--- a/file.txt <br>\n+++ b/file.txt <br>\n@@ -1 +1,2 @@ <br>\nhello world! <br>\n+hello world, again <br>\n$ git add file.txt <br>\n$ git diff</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The last diff\nis empty, but no new commits have been made, and the head\nstill doesn&rsquo;t contain the new line:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git diff HEAD\n<br>\ndiff --git a/file.txt b/file.txt <br>\nindex a042389..513feba 100644 <br>\n--- a/file.txt <br>\n+++ b/file.txt <br>\n@@ -1 +1,2 @@ <br>\nhello world! <br>\n+hello world, again</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So <i>git\ndiff</i> is comparing against something other than the head.\nThe thing that it&rsquo;s comparing against is actually the\nindex file, which is stored in .git/index in a binary\nformat, but whose contents we can examine with ls-files:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git ls-files\n--stage <br>\n100644 513feba2e53ebbd2532419ded848ba19de88ba00 0 file.txt\n<br>\n$ git cat-file -t 513feba2 <br>\nblob <br>\n$ git cat-file blob 513feba2 <br>\nhello world! <br>\nhello world, again</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So what our\n<i>git add</i> did was store a new blob and then put a\nreference to it in the index file. If we modify the file\nagain, we&rsquo;ll see that the new modifications are\nreflected in the <i>git diff</i> output:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ echo 'again?'\n&gt;&gt;file.txt <br>\n$ git diff <br>\nindex 513feba..ba3da7b 100644 <br>\n--- a/file.txt <br>\n+++ b/file.txt <br>\n@@ -1,2 +1,3 @@ <br>\nhello world! <br>\nhello world, again <br>\n+again?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With the right\narguments, <i>git diff</i> can also show us the difference\nbetween the working directory and the last commit, or\nbetween the index and the last commit:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git diff HEAD\n<br>\ndiff --git a/file.txt b/file.txt <br>\nindex a042389..ba3da7b 100644 <br>\n--- a/file.txt <br>\n+++ b/file.txt <br>\n@@ -1 +1,3 @@ <br>\nhello world! <br>\n+hello world, again <br>\n+again? <br>\n$ git diff --cached <br>\ndiff --git a/file.txt b/file.txt <br>\nindex a042389..513feba 100644 <br>\n--- a/file.txt <br>\n+++ b/file.txt <br>\n@@ -1 +1,2 @@ <br>\nhello world! <br>\n+hello world, again</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">At any time, we\ncan create a new commit using <i>git commit</i> (without the\n&quot;-a&quot; option), and verify that the state committed\nonly includes the changes stored in the index file, not the\nadditional change that is still only in our working\ntree:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git commit -m\n&quot;repeat&quot; <br>\n$ git diff HEAD <br>\ndiff --git a/file.txt b/file.txt <br>\nindex 513feba..ba3da7b 100644 <br>\n--- a/file.txt <br>\n+++ b/file.txt <br>\n@@ -1,2 +1,3 @@ <br>\nhello world! <br>\nhello world, again <br>\n+again?</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">So by default\n<i>git commit</i> uses the index to create the commit, not\nthe working tree; the &quot;-a&quot; option to commit tells\nit to first update the index with all changes in the working\ntree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally,\nit&rsquo;s worth looking at the effect of <i>git add</i> on\nthe index file:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ echo\n&quot;goodbye, world&quot; &gt;closing.txt <br>\n$ git add closing.txt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The effect of\nthe <i>git add</i> was to add one entry to the index\nfile:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git ls-files\n--stage <br>\n100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0\nclosing.txt <br>\n100644 513feba2e53ebbd2532419ded848ba19de88ba00 0\nfile.txt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">And, as you can\nsee with cat-file, this new entry refers to the current\ncontents of the file:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git cat-file\nblob 8b9743b2 <br>\ngoodbye, world</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;status&quot; command is a useful way to get a quick\nsummary of the situation:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git status\n<br>\nOn branch master <br>\nChanges to be committed: <br>\n(use &quot;git restore --staged &lt;file&gt;...&quot; to\nunstage)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">new file:\nclosing.txt</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Changes not\nstaged for commit: <br>\n(use &quot;git add &lt;file&gt;...&quot; to update what will\nbe committed) <br>\n(use &quot;git restore &lt;file&gt;...&quot; to discard\nchanges in working directory)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">modified:\nfile.txt</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since the\ncurrent state of closing.txt is cached in the index file, it\nis listed as &quot;Changes to be committed&quot;. Since\nfile.txt has changes in the working directory that\naren&rsquo;t reflected in the index, it is marked\n&quot;changed but not updated&quot;. At this point, running\n&quot;git commit&quot; would create a commit that added\nclosing.txt (with its new contents), but that didn&rsquo;t\nmodify file.txt.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also, note that\na bare <b>git diff</b> shows the changes to file.txt, but\nnot the addition of closing.txt, because the version of\nclosing.txt in the index file is identical to the one in the\nworking directory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nbeing the staging area for new commits, the index file is\nalso populated from the object database when checking out a\nbranch, and is used to hold the trees involved in a merge\noperation. See <a href=\"https://man.page/7/gitcore-tutorial\">gitcore-tutorial(7)</a> and the relevant\nman pages for details.</p>\n\n<h2>WHAT NEXT?\n<a name=\"WHAT NEXT?\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">At this point\nyou should know everything necessary to read the man pages\nfor any of the git commands; one good place to start would\nbe with the commands mentioned in <a href=\"https://man.page/7/giteveryday\">giteveryday(7)</a>. You\nshould be able to find any unknown jargon in\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b><font color=\"#0000FF\">Git User&rsquo;s Manual</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">provides a more comprehensive\nintroduction to Git.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/7/gitcvs-migration\">gitcvs-migration(7)</a>\nexplains how to import a CVS repository into Git, and shows\nhow to use Git in a CVS-like way.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\nsome interesting examples of Git use, see the</font>\n<b><font color=\"#0000FF\">howtos</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">For\nGit developers, <a href=\"https://man.page/7/gitcore-tutorial\">gitcore-tutorial(7)</a> goes into detail\non the lower-level Git mechanisms involved in, for example,\ncreating a new commit.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a>,\n<a href=\"https://man.page/7/gitcvs-migration\">gitcvs-migration(7)</a>, <a href=\"https://man.page/7/gitcore-tutorial\">gitcore-tutorial(7)</a>,\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>, <a href=\"https://man.page/1/git-help\">git-help(1)</a>,\n<a href=\"https://man.page/7/giteveryday\">giteveryday(7)</a>,</font> <b><font color=\"#0000FF\">The\nGit User&rsquo;s Manual</font></b>\n<small><font color=\"#000000\">[1]</font></small></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Git\nUser&rsquo;s Manual</font></p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/user-manual.html</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"9%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">howtos</font></p> </td>\n<td width=\"74%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/howto-index.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#THE GIT OBJECT DATABASE\">THE GIT OBJECT DATABASE</a>","<a href=\"#THE INDEX FILE\">THE INDEX FILE</a>","<a href=\"#WHAT NEXT?\">WHAT NEXT?</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}