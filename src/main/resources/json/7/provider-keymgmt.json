{"name":"provider-keymgmt","description":"provider-keymgmt\n- The KEYMGMT library &lt;-&gt; provider functions","body":"\n\n<h1 align=\"center\">PROVIDER-KEYMGMT</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-keymgmt\n- The KEYMGMT library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Key object (keydata) creation and destruction */ <br>\nvoid *OSSL_FUNC_keymgmt_new(void *provctx); <br>\nvoid OSSL_FUNC_keymgmt_free(void *keydata); <br>\n/* Generation, a more complex constructor */ <br>\nvoid *OSSL_FUNC_keymgmt_gen_init(void *provctx, int\nselection, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_keymgmt_gen_set_template(void *genctx, void\n*template); <br>\nint OSSL_FUNC_keymgmt_gen_set_params(void *genctx, const\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_keymgmt_gen_settable_params(void\n*genctx, <br>\nvoid *provctx); <br>\nvoid *OSSL_FUNC_keymgmt_gen(void *genctx, OSSL_CALLBACK *cb,\nvoid *cbarg); <br>\nvoid OSSL_FUNC_keymgmt_gen_cleanup(void *genctx); <br>\n/* Key loading by object reference, also a constructor */\n<br>\nvoid *OSSL_FUNC_keymgmt_load(const void *reference, size_t\n*reference_sz); <br>\n/* Key object information */ <br>\nint OSSL_FUNC_keymgmt_get_params(void *keydata, OSSL_PARAM\nparams[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_keymgmt_gettable_params(void\n*provctx); <br>\nint OSSL_FUNC_keymgmt_set_params(void *keydata, const\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_keymgmt_settable_params(void\n*provctx); <br>\n/* Key object content checks */ <br>\nint OSSL_FUNC_keymgmt_has(const void *keydata, int\nselection); <br>\nint OSSL_FUNC_keymgmt_match(const void *keydata1, const void\n*keydata2, <br>\nint selection); <br>\n/* Discovery of supported operations */ <br>\nconst char *OSSL_FUNC_keymgmt_query_operation_name(int\noperation_id); <br>\n/* Key object import and export functions */ <br>\nint OSSL_FUNC_keymgmt_import(int selection, void *keydata,\nconst OSSL_PARAM params[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_keymgmt_import_types(int\nselection); <br>\nint OSSL_FUNC_keymgmt_export(int selection, void *keydata,\n<br>\nOSSL_CALLBACK *param_cb, void *cbarg); <br>\nconst OSSL_PARAM *OSSL_FUNC_keymgmt_export_types(int\nselection); <br>\n/* Key object duplication, a constructor */ <br>\nvoid *OSSL_FUNC_keymgmt_dup(const void *keydata_from, int\nselection); <br>\n/* Key object validation */ <br>\nint OSSL_FUNC_keymgmt_validate(const void *keydata, int\nselection, int checktype);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>KEYMGMT</small> operation doesn&rsquo;t have much\npublic visibility in OpenSSL libraries, it&rsquo;s rather an\ninternal operation that&rsquo;s designed to work in tandem\nwith operations that use private/public key pairs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because the\n<small>KEYMGMT</small> operation shares knowledge with the\noperations it works with in tandem, they must belong to the\nsame provider. The OpenSSL libraries will ensure that they\ndo.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The primary\nresponsibility of the <small>KEYMGMT</small> operation is to\nhold the provider side key data for the OpenSSL library\n<small>EVP_PKEY</small> structure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from a\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_FUNC_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_keymgmt_new()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef void\n*(OSSL_FUNC_keymgmt_new_fn)(void *provctx); <br>\nstatic ossl_inline OSSL_FUNC_keymgmt_new_fn <br>\nOSSL_FUNC_keymgmt_new(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_keymgmt_new\nOSSL_FUNC_KEYMGMT_NEW <br>\nOSSL_FUNC_keymgmt_free OSSL_FUNC_KEYMGMT_FREE <br>\nOSSL_FUNC_keymgmt_gen_init OSSL_FUNC_KEYMGMT_GEN_INIT <br>\nOSSL_FUNC_keymgmt_gen_set_template\nOSSL_FUNC_KEYMGMT_GEN_SET_TEMPLATE <br>\nOSSL_FUNC_keymgmt_gen_set_params\nOSSL_FUNC_KEYMGMT_GEN_SET_PARAMS <br>\nOSSL_FUNC_keymgmt_gen_settable_params\nOSSL_FUNC_KEYMGMT_GEN_SETTABLE_PARAMS <br>\nOSSL_FUNC_keymgmt_gen OSSL_FUNC_KEYMGMT_GEN <br>\nOSSL_FUNC_keymgmt_gen_cleanup OSSL_FUNC_KEYMGMT_GEN_CLEANUP\n<br>\nOSSL_FUNC_keymgmt_load OSSL_FUNC_KEYMGMT_LOAD <br>\nOSSL_FUNC_keymgmt_get_params OSSL_FUNC_KEYMGMT_GET_PARAMS\n<br>\nOSSL_FUNC_keymgmt_gettable_params\nOSSL_FUNC_KEYMGMT_GETTABLE_PARAMS <br>\nOSSL_FUNC_keymgmt_set_params OSSL_FUNC_KEYMGMT_SET_PARAMS\n<br>\nOSSL_FUNC_keymgmt_settable_params\nOSSL_FUNC_KEYMGMT_SETTABLE_PARAMS <br>\nOSSL_FUNC_keymgmt_query_operation_name\nOSSL_FUNC_KEYMGMT_QUERY_OPERATION_NAME <br>\nOSSL_FUNC_keymgmt_has OSSL_FUNC_KEYMGMT_HAS <br>\nOSSL_FUNC_keymgmt_validate OSSL_FUNC_KEYMGMT_VALIDATE <br>\nOSSL_FUNC_keymgmt_match OSSL_FUNC_KEYMGMT_MATCH <br>\nOSSL_FUNC_keymgmt_import OSSL_FUNC_KEYMGMT_IMPORT <br>\nOSSL_FUNC_keymgmt_import_types\nOSSL_FUNC_KEYMGMT_IMPORT_TYPES <br>\nOSSL_FUNC_keymgmt_export OSSL_FUNC_KEYMGMT_EXPORT <br>\nOSSL_FUNC_keymgmt_export_types\nOSSL_FUNC_KEYMGMT_EXPORT_TYPES <br>\nOSSL_FUNC_keymgmt_dup OSSL_FUNC_KEYMGMT_DUP</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key\nObjects</b> <br>\nA key object is a collection of data for an asymmetric key,\nand is represented as <i>keydata</i> in this manual.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exact\ncontents of a key object are defined by the provider, and it\nis assumed that different operations in one and the same\nprovider use the exact same structure to represent this\ncollection of data, so that for example, a key object that\nhas been created using the <small>KEYMGMT</small> interface\nthat we document here can be passed as is to other provider\noperations, such as <b>OP_signature_sign_init()</b> (see\n<a href=\"https://man.page/7/provider-signature\">provider-signature(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With some of\nthe <small>KEYMGMT</small> functions, it&rsquo;s possible to\nselect a specific subset of data to handle, governed by the\nbits in a <i>selection</i> indicator. The bits are:\n<b><small><br>\nOSSL_KEYMGMT_SELECT_PRIVATE_KEY</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that the private key\ndata in a key object should be considered.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OSSL_KEYMGMT_SELECT_PUBLIC_KEY</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that the public key\ndata in a key object should be considered.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that the domain\nparameters in a key object should be considered.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that other\nparameters in a key object should be considered.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Other\nparameters are key parameters that don&rsquo;t fit any other\nclassification. In other words, this particular selector bit\nworks as a last resort bit bucket selector.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some selector\nbits have also been combined for easier use: <b><small><br>\nOSSL_KEYMGMT_SELECT_ALL_PARAMETERS</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that all key object\nparameters should be considered, regardless of their more\ngranular classification.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is a\ncombination of\n<b><small>OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS</small></b>\nand\n<b><small>OSSL_KEYMGMT_SELECT_OTHER_PARAMETERS</small></b>\n.</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OSSL_KEYMGMT_SELECT_KEYPAIR</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that both the whole\nkey pair in a key object should be considered, i.e. the\ncombination of public and private key.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is a\ncombination of\n<b><small>OSSL_KEYMGMT_SELECT_PRIVATE_KEY</small></b> and\n<b><small>OSSL_KEYMGMT_SELECT_PUBLIC_KEY</small></b> .</p>\n\n\n<p style=\"margin-left:11%;\"><b><small>OSSL_KEYMGMT_SELECT_ALL</small></b></p>\n\n<p style=\"margin-left:17%;\">Indicating that everything in a\nkey object should be considered.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The exact\ninterpretation of those bits or how they combine is left to\neach function where you can specify a selector.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s left\nto the provider implementation to decide what is reasonable\nto do with regards to received selector bits and how to do\nit. Among others, an implementation of\n<b>OSSL_FUNC_keymgmt_match()</b> might opt to not compare\nthe private half if it has compared the public half, since a\nmatch of one half implies a match of the other half.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Constructing\nand Destructing Functions <br>\nOSSL_FUNC_keymgmt_new()</b> should create a provider side\nkey object. The provider context <i>provctx</i> is passed\nand may be incorporated in the key object, but that is not\nmandatory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_free()</b>\nshould free the passed <i>keydata</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen_init()</b>,\n<b>OSSL_FUNC_keymgmt_gen_set_template()</b>,\n<b>OSSL_FUNC_keymgmt_gen_set_params()</b>,\n<b>OSSL_FUNC_keymgmt_gen_settable_params()</b>,\n<b>OSSL_FUNC_keymgmt_gen()</b> and\n<b>OSSL_FUNC_keymgmt_gen_cleanup()</b> work together as a\nmore elaborate context based key object constructor.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen_init()</b>\nshould create the key object generation context and\ninitialize it with <i>selections</i>, which will determine\nwhat kind of contents the key object to be generated should\nget. The <i>params</i>, if not <small>NULL,</small> should\nbe set on the context in a manner similar to using\n<b>OSSL_FUNC_keymgmt_set_params()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen_set_template()</b>\nshould add <i>template</i> to the context <i>genctx</i>. The\n<i>template</i> is assumed to be a key object constructed\nwith the same <small>KEYMGMT,</small> and from which content\nthat the implementation chooses can be used as a template\nfor the key object to be generated. Typically, the\ngeneration of a <small>DSA</small> or <small>DH</small> key\nwould get the domain parameters from this\n<i>template</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen_set_params()</b>\nshould set additional parameters from <i>params</i> in the\nkey object generation context <i>genctx</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen_settable_params()</b>\nshould return a constant array of descriptor\n<b><small>OSSL_PARAM</small></b> , for parameters that\n<b>OSSL_FUNC_keymgmt_gen_set_params()</b> can handle.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen()</b>\nshould perform the key object generation itself, and return\nthe result. The callback <i>cb</i> should be called at\nregular intervals with indications on how the key object\ngeneration progresses.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gen_cleanup()</b>\nshould clean up and free the key object generation context\n<i>genctx</i></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_load()</b>\ncreates a provider side key object based on a\n<i>reference</i> object with a size of <i>reference_sz</i>\nbytes, that only the provider knows how to interpret, but\nthat may come from other operations. Outside the provider,\nthis reference is simply an array of bytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">At least one of\n<b>OSSL_FUNC_keymgmt_new()</b>,\n<b>OSSL_FUNC_keymgmt_gen()</b> and\n<b>OSSL_FUNC_keymgmt_load()</b> are mandatory, as well as\n<b>OSSL_FUNC_keymgmt_free()</b> and\n<b>OSSL_FUNC_keymgmt_has()</b>. Additionally, if\n<b>OSSL_FUNC_keymgmt_gen()</b> is present,\n<b>OSSL_FUNC_keymgmt_gen_init()</b> and\n<b>OSSL_FUNC_keymgmt_gen_cleanup()</b> must be present as\nwell.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key Object\nInformation Functions <br>\nOSSL_FUNC_keymgmt_get_params()</b> should extract\ninformation data associated with the given <i>keydata</i>,\nsee &quot;Common Information Parameters&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gettable_params()</b>\nshould return a constant array of descriptor\n<b><small>OSSL_PARAM</small></b> , for parameters that\n<b>OSSL_FUNC_keymgmt_get_params()</b> can handle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>OSSL_FUNC_keymgmt_gettable_params()</b> is present,\n<b>OSSL_FUNC_keymgmt_get_params()</b> must also be present,\nand vice versa.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_set_params()</b>\nshould update information data associated with the given\n<i>keydata</i>, see &quot;Common Information\nParameters&quot;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_settable_params()</b>\nshould return a constant array of descriptor\n<b><small>OSSL_PARAM</small></b> , for parameters that\n<b>OSSL_FUNC_keymgmt_set_params()</b> can handle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\n<b>OSSL_FUNC_keymgmt_settable_params()</b> is present,\n<b>OSSL_FUNC_keymgmt_set_params()</b> must also be present,\nand vice versa.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key Object\nChecking Functions <br>\nOSSL_FUNC_keymgmt_query_operation_name()</b> should return\nthe name of the supported algorithm for the operation\n<i>operation_id</i>. This is similar to\n<b>provider_query_operation()</b> (see\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>), but only works as an advisory. If\nthis function is not present, or returns\n<small>NULL,</small> the caller is free to assume that\nthere&rsquo;s an algorithm from the same provider, of the\nsame name as the one used to fetch the keymgmt and try to\nuse that.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_has()</b>\nshould check whether the given <i>keydata</i> contains the\nsubsets of data indicated by the <i>selector</i>. A\ncombination of several selector bits must consider all those\nsubsets, not just one. An implementation is, however, free\nto consider an empty subset of data to still be a valid\nsubset. For algorithms where some selection is not\nmeaningful such as\n<b><small>OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS</small></b>\nfor <small>RSA</small> keys the function should just return\n1 as the selected subset is not really missing in the\nkey.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_validate()</b>\nshould check if the <i>keydata</i> contains valid data\nsubsets indicated by <i>selection</i>. Some combined\nselections of data subsets may cause validation of the\ncombined data. For example, the combination of\n<b><small>OSSL_KEYMGMT_SELECT_PRIVATE_KEY</small></b> and\n<b><small>OSSL_KEYMGMT_SELECT_PUBLIC_KEY</small></b> (or\n<b><small>OSSL_KEYMGMT_SELECT_KEYPAIR</small></b> for short)\nis expected to check that the pairwise consistency of\n<i>keydata</i> is valid. The <i>checktype</i> parameter\ncontrols what type of check is performed on the subset of\ndata. Two types of check are defined:\n<b><small>OSSL_KEYMGMT_VALIDATE_FULL_CHECK</small></b> and\n<b><small>OSSL_KEYMGMT_VALIDATE_QUICK_CHECK</small></b> .\nThe interpretation of how much checking is performed in a\nfull check versus a quick check is key type specific. Some\nproviders may have no distinction between a full check and a\nquick check. For algorithms where some selection is not\nmeaningful such as\n<b><small>OSSL_KEYMGMT_SELECT_DOMAIN_PARAMETERS</small></b>\nfor <small>RSA</small> keys the function should just return\n1 as there is nothing to validate for that selection.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_match()</b>\nshould check if the data subset indicated by\n<i>selection</i> in <i>keydata1</i> and <i>keydata2</i>\nmatch. It is assumed that the caller has ensured that\n<i>keydata1</i> and <i>keydata2</i> are both owned by the\nimplementation of this function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key Object\nImport, Export and Duplication Functions <br>\nOSSL_FUNC_keymgmt_import()</b> should import data indicated\nby <i>selection</i> into <i>keydata</i> with values taken\nfrom the <b><small>OSSL_PARAM</small></b> array\n<i>params</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_export()</b>\nshould extract values indicated by <i>selection</i> from\n<i>keydata</i>, create an <b><small>OSSL_PARAM</small></b>\narray with them and call <i>param_cb</i> with that array as\nwell as the given <i>cbarg</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_import_types()</b>\nshould return a constant array of descriptor\n<b><small>OSSL_PARAM</small></b> for data indicated by\n<i>selection</i>, for parameters that\n<b>OSSL_FUNC_keymgmt_import()</b> can handle.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_export_types()</b>\nshould return a constant array of descriptor\n<b><small>OSSL_PARAM</small></b> for data indicated by\n<i>selection</i>, that the <b>OSSL_FUNC_keymgmt_export()</b>\ncallback can expect to receive.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_dup()</b>\nshould duplicate data subsets indicated by <i>selection</i>\nor the whole key data <i>keydata_from</i> and create a new\nprovider side key object with the data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Common\nInformation Parameters</b> <br>\nSee <b><small>OSSL_PARAM</small></b> (3) for further details\non the parameters structure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Common\ninformation parameters currently recognised by all built-in\nkeymgmt algorithms are as follows: <br>\n&quot;bits&quot; (\n<b><small>OSSL_PKEY_PARAM_BITS</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">The value should be the\ncryptographic length of the cryptosystem to which the key\nbelongs, in bits. The definition of cryptographic length is\nspecific to the key cryptosystem.</p>\n\n<p style=\"margin-left:11%;\">&quot;max-size&quot; (\n<b><small>OSSL_PKEY_PARAM_MAX_SIZE</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">The value should be the maximum\nsize that a caller should allocate to safely store a\nsignature (called <i>sig</i> in\n<a href=\"https://man.page/7/provider-signature\">provider-signature(7)</a>), the result of asymmmetric\nencryption / decryption (<i>out</i> in\n<a href=\"https://man.page/7/provider-asym_cipher\">provider-asym_cipher(7)</a>, a derived secret\n(<i>secret</i> in <a href=\"https://man.page/7/provider-keyexch\">provider-keyexch(7)</a>, and similar\ndata).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Because an\n<small>EVP_KEYMGMT</small> method is always tightly bound to\nanother method (signature, asymmetric cipher, key exchange,\n...) and must be of the same provider, this number only\nneeds to be synchronised with the dimensions handled in the\nrest of the same provider.</p>\n\n<p style=\"margin-left:11%;\">&quot;security-bits&quot; (\n<b><small>OSSL_PKEY_PARAM_SECURITY_BITS</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">The value should be the number\nof security bits of the given key. Bits of security is\ndefined in <small>SP800-57.</small></p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_new()</b>\nand <b>OSSL_FUNC_keymgmt_dup()</b> should return a valid\nreference to the newly created provider side key object, or\n<small>NULL</small> on failure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_import()</b>,\n<b>OSSL_FUNC_keymgmt_export()</b>,\n<b>OSSL_FUNC_keymgmt_get_params()</b> and\n<b>OSSL_FUNC_keymgmt_set_params()</b> should return 1 for\nsuccess or 0 on error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_validate()</b>\nshould return 1 on successful validation, or 0 on\nfailure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_has()</b>\nshould return 1 if all the selected data subsets are\ncontained in the given <i>keydata</i> or 0 otherwise.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_query_operation_name()</b>\nshould return a pointer to a string matching the requested\noperation, or <small>NULL</small> if the same name used to\nfetch the keymgmt applies.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keymgmt_gettable_params()</b>\nand <b>OSSL_FUNC_keymgmt_settable_params()\nOSSL_FUNC_keymgmt_import_types()</b>,\n<b>OSSL_FUNC_keymgmt_export_types()</b> should always return\na constant <b><small>OSSL_PARAM</small></b> array.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a>,\n<b><small>EVP_PKEY-X25519</small></b> (7),\n<b><small>EVP_PKEY-X448</small></b> (7),\n<b><small>EVP_PKEY-ED25519</small></b> (7),\n<b><small>EVP_PKEY-ED448</small></b> (7),\n<b><small>EVP_PKEY-EC</small></b> (7),\n<b><small>EVP_PKEY-RSA</small></b> (7),\n<b><small>EVP_PKEY-DSA</small></b> (7),\n<b><small>EVP_PKEY-DH</small></b> (7)</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>KEYMGMT</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}