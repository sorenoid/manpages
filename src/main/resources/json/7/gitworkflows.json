{"name":"gitworkflows","description":"gitworkflows - An overview of recommended workflows with Git","body":"\n\n<h1 align=\"center\">GITWORKFLOWS</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitworkflows -\nAn overview of recommended workflows with Git</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git *</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This document\nattempts to write down and motivate some of the workflow\nelements used for <b>git.git</b> itself. Many ideas apply in\ngeneral, though the full workflow is rarely required for\nsmaller projects with fewer people involved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We formulate a\nset of <i>rules</i> for quick reference, while the prose\ntries to motivate each of them. Do not always take them\nliterally; you should value good reasons for your actions\nhigher than manpages such as this one.</p>\n\n<h2>SEPARATE CHANGES\n<a name=\"SEPARATE CHANGES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a general\nrule, you should try to split your changes into small\nlogical steps, and commit each of them. They should be\nconsistent, working independently of any later commits, pass\nthe test suite, etc. This makes the review process much\neasier, and the history much more useful for later\ninspection and analysis, for example with\n<a href=\"https://man.page/1/git-blame\">git-blame(1)</a> and <a href=\"https://man.page/1/git-bisect\">git-bisect(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To achieve\nthis, try to split your work into small steps from the very\nbeginning. It is always easier to squash a few commits\ntogether than to split one big commit into several.\nDon&rsquo;t be afraid of making too small or imperfect steps\nalong the way. You can always go back later and edit the\ncommits with <b>git rebase --interactive</b> before you\npublish them. You can use <b>git stash push --keep-index</b>\nto run the test suite independent of other uncommitted\nchanges; see the EXAMPLES section of\n<a href=\"https://man.page/1/git-stash\">git-stash(1)</a>.</p>\n\n<h2>MANAGING BRANCHES\n<a name=\"MANAGING BRANCHES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are two\nmain tools that can be used to include changes from one\nbranch on another: <a href=\"https://man.page/1/git-merge\">git-merge(1)</a> and\n<a href=\"https://man.page/1/git-cherry-pick\">git-cherry-pick(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Merges have\nmany advantages, so we try to solve as many problems as\npossible with merges alone. Cherry-picking is still\noccasionally useful; see &quot;Merging upwards&quot; below\nfor an example.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Most\nimportantly, merging works at the branch level, while\ncherry-picking works at the commit level. This means that a\nmerge can carry over the changes from 1, 10, or 1000 commits\nwith equal ease, which in turn means the workflow scales\nmuch better to a large number of contributors (and\ncontributions). Merges are also easier to understand because\na merge commit is a &quot;promise&quot; that all changes\nfrom all its parents are now included.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is a\ntradeoff of course: merges require a more careful branch\nmanagement. The following subsections discuss the important\npoints.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Graduation</b>\n<br>\nAs a given feature goes from experimental to stable, it also\n&quot;graduates&quot; between the corresponding branches of\nthe software. <b>git.git</b> uses the following\n<i>integration branches</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>maint</i> tracks the commits that should go into the next\n&quot;maintenance release&quot;, i.e., update of the last\nreleased stable version;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>master</i> tracks the commits that should go into the\nnext release;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>next</i> is intended as a testing branch for topics being\ntested for stability for master.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is a\nfourth official branch that is used slightly\ndifferently:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<i>seen</i> (patches seen by the maintainer) is an\nintegration branch for things that are not quite ready for\ninclusion yet (see &quot;Integration Branches&quot;\nbelow).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\nfour branches is usually a direct descendant of the one\nabove it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Conceptually,\nthe feature enters at an unstable branch (usually\n<i>next</i> or <i>seen</i>), and &quot;graduates&quot; to\n<i>master</i> for the next release once it is considered\nstable enough.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Merging\nupwards</b> <br>\nThe &quot;downwards graduation&quot; discussed above cannot\nbe done by actually merging downwards, however, since that\nwould merge <i>all</i> changes on the unstable branch into\nthe stable one. Hence the following:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;1.&nbsp;Merge\nupwards</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Always commit\nyour fixes to the oldest supported branch that requires\nthem. Then (periodically) merge the integration branches\nupwards into each other.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This gives a\nvery controlled flow of fixes. If you notice that you have\napplied a fix to e.g. <i>master</i> that is also required in\n<i>maint</i>, you will need to cherry-pick it (using\n<a href=\"https://man.page/1/git-cherry-pick\">git-cherry-pick(1)</a>) downwards. This will happen a few\ntimes and is nothing to worry about unless you do it very\nfrequently.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Topic\nbranches</b> <br>\nAny nontrivial feature will require several patches to\nimplement, and may get extra bugfixes or improvements during\nits lifetime.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Committing\neverything directly on the integration branches leads to\nmany problems: Bad commits cannot be undone, so they must be\nreverted one by one, which creates confusing histories and\nfurther error potential when you forget to revert part of a\ngroup of changes. Working in parallel mixes up the changes,\ncreating further confusion.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use of\n&quot;topic branches&quot; solves these problems. The name\nis pretty self explanatory, with a caveat that comes from\nthe &quot;merge upwards&quot; rule above:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;2.&nbsp;Topic\nbranches</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Make a side\nbranch for every topic (feature, bugfix, ...). Fork it off\nat the oldest integration branch that you will eventually\nwant to merge it into.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Many things can\nthen be done very naturally:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; To get\nthe feature/bugfix into an integration branch, simply merge\nit. If the topic has evolved further in the meantime, merge\nagain. (Note that you do not necessarily have to merge it to\nthe oldest integration branch first. For example, you can\nfirst merge a bugfix to <i>next</i>, give it some testing\ntime, and merge to <i>maint</i> when you know it is\nstable.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; If you\nfind you need new features from the branch <i>other</i> to\ncontinue working on your topic, merge <i>other</i> to\n<i>topic</i>. (However, do not do this &quot;just\nhabitually&quot;, see below.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; If you\nfind you forked off the wrong branch and want to move it\n&quot;back in time&quot;, use <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nlast point clashes with the other two: a topic that has been\nmerged elsewhere should not be rebased. See the section on\nRECOVERING FROM UPSTREAM REBASE in <a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We should point\nout that &quot;habitually&quot; (regularly for no real\nreason) merging an integration branch into your topics\n&mdash; and by extension, merging anything upstream into\nanything downstream on a regular basis &mdash; is frowned\nupon:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;3.&nbsp;Merge\nto downstream only at well-defined points</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Do not merge to\ndownstream except with a good reason: upstream API changes\naffect your branch; your branch no longer merges to upstream\ncleanly; etc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Otherwise, the\ntopic that was merged to suddenly contains more than a\nsingle (well-separated) change. The many resulting small\nmerges will greatly clutter up history. Anyone who later\ninvestigates the history of a file will have to find out\nwhether that merge affected the topic in development. An\nupstream might even inadvertently be merged into a\n&quot;more stable&quot; branch. And so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Throw-away\nintegration</b> <br>\nIf you followed the last paragraph, you will now have many\nsmall topic branches, and occasionally wonder how they\ninteract. Perhaps the result of merging them does not even\nwork? But on the other hand, we want to avoid merging them\nanywhere &quot;stable&quot; because such merges cannot\neasily be undone.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The solution,\nof course, is to make a merge that we can undo: merge into a\nthrow-away branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;4.&nbsp;Throw-away\nintegration branches</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To test the\ninteraction of several topics, merge them into a throw-away\nbranch. You must never base any work on such a branch!</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you make it\n(very) clear that this branch is going to be deleted right\nafter the testing, you can even publish this branch, for\nexample to give the testers a chance to work with it, or\nother developers a chance to see if their in-progress work\nwill be compatible. <b>git.git</b> has such an official\nthrow-away integration branch called <i>seen</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Branch\nmanagement for a release</b> <br>\nAssuming you are using the merge approach discussed above,\nwhen you are releasing your project you will need to do some\nadditional branch management work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A feature\nrelease is created from the <i>master</i> branch, since\n<i>master</i> tracks the commits that should go into the\nnext feature release.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>master</i> branch is supposed to be a superset of\n<i>maint</i>. If this condition does not hold, then\n<i>maint</i> contains some commits that are not included on\n<i>master</i>. The fixes represented by those commits will\ntherefore not be included in your feature release.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To verify that\n<i>master</i> is indeed a superset of <i>maint</i>, use git\nlog:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;5.&nbsp;Verify</b>\n<i>master</i> is a superset of <i>maint</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git log\nmaster..maint</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This command\nshould not list any commits. Otherwise, check out\n<i>master</i> and merge <i>maint</i> into it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now you can\nproceed with the creation of the feature release. Apply a\ntag to the tip of <i>master</i> indicating the release\nversion:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;6.&nbsp;Release\ntagging</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git tag -s\n-m &quot;Git X.Y.Z&quot; vX.Y.Z master</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You need to\npush the new tag to a public Git server (see\n&quot;DISTRIBUTED WORKFLOWS&quot; below). This makes the tag\navailable to others tracking your project. The push could\nalso trigger a post-update hook to perform release-related\nitems such as building release tarballs and preformatted\ndocumentation pages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Similarly, for\na maintenance release, <i>maint</i> is tracking the commits\nto be released. Therefore, in the steps above simply tag and\npush <i>maint</i> rather than <i>master</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Maintenance\nbranch management after a feature release</b> <br>\nAfter a feature release, you need to manage your maintenance\nbranches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, if you\nwish to continue to release maintenance fixes for the\nfeature release made before the recent one, then you must\ncreate another branch to track commits for that previous\nrelease.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To do this, the\ncurrent maintenance branch is copied to another branch named\nwith the previous release version number (e.g.\nmaint-X.Y.(Z-1) where X.Y.Z is the current release).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;7.&nbsp;Copy\nmaint</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git branch\nmaint-X.Y.(Z-1) maint</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>maint</i> branch should now be fast-forwarded to the\nnewly released code so that maintenance fixes can be tracked\nfor the current release:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;8.&nbsp;Update\nmaint to new release</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\ncheckout maint</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\nmerge --ff-only master</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the merge\nfails because it is not a fast-forward, then it is possible\nsome fixes on <i>maint</i> were missed in the feature\nrelease. This will not happen if the content of the branches\nwas verified as described in the previous section.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Branch\nmanagement for next and seen after a feature release</b>\n<br>\nAfter a feature release, the integration branch <i>next</i>\nmay optionally be rewound and rebuilt from the tip of\n<i>master</i> using the surviving topics on <i>next</i>:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;9.&nbsp;Rewind\nand rebuild next</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\nswitch -C next master</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\nmerge ai/topic_in_next1</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\nmerge ai/topic_in_next2</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; ...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The advantage\nof doing this is that the history of <i>next</i> will be\nclean. For example, some topics merged into <i>next</i> may\nhave initially looked promising, but were later found to be\nundesirable or premature. In such a case, the topic is\nreverted out of <i>next</i> but the fact remains in the\nhistory that it was once merged and reverted. By recreating\n<i>next</i>, you give another incarnation of such topics a\nclean slate to retry, and a feature release is a good point\nin history to do so.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you do this,\nthen you should make a public announcement indicating that\n<i>next</i> was rewound and rebuilt.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The same rewind\nand rebuild process may be followed for <i>seen</i>. A\npublic announcement is not necessary since <i>seen</i> is a\nthrow-away branch, as described above.</p>\n\n<h2>DISTRIBUTED WORKFLOWS\n<a name=\"DISTRIBUTED WORKFLOWS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">After the last\nsection, you should know how to manage topics. In general,\nyou will not be the only person working on the project, so\nyou will have to share your work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Roughly\nspeaking, there are two important workflows: merge and\npatch. The important difference is that the merge workflow\ncan propagate full history, including merges, while patches\ncannot. Both workflows can be used in parallel: in\n<b>git.git</b>, only subsystem maintainers use the merge\nworkflow, while everyone else sends patches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nmaintainer(s) may impose restrictions, such as\n&quot;Signed-off-by&quot; requirements, that all\ncommits/patches submitted for inclusion must adhere to.\nConsult your project&rsquo;s documentation for more\ninformation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Merge\nworkflow</b> <br>\nThe merge workflow works by copying branches between\nupstream and downstream. Upstream can merge contributions\ninto the official history; downstream base their work on the\nofficial history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are three\nmain tools that can be used for this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-push\">git-push(1)</a> copies your branches to a remote\nrepository, usually to one that can be read by all involved\nparties;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a> that copies remote branches to your\nrepository; and</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-pull\">git-pull(1)</a> that does fetch and merge in one go.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the last\npoint. Do <i>not</i> use <i>git pull</i> unless you actually\nwant to merge the remote branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Getting changes\nout is easy:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;10.&nbsp;Push/pull:\nPublishing branches/topics</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git push\n&lt;remote&gt; &lt;branch&gt;</b> and tell everyone where\nthey can fetch from.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You will still\nhave to tell people by other means, such as mail. (Git\nprovides the <a href=\"https://man.page/1/git-request-pull\">git-request-pull(1)</a> to send preformatted\npull requests to upstream maintainers to simplify this\ntask.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you just\nwant to get the newest copies of the integration branches,\nstaying up to date is easy too:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;11.&nbsp;Push/pull:\nStaying up to date</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use <b>git\nfetch &lt;remote&gt;</b> or <b>git remote update</b> to stay\nup to date.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then simply\nfork your topic branches from the stable remotes as\nexplained earlier.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you are a\nmaintainer and would like to merge other people&rsquo;s\ntopic branches to the integration branches, they will\ntypically send a request to do so by mail. Such a request\nlooks like</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Please pull\nfrom <br>\n&lt;url&gt; &lt;branch&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In that case,\n<i>git pull</i> can do the fetch and merge in one go, as\nfollows.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;12.&nbsp;Push/pull:\nMerging remote topics</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git pull\n&lt;url&gt; &lt;branch&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Occasionally,\nthe maintainer may get merge conflicts when they try to pull\nchanges from downstream. In this case, they can ask\ndownstream to do the merge and resolve the conflicts\nthemselves (perhaps they will know better how to resolve\nthem). It is one of the rare cases where downstream\n<i>should</i> merge from upstream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Patch\nworkflow</b> <br>\nIf you are a contributor that sends changes upstream in the\nform of emails, you should use topic branches as usual (see\nabove). Then use <a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a> to generate the\ncorresponding emails (highly recommended over manually\nformatting them because it makes the maintainer&rsquo;s life\neasier).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;13.&nbsp;format-patch/am:\nPublishing branches/topics</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\nformat-patch -M upstream..topic</b> to turn them into\npreformatted patch files</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <b>git\nsend-email --to=&lt;recipient&gt; &lt;patches&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\n<a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a> and <a href=\"https://man.page/1/git-send-email\">git-send-email(1)</a>\nmanpages for further usage notes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\nmaintainer tells you that your patch no longer applies to\nthe current upstream, you will have to rebase your topic\n(you cannot use a merge because you cannot format-patch\nmerges):</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;14.&nbsp;format-patch/am:\nKeeping topics up to date</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git pull\n--rebase &lt;url&gt; &lt;branch&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can then\nfix the conflicts during the rebase. Presumably you have not\npublished your topic other than by mail, so rebasing it is\nnot a problem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you receive\nsuch a patch series (as maintainer, or perhaps as a reader\nof the mailing list it was sent to), save the mails to\nfiles, create a new topic branch and use <i>git am</i> to\nimport the commits:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;15.&nbsp;format-patch/am:\nImporting patches</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>git am &lt;\npatch</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One feature\nworth pointing out is the three-way merge, which can help if\nyou get conflicts: <b>git am -3</b> will use index\ninformation contained in patches to figure out the merge\nbase. See <a href=\"https://man.page/1/git-am\">git-am(1)</a> for other options.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a>,\n<a href=\"https://man.page/1/git-push\">git-push(1)</a>, <a href=\"https://man.page/1/git-pull\">git-pull(1)</a>, <a href=\"https://man.page/1/git-merge\">git-merge(1)</a>,\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a>, <a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a>,\n<a href=\"https://man.page/1/git-send-email\">git-send-email(1)</a>, <a href=\"https://man.page/1/git-am\">git-am(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEPARATE CHANGES\">SEPARATE CHANGES</a>","<a href=\"#MANAGING BRANCHES\">MANAGING BRANCHES</a>","<a href=\"#DISTRIBUTED WORKFLOWS\">DISTRIBUTED WORKFLOWS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"],"level":7}