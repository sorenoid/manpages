{"name":"gitglossary","description":"gitglossary - A Git Glossary","body":"\n\n<h1 align=\"center\">GITGLOSSARY</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitglossary - A\nGit Glossary</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">alternate\nobject database</p>\n\n<p style=\"margin-left:17%;\">Via the alternates mechanism, a\nrepository can inherit part of its object database from\nanother object database, which is called an\n&quot;alternate&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">bare\nrepository</p>\n\n<p style=\"margin-left:17%;\">A bare repository is normally\nan appropriately named directory with a <b>.git</b> suffix\nthat does not have a locally checked-out copy of any of the\nfiles under revision control. That is, all of the Git\nadministrative and control files that would normally be\npresent in the hidden <b>.git</b> sub-directory are directly\npresent in the <b>repository.git</b> directory instead, and\nno other files are present and checked out. Usually\npublishers of public repositories make bare repositories\navailable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">blob object</p>\n\n<p style=\"margin-left:17%;\">Untyped object, e.g. the\ncontents of a file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">branch</p>\n\n<p style=\"margin-left:17%;\">A &quot;branch&quot; is a line\nof development. The most recent commit on a branch is\nreferred to as the tip of that branch. The tip of the branch\nis referenced by a branch head, which moves forward as\nadditional development is done on the branch. A single Git\nrepository can track an arbitrary number of branches, but\nyour working tree is associated with just one of them (the\n&quot;current&quot; or &quot;checked out&quot; branch), and\nHEAD points to that branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">cache</p>\n\n<p style=\"margin-left:17%;\">Obsolete for: index.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">chain</p>\n\n<p style=\"margin-left:17%;\">A list of objects, where each\nobject in the list contains a reference to its successor\n(for example, the successor of a commit could be one of its\nparents).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">changeset</p>\n\n<p style=\"margin-left:17%;\">BitKeeper/cvsps speak for\n&quot;commit&quot;. Since Git does not store changes, but\nstates, it really does not make sense to use the term\n&quot;changesets&quot; with Git.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">checkout</p>\n\n<p style=\"margin-left:17%;\">The action of updating all or\npart of the working tree with a tree object or blob from the\nobject database, and updating the index and HEAD if the\nwhole working tree has been pointed at a new branch.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">cherry-picking</p>\n\n<p style=\"margin-left:17%;\">In SCM jargon, &quot;cherry\npick&quot; means to choose a subset of changes out of a\nseries of changes (typically commits) and record them as a\nnew series of changes on top of a different codebase. In\nGit, this is performed by the &quot;git cherry-pick&quot;\ncommand to extract the change introduced by an existing\ncommit and to record it based on the tip of the current\nbranch as a new commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">clean</p>\n\n<p style=\"margin-left:17%;\">A working tree is clean, if it\ncorresponds to the revision referenced by the current head.\nAlso see &quot;dirty&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">commit</p>\n\n<p style=\"margin-left:17%;\">As a noun: A single point in\nthe Git history; the entire history of a project is\nrepresented as a set of interrelated commits. The word\n&quot;commit&quot; is often used by Git in the same places\nother revision control systems use the words\n&quot;revision&quot; or &quot;version&quot;. Also used as a\nshort hand for commit object.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As a verb: The\naction of storing a new snapshot of the project&rsquo;s\nstate in the Git history, by creating a new commit\nrepresenting the current state of the index and advancing\nHEAD to point at the new commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">commit\nobject</p>\n\n<p style=\"margin-left:17%;\">An object which contains the\ninformation about a particular revision, such as parents,\ncommitter, author, date and the tree object which\ncorresponds to the top directory of the stored revision.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">commit-ish\n(also committish)</p>\n\n<p style=\"margin-left:17%;\">A commit object or an object\nthat can be recursively dereferenced to a commit object. The\nfollowing are all commit-ishes: a commit object, a tag\nobject that points to a commit object, a tag object that\npoints to a tag object that points to a commit object,\netc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">core Git</p>\n\n<p style=\"margin-left:17%;\">Fundamental data structures and\nutilities of Git. Exposes only limited source code\nmanagement tools.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">DAG</p>\n\n<p style=\"margin-left:17%;\">Directed acyclic graph. The\ncommit objects form a directed acyclic graph, because they\nhave parents (directed), and the graph of commit objects is\nacyclic (there is no chain which begins and ends with the\nsame object).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">dangling\nobject</p>\n\n<p style=\"margin-left:17%;\">An unreachable object which is\nnot reachable even from other unreachable objects; a\ndangling object has no references to it from any reference\nor object in the repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">detached\nHEAD</p>\n\n<p style=\"margin-left:17%;\">Normally the HEAD stores the\nname of a branch, and commands that operate on the history\nHEAD represents operate on the history leading to the tip of\nthe branch the HEAD points at. However, Git also allows you\nto check out an arbitrary commit that isn&rsquo;t\nnecessarily the tip of any particular branch. The HEAD in\nsuch a state is called &quot;detached&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\ncommands that operate on the history of the current branch\n(e.g. <b>git commit</b> to build a new history on top of it)\nstill work while the HEAD is detached. They update the HEAD\nto point at the tip of the updated history without affecting\nany branch. Commands that update or inquire information\n<i>about</i> the current branch (e.g. <b>git branch\n--set-upstream-to</b> that sets what remote-tracking branch\nthe current branch integrates with) obviously do not work,\nas there is no (real) current branch to ask about in this\nstate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">directory</p>\n\n<p style=\"margin-left:17%;\">The list you get with\n&quot;ls&quot; :-)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">dirty</p>\n\n<p style=\"margin-left:17%;\">A working tree is said to be\n&quot;dirty&quot; if it contains modifications which have\nnot been committed to the current branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">evil merge</p>\n\n<p style=\"margin-left:17%;\">An evil merge is a merge that\nintroduces changes that do not appear in any parent.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fast-forward</p>\n\n<p style=\"margin-left:17%;\">A fast-forward is a special\ntype of merge where you have a revision and you are\n&quot;merging&quot; another branch's changes that happen to\nbe a descendant of what you have. In such a case, you do not\nmake a new merge commit but instead just update your branch\nto point at the same revision as the branch you are merging.\nThis will happen frequently on a remote-tracking branch of a\nremote repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">fetch</p>\n\n<p style=\"margin-left:17%;\">Fetching a branch means to get\nthe branch&rsquo;s head ref from a remote repository, to\nfind out which objects are missing from the local object\ndatabase, and to get them, too. See also\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">file system</p>\n\n<p style=\"margin-left:17%;\">Linus Torvalds originally\ndesigned Git to be a user space file system, i.e. the\ninfrastructure to hold files and directories. That ensured\nthe efficiency and speed of Git.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git archive</p>\n\n<p style=\"margin-left:17%;\">Synonym for repository (for\narch people).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitfile</p>\n\n<p style=\"margin-left:17%;\">A plain file <b>.git</b> at the\nroot of a working tree that points at the directory that is\nthe real repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">grafts</p>\n\n<p style=\"margin-left:17%;\">Grafts enables two otherwise\ndifferent lines of development to be joined together by\nrecording fake ancestry information for commits. This way\nyou can make Git pretend the set of parents a commit has is\ndifferent from what was recorded when the commit was\ncreated. Configured via the <b>.git/info/grafts</b>\nfile.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that the\ngrafts mechanism is outdated and can lead to problems\ntransferring objects between repositories; see\n<a href=\"https://man.page/1/git-replace\">git-replace(1)</a> for a more flexible and robust system\nto do the same thing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">hash</p>\n\n<p style=\"margin-left:17%;\">In Git&rsquo;s context, synonym\nfor object name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">head</p>\n\n<p style=\"margin-left:17%;\">A named reference to the commit\nat the tip of a branch. Heads are stored in a file in\n<b>$GIT_DIR/refs/heads/</b> directory, except when using\npacked refs. (See <a href=\"https://man.page/1/git-pack-refs\">git-pack-refs(1)</a>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">HEAD</p>\n\n<p style=\"margin-left:17%;\">The current branch. In more\ndetail: Your working tree is normally derived from the state\nof the tree referred to by HEAD. HEAD is a reference to one\nof the heads in your repository, except when using a\ndetached HEAD, in which case it directly references an\narbitrary commit.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">head ref</p>\n\n<p style=\"margin-left:17%;\">A synonym for head.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">hook</p>\n\n<p style=\"margin-left:17%;\">During the normal execution of\nseveral Git commands, call-outs are made to optional scripts\nthat allow a developer to add functionality or checking.\nTypically, the hooks allow for a command to be pre-verified\nand potentially aborted, and allow for a post-notification\nafter the operation is done. The hook scripts are found in\nthe <b>$GIT_DIR/hooks/</b> directory, and are enabled by\nsimply removing the <b>.sample</b> suffix from the filename.\nIn earlier versions of Git you had to make them\nexecutable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">index</p>\n\n<p style=\"margin-left:17%;\">A collection of files with stat\ninformation, whose contents are stored as objects. The index\nis a stored version of your working tree. Truth be told, it\ncan also contain a second, and even a third version of a\nworking tree, which are used when merging.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">index entry</p>\n\n<p style=\"margin-left:17%;\">The information regarding a\nparticular file, stored in the index. An index entry can be\nunmerged, if a merge was started, but not yet finished (i.e.\nif the index contains multiple versions of that file).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">master</p>\n\n<p style=\"margin-left:17%;\">The default development branch.\nWhenever you create a Git repository, a branch named\n&quot;master&quot; is created, and becomes the active\nbranch. In most cases, this contains the local development,\nthough that is purely by convention and is not required.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">merge</p>\n\n<p style=\"margin-left:17%;\">As a verb: To bring the\ncontents of another branch (possibly from an external\nrepository) into the current branch. In the case where the\nmerged-in branch is from a different repository, this is\ndone by first fetching the remote branch and then merging\nthe result into the current branch. This combination of\nfetch and merge operations is called a pull. Merging is\nperformed by an automatic process that identifies changes\nmade since the branches diverged, and then applies all those\nchanges together. In cases where changes conflict, manual\nintervention may be required to complete the merge.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">As a noun:\nunless it is a fast-forward, a successful merge results in\nthe creation of a new commit representing the result of the\nmerge, and having as parents the tips of the merged\nbranches. This commit is referred to as a &quot;merge\ncommit&quot;, or sometimes just a &quot;merge&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">object</p>\n\n<p style=\"margin-left:17%;\">The unit of storage in Git. It\nis uniquely identified by the SHA-1 of its contents.\nConsequently, an object cannot be changed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">object\ndatabase</p>\n\n<p style=\"margin-left:17%;\">Stores a set of\n&quot;objects&quot;, and an individual object is identified\nby its object name. The objects usually live in\n<b>$GIT_DIR/objects/</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">object\nidentifier</p>\n\n<p style=\"margin-left:17%;\">Synonym for object name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">object name</p>\n\n<p style=\"margin-left:17%;\">The unique identifier of an\nobject. The object name is usually represented by a 40\ncharacter hexadecimal string. Also colloquially called\nSHA-1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">object type</p>\n\n<p style=\"margin-left:17%;\">One of the identifiers\n&quot;commit&quot;, &quot;tree&quot;, &quot;tag&quot; or\n&quot;blob&quot; describing the type of an object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">octopus</p>\n\n<p style=\"margin-left:17%;\">To merge more than two\nbranches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">origin</p>\n\n<p style=\"margin-left:17%;\">The default upstream\nrepository. Most projects have at least one upstream project\nwhich they track. By default <i>origin</i> is used for that\npurpose. New upstream updates will be fetched into\nremote-tracking branches named\norigin/name-of-upstream-branch, which you can see using\n<b>git branch -r</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">overlay</p>\n\n<p style=\"margin-left:17%;\">Only update and add files to\nthe working directory, but don&rsquo;t delete them, similar\nto how <i>cp -R</i> would update the contents in the\ndestination directory. This is the default mode in a\ncheckout when checking out files from the index or a\ntree-ish. In contrast, no-overlay mode also deletes tracked\nfiles not present in the source, similar to <i>rsync\n--delete</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pack</p>\n\n<p style=\"margin-left:17%;\">A set of objects which have\nbeen compressed into one file (to save space or to transmit\nthem efficiently).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pack index</p>\n\n<p style=\"margin-left:17%;\">The list of identifiers, and\nother information, of the objects in a pack, to assist in\nefficiently accessing the contents of a pack.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pathspec</p>\n\n<p style=\"margin-left:17%;\">Pattern used to limit paths in\nGit commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Pathspecs are\nused on the command line of &quot;git ls-files&quot;,\n&quot;git ls-tree&quot;, &quot;git add&quot;, &quot;git\ngrep&quot;, &quot;git diff&quot;, &quot;git checkout&quot;,\nand many other commands to limit the scope of operations to\nsome subset of the tree or worktree. See the documentation\nof each command for whether paths are relative to the\ncurrent directory or toplevel. The pathspec syntax is as\nfollows:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; any path\nmatches itself</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; the\npathspec up to the last slash represents a directory prefix.\nThe scope of that pathspec is limited to that subtree.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; the rest\nof the pathspec is a pattern for the remainder of the\npathname. Paths relative to the directory prefix will be\nmatched against that pattern using fnmatch(3); in\nparticular, <i>*</i> and <i>? can</i> match directory\nseparators.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example,\nDocumentation/*.jpg will match all .jpg files in the\nDocumentation subtree, including\nDocumentation/chapter_1/figure_1.jpg.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A pathspec that\nbegins with a colon <b>:</b> has special meaning. In the\nshort form, the leading colon <b>:</b> is followed by zero\nor more &quot;magic signature&quot; letters (which\noptionally is terminated by another colon <b>:</b>), and the\nremainder is the pattern to match against the path. The\n&quot;magic signature&quot; consists of ASCII symbols that\nare neither alphanumeric, glob, regex special characters nor\ncolon. The optional colon that terminates the &quot;magic\nsignature&quot; can be omitted if the pattern begins with a\ncharacter that does not belong to &quot;magic\nsignature&quot; symbol set and is not a colon.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In the long\nform, the leading colon <b>:</b> is followed by an open\nparenthesis <b>(</b>, a comma-separated list of zero or more\n&quot;magic words&quot;, and a close parentheses <b>)</b>,\nand the remainder is the pattern to match against the\npath.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A pathspec with\nonly a colon means &quot;there is no pathspec&quot;. This\nform should not be combined with other pathspec.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">top</p>\n\n<p style=\"margin-left:23%;\">The magic word <b>top</b>\n(magic signature: <b>/</b>) makes the pattern match from the\nroot of the working tree, even when you are running the\ncommand from inside a subdirectory.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">literal</p>\n\n<p style=\"margin-left:23%;\">Wildcards in the pattern such\nas <b>*</b> or <b>?</b> are treated as literal\ncharacters.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">icase</p>\n\n<p style=\"margin-left:23%;\">Case insensitive match.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">glob</p>\n\n<p style=\"margin-left:23%;\">Git treats the pattern as a\nshell glob suitable for consumption by fnmatch(3) with the\nFNM_PATHNAME flag: wildcards in the pattern will not match a\n/ in the pathname. For example,\n&quot;Documentation/*.html&quot; matches\n&quot;Documentation/git.html&quot; but not\n&quot;Documentation/ppc/ppc.html&quot; or\n&quot;tools/perf/Documentation/perf.html&quot;.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Two consecutive\nasterisks (&quot;<b>**</b>&quot;) in patterns matched\nagainst full pathname may have special meaning:</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull; A\nleading &quot;<b>**</b>&quot; followed by a slash means\nmatch in all directories. For example,\n&quot;<b>**/foo</b>&quot; matches file or directory\n&quot;<b>foo</b>&quot; anywhere, the same as pattern\n&quot;<b>foo</b>&quot;. &quot;<b>**/foo/bar</b>&quot;\nmatches file or directory &quot;<b>bar</b>&quot; anywhere\nthat is directly under directory &quot;<b>foo</b>&quot;.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull; A\ntrailing &quot;<b>/**</b>&quot; matches everything inside.\nFor example, &quot;<b>abc/**</b>&quot; matches all files\ninside directory &quot;abc&quot;, relative to the location\nof the <b>.gitignore</b> file, with infinite depth.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull; A slash\nfollowed by two consecutive asterisks then a slash matches\nzero or more directories. For example,\n&quot;<b>a/**/b</b>&quot; matches &quot;<b>a/b</b>&quot;,\n&quot;<b>a/x/b</b>&quot;, &quot;<b>a/x/y/b</b>&quot; and so\non.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull; Other\nconsecutive asterisks are considered invalid.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">Glob magic is\nincompatible with literal magic.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">attr</p>\n\n<p style=\"margin-left:23%;\">After <b>attr:</b> comes a\nspace separated list of &quot;attribute requirements&quot;,\nall of which must be met in order for the path to be\nconsidered a match; this is in addition to the usual\nnon-magic pathspec pattern matching. See\n<a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Each of the\nattribute requirements for the path takes one of these\nforms:</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull;\n&quot;<b>ATTR</b>&quot; requires that the attribute\n<b>ATTR</b> be set.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull;\n&quot;<b>-ATTR</b>&quot; requires that the attribute\n<b>ATTR</b> be unset.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull;\n&quot;<b>ATTR=VALUE</b>&quot; requires that the attribute\n<b>ATTR</b> be set to the string <b>VALUE</b>.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">&bull;\n&quot;<b>!ATTR</b>&quot; requires that the attribute\n<b>ATTR</b> be unspecified.</p>\n\n<p style=\"margin-left:29%; margin-top: 1em\">Note that when\nmatching against a tree object, attributes are still\nobtained from working tree, not from the given tree\nobject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">exclude</p>\n\n<p style=\"margin-left:23%;\">After a path matches any\nnon-exclude pathspec, it will be run through all exclude\npathspecs (magic signature: <b>!</b> or its synonym\n<b>^</b>). If it matches, the path is ignored. When there is\nno non-exclude pathspec, the exclusion is applied to the\nresult set as if invoked without any pathspec.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">parent</p>\n\n<p style=\"margin-left:17%;\">A commit object contains a\n(possibly empty) list of the logical predecessor(s) in the\nline of development, i.e. its parents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pickaxe</p>\n\n<p style=\"margin-left:17%;\">The term pickaxe refers to an\noption to the diffcore routines that help select changes\nthat add or delete a given text string. With the\n<b>--pickaxe-all</b> option, it can be used to view the full\nchangeset that introduced or removed, say, a particular line\nof text. See <a href=\"https://man.page/1/git-diff\">git-diff(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">plumbing</p>\n\n<p style=\"margin-left:17%;\">Cute name for core Git.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">porcelain</p>\n\n<p style=\"margin-left:17%;\">Cute name for programs and\nprogram suites depending on core Git, presenting a high\nlevel access to core Git. Porcelains expose more of a SCM\ninterface than the plumbing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">per-worktree\nref</p>\n\n<p style=\"margin-left:17%;\">Refs that are per-worktree,\nrather than global. This is presently only HEAD and any refs\nthat start with <b>refs/bisect/</b>, but might later include\nother unusual refs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pseudoref</p>\n\n<p style=\"margin-left:17%;\">Pseudorefs are a class of files\nunder <b>$GIT_DIR</b> which behave like refs for the\npurposes of rev-parse, but which are treated specially by\ngit. Pseudorefs both have names that are all-caps, and\nalways start with a line consisting of a SHA-1 followed by\nwhitespace. So, HEAD is not a pseudoref, because it is\nsometimes a symbolic ref. They might optionally contain some\nadditional data. <b>MERGE_HEAD</b> and\n<b>CHERRY_PICK_HEAD</b> are examples. Unlike per-worktree\nrefs, these files cannot be symbolic refs, and never have\nreflogs. They also cannot be updated through the normal ref\nupdate machinery. Instead, they are updated by directly\nwriting to the files. However, they can be read as if they\nwere refs, so <b>git rev-parse MERGE_HEAD</b> will work.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pull</p>\n\n<p style=\"margin-left:17%;\">Pulling a branch means to fetch\nit and merge it. See also <a href=\"https://man.page/1/git-pull\">git-pull(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">push</p>\n\n<p style=\"margin-left:17%;\">Pushing a branch means to get\nthe branch&rsquo;s head ref from a remote repository, find\nout if it is an ancestor to the branch&rsquo;s local head\nref, and in that case, putting all objects, which are\nreachable from the local head ref, and which are missing\nfrom the remote repository, into the remote object database,\nand updating the remote head ref. If the remote head is not\nan ancestor to the local head, the push fails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">reachable</p>\n\n<p style=\"margin-left:17%;\">All of the ancestors of a given\ncommit are said to be &quot;reachable&quot; from that\ncommit. More generally, one object is reachable from another\nif we can reach the one from the other by a chain that\nfollows tags to whatever they tag, commits to their parents\nor trees, and trees to the trees or blobs that they\ncontain.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">rebase</p>\n\n<p style=\"margin-left:17%;\">To reapply a series of changes\nfrom a branch to a different base, and reset the head of\nthat branch to the result.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ref</p>\n\n<p style=\"margin-left:17%;\">A name that begins with\n<b>refs/</b> (e.g. <b>refs/heads/master</b>) that points to\nan object name or another ref (the latter is called a\nsymbolic ref). For convenience, a ref can sometimes be\nabbreviated when used as an argument to a Git command; see\n<a href=\"https://man.page/7/gitrevisions\">gitrevisions(7)</a> for details. Refs are stored in the\nrepository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The ref\nnamespace is hierarchical. Different subhierarchies are used\nfor different purposes (e.g. the <b>refs/heads/</b>\nhierarchy is used to represent local branches).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">There are a few\nspecial-purpose refs that do not begin with <b>refs/</b>.\nThe most notable example is <b>HEAD</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">reflog</p>\n\n<p style=\"margin-left:17%;\">A reflog shows the local\n&quot;history&quot; of a ref. In other words, it can tell\nyou what the 3rd last revision in <i>this</i> repository\nwas, and what was the current state in <i>this</i>\nrepository, yesterday 9:14pm. See <a href=\"https://man.page/1/git-reflog\">git-reflog(1)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">refspec</p>\n\n<p style=\"margin-left:17%;\">A &quot;refspec&quot; is used\nby fetch and push to describe the mapping between remote ref\nand local ref.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">remote\nrepository</p>\n\n<p style=\"margin-left:17%;\">A repository which is used to\ntrack the same project but resides somewhere else. To\ncommunicate with remotes, see fetch or push.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">remote-tracking\nbranch</p>\n\n<p style=\"margin-left:17%;\">A ref that is used to follow\nchanges from another repository. It typically looks like\n<i>refs/remotes/foo/bar</i> (indicating that it tracks a\nbranch named <i>bar</i> in a remote named <i>foo</i>), and\nmatches the right-hand-side of a configured fetch refspec. A\nremote-tracking branch should not contain direct\nmodifications or have local commits made to it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">repository</p>\n\n<p style=\"margin-left:17%;\">A collection of refs together\nwith an object database containing all objects which are\nreachable from the refs, possibly accompanied by meta data\nfrom one or more porcelains. A repository can share an\nobject database with other repositories via alternates\nmechanism.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">resolve</p>\n\n<p style=\"margin-left:17%;\">The action of fixing up\nmanually what a failed automatic merge left behind.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">revision</p>\n\n<p style=\"margin-left:17%;\">Synonym for commit (the\nnoun).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">rewind</p>\n\n<p style=\"margin-left:17%;\">To throw away part of the\ndevelopment, i.e. to assign the head to an earlier\nrevision.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">SCM</p>\n\n<p style=\"margin-left:17%;\">Source code management\n(tool).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">SHA-1</p>\n\n<p style=\"margin-left:17%;\">&quot;Secure Hash Algorithm\n1&quot;; a cryptographic hash function. In the context of\nGit used as a synonym for object name.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">shallow\nclone</p>\n\n<p style=\"margin-left:17%;\">Mostly a synonym to shallow\nrepository but the phrase makes it more explicit that it was\ncreated by running <b>git clone --depth=...</b> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">shallow\nrepository</p>\n\n<p style=\"margin-left:17%;\">A shallow repository has an\nincomplete history some of whose commits have parents\ncauterized away (in other words, Git is told to pretend that\nthese commits do not have the parents, even though they are\nrecorded in the commit object). This is sometimes useful\nwhen you are interested only in the recent history of a\nproject even though the real history recorded in the\nupstream is much larger. A shallow repository is created by\ngiving the <b>--depth</b> option to <a href=\"https://man.page/1/git-clone\">git-clone(1)</a>, and\nits history can be later deepened with\n<a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">stash entry</p>\n\n<p style=\"margin-left:17%;\">An object used to temporarily\nstore the contents of a dirty working directory and the\nindex for future reuse.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">submodule</p>\n\n<p style=\"margin-left:17%;\">A repository that holds the\nhistory of a separate project inside another repository (the\nlatter of which is called superproject).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">superproject</p>\n\n<p style=\"margin-left:17%;\">A repository that references\nrepositories of other projects in its working tree as\nsubmodules. The superproject knows about the names of (but\ndoes not hold copies of) commit objects of the contained\nsubmodules.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">symref</p>\n\n<p style=\"margin-left:17%;\">Symbolic reference: instead of\ncontaining the SHA-1 id itself, it is of the format <i>ref:\nrefs/some/thing</i> and when referenced, it recursively\ndereferences to this reference. <i>HEAD</i> is a prime\nexample of a symref. Symbolic references are manipulated\nwith the <a href=\"https://man.page/1/git-symbolic-ref\">git-symbolic-ref(1)</a> command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tag</p>\n\n<p style=\"margin-left:17%;\">A ref under <b>refs/tags/</b>\nnamespace that points to an object of an arbitrary type\n(typically a tag points to either a tag or a commit object).\nIn contrast to a head, a tag is not updated by the\n<b>commit</b> command. A Git tag has nothing to do with a\nLisp tag (which would be called an object type in\nGit&rsquo;s context). A tag is most typically used to mark a\nparticular point in the commit ancestry chain.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tag object</p>\n\n<p style=\"margin-left:17%;\">An object containing a ref\npointing to another object, which can contain a message just\nlike a commit object. It can also contain a (PGP) signature,\nin which case it is called a &quot;signed tag\nobject&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">topic\nbranch</p>\n\n<p style=\"margin-left:17%;\">A regular Git branch that is\nused by a developer to identify a conceptual line of\ndevelopment. Since branches are very easy and inexpensive,\nit is often desirable to have several small branches that\neach contain very well defined concepts or small incremental\nyet related changes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tree</p>\n\n<p style=\"margin-left:17%;\">Either a working tree, or a\ntree object together with the dependent blob and tree\nobjects (i.e. a stored representation of a working\ntree).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tree object</p>\n\n<p style=\"margin-left:17%;\">An object containing a list of\nfile names and modes along with refs to the associated blob\nand/or tree objects. A tree is equivalent to a\ndirectory.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">tree-ish (also\ntreeish)</p>\n\n<p style=\"margin-left:17%;\">A tree object or an object that\ncan be recursively dereferenced to a tree object.\nDereferencing a commit object yields the tree object\ncorresponding to the revision's top directory. The following\nare all tree-ishes: a commit-ish, a tree object, a tag\nobject that points to a tree object, a tag object that\npoints to a tag object that points to a tree object,\netc.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unmerged\nindex</p>\n\n<p style=\"margin-left:17%;\">An index which contains\nunmerged index entries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">unreachable\nobject</p>\n\n<p style=\"margin-left:17%;\">An object which is not\nreachable from a branch, tag, or any other reference.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">upstream\nbranch</p>\n\n<p style=\"margin-left:17%;\">The default branch that is\nmerged into the branch in question (or the branch in\nquestion is rebased onto). It is configured via\nbranch.&lt;name&gt;.remote and branch.&lt;name&gt;.merge. If\nthe upstream branch of <i>A</i> is <i>origin/B</i> sometimes\nwe say &quot;<i>A</i> is tracking <i>origin/B</i>&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">working\ntree</p>\n\n<p style=\"margin-left:17%;\">The tree of actual checked out\nfiles. The working tree normally contains the contents of\nthe HEAD commit&rsquo;s tree, plus any local changes that\nyou have made but not yet committed.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a>,\n<a href=\"https://man.page/7/gittutorial-2\">gittutorial-2(7)</a>, <a href=\"https://man.page/7/gitcvs-migration\">gitcvs-migration(7)</a>,\n<a href=\"https://man.page/7/giteveryday\">giteveryday(7)</a>, <b><font color=\"#0000FF\">The Git\nUser&rsquo;s Manual</font></b>\n<small><font color=\"#000000\">[1]</font></small></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">The Git\nUser&rsquo;s Manual</font></p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/user-manual.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}