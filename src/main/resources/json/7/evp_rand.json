{"name":"evp_rand","body":"\n\n<h1 align=\"center\">EVP_RAND</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_RAND - the\nrandom bit generator</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/evp.h&gt; <br>\n#include &lt;rand.h&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\nOpenSSL <small>RAND</small> method is based on the\n<small>EVP_RAND</small> classes to provide non-deterministic\ninputs to other cryptographic algorithms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While the\n<small>RAND API</small> is the &rsquo;frontend&rsquo; which\nis intended to be used by application developers for\nobtaining random bytes, the <small>EVP_RAND API</small>\nserves as the &rsquo;backend&rsquo;, connecting the former\nwith the operating systems&rsquo;s entropy sources and\nproviding access to deterministic random bit generators (\n<small>DRBG</small> ) and their configuration parameters. A\n<small>DRBG</small> is a certain type of\ncryptographically-secure pseudo-random number generator (\n<small>CSPRNG</small> ), which is described in [ <small>NIST\nSP 800-90A</small> Rev. 1].</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Disclaimer</b>\n<br>\nUnless you have very specific requirements for your random\ngenerator, it is in general not necessary to utilize the\n<small>EVP_RAND API</small> directly. The usual way to\nobtain random bytes is to use <a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a> or\n<a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a>, see also\n<b><small>RAND</small></b> (7).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Typical Use\nCases</b> <br>\nTypical examples for such special use cases are the\nfollowing:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>You want to use your own private <small>DRBG</small>\ninstances. Multiple <small>DRBG</small> instances which are\naccessed only by a single thread provide additional security\n(because their internal states are independent) and better\nscalability in multithreaded applications (because they\ndon&rsquo;t need to be locked).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>You need to integrate a previously unsupported entropy\nsource. Refer to <a href=\"https://man.page/7/provider-rand\">provider-rand(7)</a> for the\nimplementation details to support adding randomness sources\nto <small>EVP_RAND.</small></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>You need to change the default settings of the standard\nOpenSSL <small>RAND</small> implementation to meet specific\nrequirements.</p> </td></tr>\n</table>\n\n<h2>EVP_RAND CHAINING\n<a name=\"EVP_RAND CHAINING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<small>EVP_RAND</small> instance can be used as the entropy\nsource of another <small>EVP_RAND</small> instance, provided\nit has itself access to a valid entropy source. The\n<small>EVP_RAND</small> instance which acts as entropy\nsource is called the <i>parent</i>, the other instance the\n<i>child</i>. Typically, the child will be a\n<small>DRBG</small> because it does not make sense for the\nchild to be an entropy source.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is called\nchaining. A chained <small>EVP_RAND</small> instance is\ncreated by passing a pointer to the parent\n<small>EVP_RAND_CTX</small> as argument to the\n<b>EVP_RAND_CTX_new()</b> call. It is possible to create\nchains of more than two <small>DRBG</small> in a row. It is\nalso possible to use any <small>EVP_RAND_CTX</small> class\nas the parent, however, only a live entropy source may\nignore and not use its parent.</p>\n\n<h2>THE THREE SHARED DRBG INSTANCES\n<a name=\"THE THREE SHARED DRBG INSTANCES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently,\nthere are three shared <small>DRBG</small> instances, the\n&lt;primary&gt;, &lt;public&gt;, and &lt;private&gt;\n<small>DRBG.</small> While the &lt;primary&gt;\n<small>DRBG</small> is a single global instance, the\n&lt;public&gt; and &lt;private&gt; <small>DRBG</small> are\ncreated per thread and accessed through thread-local\nstorage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nfunctions <a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a> and <a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a>\nuse the thread-local &lt;public&gt; and &lt;private&gt;\n<small>DRBG</small> instance, respectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\n&lt;primary&gt; <small>DRBG</small> instance</b> <br>\nThe &lt;primary&gt; <small>DRBG</small> is not used directly\nby the application, only for reseeding the two other two\n<small>DRBG</small> instances. It reseeds itself by\nobtaining randomness either from os entropy sources or by\nconsuming randomness which was added previously by\n<a href=\"https://man.page/3/RAND_add\">RAND_add(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\n&lt;public&gt; <small>DRBG</small> instance</b> <br>\nThis instance is used per default by\n<a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\n&lt;private&gt; <small>DRBG</small> instance</b> <br>\nThis instance is used per default by\n<a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a></p>\n\n<h2>LOCKING\n<a name=\"LOCKING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&lt;primary&gt; <small>DRBG</small> is intended to be\naccessed concurrently for reseeding by its child\n<small>DRBG</small> instances. The necessary locking is done\ninternally. It is <i>not</i> thread-safe to access the\n&lt;primary&gt; <small>DRBG</small> directly via the\n<small>EVP_RAND</small> interface. The &lt;public&gt; and\n&lt;private&gt; <small>DRBG</small> are thread-local, i.e.\nthere is an instance of each per thread. So they can safely\nbe accessed without locking via the <small>EVP_RAND</small>\ninterface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Pointers to\nthese <small>DRBG</small> instances can be obtained using\n<b>RAND_get0_primary()</b>, <b>RAND_get0_public()</b> and\n<b>RAND_get0_private()</b>, respectively. Note that it is\nnot allowed to store a pointer to one of the thread-local\n<small>DRBG</small> instances in a variable or other memory\nlocation where it will be accessed and used by multiple\nthreads.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All other\n<small>DRBG</small> instances created by an application\ndon&rsquo;t support locking, because they are intended to be\nused by a single thread. Instead of accessing a single\n<small>DRBG</small> instance concurrently from different\nthreads, it is recommended to instantiate a separate\n<small>DRBG</small> instance per thread. Using the\n&lt;primary&gt; <small>DRBG</small> as entropy source for\nmultiple <small>DRBG</small> instances on different threads\nis thread-safe, because the <small>DRBG</small> instance\nwill lock the &lt;primary&gt; <small>DRBG</small>\nautomatically for obtaining random input.</p>\n\n<h2>THE OVERALL PICTURE\n<a name=\"THE OVERALL PICTURE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\npicture gives an overview over how the <small>DRBG</small>\ninstances work together and are being used.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">+--------------------+\n<br>\n| os entropy sources | <br>\n+--------------------+ <br>\n| <br>\nv +-----------------------------+ <br>\nRAND_add() ==&gt; &lt;primary&gt; &lt;-| shared DRBG (with\nlocking) | <br>\n/ \\ +-----------------------------+ <br>\n/ \\ +---------------------------+ <br>\n&lt;public&gt; &lt;private&gt; &lt;- | per-thread DRBG\ninstances | <br>\n| | +---------------------------+ <br>\nv v <br>\nRAND_bytes() RAND_priv_bytes() <br>\n| ^ <br>\n| | <br>\n+------------------+ +------------------------------------+\n<br>\n| general purpose | | used for secrets like session keys |\n<br>\n| random generator | | and private keys for certificates |\n<br>\n+------------------+\n+------------------------------------+</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The usual way\nto obtain random bytes is to call RAND_bytes(...) or\nRAND_priv_bytes(...). These calls are roughly equivalent to\ncalling EVP_RAND_generate(&lt;public&gt;, ...) and\nEVP_RAND_generate(&lt;private&gt;, ...), respectively.</p>\n\n<h2>RESEEDING\n<a name=\"RESEEDING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A\n<small>DRBG</small> instance seeds itself automatically,\npulling random input from its entropy source. The entropy\nsource can be either a trusted operating system entropy\nsource, or another <small>DRBG</small> with access to such a\nsource.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Automatic\nreseeding occurs after a predefined number of generate\nrequests. The selection of the trusted entropy sources is\nconfigured at build time using the --with-rand-seed option.\nThe following sections explain the reseeding process in more\ndetail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Automatic\nReseeding</b> <br>\nBefore satisfying a generate request\n(<a href=\"https://man.page/3/EVP_RAND_generate\">EVP_RAND_generate(3)</a>), the <small>DRBG</small>\nreseeds itself automatically, if one of the following\nconditions holds:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">- the\n<small>DRBG</small> was not instantiated (=seeded) yet or\nhas been uninstantiated.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">- the number of\ngenerate requests since the last reseeding exceeds a certain\nthreshold, the so called <i>reseed_interval</i>. This\nbehaviour can be disabled by setting the\n<i>reseed_interval</i> to 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">- the time\nelapsed since the last reseeding exceeds a certain time\ninterval, the so called <i>reseed_time_interval</i>. This\ncan be disabled by setting the <i>reseed_time_interval</i>\nto 0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">- the\n<small>DRBG</small> is in an error state.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Note</b>: An\nerror state is entered if the entropy source fails while the\n<small>DRBG</small> is seeding or reseeding. The last case\nensures that the <small>DRBG</small> automatically recovers\nfrom the error as soon as the entropy source is available\nagain.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Manual\nReseeding</b> <br>\nIn addition to automatic reseeding, the caller can request\nan immediate reseeding of the <small>DRBG</small> with fresh\nentropy by setting the <i>prediction resistance</i>\nparameter to 1 when calling <a href=\"https://man.page/3/EVP_RAND_generate\">EVP_RAND_generate(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The document [\n<small>NIST SP 800-90C</small> ] describes prediction\nresistance requests in detail and imposes strict conditions\non the entropy sources that are approved for providing\nprediction resistance. A request for prediction resistance\ncan only be satisfied by pulling fresh entropy from a live\nentropy source (section 5.5.2 of [ <small>NIST SP\n800-90C</small> ]). It is up to the user to ensure that a\nlive entropy source is configured and is being used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the three\nshared DRBGs (and only for these) there is another way to\nreseed them manually: If <a href=\"https://man.page/3/RAND_add\">RAND_add(3)</a> is called with a\npositive <i>randomness</i> argument (or\n<a href=\"https://man.page/3/RAND_seed\">RAND_seed(3)</a>), then this will immediately reseed the\n&lt;primary&gt; <small>DRBG.</small> The &lt;public&gt; and\n&lt;private&gt; <small>DRBG</small> will detect this on\ntheir next generate call and reseed, pulling randomness from\n&lt;primary&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The last\nfeature has been added to support the common practice used\nwith previous OpenSSL versions to call <b>RAND_add()</b>\nbefore calling <b>RAND_bytes()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Entropy\nInput and Additional Data</b> <br>\nThe <small>DRBG</small> distinguishes two different types of\nrandom input: <i>entropy</i>, which comes from a trusted\nsource, and <i>additional input</i>&rsquo;, which can\noptionally be added by the user and is considered untrusted.\nIt is possible to add <i>additional input</i> not only\nduring reseeding, but also for every generate request.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Configuring\nthe Random Seed Source</b> <br>\nIn most cases OpenSSL will automatically choose a suitable\nseed source for automatically seeding and reseeding its\n&lt;primary&gt; <small>DRBG.</small> In some cases however,\nit will be necessary to explicitly specify a seed source\nduring configuration, using the --with-rand-seed option. For\nmore information, see the <small>INSTALL</small>\ninstructions. There are also operating systems where no seed\nsource is available and automatic reseeding is disabled by\ndefault.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\ntwo sections describe the reseeding process of the primary\n<small>DRBG,</small> depending on whether automatic\nreseeding is available or not.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Reseeding\nthe primary <small>DRBG</small> with automatic seeding\nenabled</b> <br>\nCalling <b>RAND_poll()</b> or <b>RAND_add()</b> is not\nnecessary, because the <small>DRBG</small> pulls the\nnecessary entropy from its source automatically. However,\nboth calls are permitted, and do reseed the\n<small>RNG.</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>RAND_add()</b>\ncan be used to add both kinds of random input, depending on\nthe value of the <i>randomness</i> argument: <br>\nrandomness == 0:</p>\n\n<p style=\"margin-left:17%;\">The random bytes are mixed as\nadditional input into the current state of the\n<small>DRBG.</small> Mixing in additional input is not\nconsidered a full reseeding, hence the reseed counter is not\nreset.</p>\n\n<p style=\"margin-left:11%;\">randomness &gt; 0:</p>\n\n<p style=\"margin-left:17%;\">The random bytes are used as\nentropy input for a full reseeding (resp. reinstantiation)\nif the <small>DRBG</small> is instantiated (resp.\nuninstantiated or in an error state). The number of random\nbits required for reseeding is determined by the security\nstrength of the <small>DRBG.</small> Currently it defaults\nto 256 bits (32 bytes). It is possible to provide less\nrandomness than required. In this case the missing\nrandomness will be obtained by pulling random input from the\ntrusted entropy sources.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>NOTE:</small>\nManual reseeding is *not allowed* in <small>FIPS</small>\nmode, because [ <small>NIST</small> SP-800-90Ar1] mandates\nthat entropy *shall not* be provided by the consuming\napplication for instantiation (Section 9.1) or reseeding\n(Section 9.2). For that reason, the <i>randomness</i>\nargument is ignored and the random bytes provided by the\n<a href=\"https://man.page/3/RAND_add\">RAND_add(3)</a> and <a href=\"https://man.page/3/RAND_seed\">RAND_seed(3)</a> calls are treated\nas additional data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Reseeding\nthe primary <small>DRBG</small> with automatic seeding\ndisabled</b> <br>\nCalling <b>RAND_poll()</b> will always fail.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>RAND_add()</b>\nneeds to be called for initial seeding and periodic\nreseeding. At least 48 bytes (384 bits) of randomness have\nto be provided, otherwise the (re-)seeding of the\n<small>DRBG</small> will fail. This corresponds to one and a\nhalf times the security strength of the <small>DRBG.</small>\nThe extra half is used for the nonce during\ninstantiation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More precisely,\nthe number of bytes needed for seeding depend on the\n<i>security strength</i> of the <small>DRBG,</small> which\nis set to 256 by default.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>RAND</small></b>\n(7), <b><small>EVP_RAND</small></b> (3)</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\nfunctionality was added in OpenSSL 3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2017-2020 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EVP_RAND CHAINING\">EVP_RAND CHAINING</a>","<a href=\"#THE THREE SHARED DRBG INSTANCES\">THE THREE SHARED DRBG INSTANCES</a>","<a href=\"#LOCKING\">LOCKING</a>","<a href=\"#THE OVERALL PICTURE\">THE OVERALL PICTURE</a>","<a href=\"#RESEEDING\">RESEEDING</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}