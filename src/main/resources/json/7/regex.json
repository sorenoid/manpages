{"name":"regex","description":"regex - POSIX.2 regular expressions","body":"\n\n<h1 align=\"center\">REGEX</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">regex - POSIX.2\nregular expressions</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Regular\nexpressions (&quot;RE&quot;s), as defined in POSIX.2, come\nin two forms: modern REs (roughly those of <i>egrep</i>;\nPOSIX.2 calls these &quot;extended&quot; REs) and obsolete\nREs (roughly those of <a href=\"https://man.page/1/ed\">ed(1)</a>; POSIX.2\n&quot;basic&quot; REs). Obsolete REs mostly exist for\nbackward compatibility in some old programs; they will be\ndiscussed at the end. POSIX.2 leaves some aspects of RE\nsyntax and semantics open; &quot;(!)&quot; marks decisions\non these aspects that may not be fully portable to other\nPOSIX.2 implementations.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A (modern) RE\nis one(!) or more nonempty(!) <i>branches</i>, separated by\n'|'. It matches anything that matches one of the\nbranches.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A branch is\none(!) or more <i>pieces</i>, concatenated. It matches a\nmatch for the first, followed by a match for the second, and\nso on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A piece is an\n<i>atom</i> possibly followed by a single(!) '*', '+', '?',\nor <i>bound</i>. An atom followed by '*' matches a sequence\nof 0 or more matches of the atom. An atom followed by '+'\nmatches a sequence of 1 or more matches of the atom. An atom\nfollowed by '?' matches a sequence of 0 or 1 matches of the\natom.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <i>bound</i>\nis '{' followed by an unsigned decimal integer, possibly\nfollowed by ',' possibly followed by another unsigned\ndecimal integer, always followed by '}'. The integers must\nlie between 0 and <b>RE_DUP_MAX</b> (255(!)) inclusive, and\nif there are two of them, the first may not exceed the\nsecond. An atom followed by a bound containing one integer\n<i>i</i> and no comma matches a sequence of exactly <i>i</i>\nmatches of the atom. An atom followed by a bound containing\none integer <i>i</i> and a comma matches a sequence of\n<i>i</i> or more matches of the atom. An atom followed by a\nbound containing two integers <i>i</i> and <i>j</i> matches\na sequence of <i>i</i> through <i>j</i> (inclusive) matches\nof the atom.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An atom is a\nregular expression enclosed in &quot;<i>()</i>&quot;\n(matching a match for the regular expression), an empty set\nof &quot;<i>()</i>&quot; (matching the null string)(!), a\n<i>bracket expression</i> (see below), '.' (matching any\nsingle character), '^' (matching the null string at the\nbeginning of a line), '$' (matching the null string at the\nend of a line), a '\\' followed by one of the characters\n&quot;<i>^.[$()|*+?{\\</i>&quot; (matching that character\ntaken as an ordinary character), a '\\' followed by any other\ncharacter(!) (matching that character taken as an ordinary\ncharacter, as if the '\\' had not been present(!)), or a\nsingle character with no other significance (matching that\ncharacter). A '{' followed by a character other than a digit\nis an ordinary character, not the beginning of a bound(!).\nIt is illegal to end an RE with '\\'.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <i>bracket\nexpression</i> is a list of characters enclosed in\n&quot;<i>[]</i>&quot;. It normally matches any single\ncharacter from the list (but see below). If the list begins\nwith '^', it matches any single character (but see below)\n<i>not</i> from the rest of the list. If two characters in\nthe list are separated by '-', this is shorthand for the\nfull <i>range</i> of characters between those two\n(inclusive) in the collating sequence, for example,\n&quot;<i>[0-9]</i>&quot; in ASCII matches any decimal digit.\nIt is illegal(!) for two ranges to share an endpoint, for\nexample, &quot;<i>a-c-e</i>&quot;. Ranges are very\ncollating-sequence-dependent, and portable programs should\navoid relying on them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To include a\nliteral ']' in the list, make it the first character\n(following a possible '^'). To include a literal '-', make\nit the first or last character, or the second endpoint of a\nrange. To use a literal '-' as the first endpoint of a\nrange, enclose it in &quot;<i>[.</i>&quot; and\n&quot;<i>.]</i>&quot; to make it a collating element (see\nbelow). With the exception of these and some combinations\nusing '[' (see next paragraphs), all other special\ncharacters, including '\\', lose their special significance\nwithin a bracket expression.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Within a\nbracket expression, a collating element (a character, a\nmulticharacter sequence that collates as if it were a single\ncharacter, or a collating-sequence name for either) enclosed\nin &quot;<i>[.</i>&quot; and &quot;<i>.]</i>&quot; stands\nfor the sequence of characters of that collating element.\nThe sequence is a single element of the bracket\nexpression&rsquo;s list. A bracket expression containing a\nmulticharacter collating element can thus match more than\none character, for example, if the collating sequence\nincludes a &quot;ch&quot; collating element, then the RE\n&quot;<i>[[.ch.]]*c</i>&quot; matches the first five\ncharacters of &quot;chchcc&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Within a\nbracket expression, a collating element enclosed in\n&quot;<i>[=</i>&quot; and &quot;<i>=]</i>&quot; is an\nequivalence class, standing for the sequences of characters\nof all collating elements equivalent to that one, including\nitself. (If there are no other equivalent collating\nelements, the treatment is as if the enclosing delimiters\nwere &quot;<i>[.</i>&quot; and &quot;<i>.]</i>&quot;.) For\nexample, if o and ^ are the members of an equivalence class,\nthen &quot;<i>[[=o=]]</i>&quot;,\n&quot;<i>[[=</i><b><i>^=]]</i></b>&quot;, and\n&quot;<i>[o</i><b><i>^]</i></b>&quot; are all synonymous. An\nequivalence class may not(!) be an endpoint of a range.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Within a\nbracket expression, the name of a <i>character class</i>\nenclosed in &quot;<i>[:</i>&quot; and &quot;<i>:]</i>&quot;\nstands for the list of all characters belonging to that\nclass. Standard character class names are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"62%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3513721.png\" alt=\"Image grohtml-3513721.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These stand for\nthe character classes defined in <a href=\"https://man.page/3/wctype\">wctype(3)</a>. A locale\nmay provide others. A character class may not be used as an\nendpoint of a range.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the event\nthat an RE could match more than one substring of a given\nstring, the RE matches the one starting earliest in the\nstring. If the RE could match more than one substring\nstarting at that point, it matches the longest.\nSubexpressions also match the longest possible substrings,\nsubject to the constraint that the whole match be as long as\npossible, with subexpressions starting earlier in the RE\ntaking priority over ones starting later. Note that\nhigher-level subexpressions thus take priority over their\nlower-level component subexpressions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Match lengths\nare measured in characters, not collating elements. A null\nstring is considered longer than no match at all. For\nexample, &quot;<i>bb*</i>&quot; matches the three middle\ncharacters of &quot;abbbc&quot;,\n&quot;<i>(wee|week)(knights|nights)</i>&quot; matches all\nten characters of &quot;weeknights&quot;, when\n&quot;<i>(.*).*</i>&quot; is matched against &quot;abc&quot;\nthe parenthesized subexpression matches all three\ncharacters, and when &quot;<i>(a*)*</i>&quot; is matched\nagainst &quot;bc&quot; both the whole RE and the\nparenthesized subexpression match the null string.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If\ncase-independent matching is specified, the effect is much\nas if all case distinctions had vanished from the alphabet.\nWhen an alphabetic that exists in multiple cases appears as\nan ordinary character outside a bracket expression, it is\neffectively transformed into a bracket expression containing\nboth cases, for example, 'x' becomes\n&quot;<i>[xX]</i>&quot;. When it appears inside a bracket\nexpression, all case counterparts of it are added to the\nbracket expression, so that, for example,\n&quot;<i>[x]</i>&quot; becomes &quot;<i>[xX]</i>&quot; and\n&quot;<i>[^x]</i>&quot; becomes\n&quot;<i>[^xX]</i>&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">No particular\nlimit is imposed on the length of REs(!). Programs intended\nto be portable should not employ REs longer than 256 bytes,\nas an implementation can refuse to accept such REs and\nremain POSIX-compliant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Obsolete\n(&quot;basic&quot;) regular expressions differ in several\nrespects. '|', '+', and '?' are ordinary characters and\nthere is no equivalent for their functionality. The\ndelimiters for bounds are &quot;<i>\\{</i>&quot; and\n&quot;<i>\\}</i>&quot;, with '{' and '}' by themselves\nordinary characters. The parentheses for nested\nsubexpressions are &quot;<i>\\(</i>&quot; and\n&quot;<i>\\)</i>&quot;, with '(' and ')' by themselves\nordinary characters. '^' is an ordinary character except at\nthe beginning of the RE or(!) the beginning of a\nparenthesized subexpression, '$' is an ordinary character\nexcept at the end of the RE or(!) the end of a parenthesized\nsubexpression, and '*' is an ordinary character if it\nappears at the beginning of the RE or the beginning of a\nparenthesized subexpression (after a possible leading\n'^').</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Finally, there\nis one new type of atom, a <i>back reference</i>: '\\'\nfollowed by a nonzero decimal digit <i>d</i> matches the\nsame sequence of characters matched by the <i>d</i>th\nparenthesized subexpression (numbering subexpressions by the\npositions of their opening parentheses, left to right), so\nthat, for example, &quot;<i>\\([bc]\\)\\1</i>&quot; matches\n&quot;bb&quot; or &quot;cc&quot; but not &quot;bc&quot;.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Having two\nkinds of REs is a botch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The current\nPOSIX.2 spec says that ')' is an ordinary character in the\nabsence of an unmatched '('; this was an unintentional\nresult of a wording error, and change is likely. Avoid\nrelying on it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Back references\nare a dreadful botch, posing major problems for efficient\nimplementations. They are also somewhat vaguely defined\n(does &quot;<i>a\\(\\(b\\)*\\2\\)*d</i>&quot; match\n&quot;abbbd&quot;?). Avoid using them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.2&rsquo;s\nspecification of case-independent matching is vague. The\n&quot;one case implies all cases&quot; definition given\nabove is current consensus among implementors as to the\nright interpretation.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page was\ntaken from Henry Spencer&rsquo;s regex package.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/grep\">grep(1)</a>,\n<a href=\"https://man.page/3/regex\">regex(3)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.2,\nsection 2.8 (Regular Expression Notation).</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}