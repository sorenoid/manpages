{"name":"passphrase-encoding","body":"\n\n<h1 align=\"center\">PASSPHRASE-ENCODING</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">passphrase-encoding\n- How diverse parts of OpenSSL treat pass phrases character\nencoding</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a modern\nworld with all sorts of character encodings, the treatment\nof pass phrases has become increasingly complex. This manual\npage attempts to give an overview over how this problem is\ncurrently addressed in different parts of the OpenSSL\nlibrary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The general\ncase</b> <br>\nThe OpenSSL library doesn&rsquo;t treat pass phrases in any\nspecial way as a general rule, and trusts the application or\nuser to choose a suitable character set and stick to that\nthroughout the lifetime of affected objects. This means that\nfor an object that was encrypted using a pass phrase encoded\nin <small>ISO-8859-1,</small> that object needs to be\ndecrypted using a pass phrase encoded in\n<small>ISO-8859-1.</small> Using the wrong encoding is\nexpected to cause a decryption failure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>PKCS#12</b>\n<br>\nPKCS#12 is a bit different regarding pass phrase encoding.\nThe standard stipulates that the pass phrase shall be\nencoded as an <small>ASN.1</small> BMPString, which consists\nof the code points of the basic multilingual plane, encoded\nin big endian ( <small>UCS-2 BE</small> ).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OpenSSL tries\nto adapt to this requirements in one of the following\nmanners:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Treats the received pass phrase as <small>UTF-8</small>\nencoded and tries to re-encode it to <small>UTF-16</small>\n(which is the same as <small>UCS-2</small> for characters\nU+0000 to U+D7FF and U+E000 to U+FFFF, but becomes an\nexpansion for any other character), or failing that,\nproceeds with step 2.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Assumes that the pass phrase is encoded in\n<small>ASCII</small> or <small>ISO-8859-1</small> and\nopportunistically prepends each byte with a zero byte to\nobtain the <small>UCS-2</small> encoding of the characters,\nwhich it stores as a BMPString.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that since\nthere is no check of your locale, this may produce\n<small>UCS-2 / UTF-16</small> characters that do not\ncorrespond to the original pass phrase characters for other\ncharacter sets, such as any <small>ISO-8859-X</small>\nencoding other than <small>ISO-8859-1</small> (or for\nWindows, <small>CP 1252</small> with exception for the extra\n&quot;graphical&quot; characters in the 0x80-0x9F\nrange).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OpenSSL\nversions older than 1.1.0 do variant 2 only, and that is the\nreason why OpenSSL still does this, to be able to read files\nproduced with older versions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It should be\nnoted that this approach isn&rsquo;t entirely fault\nfree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A pass phrase\nencoded in <small>ISO-8859-2</small> could very well have a\nsequence such as 0xC3 0xAF (which is the two characters\n&quot; <small>LATIN CAPITAL LETTER A WITH\nBREVE&quot;</small> and &quot; <small>LATIN CAPITAL LETTER Z\nWITH DOT ABOVE&quot;</small> in <small>ISO-8859-2</small>\nencoding), but would be misinterpreted as the perfectly\nvalid <small>UTF-8</small> encoded code point U+00EF (\n<small>LATIN SMALL LETTER I WITH DIAERESIS</small> ) <i>if\nthe pass phrase doesn&rsquo;t contain anything that would be\ninvalid <small>UTF-8</small></i> . A pass phrase that\ncontains this kind of byte sequence will give a different\noutcome in OpenSSL 1.1.0 and newer than in OpenSSL older\nthan 1.1.0.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">0x00 0xC3 0x00\n0xAF # OpenSSL older than 1.1.0 <br>\n0x00 0xEF # OpenSSL 1.1.0 and newer</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the same\naccord, anything encoded in <small>UTF-8</small> that was\ngiven to OpenSSL older than 1.1.0 was misinterpreted as\n<small>ISO-8859-1</small> sequences.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_STORE</small>\n<br>\nossl_store</b>(7) acts as a general interface to access all\nkinds of objects, potentially protected with a pass phrase,\na <small>PIN</small> or something else. This\n<small>API</small> stipulates that pass phrases should be\n<small>UTF-8</small> encoded, and that any other pass phrase\nencoding may give undefined results. This <small>API</small>\nrelies on the application to ensure <small>UTF-8</small>\nencoding, and doesn&rsquo;t check that this is the case, so\nwhat it gets, it will also pass to the underlying\nloader.</p>\n\n<h2>RECOMMENDATIONS\n<a name=\"RECOMMENDATIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\nassumes that you know what pass phrase was used for\nencryption, but that it may have been encoded in a different\ncharacter encoding than the one used by your current input\nmethod. For example, the pass phrase may have been used at a\ntime when your default encoding was\n<small>ISO-8859-1</small> (i.e. &quot;naieve&quot; resulting\nin the byte sequence 0x6E 0x61 0xEF 0x76 0x65), and\nyou&rsquo;re now in an environment where your default\nencoding is <small>UTF-8</small> (i.e. &quot;naieve&quot;\nresulting in the byte sequence 0x6E 0x61 0xC3 0xAF 0x76\n0x65). Whenever it&rsquo;s mentioned that you should use a\ncertain character encoding, it should be understood that you\neither change the input method to use the mentioned encoding\nwhen you type in your pass phrase, or use some suitable tool\nto convert your pass phrase from your default encoding to\nthe target encoding.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also note that\nthe sub-sections below discuss human readable pass phrases.\nThis is particularly relevant for PKCS#12 objects, where\nhuman readable pass phrases are assumed. For other objects,\nit&rsquo;s as legitimate to use any byte sequence (such as a\nsequence of bytes from <i>/dev/urandom</i> that&rsquo;s been\nsaved away), which makes any character encoding discussion\nirrelevant; in such cases, simply use the same byte sequence\nas it is.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Creating new\nobjects</b> <br>\nFor creating new pass phrase protected objects, make sure\nthe pass phrase is encoded using <small>UTF-8.</small> This\nis default on most modern Unixes, but may involve an effort\non other platforms. Specifically for Windows, setting the\nenvironment variable\n<b><small>OPENSSL_WIN32_UTF8</small></b> will have anything\nentered on [Windows] console prompt converted to\n<small>UTF-8</small> (command line and separately prompted\npass phrases alike).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Opening\nexisting objects</b> <br>\nFor opening pass phrase protected objects where you know\nwhat character encoding was used for the encryption pass\nphrase, make sure to use the same encoding again.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For opening\npass phrase protected objects where the character encoding\nthat was used is unknown, or where the producing application\nis unknown, try one of the following:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Try the pass phrase that you\nhave as it is in the character encoding of your environment.\nIt&rsquo;s possible that its byte sequence is exactly\nright.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Convert the pass phrase to <small>UTF-8</small> and try\nwith the result. Specifically with PKCS#12, this should open\nup any object that was created according to the\nspecification.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p>Do a naieve (i.e. purely mathematical)\n<small>ISO-8859-1</small> to <small>UTF-8</small> conversion\nand try with the result. This differs from the previous\nattempt because <small>ISO-8859-1</small> maps directly to\nU+0000 to U+00FF, which other non-UTF-8 character sets do\nnot.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This also takes\ncare of the case when a <small>UTF-8</small> encoded string\nwas used with OpenSSL older than 1.1.0. (for example,\n&quot;ie&quot;, which is 0xC3 0xAF when encoded in\n<small>UTF-8,</small> would become 0xC3 0x83 0xC2 0xAF when\nre-encoded in the naieve manner. The conversion to BMPString\nwould then yield 0x00 0xC3 0x00 0xA4 0x00 0x00, the\nerroneous/non-compliant encoding used by OpenSSL older than\n1.1.0)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/evp\">evp(7)</a>,\n<a href=\"https://man.page/7/ossl_store\">ossl_store(7)</a>, <a href=\"https://man.page/3/EVP_BytesToKey\">EVP_BytesToKey(3)</a>,\n<a href=\"https://man.page/3/EVP_DecryptInit\">EVP_DecryptInit(3)</a>, <a href=\"https://man.page/3/PEM_do_header\">PEM_do_header(3)</a>,\n<a href=\"https://man.page/3/PKCS12_parse\">PKCS12_parse(3)</a>, <a href=\"https://man.page/3/PKCS12_newpass\">PKCS12_newpass(3)</a>,\n<a href=\"https://man.page/3/d2i_PKCS8PrivateKey_bio\">d2i_PKCS8PrivateKey_bio(3)</a></p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2018-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RECOMMENDATIONS\">RECOMMENDATIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}