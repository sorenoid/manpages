{"name":"provider-decoder","body":"\n\n<h1 align=\"center\">PROVIDER-DECODER</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-decoder\n- The OSSL_DECODER library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Decoder parameter accessor and descriptor */ <br>\nconst OSSL_PARAM *OSSL_FUNC_decoder_gettable_params(void\n*provctx); <br>\nint OSSL_FUNC_decoder_get_params(OSSL_PARAM params[]); <br>\n/* Functions to construct / destruct / manipulate the\ndecoder context */ <br>\nvoid *OSSL_FUNC_decoder_newctx(void *provctx); <br>\nvoid OSSL_FUNC_decoder_freectx(void *ctx); <br>\nconst OSSL_PARAM *OSSL_FUNC_decoder_settable_ctx_params(void\n*provctx); <br>\nint OSSL_FUNC_decoder_set_ctx_params(void *ctx, const\nOSSL_PARAM params[]); <br>\n/* Functions to check selection support */ <br>\nint OSSL_FUNC_decoder_does_selection(void *provctx, int\nselection); <br>\n/* Functions to decode object data */ <br>\nint OSSL_FUNC_decoder_decode(void *ctx, OSSL_CORE_BIO *in,\n<br>\nint selection, <br>\nOSSL_CALLBACK *data_cb, void *data_cbarg, <br>\nOSSL_PASSPHRASE_CALLBACK *cb, void *cbarg); <br>\n/* Functions to export a decoded object */ <br>\nvoid *OSSL_FUNC_decoder_export_object(void *ctx, <br>\nconst void *objref, size_t objref_sz, <br>\nOSSL_CALLBACK *export_cb, <br>\nvoid *export_cbarg);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>The term\n&quot;decode&quot; is used throughout this manual. This\nincludes but is not limited to deserialization as individual\ndecoders can also do decoding into intermediate data\nformats.</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>DECODER</small> operation is a generic method to\ncreate a provider-native object reference or intermediate\ndecoded data from an encoded form read from the given\n<b><small>OSSL_CORE_BIO</small></b> . If the caller wants to\ndecode data from memory, it should provide a\n<a href=\"https://man.page/3/BIO_s_mem\">BIO_s_mem(3)</a> <b><small>BIO</small></b> . The decoded\ndata or object reference is passed along with eventual\nmetadata to the <i>metadata_cb</i> as\n<b><small>OSSL_PARAM</small></b> parameters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The decoder\ndoesn&rsquo;t need to know more about the\n<b><small>OSSL_CORE_BIO</small></b> pointer than being able\nto pass it to the appropriate <small>BIO</small> upcalls\n(see &quot;Core functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>DECODER</small> implementation may be part of a\nchain, where data is passed from one to the next. For\nexample, there may be an implementation to decode an object\nfrom <small>PEM</small> to <small>DER,</small> and another\none that decodes <small>DER</small> to a provider-native\nobject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The last\ndecoding step in the decoding chain is usually supposed to\ncreate a provider-native object referenced by an object\nreference. To import that object into a different provider\nthe <b>OSSL_FUNC_decoder_export_object()</b> can be called\nas the final step of the decoding process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from an\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_FUNC_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_decoder_decode()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef int\n<br>\n(OSSL_FUNC_decoder_decode_fn)(void *ctx, OSSL_CORE_BIO *in,\n<br>\nint selection, <br>\nOSSL_CALLBACK *data_cb, void *data_cbarg, <br>\nOSSL_PASSPHRASE_CALLBACK *cb, void *cbarg); <br>\nstatic ossl_inline OSSL_FUNC_decoder_decode_fn <br>\nOSSL_FUNC_decoder_decode(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_decoder_get_params\nOSSL_FUNC_DECODER_GET_PARAMS <br>\nOSSL_FUNC_decoder_gettable_params\nOSSL_FUNC_DECODER_GETTABLE_PARAMS <br>\nOSSL_FUNC_decoder_newctx OSSL_FUNC_DECODER_NEWCTX <br>\nOSSL_FUNC_decoder_freectx OSSL_FUNC_DECODER_FREECTX <br>\nOSSL_FUNC_decoder_set_ctx_params\nOSSL_FUNC_DECODER_SET_CTX_PARAMS <br>\nOSSL_FUNC_decoder_settable_ctx_params\nOSSL_FUNC_DECODER_SETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_decoder_does_selection\nOSSL_FUNC_DECODER_DOES_SELECTION <br>\nOSSL_FUNC_decoder_decode OSSL_FUNC_DECODER_DECODE <br>\nOSSL_FUNC_decoder_export_object\nOSSL_FUNC_DECODER_EXPORT_OBJECT</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Names and\nproperties</b> <br>\nThe name of an implementation should match the target type\nof object it decodes. For example, an implementation that\ndecodes an <small>RSA</small> key should be named &quot;\n<small>RSA&quot;.</small> Likewise, an implementation that\ndecodes <small>DER</small> data from <small>PEM</small>\ninput should be named &quot; <small>DER&quot;.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties can\nbe used to further specify details about an implementation:\n<br>\ninput</p>\n\n<p style=\"margin-left:17%;\">This property is used to\nspecify what format of input the implementation can\ndecode.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This property\nis <i>mandatory</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">OpenSSL\nproviders recognize the following input types:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>pem</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>An implementation with that input type decodes\n<small>PEM</small> formatted data.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>der</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>An implementation with that input type decodes\n<small>DER</small> formatted data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">msblob</p>\n\n<p style=\"margin-left:23%;\">An implementation with that\ninput type decodes <small>MSBLOB</small> formatted data.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>pvk</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>An implementation with that input type decodes\n<small>PVK</small> formatted data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">structure</p>\n\n<p style=\"margin-left:17%;\">This property is used to\nspecify the structure that the decoded data is expected to\nhave.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This property\nis <i>optional</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Structures\ncurrently recognised by built-in decoders: <br>\n&quot;type-specific&quot;</p>\n\n<p style=\"margin-left:23%;\">Type specific structure.</p>\n\n<p style=\"margin-left:17%;\">&quot;pkcs8&quot;</p>\n\n<p style=\"margin-left:23%;\">Structure according to the\nPKCS#8 specification.</p>\n\n\n<p style=\"margin-left:17%;\">&quot;SubjectPublicKeyInfo&quot;</p>\n\n<p style=\"margin-left:23%;\">Encoding of public keys\naccording to the Subject Public Key Info of <small>RFC\n5280.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The possible\nvalues of both these properties is open ended. A provider\nmay very well specify input types and structures that\nlibcrypto doesn&rsquo;t know anything about.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Subset\nselections</b> <br>\nSometimes, an object has more than one subset of data that\nis interesting to treat separately or together. It&rsquo;s\npossible to specify what subsets are to be decoded, with a\nset of bits <i>selection</i> that are passed in an\n<b>int</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This set of\nbits depend entirely on what kind of provider-side object is\nto be decoded. For example, those bits are assumed to be the\nsame as those used with <a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a> (see\n&quot;Key Objects&quot; in <a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>) when\nthe object is an asymmetric keypair - e.g.,\n<b><small>OSSL_KEYMGMT_SELECT_PRIVATE_KEY</small></b> if the\nobject to be decoded is supposed to contain private key\ncomponents.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_does_selection()</b>\nshould tell if a particular implementation supports any of\nthe combinations given by <i>selection</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nfunctions <br>\nOSSL_FUNC_decoder_newctx()</b> returns a context to be used\nwith the rest of the functions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_freectx()</b>\nfrees the given <i>ctx</i> as created by\n<b>OSSL_FUNC_decoder_newctx()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_set_ctx_params()</b>\nsets context data according to parameters from <i>params</i>\nthat it recognises. Unrecognised parameters should be\nignored. Passing <small>NULL</small> for <i>params</i>\nshould return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_settable_ctx_params()</b>\nreturns a constant <b><small>OSSL_PARAM</small></b> array\ndescribing the parameters that\n<b>OSSL_FUNC_decoder_set_ctx_params()</b> can handle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<b><small>OSSL_PARAM</small></b> (3) for further details on\nthe parameters structure used by\n<b>OSSL_FUNC_decoder_set_ctx_params()</b> and\n<b>OSSL_FUNC_decoder_settable_ctx_params()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Export\nfunction</b> <br>\nWhen a provider-native object is created by a decoder it\nwould be unsuitable for direct use with a foreign provider.\nThe export function allows for exporting the object into\nthat foreign provider if the foreign provider supports the\ntype of the object and provides an import function.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_export_object()</b>\nshould export the object of size <i>objref_sz</i> referenced\nby <i>objref</i> as an <b><small>OSSL_PARAM</small></b>\narray and pass that into the <i>export_cb</i> as well as the\ngiven <i>export_cbarg</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Decoding\nfunctions <br>\nOSSL_FUNC_decoder_decode()</b> should decode the data as\nread from the <b><small>OSSL_CORE_BIO</small></b> <i>in</i>\nto produce decoded data or an object to be passed as\nreference in an <b><small>OSSL_PARAM</small></b> array along\nwith possible other metadata that was decoded from the\ninput. This <b><small>OSSL_PARAM</small></b> array is then\npassed to the <i>data_cb</i> callback. The <i>selection</i>\nbits, if relevant, should determine what the input data\nshould contain. The decoding functions also take an\n<b><small>OSSL_PASSPHRASE_CALLBACK</small></b> function\npointer along with a pointer to application data\n<i>cbarg</i>, which should be used when a pass phrase prompt\nis needed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It&rsquo;s\nimportant to understand that the return value from this\nfunction is interpreted as follows: <br>\nTrue (1)</p>\n\n<p style=\"margin-left:17%;\">This means &quot;carry on the\ndecoding process&quot;, and is meaningful even though this\nfunction couldn&rsquo;t decode the input into anything,\nbecause there may be another decoder implementation that can\ndecode it into something.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>data_cb</i> callback should never be called when this\nfunction can&rsquo;t decode the input into anything.</p>\n\n<p style=\"margin-left:11%;\">False (0)</p>\n\n<p style=\"margin-left:17%;\">This means &quot;stop the\ndecoding process&quot;, and is meaningful when the input\ncould be decoded into some sort of object that this function\nunderstands, but further treatment of that object results\ninto errors that won&rsquo;t be possible for some other\ndecoder implementation to get a different result.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The conditions\nto stop the decoding process are at the discretion of the\nimplementation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Decoder\noperation parameters</b> <br>\nThere are currently no operation parameters currently\nrecognised by the built-in decoders.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameters\ncurrently recognised by the built-in pass phrase callback:\n<br>\n&quot;info&quot; (\n<b><small>OSSL_PASSPHRASE_PARAM_INFO</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">A string of information that\nwill become part of the pass phrase prompt. This could be\nused to give the user information on what kind of object\nit&rsquo;s being prompted for.</p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_newctx()</b>\nreturns a pointer to a context, or <small>NULL</small> on\nfailure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_set_ctx_params()</b>\nreturns 1, unless a recognised parameter was invalid or\ncaused an error, for which 0 is returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_settable_ctx_params()</b>\nreturns a pointer to an array of constant\n<b><small>OSSL_PARAM</small></b> elements.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_does_selection()</b>\nreturns 1 if the decoder implementation supports any of the\n<i>selection</i> bits, otherwise 0.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_decoder_decode()</b>\nreturns 1 to signal that the decoding process should\ncontinue, or 0 to signal that it should stop.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a></p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>DECODER</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}