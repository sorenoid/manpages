{"name":"rand","description":"RAND - the\nOpenSSL random generator\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nRandom numbers\nare a vital part of cryptography, they are needed to provide\nunpredictability for tasks like key generation, creating\nsalts, and many more. Software-based generators must be\nseeded with external randomness before they can be used as a\ncryptographically-secure pseudo-random number generator (\n<small>CSPRNG</small> ). The availability of common hardware\nwith special instructions and modern operating systems,\nwhich may use items such as interrupt jitter and network\npacket timings, can be reasonable sources of seeding\nmaterial.\n\nOpenSSL comes\nwith a default implementation of the <small>RAND API</small>\nwhich is based on the deterministic random bit generator (\n<small>DRBG</small> ) model as described in [ <small>NIST SP\n800-90A</small> Rev. 1]. The default random generator will\ninitialize automatically on first use and will be fully\nfunctional without having to be initialized\n(&rsquo;seeded&rsquo;) explicitly. It seeds and reseeds\nitself automatically using trusted random sources provided\nby the operating system.\n\nAs a normal\napplication developer, you do not have to worry about any\ndetails, just use <a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a> to obtain random\ndata. Having said that, there is one important rule to obey:\nAlways check the error return value of <a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a>\nand do not take randomness for granted. Although\n(re-)seeding is automatic, it can fail because no trusted\nrandom source is available or the trusted source(s)\ntemporarily fail to provide sufficient random seed material.\nIn this case the <small>CSPRNG</small> enters an error state\nand ceases to provide output, until it is able to recover\nfrom the error by reseeding itself. For more details on\nreseeding and error recovery, see\n<b><small>EVP_RAND</small></b> (7).\n\nFor values that\nshould remain secret, you can use <a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a>\ninstead. This method does not provide &rsquo;better&rsquo;\nrandomness, it uses the same type of <small>CSPRNG.</small>\nThe intention behind using a dedicated <small>CSPRNG</small>\nexclusively for private values is that none of its output\nshould be visible to an attacker (e.g., used as salt value),\nin order to reveal as little information as possible about\nits internal state, and that a compromise of the\n&quot;public&quot; <small>CSPRNG</small> instance will not\naffect the secrecy of these private values.\n\nIn the rare\ncase where the default implementation does not satisfy your\nspecial requirements, the default <small>RAND</small>\ninternals can be replaced by your own\n<b><small>EVP_RAND</small></b> (3) objects.\n\nChanging the\ndefault random generator should be necessary only in\nexceptional cases and is not recommended, unless you have a\nprofound knowledge of cryptographic principles and\nunderstand the implications of your changes.\n\n<h2>DEFAULT SETUP\n<a name=\"DEFAULT SETUP\"></a>\n</h2>\n\n\nThe default\nOpenSSL <small>RAND</small> method is based on the\n<small>EVP_RAND</small> deterministic random bit generator (\n<small>DRBG</small> ) classes. A <small>DRBG</small> is a\ncertain type of cryptographically-secure pseudo-random\nnumber generator ( <small>CSPRNG</small> ), which is\ndescribed in [ <small>NIST SP 800-90A</small> Rev. 1].\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a>,\n<a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a>, <b><small>EVP_RAND</small></b>\n(3), <a href=\"https://man.page/3/RAND_get0_primary\">RAND_get0_primary(3)</a>,\n<b><small>EVP_RAND</small></b> (7)\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\nCopyright\n2018-2021 The OpenSSL Project Authors. All Rights\nReserved.\n\nLicensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.","body":"\n\n<h1 align=\"center\">RAND</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">RAND - the\nOpenSSL random generator</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Random numbers\nare a vital part of cryptography, they are needed to provide\nunpredictability for tasks like key generation, creating\nsalts, and many more. Software-based generators must be\nseeded with external randomness before they can be used as a\ncryptographically-secure pseudo-random number generator (\n<small>CSPRNG</small> ). The availability of common hardware\nwith special instructions and modern operating systems,\nwhich may use items such as interrupt jitter and network\npacket timings, can be reasonable sources of seeding\nmaterial.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OpenSSL comes\nwith a default implementation of the <small>RAND API</small>\nwhich is based on the deterministic random bit generator (\n<small>DRBG</small> ) model as described in [ <small>NIST SP\n800-90A</small> Rev. 1]. The default random generator will\ninitialize automatically on first use and will be fully\nfunctional without having to be initialized\n(&rsquo;seeded&rsquo;) explicitly. It seeds and reseeds\nitself automatically using trusted random sources provided\nby the operating system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As a normal\napplication developer, you do not have to worry about any\ndetails, just use <a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a> to obtain random\ndata. Having said that, there is one important rule to obey:\nAlways check the error return value of <a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a>\nand do not take randomness for granted. Although\n(re-)seeding is automatic, it can fail because no trusted\nrandom source is available or the trusted source(s)\ntemporarily fail to provide sufficient random seed material.\nIn this case the <small>CSPRNG</small> enters an error state\nand ceases to provide output, until it is able to recover\nfrom the error by reseeding itself. For more details on\nreseeding and error recovery, see\n<b><small>EVP_RAND</small></b> (7).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For values that\nshould remain secret, you can use <a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a>\ninstead. This method does not provide &rsquo;better&rsquo;\nrandomness, it uses the same type of <small>CSPRNG.</small>\nThe intention behind using a dedicated <small>CSPRNG</small>\nexclusively for private values is that none of its output\nshould be visible to an attacker (e.g., used as salt value),\nin order to reveal as little information as possible about\nits internal state, and that a compromise of the\n&quot;public&quot; <small>CSPRNG</small> instance will not\naffect the secrecy of these private values.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the rare\ncase where the default implementation does not satisfy your\nspecial requirements, the default <small>RAND</small>\ninternals can be replaced by your own\n<b><small>EVP_RAND</small></b> (3) objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Changing the\ndefault random generator should be necessary only in\nexceptional cases and is not recommended, unless you have a\nprofound knowledge of cryptographic principles and\nunderstand the implications of your changes.</p>\n\n<h2>DEFAULT SETUP\n<a name=\"DEFAULT SETUP\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The default\nOpenSSL <small>RAND</small> method is based on the\n<small>EVP_RAND</small> deterministic random bit generator (\n<small>DRBG</small> ) classes. A <small>DRBG</small> is a\ncertain type of cryptographically-secure pseudo-random\nnumber generator ( <small>CSPRNG</small> ), which is\ndescribed in [ <small>NIST SP 800-90A</small> Rev. 1].</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/RAND_bytes\">RAND_bytes(3)</a>,\n<a href=\"https://man.page/3/RAND_priv_bytes\">RAND_priv_bytes(3)</a>, <b><small>EVP_RAND</small></b>\n(3), <a href=\"https://man.page/3/RAND_get0_primary\">RAND_get0_primary(3)</a>,\n<b><small>EVP_RAND</small></b> (7)</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2018-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#DEFAULT SETUP\">DEFAULT SETUP</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}