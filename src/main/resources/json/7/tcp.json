{"name":"tcp","description":"tcp - TCP protocol","body":"\n\n<h1 align=\"center\">TCP</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">tcp - TCP\nprotocol</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt; <br>\n#include &lt;netinet/in.h&gt; <br>\n#include &lt;netinet/tcp.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>tcp_socket =\nsocket(AF_INET, SOCK_STREAM, 0);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is an\nimplementation of the TCP protocol defined in RFC&nbsp;793,\nRFC&nbsp;1122 and RFC&nbsp;2001 with the NewReno and SACK\nextensions. It provides a reliable, stream-oriented,\nfull-duplex connection between two sockets on top of\n<a href=\"https://man.page/7/ip\">ip(7)</a>, for both v4 and v6 versions. TCP guarantees\nthat the data arrives in order and retransmits lost packets.\nIt generates and checks a per-packet checksum to catch\ntransmission errors. TCP does not preserve record\nboundaries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A newly created\nTCP socket has no remote or local address and is not fully\nspecified. To create an outgoing TCP connection use\n<a href=\"https://man.page/2/connect\">connect(2)</a> to establish a connection to another TCP\nsocket. To receive new incoming connections, first\n<a href=\"https://man.page/2/bind\">bind(2)</a> the socket to a local address and port and\nthen call <a href=\"https://man.page/2/listen\">listen(2)</a> to put the socket into the\nlistening state. After that a new socket for each incoming\nconnection can be accepted using <a href=\"https://man.page/2/accept\">accept(2)</a>. A socket\nwhich has had <a href=\"https://man.page/2/accept\">accept(2)</a> or <a href=\"https://man.page/2/connect\">connect(2)</a>\nsuccessfully called on it is fully specified and may\ntransmit data. Data cannot be transmitted on listening or\nnot yet connected sockets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux supports\nRFC&nbsp;1323 TCP high performance extensions. These include\nProtection Against Wrapped Sequence Numbers (PAWS), Window\nScaling and Timestamps. Window scaling allows the use of\nlarge (&gt; 64&nbsp;kB) TCP windows in order to support\nlinks with high latency or bandwidth. To make use of them,\nthe send and receive buffer sizes must be increased. They\ncan be set globally with the\n<i>/proc/sys/net/ipv4/tcp_wmem</i> and\n<i>/proc/sys/net/ipv4/tcp_rmem</i> files, or on individual\nsockets by using the <b>SO_SNDBUF</b> and <b>SO_RCVBUF</b>\nsocket options with the <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The maximum\nsizes for socket buffers declared via the <b>SO_SNDBUF</b>\nand <b>SO_RCVBUF</b> mechanisms are limited by the values in\nthe <i>/proc/sys/net/core/rmem_max</i> and\n<i>/proc/sys/net/core/wmem_max</i> files. Note that TCP\nactually allocates twice the size of the buffer requested in\nthe <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> call, and so a succeeding\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> call will not return the same size of\nbuffer as requested in the <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> call. TCP\nuses the extra space for administrative purposes and\ninternal kernel structures, and the <i>/proc</i> file values\nreflect the larger sizes compared to the actual TCP windows.\nOn individual connections, the socket buffer size must be\nset prior to the <a href=\"https://man.page/2/listen\">listen(2)</a> or <a href=\"https://man.page/2/connect\">connect(2)</a> calls\nin order to have it take effect. See <a href=\"https://man.page/7/socket\">socket(7)</a> for\nmore information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">TCP supports\nurgent data. Urgent data is used to signal the receiver that\nsome important message is part of the data stream and that\nit should be processed as soon as possible. To send urgent\ndata specify the <b>MSG_OOB</b> option to <a href=\"https://man.page/2/send\">send(2)</a>.\nWhen urgent data is received, the kernel sends a\n<b>SIGURG</b> signal to the process or process group that\nhas been set as the socket &quot;owner&quot; using the\n<b>SIOCSPGRP</b> or <b>FIOSETOWN</b> ioctls (or the\nPOSIX.1-specified <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> <b>F_SETOWN</b>\noperation). When the <b>SO_OOBINLINE</b> socket option is\nenabled, urgent data is put into the normal data stream (a\nprogram can test for its location using the\n<b>SIOCATMARK</b> ioctl described below), otherwise it can\nbe received only when the <b>MSG_OOB</b> flag is set for\n<a href=\"https://man.page/2/recv\">recv(2)</a> or <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When\nout-of-band data is present, <a href=\"https://man.page/2/select\">select(2)</a> indicates the\nfile descriptor as having an exceptional condition and\n<i>poll (2)</i> indicates a <b>POLLPRI</b> event.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux 2.4\nintroduced a number of changes for improved throughput and\nscaling, as well as enhanced functionality. Some of these\nfeatures include support for zero-copy <a href=\"https://man.page/2/sendfile\">sendfile(2)</a>,\nExplicit Congestion Notification, new management of\nTIME_WAIT sockets, keep-alive socket options and support for\nDuplicate SACK extensions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Address\nformats</b> <br>\nTCP is built on top of IP (see <a href=\"https://man.page/7/ip\">ip(7)</a>). The address\nformats defined by <a href=\"https://man.page/7/ip\">ip(7)</a> apply to TCP. TCP supports\npoint-to-point communication only; broadcasting and\nmulticasting are not supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\ninterfaces</b> <br>\nSystem-wide TCP parameter settings can be accessed by files\nin the directory <i>/proc/sys/net/ipv4/</i>. In addition,\nmost IP <i>/proc</i> interfaces also apply to TCP; see\n<a href=\"https://man.page/7/ip\">ip(7)</a>. Variables described as <i>Boolean</i> take an\ninteger value, with a nonzero value (&quot;true&quot;)\nmeaning that the corresponding option is enabled, and a zero\nvalue (&quot;false&quot;) meaning that the option is\ndisabled. <i><br>\ntcp_abc</i> (Integer; default: 0; Linux 2.6.15 to Linux\n3.8)</p>\n\n<p style=\"margin-left:22%;\">Control the Appropriate Byte\nCount (ABC), defined in RFC 3465. ABC is a way of increasing\nthe congestion window (<i>cwnd</i>) more slowly in response\nto partial acknowledgments. Possible values are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>increase <i>cwnd</i> once per acknowledgment (no\nABC)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>increase <i>cwnd</i> once per acknowledgment of full\nsized segment</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>allow increase <i>cwnd</i> by two if acknowledgment is\nof two segments to compensate for delayed\nacknowledgments.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>tcp_abort_on_overflow</i>\n(Boolean; default: disabled; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Enable resetting connections if\nthe listening service is too slow and unable to keep up and\naccept them. It means that if overflow occurred due to a\nburst, the connection will recover. Enable this option\n<i>only</i> if you are really sure that the listening daemon\ncannot be tuned to accept connections faster. Enabling this\noption can harm the clients of your server.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_adv_win_scale</i>\n(integer; default: 2; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Count buffering overhead as\n<i>bytes/2^tcp_adv_win_scale</i>, if\n<i>tcp_adv_win_scale</i> is greater than 0; or\n<i>bytes-bytes/2^(-tcp_adv_win_scale)</i>, if\n<i>tcp_adv_win_scale</i> is less than or equal to zero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The socket\nreceive buffer space is shared between the application and\nkernel. TCP maintains part of the buffer as the TCP window,\nthis is the size of the receive window advertised to the\nother end. The rest of the space is used as the\n&quot;application&quot; buffer, used to isolate the network\nfrom scheduling and application latencies. The\n<i>tcp_adv_win_scale</i> default value of 2 implies that the\nspace used for the application buffer is one fourth that of\nthe total.</p>\n\n\n<p style=\"margin-left:11%;\"><i>tcp_allowed_congestion_control</i>\n(String; default: see text; since Linux <br>\n2.4.20)</p>\n\n<p style=\"margin-left:22%;\">Show/set the congestion control\nalgorithm choices available to unprivileged processes (see\nthe description of the <b>TCP_CONGESTION</b> socket option).\nThe items in the list are separated by white space and\nterminated by a newline character. The list is a subset of\nthose listed in <i>tcp_available_congestion_control</i>. The\ndefault value for this list is &quot;reno&quot; plus the\ndefault setting of <i>tcp_congestion_control</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_autocorking</i>\n(Boolean; default: enabled; since Linux 3.14)</p>\n\n<p style=\"margin-left:22%;\">If this option is enabled, the\nkernel tries to coalesce small writes (from consecutive\n<a href=\"https://man.page/2/write\">write(2)</a> and <a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a> calls) as much as\npossible, in order to decrease the total number of sent\npackets. Coalescing is done if at least one prior packet for\nthe flow is waiting in Qdisc queues or device transmit\nqueue. Applications can still use the <b>TCP_CORK</b> socket\noption to obtain optimal behavior when they know how/when to\nuncork their sockets.</p>\n\n\n<p style=\"margin-left:11%;\"><i>tcp_available_congestion_control</i>\n(String; read-only; since Linux <br>\n2.4.20)</p>\n\n<p style=\"margin-left:22%;\">Show a list of the\ncongestion-control algorithms that are registered. The items\nin the list are separated by white space and terminated by a\nnewline character. This list is a limiting set for the list\nin <i>tcp_allowed_congestion_control</i>. More\ncongestion-control algorithms may be available as modules,\nbut not loaded.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_app_win</i> (integer;\ndefault: 31; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">This variable defines how many\nbytes of the TCP window are reserved for buffering\noverhead.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A maximum of\n(<i>window/2^tcp_app_win</i>, mss) bytes in the window are\nreserved for the application buffer. A value of 0 implies\nthat no amount is reserved.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_base_mss</i> (Integer;\ndefault: 512; since Linux 2.6.17)</p>\n\n<p style=\"margin-left:22%;\">The initial value of\n<i>search_low</i> to be used by the packetization layer Path\nMTU discovery (MTU probing). If MTU probing is enabled, this\nis the initial MSS used by the connection.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_bic</i> (Boolean;\ndefault: disabled; Linux 2.4.27/2.6.6 to 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">Enable BIC TCP congestion\ncontrol algorithm. BIC-TCP is a sender-side-only change that\nensures a linear RTT fairness under large windows while\noffering both scalability and bounded TCP-friendliness. The\nprotocol combines two schemes called additive increase and\nbinary search increase. When the congestion window is large,\nadditive increase with a large increment ensures linear RTT\nfairness as well as good scalability. Under small congestion\nwindows, binary search increase provides TCP\nfriendliness.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_bic_low_window</i>\n(integer; default: 14; Linux 2.4.27/2.6.6 to 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">Set the threshold window (in\npackets) where BIC TCP starts to adjust the congestion\nwindow. Below this threshold BIC TCP behaves the same as the\ndefault TCP Reno.</p>\n\n\n<p style=\"margin-left:11%;\"><i>tcp_bic_fast_convergence</i>\n(Boolean; default: enabled; Linux 2.4.27/2.6.6 <br>\nto 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">Force BIC TCP to more quickly\nrespond to changes in congestion window. Allows two flows\nsharing the same connection to converge more rapidly.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_congestion_control</i>\n(String; default: see text; since Linux 2.4.13)</p>\n\n<p style=\"margin-left:22%;\">Set the default\ncongestion-control algorithm to be used for new connections.\nThe algorithm &quot;reno&quot; is always available, but\nadditional choices may be available depending on kernel\nconfiguration. The default value for this file is set as\npart of kernel configuration.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_dma_copybreak</i>\n(integer; default: 4096; since Linux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">Lower limit, in bytes, of the\nsize of socket reads that will be offloaded to a DMA copy\nengine, if one is present in the system and the kernel was\nconfigured with the <b>CONFIG_NET_DMA</b> option.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_dsack</i> (Boolean;\ndefault: enabled; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Enable RFC&nbsp;2883 TCP\nDuplicate SACK support.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_ecn</i> (Integer;\ndefault: see below; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Enable RFC&nbsp;3168 Explicit\nCongestion Notification.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file can\nhave one of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Disable ECN. Neither initiate nor accept ECN. This was\nthe default up to and including Linux 2.6.30.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Enable ECN when requested by incoming connections and\nalso request ECN on outgoing connection attempts.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"9%\"></td>\n<td width=\"68%\">\n\n\n<p>Enable ECN when requested by incoming connections, but\ndo not request ECN on outgoing connections. This value is\nsupported, and is the default, since Linux 2.6.31.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When enabled,\nconnectivity to some destinations could be affected due to\nolder, misbehaving middle boxes along the path, causing\nconnections to be dropped. However, to facilitate and\nencourage deployment with option 1, and to work around such\nbuggy equipment, the <b>tcp_ecn_fallback</b> option has been\nintroduced.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_ecn_fallback</i>\n(Boolean; default: enabled; since Linux 4.1)</p>\n\n<p style=\"margin-left:22%;\">Enable RFC&nbsp;3168, Section\n6.1.1.1. fallback. When enabled, outgoing ECN-setup SYNs\nthat time out within the normal SYN retransmission timeout\nwill be resent with CWR and ECE cleared.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_fack</i> (Boolean;\ndefault: enabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Enable TCP Forward\nAcknowledgement support.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_fin_timeout</i>\n(integer; default: 60; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This specifies how many seconds\nto wait for a final FIN packet before the socket is forcibly\nclosed. This is strictly a violation of the TCP\nspecification, but required to prevent denial-of-service\nattacks. In Linux 2.2, the default value was 180.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_frto</i> (integer;\ndefault: see below; since Linux 2.4.21/2.6)</p>\n\n<p style=\"margin-left:22%;\">Enable F-RTO, an enhanced\nrecovery algorithm for TCP retransmission timeouts (RTOs).\nIt is particularly beneficial in wireless environments where\npacket loss is typically due to random radio interference\nrather than intermediate router congestion. See RFC 4138 for\nmore details.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This file can\nhave one of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Disabled. This was the default up to and including Linux\n2.6.23.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>The basic version F-RTO algorithm is enabled.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Enable SACK-enhanced F-RTO if flow uses SACK. The basic\nversion can be used also when SACK is in use though in that\ncase scenario(s) exists where F-RTO interacts badly with the\npacket counting of the SACK-enabled TCP flow. This value is\nthe default since Linux 2.6.24.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n2.6.22, this parameter was a Boolean value, supporting just\nvalues 0 and 1 above.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_frto_response</i>\n(integer; default: 0; since Linux 2.6.22)</p>\n\n<p style=\"margin-left:22%;\">When F-RTO has detected that a\nTCP retransmission timeout was spurious (i.e., the timeout\nwould have been avoided had TCP set a longer retransmission\ntimeout), TCP has several options concerning what to do\nnext. Possible values are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Rate halving based; a smooth and conservative response,\nresults in halved congestion window (<i>cwnd</i>) and\nslow-start threshold (<i>ssthresh</i>) after one RTT.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Very conservative response; not recommended because even\nthough being valid, it interacts poorly with the rest of\nLinux TCP; halves <i>cwnd</i> and <i>ssthresh</i>\nimmediately.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Aggressive response; undoes congestion-control measures\nthat are now known to be unnecessary (ignoring the\npossibility of a lost retransmission that would require TCP\nto be more cautious); <i>cwnd</i> and <i>ssthresh</i> are\nrestored to the values prior to timeout.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>tcp_keepalive_intvl</i>\n(integer; default: 75; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The number of seconds between\nTCP keep-alive probes.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_keepalive_probes</i>\n(integer; default: 9; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of TCP\nkeep-alive probes to send before giving up and killing the\nconnection if no response is obtained from the other\nend.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_keepalive_time</i>\n(integer; default: 7200; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The number of seconds a\nconnection needs to be idle before TCP begins sending out\nkeep-alive probes. Keep-alives are sent only when the\n<b>SO_KEEPALIVE</b> socket option is enabled. The default\nvalue is 7200 seconds (2 hours). An idle connection is\nterminated after approximately an additional 11 minutes (9\nprobes an interval of 75 seconds apart) when keep-alive is\nenabled.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that\nunderlying connection tracking mechanisms and application\ntimeouts may be much shorter.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_low_latency</i>\n(Boolean; default: disabled; since Linux 2.4.21/2.6; <br>\nobsolete since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">If enabled, the TCP stack makes\ndecisions that prefer lower latency as opposed to higher\nthroughput. It this option is disabled, then higher\nthroughput is preferred. An example of an application where\nthis default should be changed would be a Beowulf compute\ncluster. Since Linux 4.14, this file still exists, but its\nvalue is ignored.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_max_orphans</i>\n(integer; default: see below; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of orphaned\n(not attached to any user file handle) TCP sockets allowed\nin the system. When this number is exceeded, the orphaned\nconnection is reset and a warning is printed. This limit\nexists only to prevent simple denial-of-service attacks.\nLowering this limit is not recommended. Network conditions\nmight require you to increase the number of orphans allowed,\nbut note that each orphan can eat up to ~64&nbsp;kB of\nunswappable memory. The default initial value is set equal\nto the kernel parameter NR_FILE. This initial default is\nadjusted depending on the memory in the system.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_max_syn_backlog</i>\n(integer; default: see below; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of queued\nconnection requests which have still not received an\nacknowledgement from the connecting client. If this number\nis exceeded, the kernel will begin dropping requests. The\ndefault value of 256 is increased to 1024 when the memory\npresent in the system is adequate or greater (&gt;=\n128&nbsp;MB), and reduced to 128 for those systems with very\nlow memory (&lt;= 32&nbsp;MB).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Prior to Linux\n2.6.20, it was recommended that if this needed to be\nincreased above 1024, the size of the SYNACK hash table\n(<b>TCP_SYNQ_HSIZE</b>) in <i>include/net/tcp.h</i> should\nbe modified to keep</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">TCP_SYNQ_HSIZE\n* 16 &lt;= tcp_max_syn_backlog</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">and the kernel\nshould be recompiled. In Linux 2.6.20, the fixed sized\n<b>TCP_SYNQ_HSIZE</b> was removed in favor of dynamic\nsizing.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_max_tw_buckets</i>\n(integer; default: see below; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of sockets\nin TIME_WAIT state allowed in the system. This limit exists\nonly to prevent simple denial-of-service attacks. The\ndefault value of NR_FILE*2 is adjusted depending on the\nmemory in the system. If this number is exceeded, the socket\nis closed and a warning is printed.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_moderate_rcvbuf</i>\n(Boolean; default: enabled; since Linux <br>\n2.4.17/2.6.7)</p>\n\n<p style=\"margin-left:22%;\">If enabled, TCP performs\nreceive buffer auto-tuning, attempting to automatically size\nthe buffer (no greater than <i>tcp_rmem[2]</i>) to match the\nsize required by the path for full throughput.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_mem</i> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">This is a vector of 3 integers:\n[low, pressure, high]. These bounds, measured in units of\nthe system page size, are used by TCP to track its memory\nusage. The defaults are calculated at boot time from the\namount of available memory. (TCP can only use <i>low\nmemory</i> for this, which is limited to around 900\nmegabytes on 32-bit systems. 64-bit systems do not suffer\nthis limitation.)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>low</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>TCP doesn&rsquo;t regulate its memory allocation when\nthe number of pages it has allocated globally is below this\nnumber.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>pressure</i></p>\n\n<p style=\"margin-left:32%;\">When the amount of memory\nallocated by TCP exceeds this number of pages, TCP moderates\nits memory consumption. This memory pressure state is exited\nonce the number of pages allocated falls below the\n<i>low</i> mark.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"6%\">\n\n\n<p><i>high</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum number of pages, globally, that TCP will\nallocate. This value overrides any other limits imposed by\nthe kernel.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>tcp_mtu_probing</i>\n(integer; default: 0; since Linux 2.6.17)</p>\n\n<p style=\"margin-left:22%;\">This parameter controls TCP\nPacketization-Layer Path MTU Discovery. The following values\nmay be assigned to the file:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Disabled</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Disabled by default, enabled when an ICMP black hole\ndetected</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Always enabled, use initial MSS of\n<i>tcp_base_mss</i>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>tcp_no_metrics_save</i>\n(Boolean; default: disabled; since Linux 2.6.6)</p>\n\n<p style=\"margin-left:22%;\">By default, TCP saves various\nconnection metrics in the route cache when the connection\ncloses, so that connections established in the near future\ncan use these to set initial conditions. Usually, this\nincreases overall performance, but it may sometimes cause\nperformance degradation. If <i>tcp_no_metrics_save</i> is\nenabled, TCP will not cache metrics on closing\nconnections.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_orphan_retries</i>\n(integer; default: 8; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of attempts\nmade to probe the other end of a connection which has been\nclosed by our end.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_reordering</i> (integer;\ndefault: 3; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The maximum a packet can be\nreordered in a TCP packet stream without TCP assuming packet\nloss and going into slow start. It is not advisable to\nchange this number. This is a packet reordering detection\nmetric designed to minimize unnecessary back off and\nretransmits provoked by reordering of packets on a\nconnection.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_retrans_collapse</i>\n(Boolean; default: enabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Try to send full-sized packets\nduring retransmit.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_retries1</i> (integer;\ndefault: 3; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The number of times TCP will\nattempt to retransmit a packet on an established connection\nnormally, without the extra effort of getting the network\nlayers involved. Once we exceed this number of retransmits,\nwe first have the network layer update the route if possible\nbefore each new retransmit. The default is the RFC specified\nminimum of 3.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_retries2</i> (integer;\ndefault: 15; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of times a\nTCP packet is retransmitted in established state before\ngiving up. The default value is 15, which corresponds to a\nduration of approximately between 13 to 30 minutes,\ndepending on the retransmission timeout. The RFC&nbsp;1122\nspecified minimum limit of 100 seconds is typically deemed\ntoo short.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_rfc1337</i> (Boolean;\ndefault: disabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Enable TCP behavior conformant\nwith RFC&nbsp;1337. When disabled, if a RST is received in\nTIME_WAIT state, we close the socket immediately without\nwaiting for the end of the TIME_WAIT period.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_rmem</i> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">This is a vector of 3 integers:\n[min, default, max]. These parameters are used by TCP to\nregulate receive buffer sizes. TCP dynamically adjusts the\nsize of the receive buffer from the defaults listed below,\nin the range of these values, depending on memory available\nin the system.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>min</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>minimum size of the receive buffer used by each TCP\nsocket. The default value is the system page size. (On Linux\n2.4, the default value is 4&nbsp;kB, lowered to\n<b>PAGE_SIZE</b> bytes in low-memory systems.) This value is\nused to ensure that in memory pressure mode, allocations\nbelow this size will still succeed. This is not used to\nbound the size of the receive buffer declared using\n<b>SO_RCVBUF</b> on a socket.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>default</i></p>\n\n<p style=\"margin-left:32%;\">the default size of the receive\nbuffer for a TCP socket. This value overwrites the initial\ndefault buffer size from the generic global\n<i>net.core.rmem_default</i> defined for all protocols. The\ndefault value is 87380 bytes. (On Linux 2.4, this will be\nlowered to 43689 in low-memory systems.) If larger receive\nbuffer sizes are desired, this value should be increased (to\naffect all sockets). To employ large TCP windows, the\n<i>net.ipv4.tcp_window_scaling</i> must be enabled\n(default).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>max</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>the maximum size of the receive buffer used by each TCP\nsocket. This value does not override the global\n<i>net.core.rmem_max</i>. This is not used to limit the size\nof the receive buffer declared using <b>SO_RCVBUF</b> on a\nsocket. The default value is calculated using the\nformula</p> </td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">max(87380,\nmin(4&nbsp;MB, <i>tcp_mem</i>[1]*PAGE_SIZE/128))</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">(On Linux 2.4,\nthe default is 87380*2 bytes, lowered to 87380 in low-memory\nsystems).</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_sack</i> (Boolean;\ndefault: enabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Enable RFC&nbsp;2018 TCP\nSelective Acknowledgements.</p>\n\n\n<p style=\"margin-left:11%;\"><i>tcp_slow_start_after_idle</i>\n(Boolean; default: enabled; since Linux <br>\n2.6.18)</p>\n\n<p style=\"margin-left:22%;\">If enabled, provide RFC 2861\nbehavior and time out the congestion window after an idle\nperiod. An idle period is defined as the current RTO\n(retransmission timeout). If disabled, the congestion window\nwill not be timed out after an idle period.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_stdurg</i> (Boolean;\ndefault: disabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">If this option is enabled, then\nuse the RFC&nbsp;1122 interpretation of the TCP\nurgent-pointer field. According to this interpretation, the\nurgent pointer points to the last byte of urgent data. If\nthis option is disabled, then use the BSD-compatible\ninterpretation of the urgent pointer: the urgent pointer\npoints to the first byte after the urgent data. Enabling\nthis option may lead to interoperability problems.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_syn_retries</i>\n(integer; default: 6; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of times\ninitial SYNs for an active TCP connection attempt will be\nretransmitted. This value should not be higher than 255. The\ndefault value is 6, which corresponds to retrying for up to\napproximately 127 seconds. Before Linux 3.7, the default\nvalue was 5, which (in conjunction with calculation based on\nother kernel parameters) corresponded to approximately 180\nseconds.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_synack_retries</i>\n(integer; default: 5; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of times a\nSYN/ACK segment for a passive TCP connection will be\nretransmitted. This number should not be higher than\n255.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_syncookies</i> (integer;\ndefault: 1; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Enable TCP syncookies. The\nkernel must be compiled with <b>CONFIG_SYN_COOKIES</b>. The\nsyncookies feature attempts to protect a socket from a SYN\nflood attack. This should be used as a last resort, if at\nall. This is a violation of the TCP protocol, and conflicts\nwith other areas of TCP such as TCP extensions. It can cause\nproblems for clients and relays. It is not recommended as a\ntuning mechanism for heavily loaded servers to help with\noverloaded or misconfigured conditions. For recommended\nalternatives see <i>tcp_max_syn_backlog</i>,\n<i>tcp_synack_retries</i>, and <i>tcp_abort_on_overflow</i>.\nSet to one of the following values:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Disable TCP syncookies.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Send out syncookies when the syn backlog queue of a\nsocket overflows.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>(since Linux 3.12) Send out syncookies unconditionally.\nThis can be useful for network testing.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>tcp_timestamps</i> (integer;\ndefault: 1; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Set to one of the following\nvalues to enable or disable RFC&nbsp;1323 TCP\ntimestamps:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>0</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Disable timestamps.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>1</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>Enable timestamps as defined in RFC1323 and use random\noffset for each connection rather than only using the\ncurrent time.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>2</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>As for the value 1, but without random offsets. Setting\n<i>tcp_timestamps</i> to this value is meaningful since\nLinux 4.10.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>tcp_tso_win_divisor</i>\n(integer; default: 3; since Linux 2.6.9)</p>\n\n<p style=\"margin-left:22%;\">This parameter controls what\npercentage of the congestion window can be consumed by a\nsingle TCP Segmentation Offload (TSO) frame. The setting of\nthis parameter is a tradeoff between burstiness and building\nlarger TSO frames.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_tw_recycle</i> (Boolean;\ndefault: disabled; Linux 2.4 to 4.11)</p>\n\n<p style=\"margin-left:22%;\">Enable fast recycling of\nTIME_WAIT sockets. Enabling this option is not recommended\nas the remote IP may not use monotonically increasing\ntimestamps (devices behind NAT, devices with per-connection\ntimestamp offsets). See RFC 1323 (PAWS) and RFC 6191.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_tw_reuse</i> (Boolean;\ndefault: disabled; since Linux 2.4.19/2.6)</p>\n\n<p style=\"margin-left:22%;\">Allow to reuse TIME_WAIT\nsockets for new connections when it is safe from protocol\nviewpoint. It should not be changed without advice/request\nof technical experts.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_vegas_cong_avoid</i>\n(Boolean; default: disabled; Linux 2.2 to 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">Enable TCP Vegas congestion\navoidance algorithm. TCP Vegas is a sender-side-only change\nto TCP that anticipates the onset of congestion by\nestimating the bandwidth. TCP Vegas adjusts the sending rate\nby modifying the congestion window. TCP Vegas should provide\nless packet loss, but it is not as aggressive as TCP\nReno.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_westwood</i> (Boolean;\ndefault: disabled; Linux 2.4.26/2.6.3 to 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">Enable TCP Westwood+ congestion\ncontrol algorithm. TCP Westwood+ is a sender-side-only\nmodification of the TCP Reno protocol stack that optimizes\nthe performance of TCP congestion control. It is based on\nend-to-end bandwidth estimation to set congestion window and\nslow start threshold after a congestion episode. Using this\nestimation, TCP Westwood+ adaptively sets a slow start\nthreshold and a congestion window which takes into account\nthe bandwidth used at the time congestion is experienced.\nTCP Westwood+ significantly increases fairness with respect\nto TCP Reno in wired networks and throughput over wireless\nlinks.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_window_scaling</i>\n(Boolean; default: enabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Enable RFC&nbsp;1323 TCP window\nscaling. This feature allows the use of a large window (&gt;\n64&nbsp;kB) on a TCP connection, should the other end\nsupport it. Normally, the 16 bit window length field in the\nTCP header limits the window size to less than 64&nbsp;kB.\nIf larger windows are desired, applications can increase the\nsize of their socket buffers and the window scaling option\nwill be employed. If <i>tcp_window_scaling</i> is disabled,\nTCP will not negotiate the use of window scaling with the\nother end during connection setup.</p>\n\n<p style=\"margin-left:11%;\"><i>tcp_wmem</i> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">This is a vector of 3 integers:\n[min, default, max]. These parameters are used by TCP to\nregulate send buffer sizes. TCP dynamically adjusts the size\nof the send buffer from the default values listed below, in\nthe range of these values, depending on memory\navailable.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>min</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Minimum size of the send buffer used by each TCP socket.\nThe default value is the system page size. (On Linux 2.4,\nthe default value is 4&nbsp;kB.) This value is used to\nensure that in memory pressure mode, allocations below this\nsize will still succeed. This is not used to bound the size\nof the send buffer declared using <b>SO_SNDBUF</b> on a\nsocket.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>default</i></p>\n\n<p style=\"margin-left:32%;\">The default size of the send\nbuffer for a TCP socket. This value overwrites the initial\ndefault buffer size from the generic global\n<i>/proc/sys/net/core/wmem_default</i> defined for all\nprotocols. The default value is 16&nbsp;kB. If larger send\nbuffer sizes are desired, this value should be increased (to\naffect all sockets). To employ large TCP windows, the\n<i>/proc/sys/net/ipv4/tcp_window_scaling</i> must be set to\na nonzero value (default).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>max</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>The maximum size of the send buffer used by each TCP\nsocket. This value does not override the value in\n<i>/proc/sys/net/core/wmem_max</i>. This is not used to\nlimit the size of the send buffer declared using\n<b>SO_SNDBUF</b> on a socket. The default value is\ncalculated using the formula</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">max(65536,\nmin(4&nbsp;MB, <i>tcp_mem</i>[1]*PAGE_SIZE/128))</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">(On Linux 2.4,\nthe default value is 128&nbsp;kB, lowered 64&nbsp;kB\ndepending on low-memory systems.)</p>\n\n\n<p style=\"margin-left:11%;\"><i>tcp_workaround_signed_windows</i>\n(Boolean; default: disabled; since Linux <br>\n2.6.26)</p>\n\n<p style=\"margin-left:22%;\">If enabled, assume that no\nreceipt of a window-scaling option means that the remote TCP\nis broken and treats the window as a signed quantity. If\ndisabled, assume that the remote TCP is not broken even if\nwe do not receive a window scaling option from it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket\noptions</b> <br>\nTo set or get a TCP socket option, call <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>\nto read or <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> to write the option with the\noption level argument set to <b>IPPROTO_TCP</b>. Unless\notherwise noted, <i>optval</i> is a pointer to an\n<i>int</i>. In addition, most <b>IPPROTO_IP</b> socket\noptions are valid on TCP sockets. For more information see\n<a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Following is a\nlist of TCP-specific socket options. For details of some\nother socket options that are also applicable for TCP\nsockets, see <a href=\"https://man.page/7/socket\">socket(7)</a>. <b><br>\nTCP_CONGESTION</b> (since Linux 2.6.13)</p>\n\n<p style=\"margin-left:22%;\">The argument for this option is\na string. This option allows the caller to set the TCP\ncongestion control algorithm to be used, on a per-socket\nbasis. Unprivileged processes are restricted to choosing one\nof the algorithms in <i>tcp_allowed_congestion_control</i>\n(described above). Privileged processes\n(<b>CAP_NET_ADMIN</b>) can choose from any of the available\ncongestion-control algorithms (see the description of\n<i>tcp_available_congestion_control</i> above).</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_CORK</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">If set, don&rsquo;t send out\npartial frames. All queued partial frames are sent when the\noption is cleared again. This is useful for prepending\nheaders before calling <a href=\"https://man.page/2/sendfile\">sendfile(2)</a>, or for throughput\noptimization. As currently implemented, there is a 200\nmillisecond ceiling on the time for which output is corked\nby <b>TCP_CORK</b>. If this ceiling is reached, then queued\ndata is automatically transmitted. This option can be\ncombined with <b>TCP_NODELAY</b> only since Linux 2.5.71.\nThis option should not be used in code intended to be\nportable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_DEFER_ACCEPT</b> (since\nLinux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Allow a listener to be awakened\nonly when data arrives on the socket. Takes an integer value\n(seconds), this can bound the maximum number of attempts TCP\nwill make to complete the connection. This option should not\nbe used in code intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_INFO</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">Used to collect information\nabout this socket. The kernel returns a <i>struct\ntcp_info</i> as defined in the file\n<i>/usr/include/linux/tcp.h</i>. This option should not be\nused in code intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_KEEPCNT</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">The maximum number of keepalive\nprobes TCP should send before dropping the connection. This\noption should not be used in code intended to be\nportable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_KEEPIDLE</b> (since\nLinux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The time (in seconds) the\nconnection needs to remain idle before TCP starts sending\nkeepalive probes, if the socket option <b>SO_KEEPALIVE</b>\nhas been set on this socket. This option should not be used\nin code intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_KEEPINTVL</b> (since\nLinux 2.4)</p>\n\n<p style=\"margin-left:22%;\">The time (in seconds) between\nindividual keepalive probes. This option should not be used\nin code intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_LINGER2</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">The lifetime of orphaned\nFIN_WAIT2 state sockets. This option can be used to override\nthe system-wide setting in the file\n<i>/proc/sys/net/ipv4/tcp_fin_timeout</i> for this socket.\nThis is not to be confused with the <a href=\"https://man.page/7/socket\">socket(7)</a> level\noption <b>SO_LINGER</b>. This option should not be used in\ncode intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_MAXSEG</b></p>\n\n<p style=\"margin-left:22%;\">The maximum segment size for\noutgoing TCP packets. In Linux 2.2 and earlier, and in Linux\n2.6.28 and later, if this option is set before connection\nestablishment, it also changes the MSS value announced to\nthe other end in the initial packet. Values greater than the\n(eventual) interface MTU have no effect. TCP will also\nimpose its minimum and maximum bounds over the value\nprovided.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_NODELAY</b></p>\n\n<p style=\"margin-left:22%;\">If set, disable the Nagle\nalgorithm. This means that segments are always sent as soon\nas possible, even if there is only a small amount of data.\nWhen not set, data is buffered until there is a sufficient\namount to send out, thereby avoiding the frequent sending of\nsmall packets, which results in poor utilization of the\nnetwork. This option is overridden by <b>TCP_CORK</b>;\nhowever, setting this option forces an explicit flush of\npending output, even if <b>TCP_CORK</b> is currently\nset.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_QUICKACK</b> (since\nLinux 2.4.4)</p>\n\n<p style=\"margin-left:22%;\">Enable quickack mode if set or\ndisable quickack mode if cleared. In quickack mode, acks are\nsent immediately, rather than delayed if needed in\naccordance to normal TCP operation. This flag is not\npermanent, it only enables a switch to or from quickack\nmode. Subsequent operation of the TCP protocol will once\nagain enter/leave quickack mode depending on internal\nprotocol processing and factors such as delayed ack timeouts\noccurring and data transfer. This option should not be used\nin code intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_SYNCNT</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">Set the number of SYN\nretransmits that TCP should send before aborting the attempt\nto connect. It cannot exceed 255. This option should not be\nused in code intended to be portable.</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_USER_TIMEOUT</b> (since\nLinux 2.6.37)</p>\n\n<p style=\"margin-left:22%;\">This option takes an\n<i>unsigned int</i> as an argument. When the value is\ngreater than 0, it specifies the maximum amount of time in\nmilliseconds that transmitted data may remain unacknowledged\nbefore TCP will forcibly close the corresponding connection\nand return <b>ETIMEDOUT</b> to the application. If the\noption value is specified as 0, TCP will use the system\ndefault.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Increasing user\ntimeouts allows a TCP connection to survive extended periods\nwithout end-to-end connectivity. Decreasing user timeouts\nallows applications to &quot;fail fast&quot;, if so desired.\nOtherwise, failure may take up to 20 minutes with the\ncurrent system defaults in a normal WAN environment.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option can\nbe set during any state of a TCP connection, but is\neffective only during the synchronized states of a\nconnection (ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT,\nCLOSING, and LAST-ACK). Moreover, when used with the TCP\nkeepalive (<b>SO_KEEPALIVE</b>) option,\n<b>TCP_USER_TIMEOUT</b> will override keepalive to determine\nwhen to close a connection due to keepalive failure.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The option has\nno effect on when TCP retransmits a packet, nor when a\nkeepalive probe is sent.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option,\nlike many others, will be inherited by the socket returned\nby <a href=\"https://man.page/2/accept\">accept(2)</a>, if it was set on the listening\nsocket.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Further details\non the user timeout feature can be found in RFC&nbsp;793 and\nRFC&nbsp;5482 (&quot;TCP User Timeout Option&quot;).</p>\n\n<p style=\"margin-left:11%;\"><b>TCP_WINDOW_CLAMP</b> (since\nLinux 2.4)</p>\n\n<p style=\"margin-left:22%;\">Bound the size of the\nadvertised window to this value. The kernel imposes a\nminimum size of SOCK_MIN_RCVBUF/2. This option should not be\nused in code intended to be portable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Sockets\nAPI</b> <br>\nTCP provides limited support for out-of-band data, in the\nform of (a single byte of) urgent data. In Linux this means\nif the other end sends newer out-of-band data the older\nurgent data is inserted as normal data into the stream (even\nwhen <b>SO_OOBINLINE</b> is not set). This differs from\nBSD-based stacks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux uses the\nBSD compatible interpretation of the urgent pointer field by\ndefault. This violates RFC&nbsp;1122, but is required for\ninteroperability with other stacks. It can be changed via\n<i>/proc/sys/net/ipv4/tcp_stdurg</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nto peek at out-of-band data using the <a href=\"https://man.page/2/recv\">recv(2)</a>\n<b>MSG_PEEK</b> flag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since version\n2.4, Linux supports the use of <b>MSG_TRUNC</b> in the\n<i>flags</i> argument of <a href=\"https://man.page/2/recv\">recv(2)</a> (and\n<a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>). This flag causes the received bytes of\ndata to be discarded, rather than passed back in a\ncaller-supplied buffer. Since Linux 2.4.4, <b>MSG_TRUNC</b>\nalso has this effect when used in conjunction with\n<b>MSG_OOB</b> to receive out-of-band data.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Ioctls</b>\n<br>\nThe following <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> calls return information in\n<i>value</i>. The correct syntax is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>int</b>\n<i>value</i><b>;</b> <i><br>\nerror</i> <b>= ioctl(</b><i>tcp_socket</i><b>,</b>\n<i>ioctl_type</i><b>, &amp;</b><i>value</i><b>);</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>ioctl_type</i>\nis one of the following: <b><br>\nSIOCINQ</b></p>\n\n<p style=\"margin-left:22%;\">Returns the amount of queued\nunread data in the receive buffer. The socket must not be in\nLISTEN state, otherwise an error (<b>EINVAL</b>) is\nreturned. <b>SIOCINQ</b> is defined in\n<i>&lt;linux/sockios.h&gt;</i>. Alternatively, you can use\nthe synonymous <b>FIONREAD</b>, defined in\n<i>&lt;sys/ioctl.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>SIOCATMARK</b></p>\n\n<p style=\"margin-left:22%;\">Returns true (i.e.,\n<i>value</i> is nonzero) if the inbound data stream is at\nthe urgent mark.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\n<b>SO_OOBINLINE</b> socket option is set, and\n<b>SIOCATMARK</b> returns true, then the next read from the\nsocket will return the urgent data. If the\n<b>SO_OOBINLINE</b> socket option is not set, and\n<b>SIOCATMARK</b> returns true, then the next read from the\nsocket will return the bytes following the urgent data (to\nactually read the urgent data requires the\n<b>recv(MSG_OOB)</b> flag).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that a\nread never reads across the urgent mark. If an application\nis informed of the presence of urgent data via\n<a href=\"https://man.page/2/select\">select(2)</a> (using the <i>exceptfds</i> argument) or\nthrough delivery of a <b>SIGURG</b> signal, then it can\nadvance up to the mark using a loop which repeatedly tests\n<b>SIOCATMARK</b> and performs a read (requesting any number\nof bytes) as long as <b>SIOCATMARK</b> returns false.</p>\n\n<p style=\"margin-left:11%;\"><b>SIOCOUTQ</b></p>\n\n<p style=\"margin-left:22%;\">Returns the amount of unsent\ndata in the socket send queue. The socket must not be in\nLISTEN state, otherwise an error (<b>EINVAL</b>) is\nreturned. <b>SIOCOUTQ</b> is defined in\n<i>&lt;linux/sockios.h&gt;</i>. Alternatively, you can use\nthe synonymous <b>TIOCOUTQ</b>, defined in\n<i>&lt;sys/ioctl.h&gt;</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Error\nhandling</b> <br>\nWhen a network error occurs, TCP tries to resend the packet.\nIf it doesn&rsquo;t succeed after some time, either\n<b>ETIMEDOUT</b> or the last received error on this\nconnection is reported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some\napplications require a quicker error notification. This can\nbe enabled with the <b>IPPROTO_IP</b> level\n<b>IP_RECVERR</b> socket option. When this option is\nenabled, all incoming errors are immediately passed to the\nuser program. Use this option with care &mdash; it makes TCP\nless tolerant to routing changes and other normal network\nconditions.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>EAFNOTSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\">Passed socket address type in\n<i>sin_family</i> was not <b>AF_INET</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPIPE</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The other end closed the socket unexpectedly or a read\nis executed on a shut down socket.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ETIMEDOUT</b></p>\n\n<p style=\"margin-left:22%;\">The other end didn&rsquo;t\nacknowledge retransmitted data after some time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any errors\ndefined for <a href=\"https://man.page/7/ip\">ip(7)</a> or the generic socket layer may\nalso be returned for TCP.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Support for\nExplicit Congestion Notification, zero-copy\n<a href=\"https://man.page/2/sendfile\">sendfile(2)</a>, reordering support and some SACK\nextensions (DSACK) were introduced in 2.4. Support for\nforward acknowledgement (FACK), TIME_WAIT recycling, and\nper-connection keepalive socket options were introduced in\n2.3.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Not all errors\nare documented.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IPv6 is not\ndescribed.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/accept\">accept(2)</a>,\n<a href=\"https://man.page/2/bind\">bind(2)</a>, <a href=\"https://man.page/2/connect\">connect(2)</a>, <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>,\n<a href=\"https://man.page/2/listen\">listen(2)</a>, <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>, <a href=\"https://man.page/2/sendfile\">sendfile(2)</a>,\n<a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>, <a href=\"https://man.page/2/socket\">socket(2)</a>, <a href=\"https://man.page/7/ip\">ip(7)</a>,\n<a href=\"https://man.page/7/socket\">socket(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource file\n<i>Documentation/networking/ip-sysctl.txt</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC&nbsp;793\nfor the TCP specification. <br>\nRFC&nbsp;1122 for the TCP requirements and a description of\nthe Nagle algorithm. <br>\nRFC&nbsp;1323 for TCP timestamp and window scaling options.\n<br>\nRFC&nbsp;1337 for a description of TIME_WAIT assassination\nhazards. <br>\nRFC&nbsp;3168 for a description of Explicit Congestion\nNotification. <br>\nRFC&nbsp;2581 for TCP congestion control algorithms. <br>\nRFC&nbsp;2018 and RFC&nbsp;2883 for SACK and extensions to\nSACK.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}