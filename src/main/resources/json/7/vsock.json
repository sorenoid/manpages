{"name":"vsock","description":"vsock - Linux VSOCK address family","body":"\n\n<h1 align=\"center\">VSOCK</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">vsock - Linux\nVSOCK address family</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt; <br>\n#include &lt;linux/vm_sockets.h&gt;</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>stream_socket</i>\n<b>= socket(AF_VSOCK, SOCK_STREAM, 0);</b> <i><br>\ndatagram_socket</i> <b>= socket(AF_VSOCK, SOCK_DGRAM,\n0);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The VSOCK\naddress family facilitates communication between virtual\nmachines and the host they are running on. This address\nfamily is used by guest agents and hypervisor services that\nneed a communications channel that is independent of virtual\nmachine network configuration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Valid socket\ntypes are <b>SOCK_STREAM</b> and <b>SOCK_DGRAM</b>.\n<b>SOCK_STREAM</b> provides connection-oriented byte streams\nwith guaranteed, in-order delivery. <b>SOCK_DGRAM</b>\nprovides a connectionless datagram packet service with\nbest-effort delivery and best-effort ordering. Availability\nof these socket types is dependent on the underlying\nhypervisor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A new socket is\ncreated with</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">socket(AF_VSOCK,\nsocket_type, 0);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a process\nwants to establish a connection, it calls <a href=\"https://man.page/2/connect\">connect(2)</a>\nwith a given destination socket address. The socket is\nautomatically bound to a free port if unbound.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A process can\nlisten for incoming connections by first binding to a socket\naddress using <a href=\"https://man.page/2/bind\">bind(2)</a> and then calling\n<a href=\"https://man.page/2/listen\">listen(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Data is\ntransmitted using the <a href=\"https://man.page/2/send\">send(2)</a> or <a href=\"https://man.page/2/write\">write(2)</a>\nfamilies of system calls and data is received using the\n<a href=\"https://man.page/2/recv\">recv(2)</a> or <a href=\"https://man.page/2/read\">read(2)</a> families of system\ncalls.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Address\nformat</b> <br>\nA socket address is defined as a combination of a 32-bit\nContext Identifier (CID) and a 32-bit port number. The CID\nidentifies the source or destination, which is either a\nvirtual machine or the host. The port number differentiates\nbetween multiple services running on a single machine.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nsockaddr_vm { <br>\nsa_family_t svm_family; /* Address family: AF_VSOCK */ <br>\nunsigned short svm_reserved1; <br>\nunsigned int svm_port; /* Port # in host byte order */ <br>\nunsigned int svm_cid; /* Address in host byte order */ <br>\nunsigned char svm_zero[sizeof(struct sockaddr) - <br>\nsizeof(sa_family_t) - <br>\nsizeof(unsigned short) - <br>\nsizeof(unsigned int) - <br>\nsizeof(unsigned int)]; <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>svm_family</i>\nis always set to <b>AF_VSOCK</b>. <i>svm_reserved1</i> is\nalways set to 0. <i>svm_port</i> contains the port number in\nhost byte order. The port numbers below 1024 are called\n<i>privileged ports</i>. Only a process with the\n<b>CAP_NET_BIND_SERVICE</b> capability may <a href=\"https://man.page/2/bind\">bind(2)</a> to\nthese port numbers. <i>svm_zero</i> must be zero-filled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nseveral special addresses: <b>VMADDR_CID_ANY</b> (-1U) means\nany address for binding; <b>VMADDR_CID_HYPERVISOR</b> (0) is\nreserved for services built into the hypervisor;\n<b>VMADDR_CID_LOCAL</b> (1) is the well-known address for\nlocal communication (loopback); <b>VMADDR_CID_HOST</b> (2)\nis the well-known address of the host.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The special\nconstant <b>VMADDR_PORT_ANY</b> (-1U) means any port number\nfor binding.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Live\nmigration</b> <br>\nSockets are affected by live migration of virtual machines.\nConnected <b>SOCK_STREAM</b> sockets become disconnected\nwhen the virtual machine migrates to a new host.\nApplications must reconnect when this happens.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The local CID\nmay change across live migration if the old CID is not\navailable on the new host. Bound sockets are automatically\nupdated to the new CID.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Ioctls <br>\nIOCTL_VM_SOCKETS_GET_LOCAL_CID</b></p>\n\n<p style=\"margin-left:22%;\">Get the CID of the local\nmachine. The argument is a pointer to an <i>unsigned\nint</i>.</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">ioctl(socket,\nIOCTL_VM_SOCKETS_GET_LOCAL_CID, &amp;cid);</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Consider using\n<b>VMADDR_CID_ANY</b> when binding instead of getting the\nlocal CID with <b>IOCTL_VM_SOCKETS_GET_LOCAL_CID</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Local\ncommunication <br>\nVMADDR_CID_LOCAL</b> (1) directs packets to the same host\nthat generated them. This is useful for testing applications\non a single host and for debugging.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The local CID\nobtained with <b>IOCTL_VM_SOCKETS_GET_LOCAL_CID</b> can be\nused for the same purpose, but it is preferable to use\n<b>VMADDR_CID_LOCAL .</b></p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Unable to bind to a privileged\nport without the <b>CAP_NET_BIND_SERVICE</b> capability.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EADDRINUSE</b></p>\n\n<p style=\"margin-left:22%;\">Unable to bind to a port that\nis already in use.</p>\n\n<p style=\"margin-left:11%;\"><b>EADDRNOTAVAIL</b></p>\n\n<p style=\"margin-left:22%;\">Unable to find a free port for\nbinding or unable to bind to a nonlocal CID.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Invalid parameters. This includes: attempting to bind a\nsocket that is already bound, providing an invalid struct\n<i>sockaddr_vm</i>, and other input validation errors.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOPROTOOPT</b></p>\n\n<p style=\"margin-left:22%;\">Invalid socket option in\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> or <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>ENOTCONN</b></p>\n\n<p style=\"margin-left:22%;\">Unable to perform operation on\nan unconnected socket.</p>\n\n<p style=\"margin-left:11%;\"><b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\">Operation not supported. This\nincludes: the <b>MSG_OOB</b> flag that is not implemented\nfor the <a href=\"https://man.page/2/send\">send(2)</a> family of syscalls and\n<b>MSG_PEEK</b> for the <a href=\"https://man.page/2/recv\">recv(2)</a> family of\nsyscalls.</p>\n\n<p style=\"margin-left:11%;\"><b>EPROTONOSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\">Invalid socket protocol number.\nThe protocol should always be 0.</p>\n\n<p style=\"margin-left:11%;\"><b>ESOCKTNOSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\">Unsupported socket type in\n<a href=\"https://man.page/2/socket\">socket(2)</a>. Only <b>SOCK_STREAM</b> and\n<b>SOCK_DGRAM</b> are valid.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Support for\nVMware (VMCI) has been available since Linux 3.9. KVM\n(virtio) is supported since Linux 4.8. Hyper-V is supported\nsince Linux 4.14.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">VMADDR_CID_LOCAL\nis supported since Linux 5.6. Local communication in the\nguest and on the host is available since Linux 5.6. Previous\nversions supported only local communication within a guest\n(not on the host), and with only some transports (VMCI and\nvirtio).</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/bind\">bind(2)</a>,\n<a href=\"https://man.page/2/connect\">connect(2)</a>, <a href=\"https://man.page/2/listen\">listen(2)</a>, <a href=\"https://man.page/2/recv\">recv(2)</a>,\n<a href=\"https://man.page/2/send\">send(2)</a>, <a href=\"https://man.page/2/socket\">socket(2)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}