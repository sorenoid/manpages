{"name":"provider-encoder","body":"\n\n<h1 align=\"center\">PROVIDER-ENCODER</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-encoder\n- The OSSL_ENCODER library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Encoder parameter accessor and descriptor */ <br>\nconst OSSL_PARAM *OSSL_FUNC_encoder_gettable_params(void\n*provctx); <br>\nint OSSL_FUNC_encoder_get_params(OSSL_PARAM params[]); <br>\n/* Functions to construct / destruct / manipulate the\nencoder context */ <br>\nvoid *OSSL_FUNC_encoder_newctx(void *provctx); <br>\nvoid OSSL_FUNC_encoder_freectx(void *ctx); <br>\nint OSSL_FUNC_encoder_set_ctx_params(void *ctx, const\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_encoder_settable_ctx_params(void\n*provctx); <br>\n/* Functions to check selection support */ <br>\nint OSSL_FUNC_encoder_does_selection(void *provctx, int\nselection); <br>\n/* Functions to encode object data */ <br>\nint OSSL_FUNC_encoder_encode(void *ctx, OSSL_CORE_BIO *out,\n<br>\nconst void *obj_raw, <br>\nconst OSSL_PARAM obj_abstract[], <br>\nint selection, <br>\nOSSL_PASSPHRASE_CALLBACK *cb, <br>\nvoid *cbarg); <br>\n/* Functions to import and free a temporary object to be\nencoded */ <br>\nvoid *OSSL_FUNC_encoder_import_object(void *ctx, int\nselection, <br>\nconst OSSL_PARAM params[]); <br>\nvoid OSSL_FUNC_encoder_free_object(void *obj);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>We use the\nwide term &quot;encode&quot; in this manual. This includes\nbut is not limited to serialization.</i></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>ENCODER</small> operation is a generic method to\nencode a provider-native object (<i>obj_raw</i>) or an\nobject abstraction (<i>object_abstract</i>, see\n<a href=\"https://man.page/7/provider-object\">provider-object(7)</a>) into an encoded form, and write\nthe result to the given <small>OSSL_CORE_BIO.</small> If the\ncaller wants to get the encoded stream to memory, it should\nprovide a <a href=\"https://man.page/3/BIO_s_mem\">BIO_s_mem(3)</a> <b><small>BIO</small></b>\n.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The encoder\ndoesn&rsquo;t need to know more about the\n<b><small>OSSL_CORE_BIO</small></b> pointer than being able\nto pass it to the appropriate <small>BIO</small> upcalls\n(see &quot;Core functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>ENCODER</small> implementation may be part of a\nchain, where data is passed from one to the next. For\nexample, there may be an implementation to encode an object\nto <small>DER</small> (that object is assumed to be\nprovider-native and thereby passed via <i>obj_raw</i>), and\nanother one that encodes <small>DER</small> to\n<small>PEM</small> (that one would receive the\n<small>DER</small> encoding via <i>obj_abstract</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The encoding\nusing the <b><small>OSSL_PARAM</small></b> (3) array form\nallows a encoder to be used for data that&rsquo;s been\nexported from another provider, and thereby allow them to\nexist independently of each other.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The encoding\nusing a provider side object can only be safely used with\nprovider data coming from the same provider, for example\nkeys with the <small>KEYMGMT</small> provider.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from an\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_FUNC_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_encoder_encode()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef int\n<br>\n(OSSL_FUNC_encoder_encode_fn)(void *ctx, OSSL_CORE_BIO *out,\n<br>\nconst void *obj_raw, <br>\nconst OSSL_PARAM obj_abstract[], <br>\nint selection, <br>\nOSSL_PASSPHRASE_CALLBACK *cb, void *cbarg); <br>\nstatic ossl_inline OSSL_FUNC_encoder_encode_fn <br>\nOSSL_FUNC_encoder_encode(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_encoder_get_params\nOSSL_FUNC_ENCODER_GET_PARAMS <br>\nOSSL_FUNC_encoder_gettable_params\nOSSL_FUNC_ENCODER_GETTABLE_PARAMS <br>\nOSSL_FUNC_encoder_newctx OSSL_FUNC_ENCODER_NEWCTX <br>\nOSSL_FUNC_encoder_freectx OSSL_FUNC_ENCODER_FREECTX <br>\nOSSL_FUNC_encoder_set_ctx_params\nOSSL_FUNC_ENCODER_SET_CTX_PARAMS <br>\nOSSL_FUNC_encoder_settable_ctx_params\nOSSL_FUNC_ENCODER_SETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_encoder_does_selection\nOSSL_FUNC_ENCODER_DOES_SELECTION <br>\nOSSL_FUNC_encoder_encode OSSL_FUNC_ENCODER_ENCODE <br>\nOSSL_FUNC_encoder_import_object\nOSSL_FUNC_ENCODER_IMPORT_OBJECT <br>\nOSSL_FUNC_encoder_free_object\nOSSL_FUNC_ENCODER_FREE_OBJECT</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Names and\nproperties</b> <br>\nThe name of an implementation should match the type of\nobject it handles. For example, an implementation that\nencodes an <small>RSA</small> key should be named &quot;\n<small>RSA&quot;.</small> Likewise, an implementation that\nfurther encodes <small>DER</small> should be named &quot;\n<small>DER&quot;.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties can\nbe used to further specify details about an implementation:\n<br>\noutput</p>\n\n<p style=\"margin-left:17%;\">This property is used to\nspecify what type of output the implementation produces.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This property\nis <i>mandatory</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">OpenSSL\nproviders recognize the following output types: <br>\ntext</p>\n\n<p style=\"margin-left:23%;\">An implementation with that\noutput type outputs human readable text, making that\nimplementation suitable for &quot;-text&quot; output in\ndiverse <a href=\"https://man.page/1/openssl\">openssl(1)</a> commands.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>pem</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>An implementation with that output type outputs\n<small>PEM</small> formatted data.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>der</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>An implementation with that output type outputs\n<small>DER</small> formatted data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%;\">msblob</p>\n\n<p style=\"margin-left:23%;\">An implementation with that\noutput type outputs <small>MSBLOB</small> formatted\ndata.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"5%\">\n\n\n<p>pvk</p></td>\n<td width=\"1%\"></td>\n<td width=\"77%\">\n\n\n<p>An implementation with that output type outputs\n<small>PVK</small> formatted data.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">structure</p>\n\n<p style=\"margin-left:17%;\">This property is used to\nspecify the structure that is used for the encoded object.\nAn example could be &quot;pkcs8&quot;, to specify explicitly\nthat an object (presumably an asymmetric key pair, in this\ncase) will be wrapped in a PKCS#8 structure as part of the\nencoding.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This property\nis <i>optional</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The possible\nvalues of both these properties is open ended. A provider\nmay very well specify output types and structures that\nlibcrypto doesn&rsquo;t know anything about.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Subset\nselections</b> <br>\nSometimes, an object has more than one subset of data that\nis interesting to treat separately or together. It&rsquo;s\npossible to specify what subsets are to be encoded, with a\nset of bits <i>selection</i> that are passed in an\n<b>int</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This set of\nbits depend entirely on what kind of provider-side object is\npassed. For example, those bits are assumed to be the same\nas those used with <a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a> (see &quot;Key\nObjects&quot; in <a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>) when the object\nis an asymmetric keypair.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>ENCODER</small>\nimplementations are free to regard the <i>selection</i> as a\nset of hints, but must do so with care. In the end, the\noutput must make sense, and if there&rsquo;s a corresponding\ndecoder, the resulting decoded object must match the\noriginal object that was encoded.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_does_selection()</b>\nshould tell if a particular implementation supports any of\nthe combinations given by <i>selection</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nfunctions <br>\nOSSL_FUNC_encoder_newctx()</b> returns a context to be used\nwith the rest of the functions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_freectx()</b>\nfrees the given <i>ctx</i>, if it was created by\n<b>OSSL_FUNC_encoder_newctx()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_set_ctx_params()</b>\nsets context data according to parameters from <i>params</i>\nthat it recognises. Unrecognised parameters should be\nignored. Passing <small>NULL</small> for <i>params</i>\nshould return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_settable_ctx_params()</b>\nreturns a constant <b><small>OSSL_PARAM</small></b> array\ndescribing the parameters that\n<b>OSSL_FUNC_encoder_set_ctx_params()</b> can handle.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<b><small>OSSL_PARAM</small></b> (3) for further details on\nthe parameters structure used by\n<b>OSSL_FUNC_encoder_set_ctx_params()</b> and\n<b>OSSL_FUNC_encoder_settable_ctx_params()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Import\nfunctions</b> <br>\nA provider-native object may be associated with a foreign\nprovider, and may therefore be unsuitable for direct use\nwith a given <small>ENCODER</small> implementation. Provided\nthat the foreign provider&rsquo;s implementation to handle\nthe object has a function to export that object in\n<b><small>OSSL_PARAM</small></b> (3) array form, the\n<small>ENCODER</small> implementation should be able to\nimport that array and create a suitable object to be passed\nto <b>OSSL_FUNC_encoder_encode()</b>&rsquo;s\n<i>obj_raw</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_import_object()</b>\nshould import the subset of <i>params</i> given with\n<i>selection</i> to create a provider-native object that can\nbe passed as <i>obj_raw</i> to\n<b>OSSL_FUNC_encoder_encode()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_free_object()</b>\nshould free the object that was created with\n<b>OSSL_FUNC_encoder_import_object()</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Encoding\nfunctions <br>\nOSSL_FUNC_encoder_encode()</b> should take a provider-native\nobject (in <i>obj_raw</i>) or an object abstraction (in\n<i>obj_abstract</i>), and should output the object in\nencoded form to the <b><small>OSSL_CORE_BIO</small></b> .\nThe <i>selection</i> bits, if relevant, should determine in\ngreater detail what will be output. The encoding functions\nalso take an <b><small>OSSL_PASSPHRASE_CALLBACK</small></b>\nfunction pointer along with a pointer to application data\n<i>cbarg</i>, which should be used when a pass phrase prompt\nis needed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Encoder\noperation parameters</b> <br>\nOperation parameters currently recognised by built-in\nencoders are as follows: <br>\n&quot;cipher&quot; (\n<b><small>OSSL_ENCODER_PARAM_CIPHER</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The name of the encryption\ncipher to be used when generating encrypted encoding. This\nis used when encoding private keys, as well as other objects\nthat need protection.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If this name is\ninvalid for the encoding implementation, the implementation\nshould refuse to perform the encoding, i.e.\n<b>OSSL_FUNC_encoder_encode_data()</b> and\n<b>OSSL_FUNC_encoder_encode_object()</b> should return an\nerror.</p>\n\n<p style=\"margin-left:11%;\">&quot;properties&quot; (\n<b><small>OSSL_ENCODER_PARAM_PROPERTIES</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The properties to be queried\nwhen trying to fetch the algorithm given with the\n&quot;cipher&quot; parameter. This must be given together\nwith the &quot;cipher&quot; parameter to be considered\nvalid.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The encoding\nimplementation isn&rsquo;t obligated to use this value.\nHowever, it is recommended that implementations that do not\nhandle property strings return an error on receiving this\nparameter unless its value <small>NULL</small> or the empty\nstring.</p>\n\n<p style=\"margin-left:11%;\">&quot;save-parameters&quot; (\n<b><small>OSSL_ENCODER_PARAM_SAVE_PARAMETERS</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">If set to 0 disables saving of\nkey domain parameters. Default is 1. It currently has an\neffect only on <small>DSA</small> keys.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameters\ncurrently recognised by the built-in pass phrase callback:\n<br>\n&quot;info&quot; (\n<b><small>OSSL_PASSPHRASE_PARAM_INFO</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">A string of information that\nwill become part of the pass phrase prompt. This could be\nused to give the user information on what kind of object\nit&rsquo;s being prompted for.</p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_newctx()</b>\nreturns a pointer to a context, or <small>NULL</small> on\nfailure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_set_ctx_params()</b>\nreturns 1, unless a recognised parameter was invalid or\ncaused an error, for which 0 is returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_settable_ctx_params()</b>\nreturns a pointer to an array of constant\n<b><small>OSSL_PARAM</small></b> elements.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_does_selection()</b>\nreturns 1 if the encoder implementation supports any of the\n<i>selection</i> bits, otherwise 0.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_encoder_encode()</b>\nreturns 1 on success, or 0 on failure.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a></p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>ENCODER</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}