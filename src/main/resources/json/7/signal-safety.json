{"name":"signal-safety","description":"signal-safety -\nasync-signal-safe functions\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nAn\n<i>async-signal-safe</i> function is one that can be safely\ncalled from within a signal handler. Many functions are\n<i>not</i> async-signal-safe. In particular, nonreentrant\nfunctions are generally unsafe to call from a signal\nhandler.\n\nThe kinds of\nissues that render a function unsafe can be quickly\nunderstood when one considers the implementation of the\n<i>stdio</i> library, all of whose functions are not\nasync-signal-safe.\n\nWhen performing\nbuffered I/O on a file, the <i>stdio</i> functions must\nmaintain a statically allocated data buffer along with\nassociated counters and indexes (or pointers) that record\nthe amount of data and the current position in the buffer.\nSuppose that the main program is in the middle of a call to\na <i>stdio</i> function such as <a href=\"https://man.page/3/printf\">printf(3)</a> where the\nbuffer and associated variables have been partially updated.\nIf, at that moment, the program is interrupted by a signal\nhandler that also calls <a href=\"https://man.page/3/printf\">printf(3)</a>, then the second\ncall to <a href=\"https://man.page/3/printf\">printf(3)</a> will operate on inconsistent data,\nwith unpredictable results.\n\nTo avoid\nproblems with unsafe functions, there are two possible\nchoices:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Ensure that (a) the signal handler calls only\nasync-signal-safe functions, and (b) the signal handler\nitself is reentrant with respect to global variables in the\nmain program.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Block signal delivery in the main program when calling\nfunctions that are unsafe or operating on global data that\nis also accessed by the signal handler.</td></tr>\n</table>\n\nGenerally, the\nsecond choice is difficult in programs of any complexity, so\nthe first choice is taken.\n\nPOSIX.1\nspecifies a set of functions that an implementation must\nmake async-signal-safe. (An implementation may provide safe\nimplementations of additional functions, but this is not\nrequired by the standard and other implementations may not\nprovide the same guarantees.)\n\nIn general, a\nfunction is async-signal-safe either because it is reentrant\nor because it is atomic with respect to signals (i.e., its\nexecution can&rsquo;t be interrupted by a signal\nhandler).\n\nThe set of\nfunctions required to be async-signal-safe by POSIX.1 is\nshown in the following table. The functions not otherwise\nnoted were required to be async-signal-safe in POSIX.1-2001;\nthe table details changes in the subsequent standards.\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3540461.png\" alt=\"Image grohtml-3540461.png\">\n\nNotes:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">POSIX.1-2001 and POSIX.1-2001\nTC2 required the functions <a href=\"https://man.page/3/fpathconf\">fpathconf(3)</a>,\n<a href=\"https://man.page/3/pathconf\">pathconf(3)</a>, and <a href=\"https://man.page/3/sysconf\">sysconf(3)</a> to be\nasync-signal-safe, but this requirement was removed in\nPOSIX.1-2008. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If a signal handler interrupts the execution of an\nunsafe function, and the handler terminates via a call to\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> or <a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a> and the program\nsubsequently calls an unsafe function, then the behavior of\nthe program is undefined.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX.1-2001 TC1 clarified that if an application calls\n<a href=\"https://man.page/2/fork\">fork(2)</a> from a signal handler and any of the fork\nhandlers registered by <a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a> calls a\nfunction that is not async-signal-safe, the behavior is\nundefined. A future revision of the standard is likely to\nremove <a href=\"https://man.page/2/fork\">fork(2)</a> from the list of async-signal-safe\nfunctions. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Asynchronous signal handlers that call functions which\nare cancellation points and nest over regions of deferred\ncancellation may trigger cancellation whose behavior is as\nif asynchronous cancellation had occurred and may cause\napplication state to become inconsistent.</td></tr>\n</table>\n\n<b>errno</b>\n<br>\nFetching and setting the value of <i>errno</i> is\nasync-signal-safe provided that the signal handler saves\n<i>errno</i> on entry and restores its value before\nreturning.\n\n<b>Deviations\nin the GNU C library</b> <br>\nThe following known deviations from the standard occur in\nthe GNU C library:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Before glibc 2.24,\n<a href=\"https://man.page/3/execl\">execl(3)</a> and <a href=\"https://man.page/3/execle\">execle(3)</a> employed\n<a href=\"https://man.page/3/realloc\">realloc(3)</a> internally and were consequently not\nasync-signal-safe. This was fixed in glibc 2.24.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The glibc implementation of <a href=\"https://man.page/3/aio_suspend\">aio_suspend(3)</a> is not\nasync-signal-safe because it uses\n<a href=\"https://man.page/3/pthread_mutex_lock\">pthread_mutex_lock(3)</a> internally.</td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a>, <a href=\"https://man.page/7/standards\">standards(7)</a>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\nThis page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.","body":"\n\n<h1 align=\"center\">SIGNAL-SAFETY</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">signal-safety -\nasync-signal-safe functions</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<i>async-signal-safe</i> function is one that can be safely\ncalled from within a signal handler. Many functions are\n<i>not</i> async-signal-safe. In particular, nonreentrant\nfunctions are generally unsafe to call from a signal\nhandler.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kinds of\nissues that render a function unsafe can be quickly\nunderstood when one considers the implementation of the\n<i>stdio</i> library, all of whose functions are not\nasync-signal-safe.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When performing\nbuffered I/O on a file, the <i>stdio</i> functions must\nmaintain a statically allocated data buffer along with\nassociated counters and indexes (or pointers) that record\nthe amount of data and the current position in the buffer.\nSuppose that the main program is in the middle of a call to\na <i>stdio</i> function such as <a href=\"https://man.page/3/printf\">printf(3)</a> where the\nbuffer and associated variables have been partially updated.\nIf, at that moment, the program is interrupted by a signal\nhandler that also calls <a href=\"https://man.page/3/printf\">printf(3)</a>, then the second\ncall to <a href=\"https://man.page/3/printf\">printf(3)</a> will operate on inconsistent data,\nwith unpredictable results.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To avoid\nproblems with unsafe functions, there are two possible\nchoices:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Ensure that (a) the signal handler calls only\nasync-signal-safe functions, and (b) the signal handler\nitself is reentrant with respect to global variables in the\nmain program.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>Block signal delivery in the main program when calling\nfunctions that are unsafe or operating on global data that\nis also accessed by the signal handler.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generally, the\nsecond choice is difficult in programs of any complexity, so\nthe first choice is taken.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1\nspecifies a set of functions that an implementation must\nmake async-signal-safe. (An implementation may provide safe\nimplementations of additional functions, but this is not\nrequired by the standard and other implementations may not\nprovide the same guarantees.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In general, a\nfunction is async-signal-safe either because it is reentrant\nor because it is atomic with respect to signals (i.e., its\nexecution can&rsquo;t be interrupted by a signal\nhandler).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The set of\nfunctions required to be async-signal-safe by POSIX.1 is\nshown in the following table. The functions not otherwise\nnoted were required to be async-signal-safe in POSIX.1-2001;\nthe table details changes in the subsequent standards.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3540461.png\" alt=\"Image grohtml-3540461.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">POSIX.1-2001 and POSIX.1-2001\nTC2 required the functions <a href=\"https://man.page/3/fpathconf\">fpathconf(3)</a>,\n<a href=\"https://man.page/3/pathconf\">pathconf(3)</a>, and <a href=\"https://man.page/3/sysconf\">sysconf(3)</a> to be\nasync-signal-safe, but this requirement was removed in\nPOSIX.1-2008.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If a signal handler interrupts the execution of an\nunsafe function, and the handler terminates via a call to\n<a href=\"https://man.page/3/longjmp\">longjmp(3)</a> or <a href=\"https://man.page/3/siglongjmp\">siglongjmp(3)</a> and the program\nsubsequently calls an unsafe function, then the behavior of\nthe program is undefined.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX.1-2001 TC1 clarified that if an application calls\n<a href=\"https://man.page/2/fork\">fork(2)</a> from a signal handler and any of the fork\nhandlers registered by <a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a> calls a\nfunction that is not async-signal-safe, the behavior is\nundefined. A future revision of the standard is likely to\nremove <a href=\"https://man.page/2/fork\">fork(2)</a> from the list of async-signal-safe\nfunctions.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Asynchronous signal handlers that call functions which\nare cancellation points and nest over regions of deferred\ncancellation may trigger cancellation whose behavior is as\nif asynchronous cancellation had occurred and may cause\napplication state to become inconsistent.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>errno</b>\n<br>\nFetching and setting the value of <i>errno</i> is\nasync-signal-safe provided that the signal handler saves\n<i>errno</i> on entry and restores its value before\nreturning.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Deviations\nin the GNU C library</b> <br>\nThe following known deviations from the standard occur in\nthe GNU C library:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Before glibc 2.24,\n<a href=\"https://man.page/3/execl\">execl(3)</a> and <a href=\"https://man.page/3/execle\">execle(3)</a> employed\n<a href=\"https://man.page/3/realloc\">realloc(3)</a> internally and were consequently not\nasync-signal-safe. This was fixed in glibc 2.24.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The glibc implementation of <a href=\"https://man.page/3/aio_suspend\">aio_suspend(3)</a> is not\nasync-signal-safe because it uses\n<a href=\"https://man.page/3/pthread_mutex_lock\">pthread_mutex_lock(3)</a> internally.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/sigaction\">sigaction(2)</a>,\n<a href=\"https://man.page/7/signal\">signal(7)</a>, <a href=\"https://man.page/7/standards\">standards(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}