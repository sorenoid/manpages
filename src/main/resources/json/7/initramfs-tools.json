{"name":"initramfs-tools","body":"\n\n<h1 align=\"center\">INITRAMFS-TOOLS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">initramfs-tools\n- an introduction to writing scripts for mkinitramfs</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">initramfs-tools\nhas one main script and two different sets of subscripts\nwhich will be used during different phases of execution.\nEach of these will be discussed separately below with the\nhelp of an imaginary tool which performs a frobnication of a\nlvm partition prior to mounting the root partition.</p>\n\n<h2>Kernel Command Line\n<a name=\"Kernel Command Line\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The root\nfilesystem used by the kernel is specified by the boot\nloader as always. The traditional <b>root=/dev/sda1</b>\nstyle device specification is allowed. If a label is used,\nas in <b>root=LABEL=rootPart</b> the initrd will search all\navailable devices for a filesystem with the appropriate\nlabel, and mount that device as the root filesystem.\n<b>root=UUID=uuidnumber</b> will mount the partition with\nthat UUID as the root filesystem.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Standard</b>\n<i><br>\ninit= &quot;&lt;path to real init&gt;&quot;</i></p>\n\n<p style=\"margin-left:22%;\">the binary to hand over\nexecution to on the root fs after the initramfs scripts are\ndone.</p>\n\n<p style=\"margin-left:11%;\"><i>initramfs.clear</i></p>\n\n<p style=\"margin-left:22%;\">clear screen at the\nbeginning</p>\n\n<p style=\"margin-left:11%;\"><i>initramfs.runsize</i></p>\n\n<p style=\"margin-left:22%;\">The size of the <i>/run</i>\ntmpfs mount point in bytes (suffixes are supported) or as\npercentage of your physical RAM. This parameter is used as\nthe value of the size mount option to tmpfs. See\n<b>https://www.kernel.org/doc/Documentation/filesystems/tmpfs.txt</b>\nfor details. The default is 10%.</p>\n\n<p style=\"margin-left:11%;\"><i>root= &quot;&lt;path to\nblockdevice&gt;&quot;</i></p>\n\n<p style=\"margin-left:22%;\">the device node to mount as the\nroot file system. The recommended usage is to specify the\nUUID as followed &quot;root=UUID=xxx&quot;.</p>\n\n<p style=\"margin-left:11%;\"><i>rootfstype</i></p>\n\n<p style=\"margin-left:22%;\">set the root file system\ntype.</p>\n\n<p style=\"margin-left:11%;\"><i>roottimeout</i></p>\n\n<p style=\"margin-left:22%;\">set timeout in seconds.\nDetermines how long mountroot waits for root to appear. The\ndefault is 30 seconds.</p>\n\n<p style=\"margin-left:11%;\"><i>rootdelay</i></p>\n\n<p style=\"margin-left:22%;\">alias for roottimeout.</p>\n\n<p style=\"margin-left:11%;\"><i>rootflags</i></p>\n\n<p style=\"margin-left:22%;\">set the file system mount\noption string.</p>\n\n<p style=\"margin-left:11%;\"><i>loop= &quot;&lt;path to\nimage&gt;&quot;</i></p>\n\n<p style=\"margin-left:22%;\">path within the original root\nfile system to loop-mount and use as the real root file\nsystem.</p>\n\n<p style=\"margin-left:11%;\"><i>loopfstype</i></p>\n\n<p style=\"margin-left:22%;\">set the loop file system type,\nif applicable.</p>\n\n<p style=\"margin-left:11%;\"><i>loopflags</i></p>\n\n<p style=\"margin-left:22%;\">set the loop file system mount\noption string, if applicable.</p>\n\n<p style=\"margin-left:11%;\"><i>nfsroot</i></p>\n\n<p style=\"margin-left:22%;\">can be either &quot;auto&quot;\nto try to get the relevant information from DHCP or a string\nof the form NFSSERVER:NFSPATH or NFSSERVER:NFSPATH:NFSOPTS.\nUse root=/dev/nfs for NFS to kick to in. NFSOPTS can be\nlooked up in <i>nfs(5)</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"6%\">\n\n\n<p><i>ip</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>tells how to configure the ip address. Allows one to\nspecify an different NFS server than the DHCP server. See\nDocumentation/filesystems/nfsroot.txt in any recent Linux\nsource for details. Optional parameter for NFS root.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"6%\">\n\n\n<p><i>vlan</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>tells to create a VLAN tagged device. Allows one to\nconfigure one or multiple VLAN tagged devices using the\n&quot;vlan=$name.$id:$parent&quot; syntax. E.g.\n&quot;vlan=eth0.1:eth0&quot; Optional parameter for NFS\nroot.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>BOOTIF</i></p>\n\n<p style=\"margin-left:22%;\">is a mac address in pxelinux\nformat with leading &quot;01-&quot; and &quot;-&quot; as\nseparations. pxelinux passes mac address of network card\nused to PXE boot on with this bootarg.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"6%\">\n\n\n<p><i>boot</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>either local or NFS (affects which initramfs scripts are\nrun, see the &quot;Subdirectories&quot; section under boot\nscripts).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>resume</i></p>\n\n<p style=\"margin-left:22%;\">The resume hook tries to\nautodetect the resume partition and uses the first swap\npartition as valid guess. It is possible to set the RESUME\nvariable in /etc/initramfs-tools/conf.d/resume. The boot\nvariable noresume overrides it.</p>\n\n<p style=\"margin-left:11%;\"><i>resume_offset</i></p>\n\n<p style=\"margin-left:22%;\">Specify the offset from the\npartition given by &quot;resume=&quot; at which the swap\nheader of the swap file is located.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>quiet</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>reduces the amount of text output to the console during\nboot.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>ro</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>mounts the rootfs read-only.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>rw</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>mounts the rootfs read-write.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>blacklist</i></p>\n\n<p style=\"margin-left:22%;\">disables load of specific\nmodules. Use blacklist=module1,module2,module3\nbootparameter.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Debug</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>panic</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>sets an timeout on panic. panic=&lt;sec&gt; is a\ndocumented security feature: it disables the debug\nshell.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>debug</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>generates lots of output. It writes a log to\n/run/initramfs/initramfs.debug. Instead when invoked with an\narbitrary argument output is written to console. Use for\nexample &quot;debug=vc&quot;.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>break</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>spawns a shell in the initramfs image at the chosen\nphase (top, modules, premount, mount, mountroot, bottom,\ninit) before actually executing the corresponding scripts\n(see the &quot;Boot scripts&quot; section) or action.\nMultiple phases may be specified, delimited by commas. The\ndefault, if no phase is specified, is &quot;premount&quot;.\nBeware that if both &quot;panic&quot; and &quot;break&quot;\nare present, initramfs will not spawn any shells but reboot\ninstead.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>netconsole</i></p>\n\n<p style=\"margin-left:22%;\">loads netconsole linux modules\nwith the chosen args.</p>\n\n<p style=\"margin-left:11%;\"><i>all_generic_ide</i></p>\n\n<p style=\"margin-left:22%;\">loads generic IDE/ATA chipset\nsupport on boot.</p>\n\n<h2>SCRIPTS\n<a name=\"SCRIPTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Valid boot and\nhook scripts names consist solely of alphabetics, numerics,\ndashes and underscores. Other scripts are discarded.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Configuration\nhook scripts</b> <br>\nThese are used to override the user configuration where\nnecessary, for example to force use of busybox instead of\nklibc utilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Hook\nscripts</b> <br>\nThese are used when an initramfs image is created and not\nincluded in the image itself. They can however cause files\nto be included in the image. Hook scripts are executed under\nerrexit. Thus a hook script can abort the mkinitramfs build\non possible errors (exitcode != 0).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Boot\nscripts</b> <br>\nThese are included in the initramfs image and normally\nexecuted during kernel boot in the early user-space before\nthe root partition has been mounted.</p>\n\n<h2>CONFIGURATION HOOK SCRIPTS\n<a name=\"CONFIGURATION HOOK SCRIPTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Configuration\nhook scripts can be found in\n/usr/share/initramfs-tools/conf-hooks.d. They are sourced by\nmkinitramfs after the configuration files in /etc and before\nrunning any hook scripts. They can override any of the\nvariables documented in <i>initramfs.conf</i>(5), but this\nshould be done only if absolutely necessary. For example, if\na package&rsquo;s boot script requires commands not provided\nby klibc-utils, it should also install a configuration hook\nthat sets <b>BUSYBOX=y</b>.</p>\n\n<h2>HOOK SCRIPTS\n<a name=\"HOOK SCRIPTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Hooks can be\nfound in two places: /usr/share/initramfs-tools/hooks and\n/etc/initramfs-tools/hooks. They are executed during\ngeneration of the initramfs-image and are responsible for\nincluding all the necessary components in the image itself.\nNo guarantees are made as to the order in which the\ndifferent scripts are executed unless the prereqs are setup\nin the script. Please notice that PREREQ is only honored\ninside a single directory. So first the scripts in\n/usr/share/initramfs-tools are ordered according to their\nPREREQ values and executed. Then all scripts in\n/etc/initramfs-tools are ordered according to <b>their</b>\nPREREQ values and executed. This mean that currently there\nis no possibility to have a local script\n(/etc/initramfs-tools) get executed before one from the\npackage (/usr/share/initramfs-tools).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a hook\nscript requires configuration beyond the exported variables\nlisted below, it should read a private configuration file\nthat is separate from the /etc/initramfs-tools directory. It\n<i>must not</i> read initramfs-tools configuration files\ndirectly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Header</b>\n<br>\nIn order to support prereqs, each script should begin with\nthe following lines:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">#!/bin/sh <br>\nPREREQ=&quot;&quot; <br>\nprereqs() <br>\n{</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n\n\n<p>echo &quot;$PREREQ&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">}</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">case $1 in <br>\nprereqs)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>prereqs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>exit 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>;;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">esac</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">.\n/usr/share/initramfs-tools/hook-functions <br>\n# Begin real processing below this line</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example, if\nyou are writing a new hook script which relies on lvm, the\nline starting with PREREQ should be changed to\nPREREQ=&quot;lvm&quot; which will ensure that the lvm hook\nscript is run before your custom script.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Help\nfunctions</b> <br>\n/usr/share/initramfs-tools/hook-functions contains a number\nof functions which deal with some common tasks in a hook\nscript:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>manual_add_modules adds a module (and any modules which\nit depends on) to the initramfs image.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\nmanual_add_modules isofs</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">add_modules_from_file reads a\nfile containing a list of modules (one per line) to be added\nto the initramfs image. The file can contain comments (lines\nstarting with #) and arguments to the modules by writing the\narguments on the same line as the name of the module.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\nadd_modules_from_file /tmp/modlist</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">force_load adds a module (and\nits dependencies) to the initramfs image and also\nunconditionally loads the module during boot. Also supports\npassing arguments to the module by listing them after the\nmodule name.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\nforce_load cdrom debug=1</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">copy_modules_dir copies an\nentire module directory from /lib/modules/KERNELVERSION/\ninto the initramfs image.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\ncopy_modules_dir kernel/drivers/ata</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Including\nbinaries</b> <br>\nIf you need to copy an executable or shared library to the\ninitramfs module, use a command like this:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">copy_exec\n/sbin/mdadm /sbin</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">mkinitramfs\nwill automatically detect which libraries it depends on and\ncopy them to the initramfs. This means that most\nexecutables, unless compiled with klibc, will automatically\ninclude glibc in the image which will increase its size by\nseveral hundred kilobytes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Including a\nsystem firmware preimage (early initramfs)</b> <br>\nIf you need to prepend data to the initramfs image, you need\nto prepare it in a file, and call the\n<i>prepend_earlyinitramfs</i> function. The file can be\ndisposed of as soon as the function returns.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example:</b>\n<br>\nTEMP_FILE=$(mktemp ...) <br>\n... <br>\nprepend_earlyinitramfs ${TEMP_FILE} <br>\nrm -f ${TEMP_FILE}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Exported\nvariables</b> <br>\nmkinitramfs sets several variables for the hook scripts\nenvironment. <i><br>\nMODULESDIR</i></p>\n\n<p style=\"margin-left:22%;\">corresponds to the linux\nmodules dir.</p>\n\n<p style=\"margin-left:11%;\"><i>version</i></p>\n\n<p style=\"margin-left:22%;\">is the $(uname -r) linux\nversion against mkinitramfs is run.</p>\n\n<p style=\"margin-left:11%;\"><i>CONFDIR</i></p>\n\n<p style=\"margin-left:22%;\">is the path of the used\ninitramfs-tools configurations.</p>\n\n<p style=\"margin-left:11%;\"><i>DESTDIR</i></p>\n\n<p style=\"margin-left:22%;\">is the root path of the newly\nbuild initramfs.</p>\n\n<p style=\"margin-left:11%;\"><i>DPKG_ARCH</i></p>\n\n<p style=\"margin-left:22%;\">allows arch specific hook\nadditions.</p>\n\n<p style=\"margin-left:11%;\"><i>verbose</i></p>\n\n<p style=\"margin-left:22%;\">corresponds to the verbosity of\nthe update-initramfs run.</p>\n\n<p style=\"margin-left:11%;\"><i>BUSYBOX, MODULES</i></p>\n\n<p style=\"margin-left:22%;\">are as described in\n<i>initramfs.conf</i>(5).</p>\n\n<p style=\"margin-left:11%;\"><i>BUSYBOXDIR</i></p>\n\n<p style=\"margin-left:22%;\">is the directory where busybox\nutilities should be installed from, or empty if busybox is\nnot being used.</p>\n\n<h2>BOOT SCRIPTS\n<a name=\"BOOT SCRIPTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Similarly to\nhook scripts, boot scripts can be found in two places\n/usr/share/initramfs-tools/scripts/ and\n/etc/initramfs-tools/scripts/. There are a number of\nsubdirectories to these two directories which control the\nboot stage at which the scripts are executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Header</b>\n<br>\nLike for hook scripts, there are no guarantees as to the\norder in which the different scripts in one subdirectory\n(see &quot;Subdirectories&quot; below) are executed. In\norder to define a certain order, a similar header as for\nhook scripts should be used:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">#!/bin/sh <br>\nPREREQ=&quot;&quot; <br>\nprereqs() <br>\n{</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"85%\">\n\n\n<p>echo &quot;$PREREQ&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">}</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">case $1 in <br>\nprereqs)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>prereqs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>exit 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>;;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">esac</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Where PREREQ is\nmodified to list other scripts in the same subdirectory if\nnecessary.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Help\nfunctions</b> <br>\nA number of functions (mostly dealing with output) are\nprovided to boot scripts in <i>/scripts/functions</i> :</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"58%\">\n\n\n<p>log_success_msg Logs a success message</p></td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\nlog_success_msg &quot;Frobnication successful&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"58%\">\n\n\n<p style=\"margin-top: 1em\">log_failure_msg Logs a failure\nmessage</p> </td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\nlog_failure_msg &quot;Frobnication component froobz\nmissing&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"58%\">\n\n\n<p style=\"margin-top: 1em\">log_warning_msg Logs a warning\nmessage</p> </td>\n<td width=\"20%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\nlog_warning_msg &quot;Only partial frobnication\npossible&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">log_begin_msg Logs a message\nthat some processing step has begun</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>log_end_msg Logs a message that some processing step is\nfinished</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b></p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">log_begin_msg\n&quot;Frobnication begun&quot; <br>\n# Do something <br>\nlog_end_msg</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">panic Logs an error message and\nexecutes a shell in the initramfs image to allow the user to\ninvestigate the situation.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>Example:</b>\npanic &quot;Frobnication failed&quot;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">add_mountroot_fail_hook NN-name\n<b>Deprecated</b>: This function is now a stub which is\neffectively a no-op. It will be removed in a future version;\nplease remove mountroot failure hooks from existing packages\naccordingly.</p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Subdirectories</b>\n<br>\nBoth /usr/share/initramfs-tools/scripts and\n/etc/initramfs-tools/scripts contains the following\nsubdirectories.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">init-top the scripts in this\ndirectory are the first scripts to be executed after sysfs\nand procfs have been mounted. It also runs the udev hook for\npopulating the /dev tree (udev will keep running until\ninit-bottom).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>init-premount happens after modules specified by hooks\nand /etc/initramfs-tools/modules have been loaded.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>local-top OR nfs-top After these scripts have been\nexecuted, the root device node is expected to be present\n(local) or the network interface is expected to be usable\n(NFS).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>local-block These scripts are called with the name of a\nlocal block device. After these scripts have been executed,\nthat device node should be present. If the local-top or\nlocal-block scripts fail to create the wanted device node,\nthe local-block scripts will be called periodically to try\nagain.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>local-premount OR nfs-premount are run after the sanity\nof the root device has been verified (local) or the network\ninterface has been brought up (NFS), but before the actual\nroot fs has been mounted.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>local-bottom OR nfs-bottom are run after the rootfs has\nbeen mounted (local) or the NFS root share has been\nmounted.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p>init-bottom are the last scripts to be executed before\nprocfs and sysfs are moved to the real rootfs and execution\nis turned over to the init binary which should now be found\nin the mounted rootfs. udev is stopped.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Boot\nparameters</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">/conf/param.conf allows boot\nscripts to change exported variables that are listed on top\nof init. Write the new values to it. It will be sourced\nafter an boot script run if it exists.</p></td></tr>\n</table>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Hook\nscript</b> <br>\nAn example hook script would look something like this (and\nwould usually be placed in\n/etc/initramfs-tools/hooks/frobnicate):</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">#!/bin/sh <br>\n# Example frobnication hook script</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">PREREQ=&quot;lvm&quot;\n<br>\nprereqs() <br>\n{</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>echo &quot;$PREREQ&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">}</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">case $1 in <br>\nprereqs)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>prereqs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>exit 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>;;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">esac</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">.\n/usr/share/initramfs-tools/hook-functions <br>\n# Begin real processing below this line</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">if [ ! -x\n&quot;/sbin/frobnicate&quot; ]; then</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>exit 0</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">fi</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">force_load\nfrobnicator interval=10 <br>\ncopy_exec /sbin/frobnicate /sbin <br>\nexit 0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Boot\nscript</b> <br>\nAn example boot script would look something like this (and\nwould usually be placed in\n/etc/initramfs-tools/scripts/local-top/frobnicate):</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">#!/bin/sh <br>\n# Example frobnication boot script</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">PREREQ=&quot;lvm&quot;\n<br>\nprereqs() <br>\n{</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>echo &quot;$PREREQ&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">}</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">case $1 in <br>\nprereqs)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>prereqs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>exit 0</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>;;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">esac</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">.\n/scripts/functions <br>\n# Begin real processing below this line <br>\nif [ ! -x &quot;/sbin/frobnicate&quot; ]; then</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>panic &quot;Frobnication executable not found&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">fi</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">if [ ! -e\n&quot;/dev/mapper/frobb&quot; ]; then</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"92%\">\n\n\n<p>panic &quot;Frobnication device not found&quot;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">fi</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">log_begin_msg\n&quot;Starting frobnication&quot; <br>\n/sbin/frobnicate &quot;/dev/mapper/frobb&quot; || panic\n&quot;Frobnication failed&quot; <br>\nlog_end_msg</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">exit 0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Exported\nvariables</b> <br>\ninit sets several variables for the boot scripts\nenvironment.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>ROOT</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">corresponds to the root boot\noption. Advanced boot scripts like cryptsetup or\nlive-initramfs need to play tricks. Otherwise keep it\nalone.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>ROOTDELAY, ROOTFLAGS,\nROOTFSTYPE, IP</i></p>\n\n<p style=\"margin-left:22%;\">corresponds to the rootdelay,\nrootflags, rootfstype or ip boot option. Use of ROOTDELAY is\ndeprecated; you should implement a <i>local-block</i> boot\nscript rather than delaying or polling.</p>\n\n<p style=\"margin-left:11%;\"><i>DPKG_ARCH</i></p>\n\n<p style=\"margin-left:22%;\">allows arch specific boot\nactions.</p>\n\n<p style=\"margin-left:11%;\"><i>blacklist, panic, quiet,\nresume, noresume, resume_offset</i></p>\n\n<p style=\"margin-left:22%;\">set according relevant boot\noption.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>break</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Useful for manual intervention during setup and coding\nan boot script.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>REASON</i></p>\n\n<p style=\"margin-left:22%;\">Argument passed to the\n<i>panic</i> helper function. Use to find out why you landed\nin the initramfs shell.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"6%\">\n\n\n<p><i>init</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"70%\">\n\n\n<p>passes the path to init(8) usually /sbin/init.</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>readonly</i></p>\n\n<p style=\"margin-left:22%;\">is the default for mounting the\nroot corresponds to the ro bootarg. Overridden by rw\nbootarg.</p>\n\n<p style=\"margin-left:11%;\"><i>rootmnt</i></p>\n\n<p style=\"margin-left:22%;\">is the path where root gets\nmounted usually /root.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"8%\">\n\n\n<p><i>debug</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>indicates that a debug log is captured for further\ninvestigation.</p> </td></tr>\n</table>\n\n<h2>UPDATING THE INITRAMFS FROM ANOTHER PACKAGE\n<a name=\"UPDATING THE INITRAMFS FROM ANOTHER PACKAGE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Package\nmaintainer scripts should not run <b>update-initramfs</b>\ndirectly. A package that installs hooks for initramfs-tools\nshould include a triggers file containing:</p>\n\n<p style=\"margin-left:22%;\">activate-noawait\nupdate-initramfs</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Kernel packages\nmust call the kernel hooks as documented in the Debian\nKernel Handbook.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A package that\nrequires an initramfs to function, but is not a kernel\npackage, should include a triggers file containing:</p>\n\n<p style=\"margin-left:22%;\">activate-await\nupdate-initramfs</p>\n\n<h2>KERNEL HOOKS\n<a name=\"KERNEL HOOKS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">initramfs-tools\nincludes hook scripts that are called by kernel packages on\ninstallation and removal, so that an initramfs is\nautomatically created, updated or deleted as necessary. The\nhook scripts do nothing if the environment variable\n<b>INITRD</b> is set to <b>No</b>. This will be the case for\nkernel packages built with <b>make deb-pkg</b> and with\n<b>CONFIG_BLK_DEV_INITRD</b> not set in the kernel config,\nor built with <b>make-kpkg</b> and not using the\n<b>--initrd</b> option.</p>\n\n<h2>DEBUG\n<a name=\"DEBUG\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is easy to\ncheck the generated initramfs for its content. One may need\nto double-check if it contains the relevant binaries, libs\nor modules:</p>\n\n<p style=\"margin-left:22%;\">lsinitramfs\n/boot/initrd.img-3.16-3-amd64</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/run/initramfs/fsck.log</i></p>\n\n<p style=\"margin-left:22%;\">Log of fsck commands run within\nthe initramfs, with their output.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/run/initramfs/fsck-root</i></p>\n\n<p style=\"margin-left:22%;\">Exists only if fsck ran\nsuccessfully for the root filesystem.</p>\n\n\n<p style=\"margin-left:11%;\"><i>/run/initramfs/fsck-usr</i></p>\n\n<p style=\"margin-left:22%;\">Exists only if fsck ran\nsuccessfully for the <i>/usr</i> filesystem.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\ninitramfs-tools are written by Maximilian Attems\n&lt;maks@debian.org&gt;, Jeff Bailey\n&lt;jbailey@raspberryginger.com&gt; and numerous others.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual was\nwritten by David H&auml;rdeman &lt;david@hardeman.nu&gt;,\nupdated by Maximilian Attems &lt;maks@debian.org&gt;.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>initramfs.conf</i>(5),\n<i>mkinitramfs</i>(8), <i>update-initramfs</i>(8),\n<i>lsinitramfs</i>(8).</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#Kernel Command Line\">Kernel Command Line</a>","<a href=\"#SCRIPTS\">SCRIPTS</a>","<a href=\"#CONFIGURATION HOOK SCRIPTS\">CONFIGURATION HOOK SCRIPTS</a>","<a href=\"#HOOK SCRIPTS\">HOOK SCRIPTS</a>","<a href=\"#BOOT SCRIPTS\">BOOT SCRIPTS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#UPDATING THE INITRAMFS FROM ANOTHER PACKAGE\">UPDATING THE INITRAMFS FROM ANOTHER PACKAGE</a>","<a href=\"#KERNEL HOOKS\">KERNEL HOOKS</a>","<a href=\"#DEBUG\">DEBUG</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":7}