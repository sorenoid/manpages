{"name":"socket","description":"socket - Linux\nsocket interface","body":"\n\n<h1 align=\"center\">SOCKET</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">socket - Linux\nsocket interface</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sockfd</i>\n<b>= socket(int</b> <i>socket_family</i><b>, int</b>\n<i>socket_type</i><b>, int</b> <i>protocol</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage describes the Linux networking socket layer user\ninterface. The BSD compatible sockets are the uniform\ninterface between the user process and the network protocol\nstacks in the kernel. The protocol modules are grouped into\n<i>protocol families</i> such as <b>AF_INET</b>,\n<b>AF_IPX</b>, and <b>AF_PACKET</b>, and <i>socket types</i>\nsuch as <b>SOCK_STREAM</b> or <b>SOCK_DGRAM</b>. See\n<a href=\"https://man.page/2/socket\">socket(2)</a> for more information on families and\ntypes.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket-layer\nfunctions</b> <br>\nThese functions are used by the user process to send or\nreceive packets and to do other socket operations. For more\ninformation see their respective manual pages.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/socket\">socket(2)</a>\ncreates a socket, <a href=\"https://man.page/2/connect\">connect(2)</a> connects a socket to a\nremote socket address, the <a href=\"https://man.page/2/bind\">bind(2)</a> function binds a\nsocket to a local socket address, <a href=\"https://man.page/2/listen\">listen(2)</a> tells the\nsocket that new connections shall be accepted, and\n<a href=\"https://man.page/2/accept\">accept(2)</a> is used to get a new socket with a new\nincoming connection. <a href=\"https://man.page/2/socketpair\">socketpair(2)</a> returns two\nconnected anonymous sockets (implemented only for a few\nlocal families like <b>AF_UNIX</b>)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/send\">send(2)</a>,\n<a href=\"https://man.page/2/sendto\">sendto(2)</a>, and <a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a> send data over a\nsocket, and <a href=\"https://man.page/2/recv\">recv(2)</a>, <a href=\"https://man.page/2/recvfrom\">recvfrom(2)</a>,\n<a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a> receive data from a socket. <a href=\"https://man.page/2/poll\">poll(2)</a>\nand <a href=\"https://man.page/2/select\">select(2)</a> wait for arriving data or a readiness\nto send data. In addition, the standard I/O operations like\n<a href=\"https://man.page/2/write\">write(2)</a>, <a href=\"https://man.page/2/writev\">writev(2)</a>, <a href=\"https://man.page/2/sendfile\">sendfile(2)</a>,\n<a href=\"https://man.page/2/read\">read(2)</a>, and <a href=\"https://man.page/2/readv\">readv(2)</a> can be used to read and\nwrite data.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/getsockname\">getsockname(2)</a>\nreturns the local socket address and <a href=\"https://man.page/2/getpeername\">getpeername(2)</a>\nreturns the remote socket address. <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> and\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> are used to set or get socket layer or\nprotocol options. <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> can be used to set or read\nsome other options.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/close\">close(2)</a>\nis used to close a socket. <a href=\"https://man.page/2/shutdown\">shutdown(2)</a> closes parts\nof a full-duplex socket connection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Seeking, or\ncalling <a href=\"https://man.page/2/pread\">pread(2)</a> or <a href=\"https://man.page/2/pwrite\">pwrite(2)</a> with a nonzero\nposition is not supported on sockets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nto do nonblocking I/O on sockets by setting the\n<b>O_NONBLOCK</b> flag on a socket file descriptor using\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>. Then all operations that would block will\n(usually) return with <b>EAGAIN</b> (operation should be\nretried later); <a href=\"https://man.page/2/connect\">connect(2)</a> will return\n<b>EINPROGRESS</b> error. The user can then wait for various\nevents via <a href=\"https://man.page/2/poll\">poll(2)</a> or <a href=\"https://man.page/2/select\">select(2)</a>.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3524441.png\" alt=\"Image grohtml-3524441.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An alternative\nto <a href=\"https://man.page/2/poll\">poll(2)</a> and <a href=\"https://man.page/2/select\">select(2)</a> is to let the kernel\ninform the application about events via a <b>SIGIO</b>\nsignal. For that the <b>O_ASYNC</b> flag must be set on a\nsocket file descriptor via <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> and a valid\nsignal handler for <b>SIGIO</b> must be installed via\n<a href=\"https://man.page/2/sigaction\">sigaction(2)</a>. See the <i>Signals</i> discussion\nbelow.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket\naddress structures</b> <br>\nEach socket domain has its own format for socket addresses,\nwith a domain-specific address structure. Each of these\nstructures begins with an integer &quot;family&quot; field\n(typed as <i>sa_family_t</i>) that indicates the type of the\naddress structure. This allows the various system calls\n(e.g., <a href=\"https://man.page/2/connect\">connect(2)</a>, <a href=\"https://man.page/2/bind\">bind(2)</a>, <a href=\"https://man.page/2/accept\">accept(2)</a>,\n<a href=\"https://man.page/2/getsockname\">getsockname(2)</a>, <a href=\"https://man.page/2/getpeername\">getpeername(2)</a>), which are\ngeneric to all socket domains, to determine the domain of a\nparticular socket address.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To allow any\ntype of socket address to be passed to interfaces in the\nsockets API, the type <i>struct sockaddr</i> is defined. The\npurpose of this type is purely to allow casting of\ndomain-specific socket address types to a\n&quot;generic&quot; type, so as to avoid compiler warnings\nabout type mismatches in calls to the sockets API.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\nthe sockets API provides the data type <i>struct\nsockaddr_storage</i>. This type is suitable to accommodate\nall supported domain-specific socket address structures; it\nis large enough and is aligned properly. (In particular, it\nis large enough to hold IPv6 socket addresses.) The\nstructure includes the following field, which can be used to\nidentify the type of socket address actually stored in the\nstructure:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sa_family_t\nss_family;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sockaddr_storage</i> structure is useful in programs that\nmust handle socket addresses in a generic way (e.g.,\nprograms that must deal with both IPv4 and IPv6 socket\naddresses).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket\noptions</b> <br>\nThe socket options listed below can be set by using\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> and read with <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> with\nthe socket level set to <b>SOL_SOCKET</b> for all sockets.\nUnless otherwise noted, <i>optval</i> is a pointer to an\n<i>int</i>. <b><br>\nSO_ACCEPTCONN</b></p>\n\n<p style=\"margin-left:22%;\">Returns a value indicating\nwhether or not this socket has been marked to accept\nconnections with <a href=\"https://man.page/2/listen\">listen(2)</a>. The value 0 indicates\nthat this is not a listening socket, the value 1 indicates\nthat this is a listening socket. This socket option is\nread-only.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_ATTACH_FILTER</b> (since\nLinux 2.2), <b>SO_ATTACH_BPF</b> (since Linux 3.19)</p>\n\n<p style=\"margin-left:22%;\">Attach a classic BPF\n(<b>SO_ATTACH_FILTER</b>) or an extended BPF\n(<b>SO_ATTACH_BPF</b>) program to the socket for use as a\nfilter of incoming packets. A packet will be dropped if the\nfilter program returns zero. If the filter program returns a\nnonzero value which is less than the packet&rsquo;s data\nlength, the packet will be truncated to the length returned.\nIf the value returned by the filter is greater than or equal\nto the packet&rsquo;s data length, the packet is allowed to\nproceed unmodified.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument\nfor <b>SO_ATTACH_FILTER</b> is a <i>sock_fprog</i>\nstructure, defined in <i>&lt;linux/filter.h&gt;</i>:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nsock_fprog { <br>\nunsigned short len; <br>\nstruct sock_filter *filter; <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument\nfor <b>SO_ATTACH_BPF</b> is a file descriptor returned by\nthe <a href=\"https://man.page/2/bpf\">bpf(2)</a> system call and must refer to a program of\ntype <b>BPF_PROG_TYPE_SOCKET_FILTER</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">These options\nmay be set multiple times for a given socket, each time\nreplacing the previous filter program. The classic and\nextended versions may be called on the same socket, but the\nprevious filter will always be replaced such that a socket\nnever has more than one filter defined.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Both classic\nand extended BPF are explained in the kernel source file\n<i>Documentation/networking/filter.txt</i></p>\n\n\n<p style=\"margin-left:11%;\"><b>SO_ATTACH_REUSEPORT_CBPF</b>,\n<b>SO_ATTACH_REUSEPORT_EBPF</b></p>\n\n<p style=\"margin-left:22%;\">For use with the\n<b>SO_REUSEPORT</b> option, these options allow the user to\nset a classic BPF (<b>SO_ATTACH_REUSEPORT_CBPF</b>) or an\nextended BPF (<b>SO_ATTACH_REUSEPORT_EBPF</b>) program which\ndefines how packets are assigned to the sockets in the\nreuseport group (that is, all sockets which have\n<b>SO_REUSEPORT</b> set and are using the same local address\nto receive packets).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The BPF program\nmust return an index between 0 and N-1 representing the\nsocket which should receive the packet (where N is the\nnumber of sockets in the group). If the BPF program returns\nan invalid index, socket selection will fall back to the\nplain <b>SO_REUSEPORT</b> mechanism.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Sockets are\nnumbered in the order in which they are added to the group\n(that is, the order of <a href=\"https://man.page/2/bind\">bind(2)</a> calls for UDP sockets\nor the order of <a href=\"https://man.page/2/listen\">listen(2)</a> calls for TCP sockets). New\nsockets added to a reuseport group will inherit the BPF\nprogram. When a socket is removed from a reuseport group\n(via <a href=\"https://man.page/2/close\">close(2)</a>), the last socket in the group will be\nmoved into the closed socket&rsquo;s position.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">These options\nmay be set repeatedly at any time on any socket in the group\nto replace the current BPF program used by all sockets in\nthe group.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>SO_ATTACH_REUSEPORT_CBPF</b>\ntakes the same argument type as <b>SO_ATTACH_FILTER</b> and\n<b>SO_ATTACH_REUSEPORT_EBPF</b> takes the same argument type\nas <b>SO_ATTACH_BPF</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">UDP support for\nthis feature is available since Linux 4.5; TCP support is\navailable since Linux 4.6.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_BINDTODEVICE</b></p>\n\n<p style=\"margin-left:22%;\">Bind this socket to a\nparticular device like &ldquo;eth0&rdquo;, as specified in\nthe passed interface name. If the name is an empty string or\nthe option length is zero, the socket device binding is\nremoved. The passed option is a variable-length\nnull-terminated interface name string with the maximum size\nof <b>IFNAMSIZ</b>. If a socket is bound to an interface,\nonly packets received from that particular interface are\nprocessed by the socket. Note that this works only for some\nsocket types, particularly <b>AF_INET</b> sockets. It is not\nsupported for packet sockets (use normal <a href=\"https://man.page/2/bind\">bind(2)</a>\nthere).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n3.8, this socket option could be set, but could not\nretrieved with <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>. Since Linux 3.8, it is\nreadable. The <i>optlen</i> argument should contain the\nbuffer size available to receive the device name and is\nrecommended to be <b>IFNAMSIZ</b> bytes. The real device\nname length is reported back in the <i>optlen</i>\nargument.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_BROADCAST</b></p>\n\n<p style=\"margin-left:22%;\">Set or get the broadcast flag.\nWhen enabled, datagram sockets are allowed to send packets\nto a broadcast address. This option has no effect on\nstream-oriented sockets.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_BSDCOMPAT</b></p>\n\n<p style=\"margin-left:22%;\">Enable BSD bug-to-bug\ncompatibility. This is used by the UDP protocol module in\nLinux 2.0 and 2.2. If enabled, ICMP errors received for a\nUDP socket will not be passed to the user program. In later\nkernel versions, support for this option has been phased\nout: Linux 2.4 silently ignores it, and Linux 2.6 generates\na kernel warning (printk()) if a program uses this option.\nLinux 2.0 also enabled BSD bug-to-bug compatibility options\n(random header changing, skipping of the broadcast flag) for\nraw sockets with this option, but that was removed in Linux\n2.2.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_DEBUG</b></p>\n\n<p style=\"margin-left:22%;\">Enable socket debugging.\nAllowed only for processes with the <b>CAP_NET_ADMIN</b>\ncapability or an effective user ID of 0.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_DETACH_FILTER</b> (since\nLinux 2.2), <b>SO_DETACH_BPF</b> (since Linux 3.19)</p>\n\n<p style=\"margin-left:22%;\">These two options, which are\nsynonyms, may be used to remove the classic or extended BPF\nprogram attached to a socket with either\n<b>SO_ATTACH_FILTER</b> or <b>SO_ATTACH_BPF</b>. The option\nvalue is ignored.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_DOMAIN</b> (since Linux\n2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Retrieves the socket domain as\nan integer, returning a value such as <b>AF_INET6</b>. See\n<a href=\"https://man.page/2/socket\">socket(2)</a> for details. This socket option is\nread-only.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_ERROR</b></p>\n\n<p style=\"margin-left:22%;\">Get and clear the pending\nsocket error. This socket option is read-only. Expects an\ninteger.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_DONTROUTE</b></p>\n\n<p style=\"margin-left:22%;\">Don&rsquo;t send via a gateway,\nsend only to directly connected hosts. The same effect can\nbe achieved by setting the <b>MSG_DONTROUTE</b> flag on a\nsocket <a href=\"https://man.page/2/send\">send(2)</a> operation. Expects an integer boolean\nflag.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_INCOMING_CPU</b>\n(gettable since Linux 3.19, settable since Linux 4.4)</p>\n\n<p style=\"margin-left:22%;\">Sets or gets the CPU affinity\nof a socket. Expects an integer flag.</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">int cpu = 1;\n<br>\nsetsockopt(fd, SOL_SOCKET, SO_INCOMING_CPU, &amp;cpu, <br>\nsizeof(cpu));</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because all of\nthe packets for a single stream (i.e., all packets for the\nsame 4-tuple) arrive on the single RX queue that is\nassociated with a particular CPU, the typical use case is to\nemploy one listening process per RX queue, with the incoming\nflow being handled by a listener on the same CPU that is\nhandling the RX queue. This provides optimal NUMA behavior\nand keeps CPU caches hot.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_INCOMING_NAPI_ID</b>\n(gettable since Linux 4.12)</p>\n\n<p style=\"margin-left:22%;\">Returns a system-level unique\nID called NAPI ID that is associated with a RX queue on\nwhich the last packet associated with that socket is\nreceived.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This can be\nused by an application to split the incoming flows among\nworker threads based on the RX queue on which the packets\nassociated with the flows are received. It allows each\nworker thread to be associated with a NIC HW receive queue\nand service all the connection requests received on that RX\nqueue. This mapping between a app thread and a HW NIC queue\nstreamlines the flow of data from the NIC to the\napplication.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_KEEPALIVE</b></p>\n\n<p style=\"margin-left:22%;\">Enable sending of keep-alive\nmessages on connection-oriented sockets. Expects an integer\nboolean flag.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_LINGER</b></p>\n\n<p style=\"margin-left:22%;\">Sets or gets the\n<b>SO_LINGER</b> option. The argument is a <i>linger</i>\nstructure.</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct linger {\n<br>\nint l_onoff; /* linger active */ <br>\nint l_linger; /* how many seconds to linger for */ <br>\n};</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When enabled, a\n<a href=\"https://man.page/2/close\">close(2)</a> or <a href=\"https://man.page/2/shutdown\">shutdown(2)</a> will not return until\nall queued messages for the socket have been successfully\nsent or the linger timeout has been reached. Otherwise, the\ncall returns immediately and the closing is done in the\nbackground. When the socket is closed as part of\n<a href=\"https://man.page/2/exit\">exit(2)</a>, it always lingers in the background.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_LOCK_FILTER</b></p>\n\n<p style=\"margin-left:22%;\">When set, this option will\nprevent changing the filters associated with the socket.\nThese filters include any set using the socket options\n<b>SO_ATTACH_FILTER</b>, <b>SO_ATTACH_BPF</b>,\n<b>SO_ATTACH_REUSEPORT_CBPF</b>, and\n<b>SO_ATTACH_REUSEPORT_EBPF</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The typical use\ncase is for a privileged process to set up a raw socket (an\noperation that requires the <b>CAP_NET_RAW</b> capability),\napply a restrictive filter, set the <b>SO_LOCK_FILTER</b>\noption, and then either drop its privileges or pass the\nsocket file descriptor to an unprivileged process via a UNIX\ndomain socket.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Once the\n<b>SO_LOCK_FILTER</b> option has been enabled, attempts to\nchange or remove the filter attached to a socket, or to\ndisable the <b>SO_LOCK_FILTER</b> option will fail with the\nerror <b>EPERM</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_MARK</b> (since Linux\n2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Set the mark for each packet\nsent through this socket (similar to the netfilter MARK\ntarget but socket-based). Changing the mark can be used for\nmark-based routing without netfilter or for packet\nfiltering. Setting this option requires the\n<b>CAP_NET_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_OOBINLINE</b></p>\n\n<p style=\"margin-left:22%;\">If this option is enabled,\nout-of-band data is directly placed into the receive data\nstream. Otherwise, out-of-band data is passed only when the\n<b>MSG_OOB</b> flag is set during receiving.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PASSCRED</b></p>\n\n<p style=\"margin-left:22%;\">Enable or disable the receiving\nof the <b>SCM_CREDENTIALS</b> control message. For more\ninformation see <a href=\"https://man.page/7/unix\">unix(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PASSSEC</b></p>\n\n<p style=\"margin-left:22%;\">Enable or disable the receiving\nof the <b>SCM_SECURITY</b> control message. For more\ninformation see <a href=\"https://man.page/7/unix\">unix(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PEEK_OFF</b> (since Linux\n3.4)</p>\n\n<p style=\"margin-left:22%;\">This option, which is currently\nsupported only for <a href=\"https://man.page/7/unix\">unix(7)</a> sockets, sets the value of\nthe &quot;peek offset&quot; for the <a href=\"https://man.page/2/recv\">recv(2)</a> system\ncall when used with <b>MSG_PEEK</b> flag.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When this\noption is set to a negative value (it is set to -1 for all\nnew sockets), traditional behavior is provided:\n<a href=\"https://man.page/2/recv\">recv(2)</a> with the <b>MSG_PEEK</b> flag will peek data\nfrom the front of the queue.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When the option\nis set to a value greater than or equal to zero, then the\nnext peek at data queued in the socket will occur at the\nbyte offset specified by the option value. At the same time,\nthe &quot;peek offset&quot; will be incremented by the\nnumber of bytes that were peeked from the queue, so that a\nsubsequent peek will return the next data in the queue.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If data is\nremoved from the front of the queue via a call to\n<a href=\"https://man.page/2/recv\">recv(2)</a> (or similar) without the <b>MSG_PEEK</b>\nflag, the &quot;peek offset&quot; will be decreased by the\nnumber of bytes removed. In other words, receiving data\nwithout the <b>MSG_PEEK</b> flag will cause the &quot;peek\noffset&quot; to be adjusted to maintain the correct relative\nposition in the queued data, so that a subsequent peek will\nretrieve the data that would have been retrieved had the\ndata not been removed.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For datagram\nsockets, if the &quot;peek offset&quot; points to the middle\nof a packet, the data returned will be marked with the\n<b>MSG_TRUNC</b> flag.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nexample serves to illustrate the use of <b>SO_PEEK_OFF</b>.\nSuppose a stream socket has the following queued input\ndata:</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">aabbccddeeff</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nsequence of <a href=\"https://man.page/2/recv\">recv(2)</a> calls would have the effect noted\nin the comments:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">int ov = 4; //\nSet peek offset to 4 <br>\nsetsockopt(fd, SOL_SOCKET, SO_PEEK_OFF, &amp;ov,\nsizeof(ov));</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">recv(fd, buf,\n2, MSG_PEEK); // Peeks &quot;cc&quot;; offset set to 6 <br>\nrecv(fd, buf, 2, MSG_PEEK); // Peeks &quot;dd&quot;; offset\nset to 8 <br>\nrecv(fd, buf, 2, 0); // Reads &quot;aa&quot;; offset set to\n6 <br>\nrecv(fd, buf, 2, MSG_PEEK); // Peeks &quot;ee&quot;; offset\nset to 8</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PEERCRED</b></p>\n\n<p style=\"margin-left:22%;\">Return the credentials of the\npeer process connected to this socket. For further details,\nsee <a href=\"https://man.page/7/unix\">unix(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PEERSEC</b> (since Linux\n2.6.2)</p>\n\n<p style=\"margin-left:22%;\">Return the security context of\nthe peer socket connected to this socket. For further\ndetails, see <a href=\"https://man.page/7/unix\">unix(7)</a> and <a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PRIORITY</b></p>\n\n<p style=\"margin-left:22%;\">Set the protocol-defined\npriority for all packets to be sent on this socket. Linux\nuses this value to order the networking queues: packets with\na higher priority may be processed first depending on the\nselected device queueing discipline. Setting a priority\noutside the range 0 to 6 requires the <b>CAP_NET_ADMIN</b>\ncapability.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PROTOCOL</b> (since Linux\n2.6.32)</p>\n\n<p style=\"margin-left:22%;\">Retrieves the socket protocol\nas an integer, returning a value such as\n<b>IPPROTO_SCTP</b>. See <a href=\"https://man.page/2/socket\">socket(2)</a> for details. This\nsocket option is read-only.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_RCVBUF</b></p>\n\n<p style=\"margin-left:22%;\">Sets or gets the maximum socket\nreceive buffer in bytes. The kernel doubles this value (to\nallow space for bookkeeping overhead) when it is set using\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a>, and this doubled value is returned by\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>. The default value is set by the\n<i>/proc/sys/net/core/rmem_default</i> file, and the maximum\nallowed value is set by the\n<i>/proc/sys/net/core/rmem_max</i> file. The minimum\n(doubled) value for this option is 256.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_RCVBUFFORCE</b> (since\nLinux 2.6.14)</p>\n\n<p style=\"margin-left:22%;\">Using this socket option, a\nprivileged (<b>CAP_NET_ADMIN</b>) process can perform the\nsame task as <b>SO_RCVBUF</b>, but the <i>rmem_max</i> limit\ncan be overridden.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_RCVLOWAT</b> and\n<b>SO_SNDLOWAT</b></p>\n\n<p style=\"margin-left:22%;\">Specify the minimum number of\nbytes in the buffer until the socket layer will pass the\ndata to the protocol (<b>SO_SNDLOWAT</b>) or the user on\nreceiving (<b>SO_RCVLOWAT</b>). These two values are\ninitialized to 1. <b>SO_SNDLOWAT</b> is not changeable on\nLinux (<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> fails with the error\n<b>ENOPROTOOPT</b>). <b>SO_RCVLOWAT</b> is changeable only\nsince Linux 2.4.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Before Linux\n2.6.28 <a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/poll\">poll(2)</a>, and <a href=\"https://man.page/7/epoll\">epoll(7)</a>\ndid not respect the <b>SO_RCVLOWAT</b> setting on Linux, and\nindicated a socket as readable when even a single byte of\ndata was available. A subsequent read from the socket would\nthen block until <b>SO_RCVLOWAT</b> bytes are available.\nSince Linux 2.6.28, <a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/poll\">poll(2)</a>, and\n<a href=\"https://man.page/7/epoll\">epoll(7)</a> indicate a socket as readable only if at\nleast <b>SO_RCVLOWAT</b> bytes are available.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_RCVTIMEO</b> and\n<b>SO_SNDTIMEO</b></p>\n\n<p style=\"margin-left:22%;\">Specify the receiving or\nsending timeouts until reporting an error. The argument is a\n<i>struct timeval</i>. If an input or output function blocks\nfor this period of time, and data has been sent or received,\nthe return value of that function will be the amount of data\ntransferred; if no data has been transferred and the timeout\nhas been reached, then -1 is returned with <i>errno</i> set\nto <b>EAGAIN</b> or <b>EWOULDBLOCK</b>, or\n<b>EINPROGRESS</b> (for <a href=\"https://man.page/2/connect\">connect(2)</a>) just as if the\nsocket was specified to be nonblocking. If the timeout is\nset to zero (the default), then the operation will never\ntimeout. Timeouts only have effect for system calls that\nperform socket I/O (e.g., <a href=\"https://man.page/2/read\">read(2)</a>, <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>,\n<a href=\"https://man.page/2/send\">send(2)</a>, <a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>); timeouts have no effect\nfor <a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/poll\">poll(2)</a>, <a href=\"https://man.page/2/epoll_wait\">epoll_wait(2)</a>,\nand so on.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_REUSEADDR</b></p>\n\n<p style=\"margin-left:22%;\">Indicates that the rules used\nin validating addresses supplied in a <a href=\"https://man.page/2/bind\">bind(2)</a> call\nshould allow reuse of local addresses. For <b>AF_INET</b>\nsockets this means that a socket may bind, except when there\nis an active listening socket bound to the address. When the\nlistening socket is bound to <b>INADDR_ANY</b> with a\nspecific port then it is not possible to bind to this port\nfor any local address. Argument is an integer boolean\nflag.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_REUSEPORT</b> (since\nLinux 3.9)</p>\n\n<p style=\"margin-left:22%;\">Permits multiple <b>AF_INET</b>\nor <b>AF_INET6</b> sockets to be bound to an identical\nsocket address. This option must be set on each socket\n(including the first socket) prior to calling <a href=\"https://man.page/2/bind\">bind(2)</a>\non the socket. To prevent port hijacking, all of the\nprocesses binding to the same address must have the same\neffective UID. This option can be employed with both TCP and\nUDP sockets.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For TCP\nsockets, this option allows <a href=\"https://man.page/2/accept\">accept(2)</a> load\ndistribution in a multi-threaded server to be improved by\nusing a distinct listener socket for each thread. This\nprovides improved load distribution as compared to\ntraditional techniques such using a single\n<a href=\"https://man.page/2/accept\">accept(2)</a>ing thread that distributes connections, or\nhaving multiple threads that compete to <a href=\"https://man.page/2/accept\">accept(2)</a>\nfrom the same socket.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For UDP\nsockets, the use of this option can provide better\ndistribution of incoming datagrams to multiple processes (or\nthreads) as compared to the traditional technique of having\nmultiple processes compete to receive datagrams on the same\nsocket.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_RXQ_OVFL</b> (since Linux\n2.6.33)</p>\n\n<p style=\"margin-left:22%;\">Indicates that an unsigned\n32-bit value ancillary message (cmsg) should be attached to\nreceived skbs indicating the number of packets dropped by\nthe socket since its creation.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_SELECT_ERR_QUEUE</b>\n(since Linux 3.10)</p>\n\n<p style=\"margin-left:22%;\">When this option is set on a\nsocket, an error condition on a socket causes notification\nnot only via the <i>exceptfds</i> set of <a href=\"https://man.page/2/select\">select(2)</a>.\nSimilarly, <a href=\"https://man.page/2/poll\">poll(2)</a> also returns a <b>POLLPRI</b>\nwhenever an <b>POLLERR</b> event is returned.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Background:\nthis option was added when waking up on an error condition\noccurred only via the <i>readfds</i> and <i>writefds</i>\nsets of <a href=\"https://man.page/2/select\">select(2)</a>. The option was added to allow\nmonitoring for error conditions via the <i>exceptfds</i>\nargument without simultaneously having to receive\nnotifications (via <i>readfds</i>) for regular data that can\nbe read from the socket. After changes in Linux 4.16, the\nuse of this flag to achieve the desired notifications is no\nlonger necessary. This option is nevertheless retained for\nbackwards compatibility.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_SNDBUF</b></p>\n\n<p style=\"margin-left:22%;\">Sets or gets the maximum socket\nsend buffer in bytes. The kernel doubles this value (to\nallow space for bookkeeping overhead) when it is set using\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a>, and this doubled value is returned by\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>. The default value is set by the\n<i>/proc/sys/net/core/wmem_default</i> file and the maximum\nallowed value is set by the\n<i>/proc/sys/net/core/wmem_max</i> file. The minimum\n(doubled) value for this option is 2048.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_SNDBUFFORCE</b> (since\nLinux 2.6.14)</p>\n\n<p style=\"margin-left:22%;\">Using this socket option, a\nprivileged (<b>CAP_NET_ADMIN</b>) process can perform the\nsame task as <b>SO_SNDBUF</b>, but the <i>wmem_max</i> limit\ncan be overridden.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_TIMESTAMP</b></p>\n\n<p style=\"margin-left:22%;\">Enable or disable the receiving\nof the <b>SO_TIMESTAMP</b> control message. The timestamp\ncontrol message is sent with level <b>SOL_SOCKET</b> and a\n<i>cmsg_type</i> of <b>SCM_TIMESTAMP</b>. The\n<i>cmsg_data</i> field is a <i>struct timeval</i> indicating\nthe reception time of the last packet passed to the user in\nthis call. See <a href=\"https://man.page/3/cmsg\">cmsg(3)</a> for details on control\nmessages.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_TIMESTAMPNS</b> (since\nLinux 2.6.22)</p>\n\n<p style=\"margin-left:22%;\">Enable or disable the receiving\nof the <b>SO_TIMESTAMPNS</b> control message. The timestamp\ncontrol message is sent with level <b>SOL_SOCKET</b> and a\n<i>cmsg_type</i> of <b>SCM_TIMESTAMPNS</b>. The\n<i>cmsg_data</i> field is a <i>struct timespec</i>\nindicating the reception time of the last packet passed to\nthe user in this call. The clock used for the timestamp is\n<b>CLOCK_REALTIME</b>. See <a href=\"https://man.page/3/cmsg\">cmsg(3)</a> for details on\ncontrol messages.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A socket cannot\nmix <b>SO_TIMESTAMP</b> and <b>SO_TIMESTAMPNS</b>: the two\nmodes are mutually exclusive.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_TYPE</b></p>\n\n<p style=\"margin-left:22%;\">Gets the socket type as an\ninteger (e.g., <b>SOCK_STREAM</b>). This socket option is\nread-only.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_BUSY_POLL</b> (since\nLinux 3.11)</p>\n\n<p style=\"margin-left:22%;\">Sets the approximate time in\nmicroseconds to busy poll on a blocking receive when there\nis no data. Increasing this value requires\n<b>CAP_NET_ADMIN</b>. The default for this option is\ncontrolled by the <i>/proc/sys/net/core/busy_read</i>\nfile.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value in\nthe <i>/proc/sys/net/core/busy_poll</i> file determines how\nlong <a href=\"https://man.page/2/select\">select(2)</a> and <a href=\"https://man.page/2/poll\">poll(2)</a> will busy poll when\nthey operate on sockets with <b>SO_BUSY_POLL</b> set and no\nevents to report are found.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In both cases,\nbusy polling will only be done when the socket last received\ndata from a network device that supports this option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">While busy\npolling may improve latency of some applications, care must\nbe taken when using it since this will increase both CPU\nutilization and power usage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Signals</b>\n<br>\nWhen writing onto a connection-oriented socket that has been\nshut down (by the local or the remote end) <b>SIGPIPE</b> is\nsent to the writing process and <b>EPIPE</b> is returned.\nThe signal is not sent when the write call specified the\n<b>MSG_NOSIGNAL</b> flag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When requested\nwith the <b>FIOSETOWN fcntl</b>(2) or <b>SIOCSPGRP\nioctl</b>(2), <b>SIGIO</b> is sent when an I/O event occurs.\nIt is possible to use <a href=\"https://man.page/2/poll\">poll(2)</a> or <a href=\"https://man.page/2/select\">select(2)</a> in\nthe signal handler to find out which socket the event\noccurred on. An alternative (in Linux 2.2) is to set a\nreal-time signal using the <b>F_SETSIG fcntl</b>(2); the\nhandler of the real time signal will be called with the file\ndescriptor in the <i>si_fd</i> field of its\n<i>siginfo_t</i>. See <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> for more\ninformation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under some\ncircumstances (e.g., multiple processes accessing a single\nsocket), the condition that caused the <b>SIGIO</b> may have\nalready disappeared when the process reacts to the signal.\nIf this happens, the process should wait again because Linux\nwill resend the signal later.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\ninterfaces</b> <br>\nThe core socket networking parameters can be accessed via\nfiles in the directory <i>/proc/sys/net/core/</i>. <i><br>\nrmem_default</i></p>\n\n<p style=\"margin-left:22%;\">contains the default setting in\nbytes of the socket receive buffer.</p>\n\n<p style=\"margin-left:11%;\"><i>rmem_max</i></p>\n\n<p style=\"margin-left:22%;\">contains the maximum socket\nreceive buffer size in bytes which a user may set by using\nthe <b>SO_RCVBUF</b> socket option.</p>\n\n<p style=\"margin-left:11%;\"><i>wmem_default</i></p>\n\n<p style=\"margin-left:22%;\">contains the default setting in\nbytes of the socket send buffer.</p>\n\n<p style=\"margin-left:11%;\"><i>wmem_max</i></p>\n\n<p style=\"margin-left:22%;\">contains the maximum socket\nsend buffer size in bytes which a user may set by using the\n<b>SO_SNDBUF</b> socket option.</p>\n\n<p style=\"margin-left:11%;\"><i>message_cost</i> and\n<i>message_burst</i></p>\n\n<p style=\"margin-left:22%;\">configure the token bucket\nfilter used to load limit warning messages caused by\nexternal network events.</p>\n\n<p style=\"margin-left:11%;\"><i>netdev_max_backlog</i></p>\n\n<p style=\"margin-left:22%;\">Maximum number of packets in\nthe global input queue.</p>\n\n<p style=\"margin-left:11%;\"><i>optmem_max</i></p>\n\n<p style=\"margin-left:22%;\">Maximum length of ancillary\ndata and user control data like the iovecs per socket.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Ioctls</b>\n<br>\nThese operations can be accessed using <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>error</i>\n<b>= ioctl(</b><i>ip_socket</i><b>,</b>\n<i>ioctl_type</i><b>,</b>\n<i>&amp;value_result</i><b>);</b></p>\n\n<p style=\"margin-left:11%;\"><b>SIOCGSTAMP</b></p>\n\n<p style=\"margin-left:22%;\">Return a <i>struct timeval</i>\nwith the receive timestamp of the last packet passed to the\nuser. This is useful for accurate round trip time\nmeasurements. See <a href=\"https://man.page/2/setitimer\">setitimer(2)</a> for a description of\n<i>struct timeval</i>. This ioctl should be used only if the\nsocket options <b>SO_TIMESTAMP</b> and <b>SO_TIMESTAMPNS</b>\nare not set on the socket. Otherwise, it returns the\ntimestamp of the last packet that was received while\n<b>SO_TIMESTAMP</b> and <b>SO_TIMESTAMPNS</b> were not set,\nor it fails if no such packet has been received, (i.e.,\n<a href=\"https://man.page/2/ioctl\">ioctl(2)</a> returns -1 with <i>errno</i> set to\n<b>ENOENT</b>).</p>\n\n<p style=\"margin-left:11%;\"><b>SIOCSPGRP</b></p>\n\n<p style=\"margin-left:22%;\">Set the process or process\ngroup that is to receive <b>SIGIO</b> or <b>SIGURG</b>\nsignals when I/O becomes possible or urgent data is\navailable. The argument is a pointer to a <i>pid_t</i>. For\nfurther details, see the description of <b>F_SETOWN</b> in\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>FIOASYNC</b></p>\n\n<p style=\"margin-left:22%;\">Change the <b>O_ASYNC</b> flag\nto enable or disable asynchronous I/O mode of the socket.\nAsynchronous I/O mode means that the <b>SIGIO</b> signal or\nthe signal set with <b>F_SETSIG</b> is raised when a new I/O\nevent occurs.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Argument is an\ninteger boolean flag. (This operation is synonymous with the\nuse of <a href=\"https://man.page/2/fcntl\">fcntl(2)</a> to set the <b>O_ASYNC</b> flag.)</p>\n\n<p style=\"margin-left:11%;\"><b>SIOCGPGRP</b></p>\n\n<p style=\"margin-left:22%;\">Get the current process or\nprocess group that receives <b>SIGIO</b> or <b>SIGURG</b>\nsignals, or 0 when none is set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Valid\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a> operations: <b><br>\nFIOGETOWN</b></p>\n\n<p style=\"margin-left:22%;\">The same as the <b>SIOCGPGRP\nioctl</b>(2).</p>\n\n<p style=\"margin-left:11%;\"><b>FIOSETOWN</b></p>\n\n<p style=\"margin-left:22%;\">The same as the <b>SIOCSPGRP\nioctl</b>(2).</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SO_BINDTODEVICE</b>\nwas introduced in Linux 2.0.30. <b>SO_PASSCRED</b> is new in\nLinux 2.2. The <i>/proc</i> interfaces were introduced in\nLinux 2.2. <b>SO_RCVTIMEO</b> and <b>SO_SNDTIMEO</b> are\nsupported since Linux 2.3.41. Earlier, timeouts were fixed\nto a protocol-specific setting, and could not be read or\nwritten.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux assumes\nthat half of the send/receive buffer is used for internal\nkernel structures; thus the values in the corresponding\n<i>/proc</i> files are twice what can be observed on the\nwire.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux will\nallow port reuse only with the <b>SO_REUSEADDR</b> option\nwhen this option was set both in the previous program that\nperformed a <a href=\"https://man.page/2/bind\">bind(2)</a> to the port and in the program\nthat wants to reuse the port. This differs from some\nimplementations (e.g., FreeBSD) where only the later program\nneeds to set the <b>SO_REUSEADDR</b> option. Typically this\ndifference is invisible, since, for example, a server\nprogram is designed to always set this option.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/wireshark\">wireshark(1)</a>,\n<a href=\"https://man.page/2/bpf\">bpf(2)</a>, <a href=\"https://man.page/2/connect\">connect(2)</a>, <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>,\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a>, <a href=\"https://man.page/2/socket\">socket(2)</a>, <a href=\"https://man.page/3/pcap\">pcap(3)</a>,\n<a href=\"https://man.page/7/address_families\">address_families(7)</a>, <a href=\"https://man.page/7/capabilities\">capabilities(7)</a>,\n<a href=\"https://man.page/7/ddp\">ddp(7)</a>, <a href=\"https://man.page/7/ip\">ip(7)</a>, <a href=\"https://man.page/7/ipv6\">ipv6(7)</a>,\n<a href=\"https://man.page/7/packet\">packet(7)</a>, <a href=\"https://man.page/7/tcp\">tcp(7)</a>, <a href=\"https://man.page/7/udp\">udp(7)</a>,\n<a href=\"https://man.page/7/unix\">unix(7)</a>, <b>tcpdump</b>(8)</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}