{"name":"vdso","description":"vdso - overview\nof the virtual ELF dynamic shared object","body":"\n\n<h1 align=\"center\">VDSO</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">vdso - overview\nof the virtual ELF dynamic shared object</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/auxv.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>void *vdso =\n(uintptr_t) getauxval(AT_SYSINFO_EHDR);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;vDSO&quot; (virtual dynamic shared object) is a small\nshared library that the kernel automatically maps into the\naddress space of all user-space applications. Applications\nusually do not need to concern themselves with these details\nas the vDSO is most commonly called by the C library. This\nway you can code in the normal way using standard functions\nand the C library will take care of using any functionality\nthat is available via the vDSO.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Why does the\nvDSO exist at all? There are some system calls the kernel\nprovides that user-space code ends up using frequently, to\nthe point that such calls can dominate overall performance.\nThis is due both to the frequency of the call as well as the\ncontext-switch overhead that results from exiting user space\nand entering the kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The rest of\nthis documentation is geared toward the curious and/or C\nlibrary writers rather than general developers. If\nyou&rsquo;re trying to call the vDSO in your own application\nrather than using the C library, you&rsquo;re most likely\ndoing it wrong.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example\nbackground</b> <br>\nMaking system calls can be slow. In x86 32-bit systems, you\ncan trigger a software interrupt (<i>int $0x80</i>) to tell\nthe kernel you wish to make a system call. However, this\ninstruction is expensive: it goes through the full\ninterrupt-handling paths in the processor&rsquo;s microcode\nas well as in the kernel. Newer processors have faster (but\nbackward incompatible) instructions to initiate system\ncalls. Rather than require the C library to figure out if\nthis functionality is available at run time, the C library\ncan use functions provided by the kernel in the vDSO.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nterminology can be confusing. On x86 systems, the vDSO\nfunction used to determine the preferred method of making a\nsystem call is named &quot;__kernel_vsyscall&quot;, but on\nx86-64, the term &quot;vsyscall&quot; also refers to an\nobsolete way to ask the kernel what time it is or what CPU\nthe caller is on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">One frequently\nused system call is <a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a>. This system call\nis called both directly by user-space applications as well\nas indirectly by the C library. Think timestamps or timing\nloops or polling&mdash;all of these frequently need to know\nwhat time it is right now. This information is also not\nsecret&mdash;any application in any privilege mode (root or\nany unprivileged user) will get the same answer. Thus the\nkernel arranges for the information required to answer this\nquestion to be placed in memory the process can access. Now\na call to <a href=\"https://man.page/2/gettimeofday\">gettimeofday(2)</a> changes from a system call\nto a normal function call and a few memory accesses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Finding the\nvDSO</b> <br>\nThe base address of the vDSO (if one exists) is passed by\nthe kernel to each program in the initial auxiliary vector\n(see <a href=\"https://man.page/3/getauxval\">getauxval(3)</a>), via the <b>AT_SYSINFO_EHDR</b>\ntag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You must not\nassume the vDSO is mapped at any particular location in the\nuser&rsquo;s memory map. The base address will usually be\nrandomized at run time every time a new process image is\ncreated (at <a href=\"https://man.page/2/execve\">execve(2)</a> time). This is done for\nsecurity reasons, to prevent &quot;return-to-libc&quot;\nattacks.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For some\narchitectures, there is also an <b>AT_SYSINFO</b> tag. This\nis used only for locating the vsyscall entry point and is\nfrequently omitted or set to 0 (meaning it&rsquo;s not\navailable). This tag is a throwback to the initial vDSO work\n(see <i>History</i> below) and its use should be\navoided.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>File\nformat</b> <br>\nSince the vDSO is a fully formed ELF image, you can do\nsymbol lookups on it. This allows new symbols to be added\nwith newer kernel releases, and allows the C library to\ndetect available functionality at run time when running\nunder different kernel versions. Oftentimes the C library\nwill do detection with the first call and then cache the\nresult for subsequent calls.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All symbols are\nalso versioned (using the GNU version format). This allows\nthe kernel to update the function signature without breaking\nbackward compatibility. This means changing the arguments\nthat the function accepts as well as the return value. Thus,\nwhen looking up a symbol in the vDSO, you must always\ninclude the version to match the ABI you expect.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Typically the\nvDSO follows the naming convention of prefixing all symbols\nwith &quot;__vdso_&quot; or &quot;__kernel_&quot; so as to\ndistinguish them from other standard symbols. For example,\nthe &quot;gettimeofday&quot; function is named\n&quot;__vdso_gettimeofday&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You use the\nstandard C calling conventions when calling any of these\nfunctions. No need to worry about weird register or stack\nbehavior.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Source</b>\n<br>\nWhen you compile the kernel, it will automatically compile\nand link the vDSO code for you. You will frequently find it\nunder the architecture-specific directory:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">find\narch/$ARCH/ -name '*vdso*.so*' -o -name '*gate*.so*'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>vDSO\nnames</b> <br>\nThe name of the vDSO varies across architectures. It will\noften show up in things like glibc&rsquo;s <a href=\"https://man.page/1/ldd\">ldd(1)</a>\noutput. The exact name should not matter to any code, so do\nnot hardcode it.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549381.png\" alt=\"Image grohtml-3549381.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>strace(1),\nseccomp(2), and the vDSO</b> <br>\nWhen tracing systems calls with <a href=\"https://man.page/1/strace\">strace(1)</a>, symbols\n(system calls) that are exported by the vDSO will <i>not</i>\nappear in the trace output. Those system calls will likewise\nnot be visible to <a href=\"https://man.page/2/seccomp\">seccomp(2)</a> filters.</p>\n\n<h2>ARCHITECTURE-SPECIFIC NOTES\n<a name=\"ARCHITECTURE-SPECIFIC NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The subsections\nbelow provide architecture-specific notes on the vDSO.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nvDSO that is used is based on the ABI of your user-space\ncode and not the ABI of the kernel. Thus, for example, when\nyou run an i386 32-bit ELF binary, you&rsquo;ll get the same\nvDSO regardless of whether you run it under an i386 32-bit\nkernel or under an x86-64 64-bit kernel. Therefore, the name\nof the user-space ABI should be used to determine which of\nthe sections below is relevant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ARM\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549382.png\" alt=\"Image grohtml-3549382.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additionally,\nthe ARM port has a code page full of utility functions.\nSince it&rsquo;s just a raw page of code, there is no ELF\ninformation for doing symbol lookups or versioning. It does\nprovide support for different versions though.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For information\non this code page, it&rsquo;s best to refer to the kernel\ndocumentation as it&rsquo;s extremely detailed and covers\neverything you need to know:\n<i>Documentation/arm/kernel_user_helpers.txt</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>aarch64\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549383.png\" alt=\"Image grohtml-3549383.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>bfin\n(Blackfin) functions (port removed in Linux 4.17)</b> <br>\nAs this CPU lacks a memory management unit (MMU), it\ndoesn&rsquo;t set up a vDSO in the normal sense. Instead, it\nmaps at boot time a few raw functions into a fixed location\nin memory. User-space applications then call directly into\nthat region. There is no provision for backward\ncompatibility beyond sniffing raw opcodes, but as this is an\nembedded CPU, it can get away with things&mdash;some of the\nobject formats it runs aren&rsquo;t even ELF based\n(they&rsquo;re bFLT/FLAT).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For information\non this code page, it&rsquo;s best to refer to the public\ndocumentation: <br>\n\nhttp://docs.blackfin.uclinux.org/doku.php?id=linux-kernel:fixed-code</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>mips\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549384.png\" alt=\"Image grohtml-3549384.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ia64\n(Itanium) functions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"46%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"46%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549385.png\" alt=\"Image grohtml-3549385.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The Itanium\nport is somewhat tricky. In addition to the vDSO above, it\nalso has &quot;light-weight system calls&quot; (also known\nas &quot;fast syscalls&quot; or &quot;fsys&quot;). You can\ninvoke these via the <i>__kernel_syscall_via_epc</i> vDSO\nhelper. The system calls listed here have the same semantics\nas if you called them directly via <a href=\"https://man.page/2/syscall\">syscall(2)</a>, so\nrefer to the relevant documentation for each. The table\nbelow lists the functions available via this mechanism.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3549386.png\" alt=\"Image grohtml-3549386.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>parisc\n(hppa) functions</b> <br>\nThe parisc port has a code page with utility functions\ncalled a gateway page. Rather than use the normal ELF\nauxiliary vector approach, it passes the address of the page\nto the process via the SR2 register. The permissions on the\npage are such that merely executing those addresses\nautomatically executes with kernel privileges and not in\nuser space. This is done to match the way HP-UX works.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since\nit&rsquo;s just a raw page of code, there is no ELF\ninformation for doing symbol lookups or versioning. Simply\ncall into the appropriate offset via the branch instruction,\nfor example:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ble\n&lt;offset&gt;(%sr2, %r0)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"77%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549387.png\" alt=\"Image grohtml-3549387.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ppc/32\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO. The\nfunctions marked with a <i>*</i> are available only when the\nkernel is a PowerPC64 (64-bit) kernel.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549388.png\" alt=\"Image grohtml-3549388.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>CLOCK_REALTIME_COARSE</b> and\n<b>CLOCK_MONOTONIC_COARSE</b> clocks are <i>not</i>\nsupported by the <i>__kernel_clock_getres</i> and\n<i>__kernel_clock_gettime</i> interfaces; the kernel falls\nback to the real system call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ppc/64\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3549389.png\" alt=\"Image grohtml-3549389.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>CLOCK_REALTIME_COARSE</b> and\n<b>CLOCK_MONOTONIC_COARSE</b> clocks are <i>not</i>\nsupported by the <i>__kernel_clock_getres</i> and\n<i>__kernel_clock_gettime</i> interfaces; the kernel falls\nback to the real system call.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>riscv\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493810.png\" alt=\"Image grohtml-35493810.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>s390\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493811.png\" alt=\"Image grohtml-35493811.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>s390x\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493812.png\" alt=\"Image grohtml-35493812.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>sh (SuperH)\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493813.png\" alt=\"Image grohtml-35493813.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>i386\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493814.png\" alt=\"Image grohtml-35493814.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>x86-64\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO. All\nof these symbols are also available without the\n&quot;__vdso_&quot; prefix, but you should ignore those and\nstick to the names below.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493815.png\" alt=\"Image grohtml-35493815.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>x86/x32\nfunctions</b> <br>\nThe table below lists the symbols exported by the vDSO.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"54%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"15%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"54%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-35493816.png\" alt=\"Image grohtml-35493816.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>History</b>\n<br>\nThe vDSO was originally just a single function&mdash;the\nvsyscall. In older kernels, you might see that name in a\nprocess&rsquo;s memory map rather than &quot;vdso&quot;.\nOver time, people realized that this mechanism was a great\nway to pass more functionality to user space, so it was\nreconceived as a vDSO in the current format.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/syscalls\">syscalls(2)</a>,\n<a href=\"https://man.page/3/getauxval\">getauxval(3)</a>, <a href=\"https://man.page/5/proc\">proc(5)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The documents,\nexamples, and source code in the Linux source code tree:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Documentation/ABI/stable/vdso\n<br>\nDocumentation/ia64/fsys.txt <br>\nDocumentation/vDSO/* (includes examples of using the\nvDSO)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">find arch/\n-iname '*vdso*' -o -iname '*gate*'</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#ARCHITECTURE-SPECIFIC NOTES\">ARCHITECTURE-SPECIFIC NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}