{"name":"udp","description":"udp - User\nDatagram Protocol for IPv4","body":"\n\n<h1 align=\"center\">UDP</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">udp - User\nDatagram Protocol for IPv4</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt; <br>\n#include &lt;netinet/in.h&gt; <br>\n#include &lt;netinet/udp.h&gt;</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>udp_socket =\nsocket(AF_INET, SOCK_DGRAM, 0);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is an\nimplementation of the User Datagram Protocol described in\nRFC&nbsp;768. It implements a connectionless, unreliable\ndatagram packet service. Packets may be reordered or\nduplicated before they arrive. UDP generates and checks\nchecksums to catch transmission errors.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a UDP\nsocket is created, its local and remote addresses are\nunspecified. Datagrams can be sent immediately using\n<a href=\"https://man.page/2/sendto\">sendto(2)</a> or <a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a> with a valid\ndestination address as an argument. When <a href=\"https://man.page/2/connect\">connect(2)</a>\nis called on the socket, the default destination address is\nset and datagrams can now be sent using <a href=\"https://man.page/2/send\">send(2)</a> or\n<a href=\"https://man.page/2/write\">write(2)</a> without specifying a destination address. It\nis still possible to send to other destinations by passing\nan address to <a href=\"https://man.page/2/sendto\">sendto(2)</a> or <a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>. In\norder to receive packets, the socket can be bound to a local\naddress first by using <a href=\"https://man.page/2/bind\">bind(2)</a>. Otherwise, the socket\nlayer will automatically assign a free local port out of the\nrange defined by\n<i>/proc/sys/net/ipv4/ip_local_port_range</i> and bind the\nsocket to <b>INADDR_ANY</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All receive\noperations return only one packet. When the packet is\nsmaller than the passed buffer, only that much data is\nreturned; when it is bigger, the packet is truncated and the\n<b>MSG_TRUNC</b> flag is set. <b>MSG_WAITALL</b> is not\nsupported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IP options may\nbe sent or received using the socket options described in\n<a href=\"https://man.page/7/ip\">ip(7)</a>. They are processed by the kernel only when the\nappropriate <i>/proc</i> parameter is enabled (but still\npassed to the user even when it is turned off). See\n<a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>MSG_DONTROUTE</b> flag is set on sending, the destination\naddress must refer to a local interface address and the\npacket is sent only to that interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default,\nLinux UDP does path MTU (Maximum Transmission Unit)\ndiscovery. This means the kernel will keep track of the MTU\nto a specific target IP address and return <b>EMSGSIZE</b>\nwhen a UDP packet write exceeds it. When this happens, the\napplication should decrease the packet size. Path MTU\ndiscovery can be also turned off using the\n<b>IP_MTU_DISCOVER</b> socket option or the\n<i>/proc/sys/net/ipv4/ip_no_pmtu_disc</i> file; see\n<a href=\"https://man.page/7/ip\">ip(7)</a> for details. When turned off, UDP will fragment\noutgoing UDP packets that exceed the interface MTU. However,\ndisabling it is not recommended for performance and\nreliability reasons.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Address\nformat</b> <br>\nUDP uses the IPv4 <i>sockaddr_in</i> address format\ndescribed in <a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Error\nhandling</b> <br>\nAll fatal errors will be passed to the user as an error\nreturn even when the socket is not connected. This includes\nasynchronous errors received from the network. You may get\nan error for an earlier packet that was sent on the same\nsocket. This behavior differs from many other BSD socket\nimplementations which don&rsquo;t pass any errors unless the\nsocket is connected. Linux&rsquo;s behavior is mandated by\n<b>RFC&nbsp;1122</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\ncompatibility with legacy code, in Linux 2.0 and 2.2 it was\npossible to set the <b>SO_BSDCOMPAT SOL_SOCKET</b> option to\nreceive remote errors only when the socket has been\nconnected (except for <b>EPROTO</b> and <b>EMSGSIZE</b>).\nLocally generated errors are always passed. Support for this\nsocket option was removed in later kernels; see\n<a href=\"https://man.page/7/socket\">socket(7)</a> for further information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n<b>IP_RECVERR</b> option is enabled, all errors are stored\nin the socket error queue, and can be received by\n<a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a> with the <b>MSG_ERRQUEUE</b> flag set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\ninterfaces</b> <br>\nSystem-wide UDP parameter settings can be accessed by files\nin the directory <i>/proc/sys/net/ipv4/</i>. <i><br>\nudp_mem</i> (since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">This is a vector of three\nintegers governing the number of pages allowed for queueing\nby all UDP sockets.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>min</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Below this number of pages, UDP is not bothered about\nits memory appetite. When the amount of memory allocated by\nUDP exceeds this number, UDP starts to moderate memory\nusage.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><i>pressure</i></p>\n\n<p style=\"margin-left:32%;\">This value was introduced to\nfollow the format of <i>tcp_mem</i> (see <a href=\"https://man.page/7/tcp\">tcp(7)</a>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><i>max</i></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>Number of pages allowed for queueing by all UDP\nsockets.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Defaults values\nfor these three items are calculated at boot time from the\namount of available memory.</p>\n\n<p style=\"margin-left:11%;\"><i>udp_rmem_min</i> (integer;\ndefault value: PAGE_SIZE; since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Minimal size, in bytes, of\nreceive buffers used by UDP sockets in moderation. Each UDP\nsocket is able to use the size for receiving data, even if\ntotal pages of UDP sockets exceed <i>udp_mem</i>\npressure.</p>\n\n<p style=\"margin-left:11%;\"><i>udp_wmem_min</i> (integer;\ndefault value: PAGE_SIZE; since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Minimal size, in bytes, of send\nbuffer used by UDP sockets in moderation. Each UDP socket is\nable to use the size for sending data, even if total pages\nof UDP sockets exceed <i>udp_mem</i> pressure.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket\noptions</b> <br>\nTo set or get a UDP socket option, call <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>\nto read or <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> to write the option with the\noption level argument set to <b>IPPROTO_UDP</b>. Unless\notherwise noted, <i>optval</i> is a pointer to an\n<i>int</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Following is a\nlist of UDP-specific socket options. For details of some\nother socket options that are also applicable for UDP\nsockets, see <a href=\"https://man.page/7/socket\">socket(7)</a>. <b><br>\nUDP_CORK</b> (since Linux 2.5.44)</p>\n\n<p style=\"margin-left:22%;\">If this option is enabled, then\nall data output on this socket is accumulated into a single\ndatagram that is transmitted when the option is disabled.\nThis option should not be used in code intended to be\nportable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Ioctls</b>\n<br>\nThese ioctls can be accessed using <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>. The\ncorrect syntax is:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>int</b>\n<i>value</i><b>;</b> <i><br>\nerror</i> <b>= ioctl(</b><i>udp_socket</i><b>,</b>\n<i>ioctl_type</i><b>, &amp;</b><i>value</i><b>);</b></p>\n\n<p style=\"margin-left:11%;\"><b>FIONREAD</b>\n(<b>SIOCINQ</b>)</p>\n\n<p style=\"margin-left:22%;\">Gets a pointer to an integer as\nargument. Returns the size of the next pending datagram in\nthe integer in bytes, or 0 when no datagram is pending.\n<b>Warning:</b> Using <b>FIONREAD</b>, it is impossible to\ndistinguish the case where no datagram is pending from the\ncase where the next pending datagram contains zero bytes of\ndata. It is safer to use <a href=\"https://man.page/2/select\">select(2)</a>, <a href=\"https://man.page/2/poll\">poll(2)</a>,\nor <a href=\"https://man.page/7/epoll\">epoll(7)</a> to distinguish these cases.</p>\n\n<p style=\"margin-left:11%;\"><b>TIOCOUTQ</b>\n(<b>SIOCOUTQ</b>)</p>\n\n<p style=\"margin-left:22%;\">Returns the number of data\nbytes in the local send queue. Supported only with Linux 2.4\nand above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition,\nall ioctls documented in <a href=\"https://man.page/7/ip\">ip(7)</a> and <a href=\"https://man.page/7/socket\">socket(7)</a>\nare supported.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">All errors\ndocumented for <a href=\"https://man.page/7/socket\">socket(7)</a> or <a href=\"https://man.page/7/ip\">ip(7)</a> may be\nreturned by a send or receive on a UDP socket. <b><br>\nECONNREFUSED</b></p>\n\n<p style=\"margin-left:22%;\">No receiver was associated with\nthe destination address. This might be caused by a previous\npacket sent over the socket.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>IP_RECVERR</b>\nis a new feature in Linux 2.2.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/ip\">ip(7)</a>,\n<a href=\"https://man.page/7/raw\">raw(7)</a>, <a href=\"https://man.page/7/socket\">socket(7)</a>, <a href=\"https://man.page/7/udplite\">udplite(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource file\n<i>Documentation/networking/ip-sysctl.txt</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC&nbsp;768\nfor the User Datagram Protocol. <br>\nRFC&nbsp;1122 for the host requirements. <br>\nRFC&nbsp;1191 for a description of path MTU discovery.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}