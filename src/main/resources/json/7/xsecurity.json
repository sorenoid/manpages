{"name":"xsecurity","description":"Xsecurity - X\ndisplay access control\n\n<h2>OVERVIEW\n<a name=\"OVERVIEW\"></a>\n</h2>\n\n\nX provides\nmechanism for implementing many access control systems. The\nsample implementation includes five mechanisms:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n\n\n<p>Host Access<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Simple host-based access control. <br>\nMIT-MAGIC-COOKIE-1</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Shared plain-text &quot;cookies&quot;. <br>\nXDM-AUTHORIZATION-1</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Secure DES based private-keys. <br>\nSUN-DES-1</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Based on Sun&rsquo;s secure rpc system. <br>\nServer Interpreted</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Server-dependent methods of access control</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Not all of these are available\nin all builds or implementations.\n\n<h2>ACCESS SYSTEM DESCRIPTIONS\n<a name=\"ACCESS SYSTEM DESCRIPTIONS\"></a>\n</h2>\n\n\nHost Access\n\n<p style=\"margin-left:22%;\">Any client on a host in the\nhost access control list is allowed access to the X server.\nThis system can work reasonably well in an environment where\neveryone trusts everyone, or when only a single person can\nlog in to a given machine, and is easy to use when the list\nof hosts used is small. This system does not work well when\nmultiple people can log in to a single machine and mutual\ntrust does not exist. The list of allowed hosts is stored in\nthe X server and can be changed with the <i>xhost</i>\ncommand. The list is stored in the server by network\naddress, not host names, so is not automatically updated if\na host changes address while the server is running. When\nusing the more secure mechanisms listed below, the host list\nis normally configured to be the empty list, so that only\nauthorized programs can connect to the display. See the\nGRANTING ACCESS section of the <i>Xserver</i> man page for\ndetails on how this list is initialized at server\nstartup.\n\n<p style=\"margin-left:11%;\">MIT-MAGIC-COOKIE-1\n\n<p style=\"margin-left:22%;\">When using MIT-MAGIC-COOKIE-1,\nthe client sends a 128 bit &quot;cookie&quot; along with the\nconnection setup information. If the cookie presented by the\nclient matches one that the X server has, the connection is\nallowed access. The cookie is chosen so that it is hard to\nguess; <i>xdm</i> generates such cookies automatically when\nthis form of access control is used. The user&rsquo;s copy\nof the cookie is usually stored in the <i>.Xauthority</i>\nfile in the home directory, although the environment\nvariable <b>XAUTHORITY</b> can be used to specify an\nalternate location. <i>Xdm</i> automatically passes a cookie\nto the server for each new login session, and stores the\ncookie in the user file at login.\n\n<p style=\"margin-left:22%; margin-top: 1em\">The cookie is\ntransmitted on the network without encryption, so there is\nnothing to prevent a network snooper from obtaining the data\nand using it to gain access to the X server. This system is\nuseful in an environment where many users are running\napplications on the same machine and want to avoid\ninterference from each other, with the caveat that this\ncontrol is only as good as the access control to the\nphysical network. In environments where network-level\nsnooping is difficult, this system can work reasonably\nwell.\n\n<p style=\"margin-left:11%;\">XDM-AUTHORIZATION-1\n\n<p style=\"margin-left:22%;\">Sites who compile with DES\nsupport can use a DES-based access control mechanism called\nXDM-AUTHORIZATION-1. It is similar in usage to\nMIT-MAGIC-COOKIE-1 in that a key is stored in the\n<i>.Xauthority</i> file and is shared with the X server.\nHowever, this key consists of two parts - a 56 bit DES\nencryption key and 64 bits of random data used as the\nauthenticator.\n\n<p style=\"margin-left:22%; margin-top: 1em\">When connecting\nto the X server, the application generates 192 bits of data\nby combining the current time in seconds (since 00:00\n1/1/1970 GMT) along with 48 bits of &quot;identifier&quot;.\nFor TCP/IPv4 connections, the identifier is the address plus\nport number; for local connections it is the process ID and\n32 bits to form a unique id (in case multiple connections to\nthe same server are made from a single process). This 192\nbit packet is then encrypted using the DES key and sent to\nthe X server, which is able to verify if the requestor is\nauthorized to connect by decrypting with the same DES key\nand validating the authenticator and additional data. This\nsystem is useful in many environments where host-based\naccess control is inappropriate and where network security\ncannot be ensured.\n\n<p style=\"margin-left:11%;\">SUN-DES-1\n\n<p style=\"margin-left:22%;\">Recent versions of SunOS (and\nsome other systems) have included a secure public key remote\nprocedure call system. This system is based on the notion of\na network principal; a user name and NIS domain pair. Using\nthis system, the X server can securely discover the actual\nuser name of the requesting process. It involves encrypting\ndata with the X server&rsquo;s public key, and so the\nidentity of the user who started the X server is needed for\nthis; this identity is stored in the <i>.Xauthority</i>\nfile. By extending the semantics of &quot;host address&quot;\nto include this notion of network principal, this form of\naccess control is very easy to use.\n\n<p style=\"margin-left:22%; margin-top: 1em\">To allow access\nby a new user, use <i>xhost</i>. For example, <br>\nxhost keith@ ruth@mit.edu <br>\nadds &quot;keith&quot; from the NIS domain of the local\nmachine, and &quot;ruth&quot; in the &quot;mit.edu&quot; NIS\ndomain. For keith or ruth to successfully connect to the\ndisplay, they must add the principal who started the server\nto their <i>.Xauthority</i> file. For example: <br>\nxauth add expo.lcs.mit.edu:0 SUN-DES-1\nunix.expo.lcs.mit.edu@our.domain.edu <br>\nThis system only works on machines which support Secure RPC,\nand only for users which have set up the appropriate\npublic/private key pairs on their system. See the Secure RPC\ndocumentation for details. To access the display from a\nremote host, you may have to do a <i>keylogin</i> on the\nremote host first.\n\n<p style=\"margin-left:11%;\">Server Interpreted\n\n<p style=\"margin-left:22%;\">The Server Interpreted method\nprovides two strings to the X server for entry in the access\ncontrol list. The first string represents the type of entry,\nand the second string contains the value of the entry. These\nstrings are interpreted by the server and different\nimplementations and builds may support different types of\nentries. The types supported in the sample implementation\nare defined in the SERVER INTERPRETED ACCESS TYPES section\nbelow. Entries of this type can be manipulated via\n<i>xhost</i>. For example to add a Server Interpreted entry\nof type localuser with a value of root, the command is\n<b>xhost +si:localuser:root</b>.\n\n<h2>THE AUTHORIZATION FILE\n<a name=\"THE AUTHORIZATION FILE\"></a>\n</h2>\n\n\nExcept for Host\nAccess control and Server Interpreted Access Control, each\nof these systems uses data stored in the <i>.Xauthority</i>\nfile to generate the correct authorization information to\npass along to the X server at connection setup.\nMIT-MAGIC-COOKIE-1 and XDM-AUTHORIZATION-1 store secret data\nin the file; so anyone who can read the file can gain access\nto the X server. SUN-DES-1 stores only the identity of the\nprincipal who started the server\n(unix.<i>hostname</i>@<i>domain</i> when the server is\nstarted by <i>xdm</i>), and so it is not useful to anyone\nnot authorized to connect to the server.\n\nEach entry in\nthe <i>.Xauthority</i> file matches a certain connection\nfamily (TCP/IP, DECnet or local connections) and X display\nname (hostname plus display number). This allows multiple\nauthorization entries for different displays to share the\nsame data file. A special connection family (FamilyWild,\nvalue 65535) causes an entry to match every display,\nallowing the entry to be used for all connections. Each\nentry additionally contains the authorization name and\nwhatever private authorization data is needed by that\nauthorization type to generate the correct information at\nconnection setup time.\n\nThe\n<i>xauth</i> program manipulates the <i>.Xauthority</i> file\nformat. It understands the semantics of the connection\nfamilies and address formats, displaying them in an easy to\nunderstand format. It also understands that SUN-DES-1 uses\nstring values for the authorization data, and displays them\nappropriately.\n\nThe X server\n(when running on a workstation) reads authorization\ninformation from a file name passed on the command line with\nthe <i>-auth</i> option (see the <i>Xserver</i> manual\npage). The authorization entries in the file are used to\ncontrol access to the server. In each of the authorization\nschemes listed above, the data needed by the server to\ninitialize an authorization scheme is identical to the data\nneeded by the client to generate the appropriate\nauthorization information, so the same file can be used by\nboth processes. This is especially useful when <i>xinit</i>\nis used. <br>\nMIT-MAGIC-COOKIE-1\n\n<p style=\"margin-left:22%;\">This system uses 128 bits of\ndata shared between the user and the X server. Any\ncollection of bits can be used. <i>Xdm</i> generates these\nkeys using a cryptographically secure pseudo random number\ngenerator, and so the key to the next session cannot be\ncomputed from the current session key.\n\n<p style=\"margin-left:11%;\">XDM-AUTHORIZATION-1\n\n<p style=\"margin-left:22%;\">This system uses two pieces of\ninformation. First, 64 bits of random data, second a 56 bit\nDES encryption key (again, random data) stored in 8 bytes,\nthe last byte of which is ignored. <i>Xdm</i> generates\nthese keys using the same random number generator as is used\nfor MIT-MAGIC-COOKIE-1.\n\n<p style=\"margin-left:11%;\">SUN-DES-1\n\n<p style=\"margin-left:22%;\">This system needs a string\nrepresentation of the principal which identifies the\nassociated X server. This information is used to encrypt the\nclient&rsquo;s authority information when it is sent to the\nX server. When <i>xdm</i> starts the X server, it uses the\nroot principal for the machine on which it is running\n(unix.<i>hostname</i>@<i>domain</i>, e.g.,\n&quot;unix.expire.lcs.mit.edu@our.domain.edu&quot;). Putting\nthe correct principal name in the <i>.Xauthority</i> file\ncauses Xlib to generate the appropriate authorization\ninformation using the secure RPC library.\n\n<h2>SERVER INTERPRETED ACCESS TYPES\n<a name=\"SERVER INTERPRETED ACCESS TYPES\"></a>\n</h2>\n\n\nThe sample\nimplementation includes several Server Interpreted\nmechanisms:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n\n\n<p>IPv6<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>IPv6 literal addresses <br>\nhostname</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Network host name <br>\nlocaluser</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Local connection user id <br>\nlocalgroup</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Local connection group id</td></tr>\n</table>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>IPv6</td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>A literal IPv6 address as defined in IETF RFC 3513. This\nallows adding IPv6 addresses when the X server supports\nIPv6, but the xhost client was compiled without IPv6\nsupport. </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">hostname\n\n<p style=\"margin-left:22%;\">The value must be a hostname as\ndefined in IETF RFC 2396. Due to Mobile IP and dynamic DNS,\nthe name service is consulted at connection authentication\ntime, unlike the traditional host access control list which\nonly contains numeric addresses and does not automatically\nupdate when a host&rsquo;s address changes. Note that this\ndefinition of hostname does not allow use of literal IP\naddresses.\n\n<p style=\"margin-left:11%;\">localuser &amp; localgroup\n\n<p style=\"margin-left:22%;\">On systems which can determine\nin a secure fashion the credentials of a client process, the\n&quot;localuser&quot; and &quot;localgroup&quot;\nauthentication methods provide access based on those\ncredentials. The format of the values provided is platform\nspecific. For POSIX &amp; UNIX platforms, if the value\nstarts with the character &rsquo;#&rsquo;, the rest of the\nstring is treated as a decimal uid or gid, otherwise the\nstring is defined as a user name or group name.\n\n<p style=\"margin-left:22%; margin-top: 1em\">If your system\nsupports this method and you use it, be warned that some\nprograms that proxy connections and are setuid or setgid may\nget authenticated as the uid or gid of the proxy process.\nFor instance, some versions of ssh will be authenticated as\nthe user root, no matter what user is running the ssh\nclient, so on systems with such software, adding access for\nlocaluser:root may allow wider access than intended to the X\ndisplay.\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n.Xauthority\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\nX(7), xdm(1),\nxauth(1), xhost(1), xinit(1), Xserver(1)","body":"\n\n<h1 align=\"center\">XSECURITY</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Xsecurity - X\ndisplay access control</p>\n\n<h2>OVERVIEW\n<a name=\"OVERVIEW\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">X provides\nmechanism for implementing many access control systems. The\nsample implementation includes five mechanisms:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n\n\n<p>Host Access</p><td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Simple host-based access control. <br>\nMIT-MAGIC-COOKIE-1</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Shared plain-text &quot;cookies&quot;. <br>\nXDM-AUTHORIZATION-1</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Secure DES based private-keys. <br>\nSUN-DES-1</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Based on Sun&rsquo;s secure rpc system. <br>\nServer Interpreted</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Server-dependent methods of access control</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">Not all of these are available\nin all builds or implementations.</p>\n\n<h2>ACCESS SYSTEM DESCRIPTIONS\n<a name=\"ACCESS SYSTEM DESCRIPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Host Access</p>\n\n<p style=\"margin-left:22%;\">Any client on a host in the\nhost access control list is allowed access to the X server.\nThis system can work reasonably well in an environment where\neveryone trusts everyone, or when only a single person can\nlog in to a given machine, and is easy to use when the list\nof hosts used is small. This system does not work well when\nmultiple people can log in to a single machine and mutual\ntrust does not exist. The list of allowed hosts is stored in\nthe X server and can be changed with the <i>xhost</i>\ncommand. The list is stored in the server by network\naddress, not host names, so is not automatically updated if\na host changes address while the server is running. When\nusing the more secure mechanisms listed below, the host list\nis normally configured to be the empty list, so that only\nauthorized programs can connect to the display. See the\nGRANTING ACCESS section of the <i>Xserver</i> man page for\ndetails on how this list is initialized at server\nstartup.</p>\n\n<p style=\"margin-left:11%;\">MIT-MAGIC-COOKIE-1</p>\n\n<p style=\"margin-left:22%;\">When using MIT-MAGIC-COOKIE-1,\nthe client sends a 128 bit &quot;cookie&quot; along with the\nconnection setup information. If the cookie presented by the\nclient matches one that the X server has, the connection is\nallowed access. The cookie is chosen so that it is hard to\nguess; <i>xdm</i> generates such cookies automatically when\nthis form of access control is used. The user&rsquo;s copy\nof the cookie is usually stored in the <i>.Xauthority</i>\nfile in the home directory, although the environment\nvariable <b>XAUTHORITY</b> can be used to specify an\nalternate location. <i>Xdm</i> automatically passes a cookie\nto the server for each new login session, and stores the\ncookie in the user file at login.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The cookie is\ntransmitted on the network without encryption, so there is\nnothing to prevent a network snooper from obtaining the data\nand using it to gain access to the X server. This system is\nuseful in an environment where many users are running\napplications on the same machine and want to avoid\ninterference from each other, with the caveat that this\ncontrol is only as good as the access control to the\nphysical network. In environments where network-level\nsnooping is difficult, this system can work reasonably\nwell.</p>\n\n<p style=\"margin-left:11%;\">XDM-AUTHORIZATION-1</p>\n\n<p style=\"margin-left:22%;\">Sites who compile with DES\nsupport can use a DES-based access control mechanism called\nXDM-AUTHORIZATION-1. It is similar in usage to\nMIT-MAGIC-COOKIE-1 in that a key is stored in the\n<i>.Xauthority</i> file and is shared with the X server.\nHowever, this key consists of two parts - a 56 bit DES\nencryption key and 64 bits of random data used as the\nauthenticator.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When connecting\nto the X server, the application generates 192 bits of data\nby combining the current time in seconds (since 00:00\n1/1/1970 GMT) along with 48 bits of &quot;identifier&quot;.\nFor TCP/IPv4 connections, the identifier is the address plus\nport number; for local connections it is the process ID and\n32 bits to form a unique id (in case multiple connections to\nthe same server are made from a single process). This 192\nbit packet is then encrypted using the DES key and sent to\nthe X server, which is able to verify if the requestor is\nauthorized to connect by decrypting with the same DES key\nand validating the authenticator and additional data. This\nsystem is useful in many environments where host-based\naccess control is inappropriate and where network security\ncannot be ensured.</p>\n\n<p style=\"margin-left:11%;\">SUN-DES-1</p>\n\n<p style=\"margin-left:22%;\">Recent versions of SunOS (and\nsome other systems) have included a secure public key remote\nprocedure call system. This system is based on the notion of\na network principal; a user name and NIS domain pair. Using\nthis system, the X server can securely discover the actual\nuser name of the requesting process. It involves encrypting\ndata with the X server&rsquo;s public key, and so the\nidentity of the user who started the X server is needed for\nthis; this identity is stored in the <i>.Xauthority</i>\nfile. By extending the semantics of &quot;host address&quot;\nto include this notion of network principal, this form of\naccess control is very easy to use.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To allow access\nby a new user, use <i>xhost</i>. For example, <br>\nxhost keith@ ruth@mit.edu <br>\nadds &quot;keith&quot; from the NIS domain of the local\nmachine, and &quot;ruth&quot; in the &quot;mit.edu&quot; NIS\ndomain. For keith or ruth to successfully connect to the\ndisplay, they must add the principal who started the server\nto their <i>.Xauthority</i> file. For example: <br>\nxauth add expo.lcs.mit.edu:0 SUN-DES-1\nunix.expo.lcs.mit.edu@our.domain.edu <br>\nThis system only works on machines which support Secure RPC,\nand only for users which have set up the appropriate\npublic/private key pairs on their system. See the Secure RPC\ndocumentation for details. To access the display from a\nremote host, you may have to do a <i>keylogin</i> on the\nremote host first.</p>\n\n<p style=\"margin-left:11%;\">Server Interpreted</p>\n\n<p style=\"margin-left:22%;\">The Server Interpreted method\nprovides two strings to the X server for entry in the access\ncontrol list. The first string represents the type of entry,\nand the second string contains the value of the entry. These\nstrings are interpreted by the server and different\nimplementations and builds may support different types of\nentries. The types supported in the sample implementation\nare defined in the SERVER INTERPRETED ACCESS TYPES section\nbelow. Entries of this type can be manipulated via\n<i>xhost</i>. For example to add a Server Interpreted entry\nof type localuser with a value of root, the command is\n<b>xhost +si:localuser:root</b>.</p>\n\n<h2>THE AUTHORIZATION FILE\n<a name=\"THE AUTHORIZATION FILE\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Except for Host\nAccess control and Server Interpreted Access Control, each\nof these systems uses data stored in the <i>.Xauthority</i>\nfile to generate the correct authorization information to\npass along to the X server at connection setup.\nMIT-MAGIC-COOKIE-1 and XDM-AUTHORIZATION-1 store secret data\nin the file; so anyone who can read the file can gain access\nto the X server. SUN-DES-1 stores only the identity of the\nprincipal who started the server\n(unix.<i>hostname</i>@<i>domain</i> when the server is\nstarted by <i>xdm</i>), and so it is not useful to anyone\nnot authorized to connect to the server.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each entry in\nthe <i>.Xauthority</i> file matches a certain connection\nfamily (TCP/IP, DECnet or local connections) and X display\nname (hostname plus display number). This allows multiple\nauthorization entries for different displays to share the\nsame data file. A special connection family (FamilyWild,\nvalue 65535) causes an entry to match every display,\nallowing the entry to be used for all connections. Each\nentry additionally contains the authorization name and\nwhatever private authorization data is needed by that\nauthorization type to generate the correct information at\nconnection setup time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>xauth</i> program manipulates the <i>.Xauthority</i> file\nformat. It understands the semantics of the connection\nfamilies and address formats, displaying them in an easy to\nunderstand format. It also understands that SUN-DES-1 uses\nstring values for the authorization data, and displays them\nappropriately.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The X server\n(when running on a workstation) reads authorization\ninformation from a file name passed on the command line with\nthe <i>-auth</i> option (see the <i>Xserver</i> manual\npage). The authorization entries in the file are used to\ncontrol access to the server. In each of the authorization\nschemes listed above, the data needed by the server to\ninitialize an authorization scheme is identical to the data\nneeded by the client to generate the appropriate\nauthorization information, so the same file can be used by\nboth processes. This is especially useful when <i>xinit</i>\nis used. <br>\nMIT-MAGIC-COOKIE-1</p>\n\n<p style=\"margin-left:22%;\">This system uses 128 bits of\ndata shared between the user and the X server. Any\ncollection of bits can be used. <i>Xdm</i> generates these\nkeys using a cryptographically secure pseudo random number\ngenerator, and so the key to the next session cannot be\ncomputed from the current session key.</p>\n\n<p style=\"margin-left:11%;\">XDM-AUTHORIZATION-1</p>\n\n<p style=\"margin-left:22%;\">This system uses two pieces of\ninformation. First, 64 bits of random data, second a 56 bit\nDES encryption key (again, random data) stored in 8 bytes,\nthe last byte of which is ignored. <i>Xdm</i> generates\nthese keys using the same random number generator as is used\nfor MIT-MAGIC-COOKIE-1.</p>\n\n<p style=\"margin-left:11%;\">SUN-DES-1</p>\n\n<p style=\"margin-left:22%;\">This system needs a string\nrepresentation of the principal which identifies the\nassociated X server. This information is used to encrypt the\nclient&rsquo;s authority information when it is sent to the\nX server. When <i>xdm</i> starts the X server, it uses the\nroot principal for the machine on which it is running\n(unix.<i>hostname</i>@<i>domain</i>, e.g.,\n&quot;unix.expire.lcs.mit.edu@our.domain.edu&quot;). Putting\nthe correct principal name in the <i>.Xauthority</i> file\ncauses Xlib to generate the appropriate authorization\ninformation using the secure RPC library.</p>\n\n<h2>SERVER INTERPRETED ACCESS TYPES\n<a name=\"SERVER INTERPRETED ACCESS TYPES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The sample\nimplementation includes several Server Interpreted\nmechanisms:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n\n\n<p>IPv6</p><td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>IPv6 literal addresses <br>\nhostname</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Network host name <br>\nlocaluser</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Local connection user id <br>\nlocalgroup</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"35%\"></td>\n<td width=\"48%\">\n\n\n<p>Local connection group id</p></td></tr>\n</table>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p>IPv6</p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>A literal IPv6 address as defined in IETF RFC 3513. This\nallows adding IPv6 addresses when the X server supports\nIPv6, but the xhost client was compiled without IPv6\nsupport.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">hostname</p>\n\n<p style=\"margin-left:22%;\">The value must be a hostname as\ndefined in IETF RFC 2396. Due to Mobile IP and dynamic DNS,\nthe name service is consulted at connection authentication\ntime, unlike the traditional host access control list which\nonly contains numeric addresses and does not automatically\nupdate when a host&rsquo;s address changes. Note that this\ndefinition of hostname does not allow use of literal IP\naddresses.</p>\n\n<p style=\"margin-left:11%;\">localuser &amp; localgroup</p>\n\n<p style=\"margin-left:22%;\">On systems which can determine\nin a secure fashion the credentials of a client process, the\n&quot;localuser&quot; and &quot;localgroup&quot;\nauthentication methods provide access based on those\ncredentials. The format of the values provided is platform\nspecific. For POSIX &amp; UNIX platforms, if the value\nstarts with the character &rsquo;#&rsquo;, the rest of the\nstring is treated as a decimal uid or gid, otherwise the\nstring is defined as a user name or group name.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If your system\nsupports this method and you use it, be warned that some\nprograms that proxy connections and are setuid or setgid may\nget authenticated as the uid or gid of the proxy process.\nFor instance, some versions of ssh will be authenticated as\nthe user root, no matter what user is running the ssh\nclient, so on systems with such software, adding access for\nlocaluser:root may allow wider access than intended to the X\ndisplay.</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">.Xauthority</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">X(7), xdm(1),\nxauth(1), xhost(1), xinit(1), Xserver(1)</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#OVERVIEW\">OVERVIEW</a>","<a href=\"#ACCESS SYSTEM DESCRIPTIONS\">ACCESS SYSTEM DESCRIPTIONS</a>","<a href=\"#THE AUTHORIZATION FILE\">THE AUTHORIZATION FILE</a>","<a href=\"#SERVER INTERPRETED ACCESS TYPES\">SERVER INTERPRETED ACCESS TYPES</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":7}