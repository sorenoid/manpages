{"name":"mount_namespaces","body":"\n\n<h1 align=\"center\">MOUNT_NAMESPACES</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">mount_namespaces\n- overview of Linux mount namespaces</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For an overview\nof namespaces, see <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mount\nnamespaces provide isolation of the list of mount points\nseen by the processes in each namespace instance. Thus, the\nprocesses in each of the mount namespace instances will see\ndistinct single-directory hierarchies.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The views\nprovided by the <i>/proc/[pid]/mounts</i>,\n<i>/proc/[pid]/mountinfo</i>, and\n<i>/proc/[pid]/mountstats</i> files (all described in\n<a href=\"https://man.page/5/proc\">proc(5)</a>) correspond to the mount namespace in which\nthe process with the PID <i>[pid]</i> resides. (All of the\nprocesses that reside in the same mount namespace will see\nthe same view in these files.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A new mount\nnamespace is created using either <a href=\"https://man.page/2/clone\">clone(2)</a> or\n<a href=\"https://man.page/2/unshare\">unshare(2)</a> with the <b>CLONE_NEWNS</b> flag. When a\nnew mount namespace is created, its mount point list is\ninitialized as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the namespace is created using <a href=\"https://man.page/2/clone\">clone(2)</a>, the\nmount point list of the child&rsquo;s namespace is a copy of\nthe mount point list in the parent&rsquo;s namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If the namespace is created using <a href=\"https://man.page/2/unshare\">unshare(2)</a>, the\nmount point list of the new namespace is a copy of the mount\npoint list in the caller&rsquo;s previous mount\nnamespace.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Subsequent\nmodifications to the mount point list (<a href=\"https://man.page/2/mount\">mount(2)</a> and\n<a href=\"https://man.page/2/umount\">umount(2)</a>) in either mount namespace will not (by\ndefault) affect the mount point list seen in the other\nnamespace (but see the following discussion of shared\nsubtrees).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Restrictions\non mount namespaces</b> <br>\nNote the following points with respect to mount\nnamespaces:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Each mount namespace has an\nowner user namespace. As explained above, when a new mount\nnamespace is created, its mount point list is initialized as\na copy of the mount point list of another mount namespace.\nIf the new namespace and the namespace from which the mount\npoint list was copied are owned by different user\nnamespaces, then the new mount namespace is considered\n<i>less privileged</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>When creating a less privileged mount namespace, shared\nmounts are reduced to slave mounts. (Shared and slave mounts\nare discussed below.) This ensures that mappings performed\nin less privileged mount namespaces will not propagate to\nmore privileged mount namespaces.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Mounts that come as a single unit from a more privileged\nmount namespace are locked together and may not be separated\nin a less privileged mount namespace. (The <a href=\"https://man.page/2/unshare\">unshare(2)</a>\n<b>CLONE_NEWNS</b> operation brings across all of the mounts\nfrom the original mount namespace as a single unit, and\nrecursive mounts that propagate between mount namespaces\npropagate as a single unit.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The <a href=\"https://man.page/2/mount\">mount(2)</a> flags <b>MS_RDONLY</b>,\n<b>MS_NOSUID</b>, <b>MS_NOEXEC</b>, and the\n&quot;atime&quot; flags (<b>MS_NOATIME</b>,\n<b>MS_NODIRATIME</b>, <b>MS_RELATIME</b>) settings become\nlocked when propagated from a more privileged to a less\nprivileged mount namespace, and may not be changed in the\nless privileged mount namespace.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>A file or directory that is a mount point in one\nnamespace that is not a mount point in another namespace,\nmay be renamed, unlinked, or removed (<a href=\"https://man.page/2/rmdir\">rmdir(2)</a>) in\nthe mount namespace in which it is not a mount point\n(subject to the usual permission checks). Consequently, the\nmount point is removed in the mount namespace where it was a\nmount point.</p></td></tr>\n</table>\n\n<p style=\"margin-left:15%; margin-top: 1em\">Previously\n(before Linux 3.18), attempting to unlink, rename, or remove\na file or directory that was a mount point in another mount\nnamespace would result in the error <b>EBUSY</b>. That\nbehavior had technical problems of enforcement (e.g., for\nNFS) and permitted denial-of-service attacks against more\nprivileged users. (i.e., preventing individual files from\nbeing updated by bind mounting on top of them).</p>\n\n<h2>SHARED SUBTREES\n<a name=\"SHARED SUBTREES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">After the\nimplementation of mount namespaces was completed, experience\nshowed that the isolation that they provided was, in some\ncases, too great. For example, in order to make a newly\nloaded optical disk available in all mount namespaces, a\nmount operation was required in each namespace. For this use\ncase, and others, the shared subtree feature was introduced\nin Linux 2.6.15. This feature allows for automatic,\ncontrolled propagation of mount and unmount <i>events</i>\nbetween namespaces (or, more precisely, between the members\nof a <i>peer group</i> that are propagating events to one\nanother).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each mount\npoint is marked (via <a href=\"https://man.page/2/mount\">mount(2)</a>) as having one of the\nfollowing <i>propagation types</i>: <b><br>\nMS_SHARED</b></p>\n\n<p style=\"margin-left:22%;\">This mount point shares events\nwith members of a peer group. Mount and unmount events\nimmediately under this mount point will propagate to the\nother mount points that are members of the peer group.\n<i>Propagation</i> here means that the same mount or unmount\nwill automatically occur under all of the other mount points\nin the peer group. Conversely, mount and unmount events that\ntake place under peer mount points will propagate to this\nmount point.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_PRIVATE</b></p>\n\n<p style=\"margin-left:22%;\">This mount point is private; it\ndoes not have a peer group. Mount and unmount events do not\npropagate into or out of this mount point.</p>\n\n<p style=\"margin-left:11%;\"><b>MS_SLAVE</b></p>\n\n<p style=\"margin-left:22%;\">Mount and unmount events\npropagate into this mount point from a (master) shared peer\ngroup. Mount and unmount events under this mount point do\nnot propagate to any peer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that a\nmount point can be the slave of another peer group while at\nthe same time sharing mount and unmount events with a peer\ngroup of which it is a member. (More precisely, one peer\ngroup can be the slave of another peer group.)</p>\n\n<p style=\"margin-left:11%;\"><b>MS_UNBINDABLE</b></p>\n\n<p style=\"margin-left:22%;\">This is like a private mount,\nand in addition this mount can&rsquo;t be bind mounted.\nAttempts to bind mount this mount (<a href=\"https://man.page/2/mount\">mount(2)</a> with the\n<b>MS_BIND</b> flag) will fail.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When a\nrecursive bind mount (<a href=\"https://man.page/2/mount\">mount(2)</a> with the\n<b>MS_BIND</b> and <b>MS_REC</b> flags) is performed on a\ndirectory subtree, any bind mounts within the subtree are\nautomatically pruned (i.e., not replicated) when replicating\nthat subtree to produce the target subtree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\ndiscussion of the propagation type assigned to a new mount,\nsee NOTES.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The propagation\ntype is a per-mount-point setting; some mount points may be\nmarked as shared (with each shared mount point being a\nmember of a distinct peer group), while others are private\n(or slaved or unbindable).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that a\nmount&rsquo;s propagation type determines whether mounts and\nunmounts of mount points <i>immediately under</i> the mount\npoint are propagated. Thus, the propagation type does not\naffect propagation of events for grandchildren and further\nremoved descendant mount points. What happens if the mount\npoint itself is unmounted is determined by the propagation\ntype that is in effect for the <i>parent</i> of the mount\npoint.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Members are\nadded to a <i>peer group</i> when a mount point is marked as\nshared and either:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>the mount point is replicated during the creation of a\nnew mount namespace; or</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>a new bind mount is created from the mount point.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In both of\nthese cases, the new mount point joins the peer group of\nwhich the existing mount point is a member.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A new peer\ngroup is also created when a child mount point is created\nunder an existing mount point that is marked as shared. In\nthis case, the new child mount point is also marked as\nshared and the resulting peer group consists of all the\nmount points that are replicated under the peers of parent\nmount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A mount ceases\nto be a member of a peer group when either the mount is\nexplicitly unmounted, or when the mount is implicitly\nunmounted because a mount namespace is removed (because it\nhas no more member processes).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The propagation\ntype of the mount points in a mount namespace can be\ndiscovered via the &quot;optional fields&quot; exposed in\n<i>/proc/[pid]/mountinfo</i>. (See <a href=\"https://man.page/5/proc\">proc(5)</a> for\ndetails of this file.) The following tags can appear in the\noptional fields for a record in that file: <i><br>\nshared:X</i></p>\n\n<p style=\"margin-left:22%;\">This mount point is shared in\npeer group <i>X</i>. Each peer group has a unique ID that is\nautomatically generated by the kernel, and all mount points\nin the same peer group will show the same ID. (These IDs are\nassigned starting from the value 1, and may be recycled when\na peer group ceases to have any members.)</p>\n\n<p style=\"margin-left:11%;\"><i>master:X</i></p>\n\n<p style=\"margin-left:22%;\">This mount is a slave to shared\npeer group <i>X</i>.</p>\n\n<p style=\"margin-left:11%;\"><i>propagate_from:X</i> (since\nLinux 2.6.26)</p>\n\n<p style=\"margin-left:22%;\">This mount is a slave and\nreceives propagation from shared peer group <i>X</i>. This\ntag will always appear in conjunction with a <i>master:X</i>\ntag. Here, <i>X</i> is the closest dominant peer group under\nthe process&rsquo;s root directory. If <i>X</i> is the\nimmediate master of the mount, or if there is no dominant\npeer group under the same root, then only the\n<i>master:X</i> field is present and not the\n<i>propagate_from:X</i> field. For further details, see\nbelow.</p>\n\n<p style=\"margin-left:11%;\"><i>unbindable</i></p>\n\n<p style=\"margin-left:22%;\">This is an unbindable\nmount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If none of the\nabove tags is present, then this is a private mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MS_SHARED\nand MS_PRIVATE example</b> <br>\nSuppose that on a terminal in the initial mount namespace,\nwe mark one mount point as shared and another as private,\nand then view the mounts in <i>/proc/self/mountinfo</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh1# <b>mount\n--make-shared /mntS</b> <br>\nsh1# <b>mount --make-private /mntP</b> <br>\nsh1# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n77 61 8:17 / /mntS rw,relatime shared:1 <br>\n83 61 8:15 / /mntP rw,relatime</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the\n<i>/proc/self/mountinfo</i> output, we see that <i>/mntS</i>\nis a shared mount in peer group 1, and that <i>/mntP</i> has\nno optional tags, indicating that it is a private mount. The\nfirst two fields in each record in this file are the unique\nID for this mount, and the mount ID of the parent mount. We\ncan further inspect this file to see that the parent mount\npoint of <i>/mntS</i> and <i>/mntP</i> is the root\ndirectory, <i>/</i>, which is mounted as private:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh1# <b>cat\n/proc/self/mountinfo | awk '$1 == 61' | sed 's/ - .*//'</b>\n<br>\n61 0 8:2 / / rw,relatime</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On a second\nterminal, we create a new mount namespace where we run a\nsecond shell and inspect the mounts:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>PS1='sh2#\n' sudo unshare -m --propagation unchanged sh</b> <br>\nsh2# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n222 145 8:17 / /mntS rw,relatime shared:1 <br>\n225 145 8:15 / /mntP rw,relatime</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The new mount\nnamespace received a copy of the initial mount\nnamespace&rsquo;s mount points. These new mount points\nmaintain the same propagation types, but have unique mount\nIDs. (The <i>--propagation&nbsp;unchanged</i> option\nprevents <a href=\"https://man.page/1/unshare\">unshare(1)</a> from marking all mounts as\nprivate when creating a new mount namespace, which it does\nby default.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the second\nterminal, we then create submounts under each of\n<i>/mntS</i> and <i>/mntP</i> and inspect the set-up:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh2# <b>mkdir\n/mntS/a</b> <br>\nsh2# <b>mount /dev/sdb6 /mntS/a</b> <br>\nsh2# <b>mkdir /mntP/b</b> <br>\nsh2# <b>mount /dev/sdb7 /mntP/b</b> <br>\nsh2# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n222 145 8:17 / /mntS rw,relatime shared:1 <br>\n225 145 8:15 / /mntP rw,relatime <br>\n178 222 8:22 / /mntS/a rw,relatime shared:2 <br>\n230 225 8:23 / /mntP/b rw,relatime</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above,\nit can be seen that <i>/mntS/a</i> was created as shared\n(inheriting this setting from its parent mount) and\n<i>/mntP/b</i> was created as a private mount.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returning to\nthe first terminal and inspecting the set-up, we see that\nthe new mount created under the shared mount point\n<i>/mntS</i> propagated to its peer mount (in the initial\nmount namespace), but the new mount created under the\nprivate mount point <i>/mntP</i> did not propagate:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh1# <b>cat\n/proc/self/mountinfo | grep '/mnt' | sed 's/ - .*//'</b>\n<br>\n77 61 8:17 / /mntS rw,relatime shared:1 <br>\n83 61 8:15 / /mntP rw,relatime <br>\n179 77 8:22 / /mntS/a rw,relatime shared:2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MS_SLAVE\nexample</b> <br>\nMaking a mount point a slave allows it to receive propagated\nmount and unmount events from a master shared peer group,\nwhile preventing it from propagating events to that master.\nThis is useful if we want to (say) receive a mount event\nwhen an optical disk is mounted in the master shared peer\ngroup (in another mount namespace), but want to prevent\nmount and unmount events under the slave mount from having\nside effects in other namespaces.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We can\ndemonstrate the effect of slaving by first marking two mount\npoints as shared in the initial mount namespace:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh1# <b>mount\n--make-shared /mntX</b> <br>\nsh1# <b>mount --make-shared /mntY</b> <br>\nsh1# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n132 83 8:23 / /mntX rw,relatime shared:1 <br>\n133 83 8:22 / /mntY rw,relatime shared:2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On a second\nterminal, we create a new mount namespace and inspect the\nmount points:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh2# <b>unshare\n-m --propagation unchanged sh</b> <br>\nsh2# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n168 167 8:23 / /mntX rw,relatime shared:1 <br>\n169 167 8:22 / /mntY rw,relatime shared:2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the new\nmount namespace, we then mark one of the mount points as a\nslave:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh2# <b>mount\n--make-slave /mntY</b> <br>\nsh2# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n168 167 8:23 / /mntX rw,relatime shared:1 <br>\n169 167 8:22 / /mntY rw,relatime master:2</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above\noutput, we see that <i>/mntY</i> is now a slave mount that\nis receiving propagation events from the shared peer group\nwith the ID 2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Continuing in\nthe new namespace, we create submounts under each of\n<i>/mntX</i> and <i>/mntY</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh2# <b>mkdir\n/mntX/a</b> <br>\nsh2# <b>mount /dev/sda3 /mntX/a</b> <br>\nsh2# <b>mkdir /mntY/b</b> <br>\nsh2# <b>mount /dev/sda5 /mntY/b</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When we inspect\nthe state of the mount points in the new mount namespace, we\nsee that <i>/mntX/a</i> was created as a new shared mount\n(inheriting the &quot;shared&quot; setting from its parent\nmount) and <i>/mntY/b</i> was created as a private\nmount:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh2# <b>cat\n/proc/self/mountinfo | grep '/mnt' | sed 's/ - .*//'</b>\n<br>\n168 167 8:23 / /mntX rw,relatime shared:1 <br>\n169 167 8:22 / /mntY rw,relatime master:2 <br>\n173 168 8:3 / /mntX/a rw,relatime shared:3 <br>\n175 169 8:5 / /mntY/b rw,relatime</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returning to\nthe first terminal (in the initial mount namespace), we see\nthat the mount <i>/mntX/a</i> propagated to the peer (the\nshared <i>/mntX</i>), but the mount <i>/mntY/b</i> was not\npropagated:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh1# <b>cat\n/proc/self/mountinfo | grep '/mnt' | sed 's/ - .*//'</b>\n<br>\n132 83 8:23 / /mntX rw,relatime shared:1 <br>\n133 83 8:22 / /mntY rw,relatime shared:2 <br>\n174 132 8:3 / /mntX/a rw,relatime shared:3</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now we create a\nnew mount point under <i>/mntY</i> in the first shell:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh1# <b>mkdir\n/mntY/c</b> <br>\nsh1# <b>mount /dev/sda1 /mntY/c</b> <br>\nsh1# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n132 83 8:23 / /mntX rw,relatime shared:1 <br>\n133 83 8:22 / /mntY rw,relatime shared:2 <br>\n174 132 8:3 / /mntX/a rw,relatime shared:3 <br>\n178 133 8:1 / /mntY/c rw,relatime shared:4</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When we examine\nthe mount points in the second mount namespace, we see that\nin this case the new mount has been propagated to the slave\nmount point, and that the new mount is itself a slave mount\n(to peer group 4):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">sh2# <b>cat\n/proc/self/mountinfo | grep '/mnt' | sed 's/ - .*//'</b>\n<br>\n168 167 8:23 / /mntX rw,relatime shared:1 <br>\n169 167 8:22 / /mntY rw,relatime master:2 <br>\n173 168 8:3 / /mntX/a rw,relatime shared:3 <br>\n175 169 8:5 / /mntY/b rw,relatime <br>\n179 169 8:1 / /mntY/c rw,relatime master:4</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>MS_UNBINDABLE\nexample</b> <br>\nOne of the primary purposes of unbindable mounts is to avoid\nthe &quot;mount point explosion&quot; problem when\nrepeatedly performing bind mounts of a higher-level subtree\nat a lower-level mount point. The problem is illustrated by\nthe following shell session.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suppose we have\na system with the following mount points:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount |\nawk '{print $1, $2, $3}'</b> <br>\n/dev/sda1 on / <br>\n/dev/sdb6 on /mntX <br>\n/dev/sdb7 on /mntY</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suppose\nfurthermore that we wish to recursively bind mount the root\ndirectory under several users&rsquo; home directories. We do\nthis for the first user, and inspect the mount points:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--rbind / /home/cecilia/</b> <br>\n# <b>mount | awk '{print $1, $2, $3}'</b> <br>\n/dev/sda1 on / <br>\n/dev/sdb6 on /mntX <br>\n/dev/sdb7 on /mntY <br>\n/dev/sda1 on /home/cecilia <br>\n/dev/sdb6 on /home/cecilia/mntX <br>\n/dev/sdb7 on /home/cecilia/mntY</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When we repeat\nthis operation for the second user, we start to see the\nexplosion problem:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--rbind / /home/henry</b> <br>\n# <b>mount | awk '{print $1, $2, $3}'</b> <br>\n/dev/sda1 on / <br>\n/dev/sdb6 on /mntX <br>\n/dev/sdb7 on /mntY <br>\n/dev/sda1 on /home/cecilia <br>\n/dev/sdb6 on /home/cecilia/mntX <br>\n/dev/sdb7 on /home/cecilia/mntY <br>\n/dev/sda1 on /home/henry <br>\n/dev/sdb6 on /home/henry/mntX <br>\n/dev/sdb7 on /home/henry/mntY <br>\n/dev/sda1 on /home/henry/home/cecilia <br>\n/dev/sdb6 on /home/henry/home/cecilia/mntX <br>\n/dev/sdb7 on /home/henry/home/cecilia/mntY</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Under\n<i>/home/henry</i>, we have not only recursively added the\n<i>/mntX</i> and <i>/mntY</i> mounts, but also the recursive\nmounts of those directories under <i>/home/cecilia</i> that\nwere created in the previous step. Upon repeating the step\nfor a third user, it becomes obvious that the explosion is\nexponential in nature:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--rbind / /home/otto</b> <br>\n# <b>mount | awk '{print $1, $2, $3}'</b> <br>\n/dev/sda1 on / <br>\n/dev/sdb6 on /mntX <br>\n/dev/sdb7 on /mntY <br>\n/dev/sda1 on /home/cecilia <br>\n/dev/sdb6 on /home/cecilia/mntX <br>\n/dev/sdb7 on /home/cecilia/mntY <br>\n/dev/sda1 on /home/henry <br>\n/dev/sdb6 on /home/henry/mntX <br>\n/dev/sdb7 on /home/henry/mntY <br>\n/dev/sda1 on /home/henry/home/cecilia <br>\n/dev/sdb6 on /home/henry/home/cecilia/mntX <br>\n/dev/sdb7 on /home/henry/home/cecilia/mntY <br>\n/dev/sda1 on /home/otto <br>\n/dev/sdb6 on /home/otto/mntX <br>\n/dev/sdb7 on /home/otto/mntY <br>\n/dev/sda1 on /home/otto/home/cecilia <br>\n/dev/sdb6 on /home/otto/home/cecilia/mntX <br>\n/dev/sdb7 on /home/otto/home/cecilia/mntY <br>\n/dev/sda1 on /home/otto/home/henry <br>\n/dev/sdb6 on /home/otto/home/henry/mntX <br>\n/dev/sdb7 on /home/otto/home/henry/mntY <br>\n/dev/sda1 on /home/otto/home/henry/home/cecilia <br>\n/dev/sdb6 on /home/otto/home/henry/home/cecilia/mntX <br>\n/dev/sdb7 on /home/otto/home/henry/home/cecilia/mntY</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The mount\nexplosion problem in the above scenario can be avoided by\nmaking each of the new mounts unbindable. The effect of\ndoing this is that recursive mounts of the root directory\nwill not replicate the unbindable mounts. We make such a\nmount for the first user:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--rbind --make-unbindable / /home/cecilia</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before going\nfurther, we show that unbindable mounts are indeed\nunbindable:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mkdir\n/mntZ</b> <br>\n# <b>mount --bind /home/cecilia /mntZ</b> <br>\nmount: wrong fs type, bad option, bad superblock on\n/home/cecilia, <br>\nmissing codepage or helper program, or other error</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In some cases\nuseful info is found in syslog - try <br>\ndmesg | tail or so.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Now we create\nunbindable recursive bind mounts for the other two\nusers:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--rbind --make-unbindable / /home/henry</b> <br>\n# <b>mount --rbind --make-unbindable / /home/otto</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Upon examining\nthe list of mount points, we see there has been no explosion\nof mount points, because the unbindable mounts were not\nreplicated under each user&rsquo;s directory:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount |\nawk '{print $1, $2, $3}'</b> <br>\n/dev/sda1 on / <br>\n/dev/sdb6 on /mntX <br>\n/dev/sdb7 on /mntY <br>\n/dev/sda1 on /home/cecilia <br>\n/dev/sdb6 on /home/cecilia/mntX <br>\n/dev/sdb7 on /home/cecilia/mntY <br>\n/dev/sda1 on /home/henry <br>\n/dev/sdb6 on /home/henry/mntX <br>\n/dev/sdb7 on /home/henry/mntY <br>\n/dev/sda1 on /home/otto <br>\n/dev/sdb6 on /home/otto/mntX <br>\n/dev/sdb7 on /home/otto/mntY</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Propagation\ntype transitions</b> <br>\nThe following table shows the effect that applying a new\npropagation type (i.e., <i>mount --make-xxxx</i>) has on the\nexisting propagation type of a mount point. The rows\ncorrespond to existing propagation types, and the columns\nare the new propagation settings. For reasons of space,\n&quot;private&quot; is abbreviated as &quot;priv&quot; and\n&quot;unbindable&quot; as &quot;unbind&quot;.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\">\n</td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"23%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\"></td>\n<td width=\"8%\"></td>\n<td width=\"7%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"8%\"></td>\n<td width=\"7%\"></td>\n<td width=\"8%\">\n</td>\n<td width=\"23%\">\n</td></tr>\n</table>\n\n\n<p align=\"center\"><img src=\"grohtml-3520431.png\" alt=\"Image grohtml-3520431.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing details to the table:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>[1]</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>If a shared mount is the only mount in its peer group,\nmaking it a slave automatically makes it private.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>[2]</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>Slaving a nonshared mount has no effect on the\nmount.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Bind\n(MS_BIND) semantics</b> <br>\nSuppose that the following command is performed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mount --bind\nA/a B/b</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, <i>A</i>\nis the source mount point, <i>B</i> is the destination mount\npoint, <i>a</i> is a subdirectory path under the mount point\n<i>A</i>, and <i>b</i> is a subdirectory path under the\nmount point <i>B</i>. The propagation type of the resulting\nmount, <i>B/b</i>, depends on the propagation types of the\nmount points <i>A</i> and <i>B</i>, and is summarized in the\nfollowing table.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3520432.png\" alt=\"Image grohtml-3520432.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that a\nrecursive bind of a subtree follows the same semantics as\nfor a bind operation on each mount in the subtree.\n(Unbindable mounts are automatically pruned at the target\nmount point.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For further\ndetails, see\n<i>Documentation/filesystems/sharedsubtree.txt</i> in the\nkernel source tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Move\n(MS_MOVE) semantics</b> <br>\nSuppose that the following command is performed:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mount --move A\nB/b</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, <i>A</i>\nis the source mount point, <i>B</i> is the destination mount\npoint, and <i>b</i> is a subdirectory path under the mount\npoint <i>B</i>. The propagation type of the resulting mount,\n<i>B/b</i>, depends on the propagation types of the mount\npoints <i>A</i> and <i>B</i>, and is summarized in the\nfollowing table.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3520433.png\" alt=\"Image grohtml-3520433.png\"></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note: moving a\nmount that resides under a shared mount is invalid.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For further\ndetails, see\n<i>Documentation/filesystems/sharedsubtree.txt</i> in the\nkernel source tree.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mount\nsemantics</b> <br>\nSuppose that we use the following command to create a mount\npoint:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mount device\nB/b</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, <i>B</i>\nis the destination mount point, and <i>b</i> is a\nsubdirectory path under the mount point <i>B</i>. The\npropagation type of the resulting mount, <i>B/b</i>, follows\nthe same rules as for a bind mount, where the propagation\ntype of the source mount is considered always to be\nprivate.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Unmount\nsemantics</b> <br>\nSuppose that we use the following command to tear down a\nmount point:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">unmount A</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here, <i>A</i>\nis a mount point on <i>B/b</i>, where <i>B</i> is the parent\nmount and <i>b</i> is a subdirectory path under the mount\npoint <i>B</i>. If <b>B</b> is shared, then all\nmost-recently-mounted mounts at <i>b</i> on mounts that\nreceive propagation from mount <i>B</i> and do not have\nsubmounts under them are unmounted.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\n/proc/[pid]/mountinfo propagate_from tag</b> <br>\nThe <i>propagate_from:X</i> tag is shown in the optional\nfields of a <i>/proc/[pid]/mountinfo</i> record in cases\nwhere a process can&rsquo;t see a slave&rsquo;s immediate\nmaster (i.e., the pathname of the master is not reachable\nfrom the filesystem root directory) and so cannot determine\nthe chain of propagation between the mounts it can see.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing example, we first create a two-link master-slave\nchain between the mounts <i>/mnt</i>, <i>/tmp/etc</i>, and\n<i>/mnt/tmp/etc</i>. Then the <a href=\"https://man.page/1/chroot\">chroot(1)</a> command is\nused to make the <i>/tmp/etc</i> mount point unreachable\nfrom the root directory, creating a situation where the\nmaster of <i>/mnt/tmp/etc</i> is not reachable from the\n(new) root directory of the process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">First, we bind\nmount the root directory onto <i>/mnt</i> and then bind\nmount <i>/proc</i> at <i>/mnt/proc</i> so that after the\nlater <a href=\"https://man.page/1/chroot\">chroot(1)</a> the <a href=\"https://man.page/5/proc\">proc(5)</a> filesystem remains\nvisible at the correct location in the chroot-ed\nenvironment.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mkdir -p\n/mnt/proc</b> <br>\n# <b>mount --bind / /mnt</b> <br>\n# <b>mount --bind /proc /mnt/proc</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Next, we ensure\nthat the <i>/mnt</i> mount is a shared mount in a new peer\ngroup (with no peers):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--make-private /mnt</b> # Isolate from any previous peer\ngroup <br>\n# <b>mount --make-shared /mnt</b> <br>\n# <b>cat /proc/self/mountinfo | grep '/mnt' | sed 's/ -\n.*//'</b> <br>\n239 61 8:2 / /mnt ... shared:102 <br>\n248 239 0:4 / /mnt/proc ... shared:5</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Next, we bind\nmount <i>/mnt/etc</i> onto <i>/tmp/etc</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mkdir -p\n/tmp/etc</b> <br>\n# <b>mount --bind /mnt/etc /tmp/etc</b> <br>\n# <b>cat /proc/self/mountinfo | egrep '/mnt|/tmp/' | sed 's/\n- .*//'</b> <br>\n239 61 8:2 / /mnt ... shared:102 <br>\n248 239 0:4 / /mnt/proc ... shared:5 <br>\n267 40 8:2 /etc /tmp/etc ... shared:102</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Initially,\nthese two mount points are in the same peer group, but we\nthen make the <i>/tmp/etc</i> a slave of <i>/mnt/etc</i>,\nand then make <i>/tmp/etc</i> shared as well, so that it can\npropagate events to the next slave in the chain:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mount\n--make-slave /tmp/etc</b> <br>\n# <b>mount --make-shared /tmp/etc</b> <br>\n# <b>cat /proc/self/mountinfo | egrep '/mnt|/tmp/' | sed 's/\n- .*//'</b> <br>\n239 61 8:2 / /mnt ... shared:102 <br>\n248 239 0:4 / /mnt/proc ... shared:5 <br>\n267 40 8:2 /etc /tmp/etc ... shared:105 master:102</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then we bind\nmount <i>/tmp/etc</i> onto <i>/mnt/tmp/etc</i>. Again, the\ntwo mount points are initially in the same peer group, but\nwe then make <i>/mnt/tmp/etc</i> a slave of\n<i>/tmp/etc</i>:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>mkdir -p\n/mnt/tmp/etc</b> <br>\n# <b>mount --bind /tmp/etc /mnt/tmp/etc</b> <br>\n# <b>mount --make-slave /mnt/tmp/etc</b> <br>\n# <b>cat /proc/self/mountinfo | egrep '/mnt|/tmp/' | sed 's/\n- .*//'</b> <br>\n239 61 8:2 / /mnt ... shared:102 <br>\n248 239 0:4 / /mnt/proc ... shared:5 <br>\n267 40 8:2 /etc /tmp/etc ... shared:105 master:102 <br>\n273 239 8:2 /etc /mnt/tmp/etc ... master:105</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above,\nwe see that <i>/mnt</i> is the master of the slave\n<i>/tmp/etc</i>, which in turn is the master of the slave\n<i>/mnt/tmp/etc</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then\n<a href=\"https://man.page/1/chroot\">chroot(1)</a> to the <i>/mnt</i> directory, which renders\nthe mount with ID 267 unreachable from the (new) root\ndirectory:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>chroot\n/mnt</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When we examine\nthe state of the mounts inside the chroot-ed environment, we\nsee the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># <b>cat\n/proc/self/mountinfo | sed 's/ - .*//'</b> <br>\n239 61 8:2 / / ... shared:102 <br>\n248 239 0:4 / /proc ... shared:5 <br>\n273 239 8:2 /etc /tmp/etc ... master:105\npropagate_from:102</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Above, we see\nthat the mount with ID 273 is a slave whose master is the\npeer group 105. The mount point for that master is\nunreachable, and so a <i>propagate_from</i> tag is\ndisplayed, indicating that the closest dominant peer group\n(i.e., the nearest reachable mount in the slave chain) is\nthe peer group with the ID 102 (corresponding to the\n<i>/mnt</i> mount point before the <a href=\"https://man.page/1/chroot\">chroot(1)</a> was\nperformed.</p>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Mount\nnamespaces first appeared in Linux 2.4.19.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Namespaces are\na Linux-specific feature.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The propagation\ntype assigned to a new mount point depends on the\npropagation type of the parent mount. If the mount point has\na parent (i.e., it is a non-root mount point) and the\npropagation type of the parent is <b>MS_SHARED</b>, then the\npropagation type of the new mount is also <b>MS_SHARED</b>.\nOtherwise, the propagation type of the new mount is\n<b>MS_PRIVATE</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notwithstanding\nthe fact that the default propagation type for new mount\npoints is in many cases <b>MS_PRIVATE</b>, <b>MS_SHARED</b>\nis typically more useful. For this reason, <a href=\"https://man.page/1/systemd\">systemd(1)</a>\nautomatically remounts all mount points as <b>MS_SHARED</b>\non system startup. Thus, on most modern systems, the default\npropagation type is in practice <b>MS_SHARED</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since, when one\nuses <a href=\"https://man.page/1/unshare\">unshare(1)</a> to create a mount namespace, the goal\nis commonly to provide full isolation of the mount points in\nthe new namespace, <a href=\"https://man.page/1/unshare\">unshare(1)</a> (since\n<i>util-linux</i> version 2.27) in turn reverses the step\nperformed by <a href=\"https://man.page/1/systemd\">systemd(1)</a>, by making all mount points\nprivate in the new namespace. That is, <a href=\"https://man.page/1/unshare\">unshare(1)</a>\nperforms the equivalent of the following in the new mount\nnamespace:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mount\n--make-rprivate /</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To prevent\nthis, one can use the <i>--propagation&nbsp;unchanged</i>\noption to <a href=\"https://man.page/1/unshare\">unshare(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An application\nthat creates a new mount namespace directly using\n<a href=\"https://man.page/2/clone\">clone(2)</a> or <a href=\"https://man.page/2/unshare\">unshare(2)</a> may desire to prevent\npropagation of mount events to other mount namespaces (as is\ndone by <a href=\"https://man.page/1/unshare\">unshare(1)</a>). This can be done by changing the\npropagation type of mount points in the new namespace to\neither <b>MS_SLAVE</b> or <b>MS_PRIVATE</b>. using a call\nsuch as the following:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">mount(NULL,\n&quot;/&quot;, MS_SLAVE | MS_REC, NULL);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\ndiscussion of propagation types when moving mounts\n(<b>MS_MOVE</b>) and creating bind mounts (<b>MS_BIND</b>),\nsee <i>Documentation/filesystems/sharedsubtree.txt</i>.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n<a href=\"https://man.page/2/pivot_root\">pivot_root(2)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/unshare\">unshare(1)</a>,\n<a href=\"https://man.page/2/clone\">clone(2)</a>, <a href=\"https://man.page/2/mount\">mount(2)</a>, <a href=\"https://man.page/2/pivot_root\">pivot_root(2)</a>,\n<a href=\"https://man.page/2/setns\">setns(2)</a>, <a href=\"https://man.page/2/umount\">umount(2)</a>, <a href=\"https://man.page/2/unshare\">unshare(2)</a>,\n<a href=\"https://man.page/5/proc\">proc(5)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>,\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>, <b>findmnt</b>(8),\n<b>mount</b>(8), <b>pivot_root</b>(8), <b>umount</b>(8)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Documentation/filesystems/sharedsubtree.txt</i>\nin the kernel source tree.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SHARED SUBTREES\">SHARED SUBTREES</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}