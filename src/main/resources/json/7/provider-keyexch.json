{"name":"provider-keyexch","description":"provider-keyexch\n- The keyexch library &lt;-&gt; provider functions","body":"\n\n<h1 align=\"center\">PROVIDER-KEYEXCH</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-keyexch\n- The keyexch library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n#include &lt;openssl/core_names.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Context management */ <br>\nvoid *OSSL_FUNC_keyexch_newctx(void *provctx); <br>\nvoid OSSL_FUNC_keyexch_freectx(void *ctx); <br>\nvoid *OSSL_FUNC_keyexch_dupctx(void *ctx); <br>\n/* Shared secret derivation */ <br>\nint OSSL_FUNC_keyexch_init(void *ctx, void *provkey, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_keyexch_set_peer(void *ctx, void *provkey);\n<br>\nint OSSL_FUNC_keyexch_derive(void *ctx, unsigned char\n*secret, size_t *secretlen, <br>\nsize_t outlen); <br>\n/* Key Exchange parameters */ <br>\nint OSSL_FUNC_keyexch_set_ctx_params(void *ctx, const\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_keyexch_settable_ctx_params(void\n*ctx, <br>\nvoid *provctx); <br>\nint OSSL_FUNC_keyexch_get_ctx_params(void *ctx, OSSL_PARAM\nparams[]); <br>\nconst OSSL_PARAM *OSSL_FUNC_keyexch_gettable_ctx_params(void\n*ctx, <br>\nvoid *provctx);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ndocumentation is primarily aimed at provider authors. See\n<a href=\"https://man.page/7/provider\">provider(7)</a> for further information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The key\nexchange ( <small>OSSL_OP_KEYEXCH</small> ) operation\nenables providers to implement key exchange algorithms and\nmake them available to applications via\n<a href=\"https://man.page/3/EVP_PKEY_derive\">EVP_PKEY_derive(3)</a> and other related functions).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from an\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_FUNC_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_keyexch_newctx()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef void\n*(OSSL_FUNC_keyexch_newctx_fn)(void *provctx); <br>\nstatic ossl_inline OSSL_FUNC_keyexch_newctx_fn <br>\nOSSL_FUNC_keyexch_newctx(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_keyexch_newctx\nOSSL_FUNC_KEYEXCH_NEWCTX <br>\nOSSL_FUNC_keyexch_freectx OSSL_FUNC_KEYEXCH_FREECTX <br>\nOSSL_FUNC_keyexch_dupctx OSSL_FUNC_KEYEXCH_DUPCTX <br>\nOSSL_FUNC_keyexch_init OSSL_FUNC_KEYEXCH_INIT <br>\nOSSL_FUNC_keyexch_set_peer OSSL_FUNC_KEYEXCH_SET_PEER <br>\nOSSL_FUNC_keyexch_derive OSSL_FUNC_KEYEXCH_DERIVE <br>\nOSSL_FUNC_keyexch_set_ctx_params\nOSSL_FUNC_KEYEXCH_SET_CTX_PARAMS <br>\nOSSL_FUNC_keyexch_settable_ctx_params\nOSSL_FUNC_KEYEXCH_SETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_keyexch_get_ctx_params\nOSSL_FUNC_KEYEXCH_GET_CTX_PARAMS <br>\nOSSL_FUNC_keyexch_gettable_ctx_params\nOSSL_FUNC_KEYEXCH_GETTABLE_CTX_PARAMS</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A key exchange\nalgorithm implementation may not implement all of these\nfunctions. In order to be a consistent set of functions a\nprovider must implement OSSL_FUNC_keyexch_newctx,\nOSSL_FUNC_keyexch_freectx, OSSL_FUNC_keyexch_init and\nOSSL_FUNC_keyexch_derive. All other functions are\noptional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A key exchange\nalgorithm must also implement some mechanism for generating,\nloading or importing keys via the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation. See\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a> for further details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nManagement Functions <br>\nOSSL_FUNC_keyexch_newctx()</b> should create and return a\npointer to a provider side structure for holding context\ninformation during a key exchange operation. A pointer to\nthis context will be passed back in a number of the other\nkey exchange operation function calls. The parameter\n<i>provctx</i> is the provider context generated during\nprovider initialisation (see <a href=\"https://man.page/7/provider\">provider(7)</a>).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_freectx()</b>\nis passed a pointer to the provider side key exchange\ncontext in the <i>ctx</i> parameter. This function should\nfree any resources associated with that context.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_dupctx()</b>\nshould duplicate the provider side key exchange context in\nthe <i>ctx</i> parameter and return the duplicate copy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Shared\nSecret Derivation Functions <br>\nOSSL_FUNC_keyexch_init()</b> initialises a key exchange\noperation given a provider side key exchange context in the\n<i>ctx</i> parameter, and a pointer to a provider key object\nin the <i>provkey</i> parameter. The <i>params</i>, if not\n<small>NULL,</small> should be set on the context in a\nmanner similar to using\n<b>OSSL_FUNC_keyexch_set_params()</b>. The key object should\nhave been previously generated, loaded or imported into the\nprovider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_set_peer()</b>\nis called to supply the peer&rsquo;s public key (in the\n<i>provkey</i> parameter) to be used when deriving the\nshared secret. It is also passed a previously initialised\nkey exchange context in the <i>ctx</i> parameter. The key\nobject should have been previously generated, loaded or\nimported into the provider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_derive()</b>\nperforms the actual key exchange itself by deriving a shared\nsecret. A previously initialised key exchange context is\npassed in the <i>ctx</i> parameter. The derived secret\nshould be written to the location <i>secret</i> which should\nnot exceed <i>outlen</i> bytes. The length of the shared\nsecret should be written to <i>*secretlen</i>. If\n<i>secret</i> is <small>NULL</small> then the maximum length\nof the shared secret should be written to\n<i>*secretlen</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Key Exchange\nParameters Functions <br>\nOSSL_FUNC_keyexch_set_ctx_params()</b> sets key exchange\nparameters associated with the given provider side key\nexchange context <i>ctx</i> to <i>params</i>, see\n&quot;Common Key Exchange parameters&quot;. Any parameter\nsettings are additional to any that were previously set.\nPassing <small>NULL</small> for <i>params</i> should return\ntrue.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_get_ctx_params()</b>\ngets key exchange parameters associated with the given\nprovider side key exchange context <i>ctx</i> into\n<i>params</i>, see &quot;Common Key Exchange\nparameters&quot;. Passing <small>NULL</small> for\n<i>params</i> should return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_settable_ctx_params()</b>\nyields a constant <b><small>OSSL_PARAM</small></b> array\nthat describes the settable parameters, i.e. parameters that\ncan be used with <b>OP_signature_set_ctx_params()</b>. If\n<b>OSSL_FUNC_keyexch_settable_ctx_params()</b> is present,\n<b>OSSL_FUNC_keyexch_set_ctx_params()</b> must also be\npresent, and vice versa. Similarly,\n<b>OSSL_FUNC_keyexch_gettable_ctx_params()</b> yields a\nconstant <b><small>OSSL_PARAM</small></b> array that\ndescribes the gettable parameters, i.e. parameters that can\nbe handled by <b>OP_signature_get_ctx_params()</b>. If\n<b>OSSL_FUNC_keyexch_gettable_ctx_params()</b> is present,\n<b>OSSL_FUNC_keyexch_get_ctx_params()</b> must also be\npresent, and vice versa. See\n<b><small>OSSL_PARAM</small></b> (3) for the use of\n<b><small>OSSL_PARAM</small></b> as parameter\ndescriptor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Notice that not\nall settable parameters are also gettable, and vice\nversa.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Common Key\nExchange parameters</b> <br>\nSee <b><small>OSSL_PARAM</small></b> (3) for further details\non the parameters structure used by the\n<b>OSSL_FUNC_keyexch_set_ctx_params()</b> and\n<b>OSSL_FUNC_keyexch_get_ctx_params()</b> functions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Common\nparameters currently recognised by built-in key exchange\nalgorithms are as follows. <br>\n&quot;kdf-type&quot; (\n<b><small>OSSL_EXCHANGE_PARAM_KDF_TYPE</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets or gets the Key Derivation\nFunction type to apply within the associated key exchange\nctx.</p>\n\n<p style=\"margin-left:11%;\">&quot;kdf-digest&quot; (\n<b><small>OSSL_EXCHANGE_PARAM_KDF_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets or gets the Digest\nalgorithm to be used as part of the Key Derivation Function\nassociated with the given key exchange ctx.</p>\n\n<p style=\"margin-left:11%;\">&quot;kdf-digest-props&quot; (\n<b><small>OSSL_EXCHANGE_PARAM_KDF_DIGEST_PROPS</small></b> )\n&lt; <small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets properties to be used upon\nlook up of the implementation for the selected Digest\nalgorithm for the Key Derivation Function associated with\nthe given key exchange ctx.</p>\n\n<p style=\"margin-left:11%;\">&quot;kdf-outlen&quot; (\n<b><small>OSSL_EXCHANGE_PARAM_KDF_OUTLEN</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets or gets the desired size\nfor the output of the chosen Key Derivation Function\nassociated with the given key exchange ctx. The length of\nthe &quot;kdf-outlen&quot; parameter should not exceed that\nof a <b>size_t</b>.</p>\n\n<p style=\"margin-left:11%;\">&quot;kdf-ukm&quot; (\n<b><small>OSSL_EXCHANGE_PARAM_KDF_UKM</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the User Key Material to\nbe used as part of the selected Key Derivation Function\nassociated with the given key exchange ctx.</p>\n\n<p style=\"margin-left:11%;\">&quot;kdf-ukm&quot; (\n<b><small>OSSL_EXCHANGE_PARAM_KDF_UKM</small></b> )\n&lt;octet string ptr&gt;</p>\n\n<p style=\"margin-left:17%;\">Gets a pointer to the User Key\nMaterial to be used as part of the selected Key Derivation\nFunction associated with the given key exchange ctx.\nProviders usually do not need to support this gettable\nparameter as its sole purpose is to support functionality of\nthe deprecated <b>EVP_PKEY_CTX_get0_ecdh_kdf_ukm()</b> and\n<b>EVP_PKEY_CTX_get0_dh_kdf_ukm()</b> functions.</p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_newctx()</b>\nand <b>OSSL_FUNC_keyexch_dupctx()</b> should return the\nnewly created provider side key exchange context, or\n<small>NULL</small> on failure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_init()</b>,\n<b>OSSL_FUNC_keyexch_set_peer()</b>,\n<b>OSSL_FUNC_keyexch_derive()</b>,\n<b>OSSL_FUNC_keyexch_set_params()</b>, and\n<b>OSSL_FUNC_keyexch_get_params()</b> should return 1 for\nsuccess or 0 on error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_keyexch_settable_ctx_params()</b>\nand <b>OSSL_FUNC_keyexch_gettable_ctx_params()</b> should\nalways return a constant <b><small>OSSL_PARAM</small></b>\narray.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a></p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The provider\n<small>KEYEXCH</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2022 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}