{"name":"provider-signature","body":"\n\n<h1 align=\"center\">PROVIDER-SIGNATURE</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-signature\n- The signature library &lt;-&gt; provider functions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n#include &lt;openssl/core_names.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Context management */ <br>\nvoid *OSSL_FUNC_signature_newctx(void *provctx, const char\n*propq); <br>\nvoid OSSL_FUNC_signature_freectx(void *ctx); <br>\nvoid *OSSL_FUNC_signature_dupctx(void *ctx); <br>\n/* Signing */ <br>\nint OSSL_FUNC_signature_sign_init(void *ctx, void *provkey,\n<br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_signature_sign(void *ctx, unsigned char *sig,\nsize_t *siglen, <br>\nsize_t sigsize, const unsigned char *tbs, size_t tbslen);\n<br>\n/* Verifying */ <br>\nint OSSL_FUNC_signature_verify_init(void *ctx, void\n*provkey, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_signature_verify(void *ctx, const unsigned\nchar *sig, size_t siglen, <br>\nconst unsigned char *tbs, size_t tbslen); <br>\n/* Verify Recover */ <br>\nint OSSL_FUNC_signature_verify_recover_init(void *ctx, void\n*provkey, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_signature_verify_recover(void *ctx, unsigned\nchar *rout, <br>\nsize_t *routlen, size_t routsize, <br>\nconst unsigned char *sig, size_t siglen); <br>\n/* Digest Sign */ <br>\nint OSSL_FUNC_signature_digest_sign_init(void *ctx, const\nchar *mdname, <br>\nconst char *props, void *provkey, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_signature_digest_sign_update(void *ctx, const\nunsigned char *data, <br>\nsize_t datalen); <br>\nint OSSL_FUNC_signature_digest_sign_final(void *ctx,\nunsigned char *sig, <br>\nsize_t *siglen, size_t sigsize); <br>\nint OSSL_FUNC_signature_digest_sign(void *ctx, <br>\nunsigned char *sigret, size_t *siglen, <br>\nsize_t sigsize, const unsigned char *tbs, <br>\nsize_t tbslen); <br>\n/* Digest Verify */ <br>\nint OSSL_FUNC_signature_digest_verify_init(void *ctx, const\nchar *mdname, <br>\nconst char *props, void *provkey, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_signature_digest_verify_update(void *ctx, <br>\nconst unsigned char *data, <br>\nsize_t datalen); <br>\nint OSSL_FUNC_signature_digest_verify_final(void *ctx, const\nunsigned char *sig, <br>\nsize_t siglen); <br>\nint OSSL_FUNC_signature_digest_verify(void *ctx, const\nunsigned char *sig, <br>\nsize_t siglen, const unsigned char *tbs, <br>\nsize_t tbslen); <br>\n/* Signature parameters */ <br>\nint OSSL_FUNC_signature_get_ctx_params(void *ctx, OSSL_PARAM\nparams[]); <br>\nconst OSSL_PARAM\n*OSSL_FUNC_signature_gettable_ctx_params(void *ctx, <br>\nvoid *provctx); <br>\nint OSSL_FUNC_signature_set_ctx_params(void *ctx, const\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM\n*OSSL_FUNC_signature_settable_ctx_params(void *ctx, <br>\nvoid *provctx); <br>\n/* MD parameters */ <br>\nint OSSL_FUNC_signature_get_ctx_md_params(void *ctx,\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM *\nOSSL_FUNC_signature_gettable_ctx_md_params(void *ctx); <br>\nint OSSL_FUNC_signature_set_ctx_md_params(void *ctx, const\nOSSL_PARAM params[]); <br>\nconst OSSL_PARAM *\nOSSL_FUNC_signature_settable_ctx_md_params(void *ctx);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ndocumentation is primarily aimed at provider authors. See\n<a href=\"https://man.page/7/provider\">provider(7)</a> for further information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The signature (\n<small>OSSL_OP_SIGNATURE</small> ) operation enables\nproviders to implement signature algorithms and make them\navailable to applications via the <small>API</small>\nfunctions <a href=\"https://man.page/3/EVP_PKEY_sign\">EVP_PKEY_sign(3)</a>,\n<a href=\"https://man.page/3/EVP_PKEY_verify\">EVP_PKEY_verify(3)</a>, and\n<a href=\"https://man.page/3/EVP_PKEY_verify_recover\">EVP_PKEY_verify_recover(3)</a> (as well as other related\nfunctions).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All\n&quot;functions&quot; mentioned here are passed as function\npointers between <i>libcrypto</i> and the provider in\n<b><small>OSSL_DISPATCH</small></b> arrays via\n<b><small>OSSL_ALGORITHM</small></b> arrays that are\nreturned by the provider&rsquo;s\n<b>provider_query_operation()</b> function (see\n&quot;Provider Functions&quot; in\n<a href=\"https://man.page/7/provider-base\">provider-base(7)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All these\n&quot;functions&quot; have a corresponding function type\ndefinition named <b>OSSL_FUNC_{name}_fn</b>, and a helper\nfunction to retrieve the function pointer from an\n<b><small>OSSL_DISPATCH</small></b> element named\n<b>OSSL_FUNC_{name}</b>. For example, the\n&quot;function&quot; <b>OSSL_FUNC_signature_newctx()</b> has\nthese:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">typedef void\n*(OSSL_FUNC_signature_newctx_fn)(void *provctx, const char\n*propq); <br>\nstatic ossl_inline OSSL_FUNC_signature_newctx_fn <br>\nOSSL_FUNC_signature_newctx(const OSSL_DISPATCH *opf);</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>OSSL_DISPATCH</small></b>\narrays are indexed by numbers that are provided as macros in\n<b>openssl-core_dispatch.h</b>(7), as follows:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_signature_newctx\nOSSL_FUNC_SIGNATURE_NEWCTX <br>\nOSSL_FUNC_signature_freectx OSSL_FUNC_SIGNATURE_FREECTX <br>\nOSSL_FUNC_signature_dupctx OSSL_FUNC_SIGNATURE_DUPCTX <br>\nOSSL_FUNC_signature_sign_init OSSL_FUNC_SIGNATURE_SIGN_INIT\n<br>\nOSSL_FUNC_signature_sign OSSL_FUNC_SIGNATURE_SIGN <br>\nOSSL_FUNC_signature_verify_init\nOSSL_FUNC_SIGNATURE_VERIFY_INIT <br>\nOSSL_FUNC_signature_verify OSSL_FUNC_SIGNATURE_VERIFY <br>\nOSSL_FUNC_signature_verify_recover_init\nOSSL_FUNC_SIGNATURE_VERIFY_RECOVER_INIT <br>\nOSSL_FUNC_signature_verify_recover\nOSSL_FUNC_SIGNATURE_VERIFY_RECOVER <br>\nOSSL_FUNC_signature_digest_sign_init\nOSSL_FUNC_SIGNATURE_DIGEST_SIGN_INIT <br>\nOSSL_FUNC_signature_digest_sign_update\nOSSL_FUNC_SIGNATURE_DIGEST_SIGN_UPDATE <br>\nOSSL_FUNC_signature_digest_sign_final\nOSSL_FUNC_SIGNATURE_DIGEST_SIGN_FINAL <br>\nOSSL_FUNC_signature_digest_sign\nOSSL_FUNC_SIGNATURE_DIGEST_SIGN <br>\nOSSL_FUNC_signature_digest_verify_init\nOSSL_FUNC_SIGNATURE_DIGEST_VERIFY_INIT <br>\nOSSL_FUNC_signature_digest_verify_update\nOSSL_FUNC_SIGNATURE_DIGEST_VERIFY_UPDATE <br>\nOSSL_FUNC_signature_digest_verify_final\nOSSL_FUNC_SIGNATURE_DIGEST_VERIFY_FINAL <br>\nOSSL_FUNC_signature_digest_verify\nOSSL_FUNC_SIGNATURE_DIGEST_VERIFY <br>\nOSSL_FUNC_signature_get_ctx_params\nOSSL_FUNC_SIGNATURE_GET_CTX_PARAMS <br>\nOSSL_FUNC_signature_gettable_ctx_params\nOSSL_FUNC_SIGNATURE_GETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_signature_set_ctx_params\nOSSL_FUNC_SIGNATURE_SET_CTX_PARAMS <br>\nOSSL_FUNC_signature_settable_ctx_params\nOSSL_FUNC_SIGNATURE_SETTABLE_CTX_PARAMS <br>\nOSSL_FUNC_signature_get_ctx_md_params\nOSSL_FUNC_SIGNATURE_GET_CTX_MD_PARAMS <br>\nOSSL_FUNC_signature_gettable_ctx_md_params\nOSSL_FUNC_SIGNATURE_GETTABLE_CTX_MD_PARAMS <br>\nOSSL_FUNC_signature_set_ctx_md_params\nOSSL_FUNC_SIGNATURE_SET_CTX_MD_PARAMS <br>\nOSSL_FUNC_signature_settable_ctx_md_params\nOSSL_FUNC_SIGNATURE_SETTABLE_CTX_MD_PARAMS</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A signature\nalgorithm implementation may not implement all of these\nfunctions. In order to be a consistent set of functions we\nmust have at least a set of context functions\n(OSSL_FUNC_signature_newctx and OSSL_FUNC_signature_freectx)\nas well as a set of &quot;signature&quot; functions, i.e. at\nleast one of: <br>\nOSSL_FUNC_signature_sign_init and OSSL_FUNC_signature_sign\n<br>\nOSSL_FUNC_signature_verify_init and\nOSSL_FUNC_signature_verify <br>\nOSSL_FUNC_signature_verify_recover_init and <br>\nOSSL_FUNC_signature_verify_init <br>\nOSSL_FUNC_signature_digest_sign_init, <br>\nOSSL_FUNC_signature_digest_sign_update and <br>\nOSSL_FUNC_signature_digest_sign_final <br>\nOSSL_FUNC_signature_digest_verify_init, <br>\nOSSL_FUNC_signature_digest_verify_update and <br>\nOSSL_FUNC_signature_digest_verify_final <br>\nOSSL_FUNC_signature_digest_sign_init and <br>\nOSSL_FUNC_signature_digest_sign <br>\nOSSL_FUNC_signature_digest_verify_init and <br>\nOSSL_FUNC_signature_digest_verify</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_FUNC_signature_set_ctx_params\nand OSSL_FUNC_signature_settable_ctx_params are optional,\nbut if one of them is present then the other one must also\nbe present. The same applies to\nOSSL_FUNC_signature_get_ctx_params and\nOSSL_FUNC_signature_gettable_ctx_params, as well as the\n&quot;md_params&quot; functions. The\nOSSL_FUNC_signature_dupctx function is optional.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A signature\nalgorithm must also implement some mechanism for generating,\nloading or importing keys via the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation. See\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a> for further details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nManagement Functions <br>\nOSSL_FUNC_signature_newctx()</b> should create and return a\npointer to a provider side structure for holding context\ninformation during a signature operation. A pointer to this\ncontext will be passed back in a number of the other\nsignature operation function calls. The parameter\n<i>provctx</i> is the provider context generated during\nprovider initialisation (see <a href=\"https://man.page/7/provider\">provider(7)</a>). The\n<i>propq</i> parameter is a property query string that may\nbe (optionally) used by the provider during any\n&quot;fetches&quot; that it may perform (if it performs\nany).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_freectx()</b>\nis passed a pointer to the provider side signature context\nin the <i>ctx</i> parameter. This function should free any\nresources associated with that context.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_dupctx()</b>\nshould duplicate the provider side signature context in the\n<i>ctx</i> parameter and return the duplicate copy.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Signing\nFunctions <br>\nOSSL_FUNC_signature_sign_init()</b> initialises a context\nfor signing given a provider side signature context in the\n<i>ctx</i> parameter, and a pointer to a provider key object\nin the <i>provkey</i> parameter. The <i>params</i>, if not\n<small>NULL,</small> should be set on the context in a\nmanner similar to using\n<b>OSSL_FUNC_signature_set_ctx_params()</b>. The key object\nshould have been previously generated, loaded or imported\ninto the provider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_sign()</b>\nperforms the actual signing itself. A previously initialised\nsignature context is passed in the <i>ctx</i> parameter. The\ndata to be signed is pointed to be the <i>tbs</i> parameter\nwhich is <i>tbslen</i> bytes long. Unless <i>sig</i> is\n<small>NULL,</small> the signature should be written to the\nlocation pointed to by the <i>sig</i> parameter and it\nshould not exceed <i>sigsize</i> bytes in length. The length\nof the signature should be written to <i>*siglen</i>. If\n<i>sig</i> is <small>NULL</small> then the maximum length of\nthe signature should be written to <i>*siglen</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Verify\nFunctions <br>\nOSSL_FUNC_signature_verify_init()</b> initialises a context\nfor verifying a signature given a provider side signature\ncontext in the <i>ctx</i> parameter, and a pointer to a\nprovider key object in the <i>provkey</i> parameter. The\n<i>params</i>, if not <small>NULL,</small> should be set on\nthe context in a manner similar to using\n<b>OSSL_FUNC_signature_set_ctx_params()</b>. The key object\nshould have been previously generated, loaded or imported\ninto the provider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_verify()</b>\nperforms the actual verification itself. A previously\ninitialised signature context is passed in the <i>ctx</i>\nparameter. The data that the signature covers is pointed to\nbe the <i>tbs</i> parameter which is <i>tbslen</i> bytes\nlong. The signature is pointed to by the <i>sig</i>\nparameter which is <i>siglen</i> bytes long.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Verify\nRecover Functions <br>\nOSSL_FUNC_signature_verify_recover_init()</b> initialises a\ncontext for recovering the signed data given a provider side\nsignature context in the <i>ctx</i> parameter, and a pointer\nto a provider key object in the <i>provkey</i> parameter.\nThe <i>params</i>, if not <small>NULL,</small> should be set\non the context in a manner similar to using\n<b>OSSL_FUNC_signature_set_ctx_params()</b>. The key object\nshould have been previously generated, loaded or imported\ninto the provider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_verify_recover()</b>\nperforms the actual verify recover itself. A previously\ninitialised signature context is passed in the <i>ctx</i>\nparameter. The signature is pointed to by the <i>sig</i>\nparameter which is <i>siglen</i> bytes long. Unless\n<i>rout</i> is <small>NULL,</small> the recovered data\nshould be written to the location pointed to by <i>rout</i>\nwhich should not exceed <i>routsize</i> bytes in length. The\nlength of the recovered data should be written to\n<i>*routlen</i>. If <i>rout</i> is <small>NULL</small> then\nthe maximum size of the output buffer is written to the\n<i>routlen</i> parameter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Digest Sign\nFunctions <br>\nOSSL_FUNC_signature_digeset_sign_init()</b> initialises a\ncontext for signing given a provider side signature context\nin the <i>ctx</i> parameter, and a pointer to a provider key\nobject in the <i>provkey</i> parameter. The <i>params</i>,\nif not <small>NULL,</small> should be set on the context in\na manner similar to using\n<b>OSSL_FUNC_signature_set_ctx_params()</b> and\n<b>OSSL_FUNC_signature_set_ctx_md_params()</b>. The key\nobject should have been previously generated, loaded or\nimported into the provider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;. The name of the digest to be\nused will be in the <i>mdname</i> parameter. There may also\nbe properties to be used in fetching the digest in the\n<i>props</i> parameter, although this may be ignored by\nproviders.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_digest_sign_update()</b>\nprovides data to be signed in the <i>data</i> parameter\nwhich should be of length <i>datalen</i>. A previously\ninitialised signature context is passed in the <i>ctx</i>\nparameter. This function may be called multiple times to\ncumulatively add data to be signed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_digest_sign_final()</b>\nfinalises a signature operation previously started through\n<b>OSSL_FUNC_signature_digest_sign_init()</b> and\n<b>OSSL_FUNC_signature_digest_sign_update()</b> calls. Once\nfinalised no more data will be added through\n<b>OSSL_FUNC_signature_digest_sign_update()</b>. A\npreviously initialised signature context is passed in the\n<i>ctx</i> parameter. Unless <i>sig</i> is\n<small>NULL,</small> the signature should be written to the\nlocation pointed to by the <i>sig</i> parameter and it\nshould not exceed <i>sigsize</i> bytes in length. The length\nof the signature should be written to <i>*siglen</i>. If\n<i>sig</i> is <small>NULL</small> then the maximum length of\nthe signature should be written to <i>*siglen</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_digest_sign()</b>\nimplements a &quot;one shot&quot; digest sign operation\npreviously started through\n<b>OSSL_FUNC_signature_digeset_sign_init()</b>. A previously\ninitialised signature context is passed in the <i>ctx</i>\nparameter. The data to be signed is in <i>tbs</i> which\nshould be <i>tbslen</i> bytes long. Unless <i>sig</i> is\n<small>NULL,</small> the signature should be written to the\nlocation pointed to by the <i>sig</i> parameter and it\nshould not exceed <i>sigsize</i> bytes in length. The length\nof the signature should be written to <i>*siglen</i>. If\n<i>sig</i> is <small>NULL</small> then the maximum length of\nthe signature should be written to <i>*siglen</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Digest\nVerify Functions <br>\nOSSL_FUNC_signature_digeset_verify_init()</b> initialises a\ncontext for verifying given a provider side verification\ncontext in the <i>ctx</i> parameter, and a pointer to a\nprovider key object in the <i>provkey</i> parameter. The\n<i>params</i>, if not <small>NULL,</small> should be set on\nthe context in a manner similar to\n<b>OSSL_FUNC_signature_set_ctx_params()</b> and\n<b>OSSL_FUNC_signature_set_ctx_md_params()</b>. The key\nobject should have been previously generated, loaded or\nimported into the provider using the key management (\n<small>OSSL_OP_KEYMGMT</small> ) operation (see\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>&gt;. The name of the digest to be\nused will be in the <i>mdname</i> parameter. There may also\nbe properties to be used in fetching the digest in the\n<i>props</i> parameter, although this may be ignored by\nproviders.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_digest_verify_update()</b>\nprovides data to be verified in the <i>data</i> parameter\nwhich should be of length <i>datalen</i>. A previously\ninitialised verification context is passed in the <i>ctx</i>\nparameter. This function may be called multiple times to\ncumulatively add data to be verified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_digest_verify_final()</b>\nfinalises a verification operation previously started\nthrough <b>OSSL_FUNC_signature_digest_verify_init()</b> and\n<b>OSSL_FUNC_signature_digest_verify_update()</b> calls.\nOnce finalised no more data will be added through\n<b>OSSL_FUNC_signature_digest_verify_update()</b>. A\npreviously initialised verification context is passed in the\n<i>ctx</i> parameter. The signature to be verified is in\n<i>sig</i> which is <i>siglen</i> bytes long.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_digest_verify()</b>\nimplements a &quot;one shot&quot; digest verify operation\npreviously started through\n<b>OSSL_FUNC_signature_digeset_verify_init()</b>. A\npreviously initialised verification context is passed in the\n<i>ctx</i> parameter. The data to be verified is in\n<i>tbs</i> which should be <i>tbslen</i> bytes long. The\nsignature to be verified is in <i>sig</i> which is\n<i>siglen</i> bytes long.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Signature\nparameters</b> <br>\nSee <b><small>OSSL_PARAM</small></b> (3) for further details\non the parameters structure used by the\n<b>OSSL_FUNC_signature_get_ctx_params()</b> and\n<b>OSSL_FUNC_signature_set_ctx_params()</b> functions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_get_ctx_params()</b>\ngets signature parameters associated with the given provider\nside signature context <i>ctx</i> and stored them in\n<i>params</i>. Passing <small>NULL</small> for <i>params</i>\nshould return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_set_ctx_params()</b>\nsets the signature parameters associated with the given\nprovider side signature context <i>ctx</i> to <i>params</i>.\nAny parameter settings are additional to any that were\npreviously set. Passing <small>NULL</small> for\n<i>params</i> should return true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Common\nparameters currently recognised by built-in signature\nalgorithms are as follows. <br>\n&quot;digest&quot; (\n<b><small>OSSL_SIGNATURE_PARAM_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Get or sets the name of the\ndigest algorithm used for the input to the signature\nfunctions. It is required in order to calculate the\n&quot;algorithm-id&quot;.</p>\n\n<p style=\"margin-left:11%;\">&quot;properties&quot; (\n<b><small>OSSL_SIGNATURE_PARAM_PROPERTIES</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the name of the property\nquery associated with the &quot;digest&quot; algorithm.\n<small>NULL</small> is used if this optional value is not\nset.</p>\n\n<p style=\"margin-left:11%;\">&quot;digest-size&quot; (\n<b><small>OSSL_SIGNATURE_PARAM_DIGEST_SIZE</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Gets or sets the output size of\nthe digest algorithm used for the input to the signature\nfunctions. The length of the &quot;digest-size&quot;\nparameter should not exceed that of a <b>size_t</b>.</p>\n\n<p style=\"margin-left:11%;\">&quot;algorithm-id&quot; (\n<b><small>OSSL_SIGNATURE_PARAM_ALGORITHM_ID</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">Gets the <small>DER</small>\nencoded AlgorithmIdentifier that corresponds to the\ncombination of signature algorithm and digest algorithm for\nthe signature operation.</p>\n\n<p style=\"margin-left:11%;\">&quot;kat&quot; (\n<b><small>OSSL_SIGNATURE_PARAM_KAT</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets a flag to modify the sign\noperation to return an error if the initial calculated\nsignature is invalid. In the normal mode of operation - new\nrandom values are chosen until the signature operation\nsucceeds. By default it retries until a signature is\ncalculated. Setting the value to 0 causes the sign operation\nto retry, otherwise the sign operation is only tried once\nand returns whether or not it was successful. Known answer\ntests can be performed if the random generator is overridden\nto supply known values that either pass or fail.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_gettable_ctx_params()</b>\nand <b>OSSL_FUNC_signature_settable_ctx_params()</b> get a\nconstant <b><small>OSSL_PARAM</small></b> array that\ndescribes the gettable and settable parameters, i.e.\nparameters that can be used with\n<b>OSSL_FUNC_signature_get_ctx_params()</b> and\n<b>OSSL_FUNC_signature_set_ctx_params()</b> respectively.\nSee <b><small>OSSL_PARAM</small></b> (3) for the use of\n<b><small>OSSL_PARAM</small></b> as parameter\ndescriptor.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>MD</small>\nparameters</b> <br>\nSee <b><small>OSSL_PARAM</small></b> (3) for further details\non the parameters structure used by the\n<b>OSSL_FUNC_signature_get_md_ctx_params()</b> and\n<b>OSSL_FUNC_signature_set_md_ctx_params()</b>\nfunctions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_get_md_ctx_params()</b>\ngets digest parameters associated with the given provider\nside digest signature context <i>ctx</i> and stores them in\n<i>params</i>. Passing <small>NULL</small> for <i>params</i>\nshould return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_set_ms_ctx_params()</b>\nsets the digest parameters associated with the given\nprovider side digest signature context <i>ctx</i> to\n<i>params</i>. Any parameter settings are additional to any\nthat were previously set. Passing <small>NULL</small> for\n<i>params</i> should return true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameters\ncurrently recognised by built-in signature algorithms are\nthe same as those for built-in digest algorithms. See\n&quot;Digest Parameters&quot; in <a href=\"https://man.page/7/provider-digest\">provider-digest(7)</a>\nfor further information.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_gettable_md_ctx_params()</b>\nand <b>OSSL_FUNC_signature_settable_md_ctx_params()</b> get\na constant <b><small>OSSL_PARAM</small></b> array that\ndescribes the gettable and settable digest parameters, i.e.\nparameters that can be used with\n<b>OSSL_FUNC_signature_get_md_ctx_params()</b> and\n<b>OSSL_FUNC_signature_set_md_ctx_params()</b> respectively.\nSee <b><small>OSSL_PARAM</small></b> (3) for the use of\n<b><small>OSSL_PARAM</small></b> as parameter\ndescriptor.</p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_newctx()</b>\nand <b>OSSL_FUNC_signature_dupctx()</b> should return the\nnewly created provider side signature, or\n<small>NULL</small> on failure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_signature_gettable_ctx_params()</b>,\n<b>OSSL_FUNC_signature_settable_ctx_params()</b>,\n<b>OSSL_FUNC_signature_gettable_md_ctx_params()</b> and\n<b>OSSL_FUNC_signature_settable_md_ctx_params()</b>, return\nthe gettable or settable parameters in a constant\n<b><small>OSSL_PARAM</small></b> array.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All other\nfunctions should return 1 for success or 0 on error.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a></p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The provider\n<small>SIGNATURE</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}