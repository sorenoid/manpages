{"name":"gitremote-helpers","description":"gitremote-helpers\n- Helper programs to interact with remote repositories","body":"\n\n<h1 align=\"center\">GITREMOTE-HELPERS</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitremote-helpers\n- Helper programs to interact with remote repositories</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\nremote-&lt;transport&gt;</i> &lt;repository&gt;\n[&lt;URL&gt;]</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Remote helper\nprograms are normally not used directly by end users, but\nthey are invoked by Git when it needs to interact with\nremote repositories Git does not support natively. A given\nhelper will implement a subset of the capabilities\ndocumented here. When Git needs to interact with a\nrepository using a remote helper, it spawns the helper as an\nindependent process, sends commands to the helper&rsquo;s\nstandard input, and expects results from the helper&rsquo;s\nstandard output. Because a remote helper runs as an\nindependent process from Git, there is no need to re-link\nGit to add a new helper, nor any need to link the helper\nwith the implementation of Git.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Every helper\nmust support the &quot;capabilities&quot; command, which Git\nuses to determine what other commands the helper will\naccept. Those other commands can be used to discover and\nupdate remote refs, transport objects between the object\ndatabase and the remote repository, and update the local\nobject store.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git comes with\na &quot;curl&quot; family of remote helpers, that handle\nvarious transport protocols, such as <i>git-remote-http</i>,\n<i>git-remote-https</i>, <i>git-remote-ftp</i> and\n<i>git-remote-ftps</i>. They implement the capabilities\n<i>fetch</i>, <i>option</i>, and <i>push</i>.</p>\n\n<h2>INVOCATION\n<a name=\"INVOCATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Remote helper\nprograms are invoked with one or (optionally) two arguments.\nThe first argument specifies a remote repository as in Git;\nit is either the name of a configured remote or a URL. The\nsecond argument specifies a URL; it is usually of the form\n<i>&lt;transport&gt;://&lt;address&gt;</i>, but any\narbitrary string is possible. The <b>GIT_DIR</b> environment\nvariable is set up for the remote helper and can be used to\ndetermine where to store additional data or from which\ndirectory to invoke auxiliary Git commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When Git\nencounters a URL of the form\n<i>&lt;transport&gt;://&lt;address&gt;</i>, where\n<i>&lt;transport&gt;</i> is a protocol that it cannot handle\nnatively, it automatically invokes <i>git\nremote-&lt;transport&gt;</i> with the full URL as the second\nargument. If such a URL is encountered directly on the\ncommand line, the first argument is the same as the second,\nand if it is encountered in a configured remote, the first\nargument is the name of that remote.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A URL of the\nform <i>&lt;transport&gt;::&lt;address&gt;</i> explicitly\ninstructs Git to invoke <i>git remote-&lt;transport&gt;</i>\nwith <i>&lt;address&gt;</i> as the second argument. If such\na URL is encountered directly on the command line, the first\nargument is <i>&lt;address&gt;</i>, and if it is encountered\nin a configured remote, the first argument is the name of\nthat remote.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additionally,\nwhen a configured remote has <b>remote.&lt;name&gt;.vcs</b>\nset to <i>&lt;transport&gt;</i>, Git explicitly invokes\n<i>git remote-&lt;transport&gt;</i> with <i>&lt;name&gt;</i>\nas the first argument. If set, the second argument is\n<b>remote.&lt;name&gt;.url</b>; otherwise, the second\nargument is omitted.</p>\n\n<h2>INPUT FORMAT\n<a name=\"INPUT FORMAT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git sends the\nremote helper a list of commands on standard input, one per\nline. The first command is always the <i>capabilities</i>\ncommand, in response to which the remote helper must print a\nlist of the capabilities it supports (see below) followed by\na blank line. The response to the capabilities command\ndetermines what commands Git uses in the remainder of the\ncommand stream.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The command\nstream is terminated by a blank line. In some cases\n(indicated in the documentation of the relevant commands),\nthis blank line is followed by a payload in some other\nprotocol (e.g., the pack protocol), while in others it\nindicates the end of input.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Capabilities</b>\n<br>\nEach remote helper is expected to support only a subset of\ncommands. The operations a helper supports are declared to\nGit in the response to the <b>capabilities</b> command (see\nCOMMANDS, below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the\nfollowing, we list all defined capabilities and for each we\nlist which commands a helper with that capability must\nprovide.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>Capabilities\nfor Pushing</big></b></p>\n\n<p style=\"margin-left:17%;\"><i>connect</i></p>\n\n<p style=\"margin-left:23%;\">Can attempt to connect to\n<i>git receive-pack</i> (for pushing), <i>git\nupload-pack</i>, etc for communication using git&rsquo;s\nnative packfile protocol. This requires a bidirectional,\nfull-duplex connection.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>connect</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>stateless-connect</i></p>\n\n<p style=\"margin-left:23%;\">Experimental; for internal use\nonly. Can attempt to connect to a remote server for\ncommunication using git&rsquo;s wire-protocol version 2. See\nthe documentation for the stateless-connect command for more\ninformation.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>stateless-connect</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>push</i></p>\n\n<p style=\"margin-left:23%;\">Can discover remote refs and\npush local commits and the history leading up to them to new\nor existing remote refs.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>list for-push</i>, <i>push</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>export</i></p>\n\n<p style=\"margin-left:23%;\">Can discover remote refs and\npush specified objects from a fast-import stream to remote\nrefs.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>list for-push</i>, <i>export</i>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a helper\nadvertises <i>connect</i>, Git will use it if possible and\nfall back to another capability if the helper requests so\nwhen connecting (see the <i>connect</i> command under\nCOMMANDS). When choosing between <i>push</i> and\n<i>export</i>, Git prefers <i>push</i>. Other frontends may\nhave some other order of preference.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>no-private-update</i></p>\n\n<p style=\"margin-left:23%;\">When using the <i>refspec</i>\ncapability, git normally updates the private ref on\nsuccessful push. This update is disabled when the\nremote-helper declares the capability\n<i>no-private-update</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>Capabilities\nfor Fetching</big></b></p>\n\n<p style=\"margin-left:17%;\"><i>connect</i></p>\n\n<p style=\"margin-left:23%;\">Can try to connect to <i>git\nupload-pack</i> (for fetching), <i>git receive-pack</i>, etc\nfor communication using the Git&rsquo;s native packfile\nprotocol. This requires a bidirectional, full-duplex\nconnection.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>connect</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>stateless-connect</i></p>\n\n<p style=\"margin-left:23%;\">Experimental; for internal use\nonly. Can attempt to connect to a remote server for\ncommunication using git&rsquo;s wire-protocol version 2. See\nthe documentation for the stateless-connect command for more\ninformation.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>stateless-connect</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>fetch</i></p>\n\n<p style=\"margin-left:23%;\">Can discover remote refs and\ntransfer objects reachable from them to the local object\nstore.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>list</i>, <i>fetch</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>import</i></p>\n\n<p style=\"margin-left:23%;\">Can discover remote refs and\noutput objects reachable from them as a stream in\nfast-import format.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Supported\ncommands: <i>list</i>, <i>import</i>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>check-connectivity</i></p>\n\n<p style=\"margin-left:23%;\">Can guarantee that when a clone\nis requested, the received pack is self contained and is\nconnected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If a helper\nadvertises <i>connect</i>, Git will use it if possible and\nfall back to another capability if the helper requests so\nwhen connecting (see the <i>connect</i> command under\nCOMMANDS). When choosing between <i>fetch</i> and\n<i>import</i>, Git prefers <i>fetch</i>. Other frontends may\nhave some other order of preference.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><big>Miscellaneous\ncapabilities</big></b></p>\n\n<p style=\"margin-left:17%;\"><i>option</i></p>\n\n<p style=\"margin-left:23%;\">For specifying settings like\n<b>verbosity</b> (how much output to write to stderr) and\n<b>depth</b> (how much history is wanted in the case of a\nshallow clone) that affect how other commands are carried\nout.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>refspec</i>\n&lt;refspec&gt;</p>\n\n<p style=\"margin-left:23%;\">For remote helpers that\nimplement <i>import</i> or <i>export</i>, this capability\nallows the refs to be constrained to a private namespace,\ninstead of writing to refs/heads or refs/remotes directly.\nIt is recommended that all importers providing the\n<i>import</i> capability use this. It&rsquo;s mandatory for\n<i>export</i>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">A helper\nadvertising the capability <b>refspec\nrefs/heads/*:refs/svn/origin/branches/*</b> is saying that,\nwhen it is asked to <b>import refs/heads/topic</b>, the\nstream it outputs will update the\n<b>refs/svn/origin/branches/topic</b> ref.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This capability\ncan be advertised multiple times. The first applicable\nrefspec takes precedence. The left-hand of refspecs\nadvertised with this capability must cover all refs reported\nby the list command. If no <i>refspec</i> capability is\nadvertised, there is an implied <b>refspec *:*</b>.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">When writing\nremote-helpers for decentralized version control systems, it\nis advised to keep a local copy of the repository to\ninteract with, and to let the private namespace refs point\nto this local repository, while the refs/remotes namespace\nis used to track the remote repository.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>bidi-import</i></p>\n\n<p style=\"margin-left:23%;\">This modifies the <i>import</i>\ncapability. The fast-import commands <i>cat-blob</i> and\n<i>ls</i> can be used by remote-helpers to retrieve\ninformation about blobs and trees that already exist in\nfast-import&rsquo;s memory. This requires a channel from\nfast-import to the remote-helper. If it is advertised in\naddition to &quot;import&quot;, Git establishes a pipe from\nfast-import to the remote-helper&rsquo;s stdin. It follows\nthat Git and fast-import are both connected to the\nremote-helper&rsquo;s stdin. Because Git can send multiple\ncommands to the remote-helper it is required that helpers\nthat use <i>bidi-import</i> buffer all <i>import</i>\ncommands of a batch before sending data to fast-import. This\nis to prevent mixing commands and fast-import responses on\nthe helper&rsquo;s stdin.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>export-marks</i>\n&lt;file&gt;</p>\n\n<p style=\"margin-left:23%;\">This modifies the <i>export</i>\ncapability, instructing Git to dump the internal marks table\nto &lt;file&gt; when complete. For details, read up on\n<b>--export-marks=&lt;file&gt;</b> in\n<a href=\"https://man.page/1/git-fast-export\">git-fast-export(1)</a>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>import-marks</i>\n&lt;file&gt;</p>\n\n<p style=\"margin-left:23%;\">This modifies the <i>export</i>\ncapability, instructing Git to load the marks specified in\n&lt;file&gt; before processing any input. For details, read\nup on <b>--import-marks=&lt;file&gt;</b> in\n<a href=\"https://man.page/1/git-fast-export\">git-fast-export(1)</a>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>signed-tags</i></p>\n\n<p style=\"margin-left:23%;\">This modifies the <i>export</i>\ncapability, instructing Git to pass\n<b>--signed-tags=verbatim</b> to <a href=\"https://man.page/1/git-fast-export\">git-fast-export(1)</a>.\nIn the absence of this capability, Git will use\n<b>--signed-tags=warn-strip</b>.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>object-format</i></p>\n\n<p style=\"margin-left:23%;\">This indicates that the helper\nis able to interact with the remote side using an explicit\nhash algorithm extension.</p>\n\n<h2>COMMANDS\n<a name=\"COMMANDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Commands are\ngiven by the caller on the helper&rsquo;s standard input,\none per line.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>capabilities</i></p>\n\n<p style=\"margin-left:17%;\">Lists the capabilities of the\nhelper, one per line, ending with a blank line. Each\ncapability may be preceded with <i>*</i>, which marks them\nmandatory for Git versions using the remote helper to\nunderstand. Any unknown mandatory capability is a fatal\nerror.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Support for\nthis command is mandatory.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>list</i></p>\n\n<p style=\"margin-left:17%;\">Lists the refs, one per line,\nin the format &quot;&lt;value&gt; &lt;name&gt; [&lt;attr&gt;\n...]&quot;. The value may be a hex sha1 hash,\n&quot;@&lt;dest&gt;&quot; for a symref,\n&quot;:&lt;keyword&gt; &lt;value&gt;&quot; for a key-value\npair, or &quot;?&quot; to indicate that the helper could not\nget the value of the ref. A space-separated list of\nattributes follows the name; unrecognized attributes are\nignored. The list ends with a blank line.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See REF LIST\nATTRIBUTES for a list of currently defined attributes. See\nREF LIST KEYWORDS for a list of currently defined\nkeywords.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;fetch&quot; or &quot;import&quot;\ncapability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>list\nfor-push</i></p>\n\n<p style=\"margin-left:17%;\">Similar to <i>list</i>, except\nthat it is used if and only if the caller wants to the\nresulting ref list to prepare push commands. A helper\nsupporting both push and fetch can use this to distinguish\nfor which operation the output of <i>list</i> is going to be\nused, possibly reducing the amount of work that needs to be\nperformed.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;push&quot; or &quot;export&quot;\ncapability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option</i>\n&lt;name&gt; &lt;value&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the transport helper\noption &lt;name&gt; to &lt;value&gt;. Outputs a single line\ncontaining one of <i>ok</i> (option successfully set),\n<i>unsupported</i> (option not recognized) or <i>error\n&lt;msg&gt;</i> (option &lt;name&gt; is supported but\n&lt;value&gt; is not valid for it). Options should be set\nbefore other commands, and may influence the behavior of\nthose commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See OPTIONS for\na list of currently defined options.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;option&quot; capability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>fetch</i>\n&lt;sha1&gt; &lt;name&gt;</p>\n\n<p style=\"margin-left:17%;\">Fetches the given object,\nwriting the necessary objects to the database. Fetch\ncommands are sent in a batch, one per line, terminated with\na blank line. Outputs a single blank line when all fetch\ncommands in the same batch are complete. Only objects which\nwere reported in the output of <i>list</i> with a sha1 may\nbe fetched this way.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Optionally may\noutput a <i>lock &lt;file&gt;</i> line indicating the full\npath of a file under <b>$GIT_DIR/objects/pack</b> which is\nkeeping a pack until refs can be suitably updated. The path\nmust end with <b>.keep</b>. This is a mechanism to name a\n&lt;pack,idx,keep&gt; tuple by giving only the keep\ncomponent. The kept pack will not be deleted by a concurrent\nrepack, even though its objects may not be referenced until\nthe fetch completes. The <b>.keep</b> file will be deleted\nat the conclusion of the fetch.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If option\n<i>check-connectivity</i> is requested, the helper must\noutput <i>connectivity-ok</i> if the clone is self-contained\nand connected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;fetch&quot; capability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>push</i>\n+&lt;src&gt;:&lt;dst&gt;</p>\n\n<p style=\"margin-left:17%;\">Pushes the given local\n&lt;src&gt; commit or branch to the remote branch described\nby &lt;dst&gt;. A batch sequence of one or more <i>push</i>\ncommands is terminated with a blank line (if there is only\none reference to push, a single <i>push</i> command is\nfollowed by a blank line). For example, the following would\nbe two batches of <i>push</i>, the first asking the\nremote-helper to push the local ref <i>master</i> to the\nremote ref <i>master</i> and the local <b>HEAD</b> to the\nremote <i>branch</i>, and the second asking to push ref\n<i>foo</i> to ref <i>bar</i> (forced update requested by the\n<i>+</i>).</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">push\nrefs/heads/master:refs/heads/master <br>\npush HEAD:refs/heads/branch <br>\n\\n <br>\npush +refs/heads/foo:refs/heads/bar <br>\n\\n</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Zero or more\nprotocol options may be entered after the last <i>push</i>\ncommand, before the batch&rsquo;s terminating blank\nline.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When the push\nis complete, outputs one or more <i>ok &lt;dst&gt;</i> or\n<i>error &lt;dst&gt; &lt;why&gt;?</i> lines to indicate\nsuccess or failure of each pushed ref. The status report\noutput is terminated by a blank line. The option field\n&lt;why&gt; may be quoted in a C style string if it contains\nan LF.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;push&quot; capability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>import</i>\n&lt;name&gt;</p>\n\n<p style=\"margin-left:17%;\">Produces a fast-import stream\nwhich imports the current value of the named ref. It may\nadditionally import other refs as needed to construct the\nhistory efficiently. The script writes to a helper-specific\nprivate namespace. The value of the named ref should be\nwritten to a location in this namespace derived by applying\nthe refspecs from the &quot;refspec&quot; capability to the\nname of the ref.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Especially\nuseful for interoperability with a foreign versioning\nsystem.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Just like\n<i>push</i>, a batch sequence of one or more <i>import</i>\nis terminated with a blank line. For each batch of\n<i>import</i>, the remote helper should produce a\nfast-import stream terminated by a <i>done</i> command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that if\nthe <i>bidi-import</i> capability is used the complete batch\nsequence has to be buffered before starting to send data to\nfast-import to prevent mixing of commands and fast-import\nresponses on the helper&rsquo;s stdin.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;import&quot; capability.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>export</i></p>\n\n<p style=\"margin-left:17%;\">Instructs the remote helper\nthat any subsequent input is part of a fast-import stream\n(generated by <i>git fast-export</i>) containing objects\nwhich should be pushed to the remote.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Especially\nuseful for interoperability with a foreign versioning\nsystem.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>export-marks</i> and <i>import-marks</i> capabilities, if\nspecified, affect this command in so far as they are passed\non to <i>git fast-export</i>, which then will load/store a\ntable of marks for local objects. This can be used to\nimplement for incremental operations.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;export&quot; capability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>connect</i>\n&lt;service&gt;</p>\n\n<p style=\"margin-left:17%;\">Connects to given service.\nStandard input and standard output of helper are connected\nto specified service (git prefix is included in service name\nso e.g. fetching uses <i>git-upload-pack</i> as service) on\nremote side. Valid replies to this command are empty line\n(connection established), <i>fallback</i> (no smart\ntransport support, fall back to dumb transports) and just\nexiting with error message printed (can&rsquo;t connect,\ndon&rsquo;t bother trying to fall back). After line feed\nterminating the positive (empty) response, the output of\nservice starts. After the connection ends, the remote helper\nexits.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;connect&quot; capability.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>stateless-connect</i>\n&lt;service&gt;</p>\n\n<p style=\"margin-left:17%;\">Experimental; for internal use\nonly. Connects to the given remote service for communication\nusing git&rsquo;s wire-protocol version 2. Valid replies to\nthis command are empty line (connection established),\n<i>fallback</i> (no smart transport support, fall back to\ndumb transports) and just exiting with error message printed\n(can&rsquo;t connect, don&rsquo;t bother trying to fall\nback). After line feed terminating the positive (empty)\nresponse, the output of the service starts. Messages (both\nrequest and response) must consist of zero or more\nPKT-LINEs, terminating in a flush packet. Response messages\nwill then have a response end packet after the flush packet\nto indicate the end of a response. The client must not\nexpect the server to store any state in between\nrequest-response pairs. After the connection ends, the\nremote helper exits.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Supported if\nthe helper has the &quot;stateless-connect&quot;\ncapability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a fatal\nerror occurs, the program writes the error message to stderr\nand exits. The caller should expect that a suitable error\nmessage has been printed if the child closes the connection\nwithout completing a valid response for the current\ncommand.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Additional\ncommands may be supported, as may be determined from\ncapabilities reported by the helper.</p>\n\n<h2>REF LIST ATTRIBUTES\n<a name=\"REF LIST ATTRIBUTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>list</i>\ncommand produces a list of refs in which each ref may be\nfollowed by a list of attributes. The following ref list\nattributes are defined.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>unchanged</i></p>\n\n<p style=\"margin-left:17%;\">This ref is unchanged since the\nlast import or fetch, although the helper cannot necessarily\ndetermine what value that produced.</p>\n\n<h2>REF LIST KEYWORDS\n<a name=\"REF LIST KEYWORDS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>list</i>\ncommand may produce a list of key-value pairs. The following\nkeys are defined.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>object-format</i></p>\n\n<p style=\"margin-left:17%;\">The refs are using the given\nhash algorithm. This keyword is only used if the server and\nclient both support the object-format extension.</p>\n\n<h2>OPTIONS\n<a name=\"OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions are defined and (under suitable circumstances) set\nby Git if the remote helper has the <i>option</i>\ncapability.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nverbosity</i> &lt;n&gt;</p>\n\n<p style=\"margin-left:17%;\">Changes the verbosity of\nmessages displayed by the helper. A value of 0 for &lt;n&gt;\nmeans that processes operate quietly, and the helper\nproduces only error output. 1 is the default level of\nverbosity, and higher values of &lt;n&gt; correspond to the\nnumber of -v flags passed on the command line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nprogress</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Enables (or disables) progress\nmessages displayed by the transport helper during a\ncommand.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\ndepth</i> &lt;depth&gt;</p>\n\n<p style=\"margin-left:17%;\">Deepens the history of a\nshallow repository.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">'option\ndeepen-since &lt;timestamp&gt;</p>\n\n<p style=\"margin-left:17%;\">Deepens the history of a\nshallow repository based on time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">'option\ndeepen-not &lt;ref&gt;</p>\n\n<p style=\"margin-left:17%;\">Deepens the history of a\nshallow repository excluding ref. Multiple options add\nup.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\ndeepen-relative {'true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Deepens the history of a\nshallow repository relative to current boundary. Only valid\nwhen used with &quot;option depth&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nfollowtags</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">If enabled the helper should\nautomatically fetch annotated tag objects if the object the\ntag points at was transferred during the fetch command. If\nthe tag is not fetched by the helper a second fetch command\nwill usually be sent to ask for the tag specifically. Some\nhelpers may be able to use this option to avoid a second\nnetwork connection.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\ndry-run</i> {<i>true</i>|<i>false</i>}: If true, pretend the\noperation completed successfully, but don&rsquo;t actually\nchange any repository data. For most helpers this only\napplies to the <i>push</i>, if supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nservpath &lt;c-style-quoted-path&gt;</i></p>\n\n<p style=\"margin-left:17%;\">Sets service path\n(--upload-pack, --receive-pack etc.) for next connect.\nRemote helper may support this option, but must not rely on\nthis option being set before connect request occurs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\ncheck-connectivity</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Request the helper to check\nconnectivity of a clone.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nforce</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Request the helper to perform a\nforce update. Defaults to <i>false</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\ncloning</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Notify the helper this is a\nclone request (i.e. the current repository is guaranteed\nempty).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nupdate-shallow</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Allow to extend .git/shallow if\nthe new refs require it.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\npushcert</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">GPG sign pushes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">'option\npush-option &lt;string&gt;</p>\n\n<p style=\"margin-left:17%;\">Transmit &lt;string&gt; as a\npush option. As the push option must not contain LF or NUL\ncharacters, the string is not encoded.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nfrom-promisor</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Indicate that these objects are\nbeing fetched from a promisor.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nno-dependents</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">Indicate that only the objects\nwanted need to be fetched, not their dependents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\natomic</i> {<i>true</i>|<i>false</i>}</p>\n\n<p style=\"margin-left:17%;\">When pushing, request the\nremote server to update refs in a single atomic transaction.\nIf successful, all refs will be updated, or none will. If\nthe remote side does not support this capability, the push\nwill fail.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>option\nobject-format</i> {<i>true</i>|algorithm}</p>\n\n<p style=\"margin-left:17%;\">If <i>true</i>, indicate that\nthe caller wants hash algorithm information to be passed\nback from the remote. This mode is used when fetching\nrefs.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If set to an\nalgorithm, indicate that the caller wants to interact with\nthe remote side using that algorithm.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-remote\">git-remote(1)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-remote-ext\">git-remote-ext(1)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-remote-fd\">git-remote-fd(1)</a></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-fast-import\">git-fast-import(1)</a></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#INVOCATION\">INVOCATION</a>","<a href=\"#INPUT FORMAT\">INPUT FORMAT</a>","<a href=\"#COMMANDS\">COMMANDS</a>","<a href=\"#REF LIST ATTRIBUTES\">REF LIST ATTRIBUTES</a>","<a href=\"#REF LIST KEYWORDS\">REF LIST KEYWORDS</a>","<a href=\"#OPTIONS\">OPTIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"],"level":7}