{"name":"provider-object","description":"provider-object\n- A specification for a provider-native object\nabstraction","body":"\n\n<h1 align=\"center\">PROVIDER-OBJECT</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-object\n- A specification for a provider-native object\nabstraction</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_object.h&gt; <br>\n#include &lt;openssl/core_names.h&gt;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nprovider-native object abstraction is a set of\n<b><small>OSSL_PARAM</small></b> (3) keys and values that\ncan be used to pass provider-native objects to OpenSSL\nlibrary code or between different provider operation\nimplementations with the help of OpenSSL library code.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The intention\nis that certain provider-native operations can pass any sort\nof object that belong with other operations, or with OpenSSL\nlibrary code.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An object may\nbe passed in the following manners:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"12%\">\n\n\n<p><i>By value</i></p></td>\n<td width=\"71%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This means that\nthe <i>object data</i> is passed as an octet string or an\n<small>UTF8</small> string, which can be handled in diverse\nways by other provided implementations. The encoding of the\nobject depends on the context it&rsquo;s used in; for\nexample, <b><small>OSSL_DECODER</small></b> (3) allows\nmultiple encodings, depending on existing decoders. If\ncentral OpenSSL library functionality is to handle the data\ndirectly, it <b>must</b> be encoded in <small>DER</small>\nfor all object types except for\n<b><small>OSSL_OBJECT_NAME</small></b> (see &quot;Parameter\nreference&quot; below), where it&rsquo;s assumed to a plain\n<small>UTF8</small> string.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\"><i>By reference</i></p></td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This means that\nthe <i>object data</i> isn&rsquo;t passed directly, an\n<i>object reference</i> is passed instead. It&rsquo;s an\noctet string that only the correct provider understands\ncorrectly.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Objects <i>by\nvalue</i> can be used by anything that handles\n<small>DER</small> encoded objects.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Objects <i>by\nreference</i> need a higher level of cooperation from the\nimplementation where the object originated (let&rsquo;s call\nit X) and its target implementation (let&rsquo;s call it\nY):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"3%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\"><i>An object loading function in\nthe target implementation</i></p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The target\nimplementation (Y) may have a function that can take an\n<i>object reference</i>. This can only be used if the target\nimplementation is from the same provider as the one\noriginating the object abstraction in question (X).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The exact\ntarget implementation to use is determined from the\n<i>object type</i> and possibly the <i>object data type</i>.\nFor example, when the OpenSSL library receives an object\nabstraction with the <i>object type</i>\n<b><small>OSSL_OBJECT_PKEY</small></b> , it will fetch a\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a> using the <i>object data type</i>\nas its key type (the second argument in\n<a href=\"https://man.page/3/EVP_KEYMGMT_fetch\">EVP_KEYMGMT_fetch(3)</a>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">2.</p></td>\n<td width=\"3%\"></td>\n<td width=\"80%\">\n\n\n<p style=\"margin-top: 1em\"><i>An object exporter in the\noriginating implementation</i></p></td>\n<td width=\"3%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The originating\nimplementation (X) may have an exporter function. This\nexporter function can be used to export the object in\n<b><small>OSSL_PARAM</small></b> (3) form, that can then be\nimported by the target implementation&rsquo;s imported\nfunction.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This can be\nused when it&rsquo;s not possible to fetch the target\nimplementation (Y) from the same provider.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Parameter\nreference</b> <br>\nA provider-native object abstraction is an\n<b><small>OSSL_PARAM</small></b> (3) with a selection of the\nfollowing parameters: <br>\n&quot;data&quot; (\n<b><small>OSSL_OBJECT_PARAM_DATA</small></b> ) &lt;octet\nstring&gt; or &lt; <small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The object data <i>passed by\nvalue</i>.</p>\n\n<p style=\"margin-left:11%;\">&quot;reference&quot; (\n<b><small>OSSL_OBJECT_PARAM_REFERENCE</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">The object data <i>passed by\nreference</i>.</p>\n\n<p style=\"margin-left:11%;\">&quot;type&quot; (\n<b><small>OSSL_OBJECT_PARAM_TYPE</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">The <i>object type</i>, a\nnumber that may have any of the following values (all\ndefined in <i>&lt;openssl/core_object.h&gt;</i>):\n<b><small><br>\nOSSL_OBJECT_NAME</small></b></p>\n\n<p style=\"margin-left:23%;\">The object data may only be\n<i>passed by value</i>, and should be a <small>UTF8</small>\nstring.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">This is useful\nfor <a href=\"https://man.page/7/provider-storemgmt\">provider-storemgmt(7)</a> when a <small>URI</small>\nload results in new URIs.</p>\n\n\n<p style=\"margin-left:17%;\"><b><small>OSSL_OBJECT_PKEY</small></b></p>\n\n<p style=\"margin-left:23%;\">The object data is suitable as\nprovider-native <b><small>EVP_PKEY</small></b> key data. The\nobject data may be <i>passed by value</i> or <i>passed by\nreference</i>.</p>\n\n\n<p style=\"margin-left:17%;\"><b><small>OSSL_OBJECT_CERT</small></b></p>\n\n<p style=\"margin-left:23%;\">The object data is suitable as\n<b>X509</b> data. The object data for this object type can\nonly be <i>passed by value</i>, and should be an octet\nstring.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Since\nthere&rsquo;s no provider-native X.509 object, OpenSSL\nlibraries that receive this object abstraction are expected\nto convert the data to a <b>X509</b> object with\n<b>d2i_X509()</b>.</p>\n\n\n<p style=\"margin-left:17%;\"><b><small>OSSL_OBJECT_CRL</small></b></p>\n\n<p style=\"margin-left:23%;\">The object data is suitable as\n<b>X509_CRL</b> data. The object data can only be <i>passed\nby value</i>, and should be an octet string.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">Since\nthere&rsquo;s no provider-native X.509 <small>CRL</small>\nobject, OpenSSL libraries that receive this object\nabstraction are expected to convert the data to a\n<b>X509_CRL</b> object with <b>d2i_X509_CRL()</b>.</p>\n\n<p style=\"margin-left:11%;\">&quot;data-type&quot; (\n<b><small>OSSL_OBJECT_PARAM_DATA_TYPE</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The specific type of the object\ncontent. Legitimate values depend on the object type; if it\nis <b><small>OSSL_OBJECT_PKEY</small></b> , the data type is\nexpected to be a key type suitable for fetching a\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a> that can handle the data.</p>\n\n<p style=\"margin-left:11%;\">&quot;data-structure&quot; (\n<b><small>OSSL_OBJECT_PARAM_DATA_STRUCTURE</small></b> )\n&lt; <small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The outermost structure of the\nobject content. Legitimate values depend on the object\ntype.</p>\n\n<p style=\"margin-left:11%;\">&quot;desc&quot; (\n<b><small>OSSL_OBJECT_PARAM_DESC</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">A human readable text that\ndescribes extra details on the object.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a\nprovider-native object abtraction is used, it <i>must</i>\ncontain object data in at least one form (object data\n<i>passed by value</i>, i.e. the &quot;data&quot; item, or\nobject data <i>passed by reference</i>, i.e. the\n&quot;reference&quot; item). Both may be present at once, in\nwhich case the OpenSSL library code that receives this will\nuse the most optimal variant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For objects\nwith the object type <b><small>OSSL_OBJECT_NAME</small></b>\n, that object type <i>must</i> be given.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a>,\n<b><small>OSSL_DECODER</small></b> (3)</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The concept of\nproviders and everything surrounding them was introduced in\nOpenSSL 3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}