{"name":"gitdiffcore","description":"gitdiffcore -\nTweaking diff output","body":"\n\n<h1 align=\"center\">GITDIFFCORE</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitdiffcore -\nTweaking diff output</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git diff</i>\n*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The diff\ncommands <i>git diff-index</i>, <i>git diff-files</i>, and\n<i>git diff-tree</i> can be told to manipulate differences\nthey find in unconventional ways before showing <i>diff</i>\noutput. The manipulation is collectively called\n&quot;diffcore transformation&quot;. This short note\ndescribes what they are and how to use them to produce\n<i>diff</i> output that is easier to understand than the\nconventional kind.</p>\n\n<h2>THE CHAIN OF OPERATION\n<a name=\"THE CHAIN OF OPERATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>git\ndiff-*</i> family works by first comparing two sets of\nfiles:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <i>git\ndiff-index</i> compares contents of a &quot;tree&quot;\nobject and the working directory (when <b>--cached</b> flag\nis not used) or a &quot;tree&quot; object and the index file\n(when <b>--cached</b> flag is used);</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <i>git\ndiff-files</i> compares contents of the index file and the\nworking directory;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; <i>git\ndiff-tree</i> compares contents of two &quot;tree&quot;\nobjects;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In all of these\ncases, the commands themselves first optionally limit the\ntwo sets of files by any pathspecs given on their\ncommand-lines, and compare corresponding paths in the two\nresulting sets of files.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The pathspecs\nare used to limit the world diff operates in. They remove\nthe filepairs outside the specified sets of pathnames. E.g.\nIf the input set of filepairs included:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 100644\nbcd1234... 0123456... M junkfile</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">but the command\ninvocation was <b>git diff-files myfile</b>, then the\njunkfile entry would be removed from the list because only\n&quot;myfile&quot; is under consideration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The result of\ncomparison is passed from these commands to what is\ninternally called &quot;diffcore&quot;, in a format similar\nto what is output when the -p option is not used. E.g.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">in-place edit\n:100644 100644 bcd1234... 0123456... M file0 <br>\ncreate :000000 100644 0000000... 1234567... A file4 <br>\ndelete :100644 000000 1234567... 0000000... D file5 <br>\nunmerged :000000 000000 0000000... 0000000... U file6</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The diffcore\nmechanism is fed a list of such comparison results (each of\nwhich is called &quot;filepair&quot;, although at this point\neach of them talks about a single file), and transforms such\na list into another list. There are currently 5 such\ntransformations:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndiffcore-break</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndiffcore-rename</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndiffcore-merge-broken</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndiffcore-pickaxe</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndiffcore-order</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\ndiffcore-rotate</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These are\napplied in sequence. The set of filepairs <i>git diff-*</i>\ncommands find are used as the input to diffcore-break, and\nthe output from diffcore-break is used as the input to the\nnext transformation. The final result is then passed to the\noutput routine and generates either diff-raw format (see\nOutput format sections of the manual for <i>git diff-*</i>\ncommands) or diff-patch format.</p>\n\n<h2>DIFFCORE-BREAK: FOR SPLITTING UP COMPLETE REWRITES\n<a name=\"DIFFCORE-BREAK: FOR SPLITTING UP COMPLETE REWRITES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\ntransformation in the chain is diffcore-break, and is\ncontrolled by the -B option to the <i>git diff-*</i>\ncommands. This is used to detect a filepair that represents\n&quot;complete rewrite&quot; and break such filepair into\ntwo filepairs that represent delete and create. E.g. If the\ninput contained this filepair:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 100644\nbcd1234... 0123456... M file0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and if it\ndetects that the file &quot;file0&quot; is completely\nrewritten, it changes it to:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 000000\nbcd1234... 0000000... D file0 <br>\n:000000 100644 0000000... 0123456... A file0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the purpose\nof breaking a filepair, diffcore-break examines the extent\nof changes between the contents of the files before and\nafter modification (i.e. the contents that have\n&quot;bcd1234...&quot; and &quot;0123456...&quot; as their\nSHA-1 content ID, in the above example). The amount of\ndeletion of original contents and insertion of new material\nare added together, and if it exceeds the &quot;break\nscore&quot;, the filepair is broken into two. The break\nscore defaults to 50% of the size of the smaller of the\noriginal and the result (i.e. if the edit shrinks the file,\nthe size of the result is used; if the edit lengthens the\nfile, the size of the original is used), and can be\ncustomized by giving a number after &quot;-B&quot; option\n(e.g. &quot;-B75&quot; to tell it to use 75%).</p>\n\n<h2>DIFFCORE-RENAME: FOR DETECTING RENAMES AND COPIES\n<a name=\"DIFFCORE-RENAME: FOR DETECTING RENAMES AND COPIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ntransformation is used to detect renames and copies, and is\ncontrolled by the -M option (to detect renames) and the -C\noption (to detect copies as well) to the <i>git diff-*</i>\ncommands. If the input contained these filepairs:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 000000\n0123456... 0000000... D fileX <br>\n:000000 100644 0000000... 0123456... A file0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and the\ncontents of the deleted file fileX is similar enough to the\ncontents of the created file file0, then rename detection\nmerges these filepairs and creates:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 100644\n0123456... 0123456... R100 fileX file0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When the\n&quot;-C&quot; option is used, the original contents of\nmodified files, and deleted files (and also unmodified\nfiles, if the &quot;--find-copies-harder&quot; option is\nused) are considered as candidates of the source files in\nrename/copy operation. If the input were like these\nfilepairs, that talk about a modified file fileY and a newly\ncreated file file0:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 100644\n0123456... 1234567... M fileY <br>\n:000000 100644 0000000... bcd3456... A file0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">the original\ncontents of fileY and the resulting contents of file0 are\ncompared, and if they are similar enough, they are changed\nto:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">:100644 100644\n0123456... 1234567... M fileY <br>\n:100644 100644 0123456... bcd3456... C100 fileY file0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In both rename\nand copy detection, the same &quot;extent of changes&quot;\nalgorithm used in diffcore-break is used to determine if two\nfiles are &quot;similar enough&quot;, and can be customized\nto use a similarity score different from the default of 50%\nby giving a number after the &quot;-M&quot; or\n&quot;-C&quot; option (e.g. &quot;-M8&quot; to tell it to\nuse 8/10 = 80%).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that when\nrename detection is on but both copy and break detection are\noff, rename detection adds a preliminary step that first\nchecks if files are moved across directories while keeping\ntheir filename the same. If there is a file added to a\ndirectory whose contents is sufficiently similar to a file\nwith the same name that got deleted from a different\ndirectory, it will mark them as renames and exclude them\nfrom the later quadratic step (the one that pairwise\ncompares all unmatched files to find the &quot;best&quot;\nmatches, determined by the highest content similarity). So,\nfor example, if a deleted docs/ext.txt and an added\ndocs/config/ext.txt are similar enough, they will be marked\nas a rename and prevent an added docs/ext.md that may be\neven more similar to the deleted docs/ext.txt from being\nconsidered as the rename destination in the later step. For\nthis reason, the preliminary &quot;match same filename&quot;\nstep uses a bit higher threshold to mark a file pair as a\nrename and stop considering other candidates for better\nmatches. At most, one comparison is done per file in this\npreliminary pass; so if there are several remaining ext.txt\nfiles throughout the directory hierarchy after exact rename\ndetection, this preliminary step may be skipped for those\nfiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note. When the\n&quot;-C&quot; option is used with\n<b>--find-copies-harder</b> option, <i>git diff-*</i>\ncommands feed unmodified filepairs to diffcore mechanism as\nwell as modified ones. This lets the copy detector consider\nunmodified files as copy source candidates at the expense of\nmaking it slower. Without <b>--find-copies-harder</b>,\n<i>git diff-*</i> commands can detect copies only if the\nfile that was copied happened to have been modified in the\nsame changeset.</p>\n\n<h2>DIFFCORE-MERGE-BROKEN: FOR PUTTING COMPLETE REWRITES BACK TOGETHER\n<a name=\"DIFFCORE-MERGE-BROKEN: FOR PUTTING COMPLETE REWRITES BACK TOGETHER\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ntransformation is used to merge filepairs broken by\ndiffcore-break, and not transformed into rename/copy by\ndiffcore-rename, back into a single modification. This\nalways runs when diffcore-break is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the purpose\nof merging broken filepairs back, it uses a different\n&quot;extent of changes&quot; computation from the ones used\nby diffcore-break and diffcore-rename. It counts only the\ndeletion from the original, and does not count insertion. If\nyou removed only 10 lines from a 100-line document, even if\nyou added 910 new lines to make a new 1000-line document,\nyou did not do a complete rewrite. diffcore-break breaks\nsuch a case in order to help diffcore-rename to consider\nsuch filepairs as candidate of rename/copy detection, but if\nfilepairs broken that way were not matched with other\nfilepairs to create rename/copy, then this transformation\nmerges them back into the original\n&quot;modification&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;extent of changes&quot; parameter can be tweaked from\nthe default 80% (that is, unless more than 80% of the\noriginal material is deleted, the broken pairs are merged\nback into a single modification) by giving a second number\nto -B option, like these:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; -B50/60\n(give 50% &quot;break score&quot; to diffcore-break, use 60%\nfor diffcore-merge-broken).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; -B/60\n(the same as above, since diffcore-break defaults to\n50%).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nearlier implementation left a broken pair as a separate\ncreation and deletion patches. This was an unnecessary hack\nand the latest implementation always merges all the broken\npairs back into modifications, but the resulting patch\noutput is formatted differently for easier review in case of\nsuch a complete rewrite by showing the entire contents of\nold version prefixed with <i>-</i>, followed by the entire\ncontents of new version prefixed with <i>+</i>.</p>\n\n<h2>DIFFCORE-PICKAXE: FOR DETECTING ADDITION/DELETION OF SPECIFIED STRING\n<a name=\"DIFFCORE-PICKAXE: FOR DETECTING ADDITION/DELETION OF SPECIFIED STRING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ntransformation limits the set of filepairs to those that\nchange specified strings between the preimage and the\npostimage in a certain way. -S&lt;block of text&gt; and\n-G&lt;regular expression&gt; options are used to specify\ndifferent ways these strings are sought.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;-S&lt;block\nof text&gt;&quot; detects filepairs whose preimage and\npostimage have different number of occurrences of the\nspecified block of text. By definition, it will not detect\nin-file moves. Also, when a changeset moves a file wholesale\nwithout affecting the interesting string, diffcore-rename\nkicks in as usual, and <b>-S</b> omits the filepair (since\nthe number of occurrences of that string didn&rsquo;t change\nin that rename-detected filepair). When used with\n<b>--pickaxe-regex</b>, treat the &lt;block of text&gt; as\nan extended POSIX regular expression to match, instead of a\nliteral string.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&quot;-G&lt;regular\nexpression&gt;&quot; (mnemonic: grep) detects filepairs\nwhose textual diff has an added or a deleted line that\nmatches the given regular expression. This means that it\nwill detect in-file (or what rename-detection considers the\nsame file) moves, which is noise. The implementation runs\ndiff twice and greps, and this can be quite expensive. To\nspeed things up binary files without textconv filters will\nbe ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When <b>-S</b>\nor <b>-G</b> are used without <b>--pickaxe-all</b>, only\nfilepairs that match their respective criterion are kept in\nthe output. When <b>--pickaxe-all</b> is used, if even one\nfilepair matches their respective criterion in a changeset,\nthe entire changeset is kept. This behavior is designed to\nmake reviewing changes in the context of the whole changeset\neasier.</p>\n\n<h2>DIFFCORE-ORDER: FOR SORTING THE OUTPUT BASED ON FILENAMES\n<a name=\"DIFFCORE-ORDER: FOR SORTING THE OUTPUT BASED ON FILENAMES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This is used to\nreorder the filepairs according to the user&rsquo;s (or\nproject&rsquo;s) taste, and is controlled by the -O option\nto the <i>git diff-*</i> commands.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This takes a\ntext file each of whose lines is a shell glob pattern.\nFilepairs that match a glob pattern on an earlier line in\nthe file are output before ones that match a later line, and\nfilepairs that do not match any glob pattern are output\nlast.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As an example,\na typical orderfile for the core Git probably would look\nlike this:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">README <br>\nMakefile <br>\nDocumentation <br>\n*.h <br>\n*.c <br>\nt</p>\n\n<h2>DIFFCORE-ROTATE: FOR CHANGING AT WHICH PATH OUTPUT STARTS\n<a name=\"DIFFCORE-ROTATE: FOR CHANGING AT WHICH PATH OUTPUT STARTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ntransformation takes one pathname, and rotates the set of\nfilepairs so that the filepair for the given pathname comes\nfirst, optionally discarding the paths that come before it.\nThis is used to implement the <b>--skip-to</b> and the\n<b>--rotate-to</b> options. It is an error when the\nspecified pathname is not in the set of filepairs, but it is\nnot useful to error out when used with &quot;git log&quot;\nfamily of commands, because it is unreasonable to expect\nthat a given path would be modified by each and every commit\nshown by the &quot;git log&quot; command. For this reason,\nwhen used with &quot;git log&quot;, the filepair that sorts\nthe same as, or the first one that sorts after, the given\npathname is where the output starts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use of this\ntransformation combined with diffcore-order will produce\nunexpected results, as the input to this transformation is\nlikely not sorted when diffcore-order is in effect.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/git-diff\">git-diff(1)</a>,\n<a href=\"https://man.page/1/git-diff-files\">git-diff-files(1)</a>, <a href=\"https://man.page/1/git-diff-index\">git-diff-index(1)</a>,\n<a href=\"https://man.page/1/git-diff-tree\">git-diff-tree(1)</a>, <a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a>,\n<a href=\"https://man.page/1/git-log\">git-log(1)</a>, <a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>,\n<b><font color=\"#0000FF\">The Git User&rsquo;s\nManual</font></b>\n<small><font color=\"#000000\">[1]</font></small></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">The Git\nUser&rsquo;s Manual</font></p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/user-manual.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#THE CHAIN OF OPERATION\">THE CHAIN OF OPERATION</a>","<a href=\"#DIFFCORE-BREAK: FOR SPLITTING UP COMPLETE REWRITES\">DIFFCORE-BREAK: FOR SPLITTING UP COMPLETE REWRITES</a>","<a href=\"#DIFFCORE-RENAME: FOR DETECTING RENAMES AND COPIES\">DIFFCORE-RENAME: FOR DETECTING RENAMES AND COPIES</a>","<a href=\"#DIFFCORE-MERGE-BROKEN: FOR PUTTING COMPLETE REWRITES BACK TOGETHER\">DIFFCORE-MERGE-BROKEN: FOR PUTTING COMPLETE REWRITES BACK TOGETHER</a>","<a href=\"#DIFFCORE-PICKAXE: FOR DETECTING ADDITION/DELETION OF SPECIFIED STRING\">DIFFCORE-PICKAXE: FOR DETECTING ADDITION/DELETION OF SPECIFIED STRING</a>","<a href=\"#DIFFCORE-ORDER: FOR SORTING THE OUTPUT BASED ON FILENAMES\">DIFFCORE-ORDER: FOR SORTING THE OUTPUT BASED ON FILENAMES</a>","<a href=\"#DIFFCORE-ROTATE: FOR CHANGING AT WHICH PATH OUTPUT STARTS\">DIFFCORE-ROTATE: FOR CHANGING AT WHICH PATH OUTPUT STARTS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}