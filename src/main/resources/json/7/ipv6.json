{"name":"ipv6","description":"ipv6 - Linux\nIPv6 protocol implementation","body":"\n\n<h1 align=\"center\">IPV6</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ipv6 - Linux\nIPv6 protocol implementation</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt; <br>\n#include &lt;netinet/in.h&gt;</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>tcp6_socket</i>\n<b>= socket(AF_INET6, SOCK_STREAM, 0);</b> <i><br>\nraw6_socket</i> <b>= socket(AF_INET6, SOCK_RAW,</b>\n<i>protocol</i><b>);</b> <i><br>\nudp6_socket</i> <b>= socket(AF_INET6, SOCK_DGRAM,</b>\n<i>protocol</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux 2.2\noptionally implements the Internet Protocol, version 6. This\nman page contains a description of the IPv6 basic API as\nimplemented by the Linux kernel and glibc 2.1. The interface\nis based on the BSD sockets interface; see\n<a href=\"https://man.page/7/socket\">socket(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The IPv6 API\naims to be mostly compatible with the IPv4 API (see\n<a href=\"https://man.page/7/ip\">ip(7)</a>). Only differences are described in this man\npage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To bind an\n<b>AF_INET6</b> socket to any process, the local address\nshould be copied from the <i>in6addr_any</i> variable which\nhas <i>in6_addr</i> type. In static initializations,\n<b>IN6ADDR_ANY_INIT</b> may also be used, which expands to a\nconstant expression. Both of them are in network byte\norder.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The IPv6\nloopback address (::1) is available in the global\n<i>in6addr_loopback</i> variable. For initializations,\n<b>IN6ADDR_LOOPBACK_INIT</b> should be used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IPv4\nconnections can be handled with the v6 API by using the\nv4-mapped-on-v6 address type; thus a program needs to\nsupport only this API type to support both protocols. This\nis handled transparently by the address handling functions\nin the C library.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IPv4 and IPv6\nshare the local port space. When you get an IPv4 connection\nor packet to an IPv6 socket, its source address will be\nmapped to v6 and it will be mapped to v6.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Address\nformat</b></p>\n\n<p style=\"margin-left:17%;\">struct sockaddr_in6 { <br>\nsa_family_t sin6_family; /* AF_INET6 */ <br>\nin_port_t sin6_port; /* port number */ <br>\nuint32_t sin6_flowinfo; /* IPv6 flow information */ <br>\nstruct in6_addr sin6_addr; /* IPv6 address */ <br>\nuint32_t sin6_scope_id; /* Scope ID (new in 2.4) */ <br>\n};</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct in6_addr\n{ <br>\nunsigned char s6_addr[16]; /* IPv6 address */ <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sin6_family</i>\nis always set to <b>AF_INET6</b>; <i>sin6_port</i> is the\nprotocol port (see <i>sin_port</i> in <a href=\"https://man.page/7/ip\">ip(7)</a>);\n<i>sin6_flowinfo</i> is the IPv6 flow identifier;\n<i>sin6_addr</i> is the 128-bit IPv6 address.\n<i>sin6_scope_id</i> is an ID depending on the scope of the\naddress. It is new in Linux 2.4. Linux supports it only for\nlink-local addresses, in that case <i>sin6_scope_id</i>\ncontains the interface index (see <a href=\"https://man.page/7/netdevice\">netdevice(7)</a>)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IPv6 supports\nseveral address types: unicast to address a single host,\nmulticast to address a group of hosts, anycast to address\nthe nearest member of a group of hosts (not implemented in\nLinux), IPv4-on-IPv6 to address an IPv4 host, and other\nreserved address types.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The address\nnotation for IPv6 is a group of 8 4-digit hexadecimal\nnumbers, separated with a ':'. &quot;::&quot; stands for a\nstring of 0 bits. Special addresses are ::1 for loopback and\n::FFFF:&lt;IPv4 address&gt; for IPv4-mapped-on-IPv6.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The port space\nof IPv6 is shared with IPv4.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket\noptions</b> <br>\nIPv6 supports some protocol-specific socket options that can\nbe set with <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> and read with\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>. The socket option level for IPv6 is\n<b>IPPROTO_IPV6</b>. A boolean integer flag is zero when it\nis false, otherwise true. <b><br>\nIPV6_ADDRFORM</b></p>\n\n<p style=\"margin-left:22%;\">Turn an <b>AF_INET6</b> socket\ninto a socket of a different address family. Only\n<b>AF_INET</b> is currently supported for that. It is\nallowed only for IPv6 sockets that are connected and bound\nto a v4-mapped-on-v6 address. The argument is a pointer to\nan integer containing <b>AF_INET</b>. This is useful to pass\nv4-mapped sockets as file descriptors to programs that\ndon&rsquo;t know how to deal with the IPv6 API.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_ADD_MEMBERSHIP,\nIPV6_DROP_MEMBERSHIP</b></p>\n\n<p style=\"margin-left:22%;\">Control membership in multicast\ngroups. Argument is a pointer to a <i>struct\nipv6_mreq</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_MTU</b></p>\n\n<p style=\"margin-left:22%;\"><b>getsockopt</b>(): Retrieve\nthe current known path MTU of the current socket. Valid only\nwhen the socket has been connected. Returns an integer.</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>setsockopt</b>():\nSet the MTU to be used for the socket. The MTU is limited by\nthe device MTU or the path MTU when path MTU discovery is\nenabled. Argument is a pointer to integer.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_MTU_DISCOVER</b></p>\n\n<p style=\"margin-left:22%;\">Control path-MTU discovery on\nthe socket. See <b>IP_MTU_DISCOVER</b> in <a href=\"https://man.page/7/ip\">ip(7)</a> for\ndetails.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_MULTICAST_HOPS</b></p>\n\n<p style=\"margin-left:22%;\">Set the multicast hop limit for\nthe socket. Argument is a pointer to an integer. -1 in the\nvalue means use the route default, otherwise it should be\nbetween 0 and 255.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_MULTICAST_IF</b></p>\n\n<p style=\"margin-left:22%;\">Set the device for outgoing\nmulticast packets on the socket. This is allowed only for\n<b>SOCK_DGRAM</b> and <b>SOCK_RAW</b> socket. The argument\nis a pointer to an interface index (see <a href=\"https://man.page/7/netdevice\">netdevice(7)</a>)\nin an integer.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_MULTICAST_LOOP</b></p>\n\n<p style=\"margin-left:22%;\">Control whether the socket sees\nmulticast packets that it has send itself. Argument is a\npointer to boolean.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_RECVPKTINFO</b> (since\nLinux 2.6.14)</p>\n\n<p style=\"margin-left:22%;\">Set delivery of the\n<b>IPV6_PKTINFO</b> control message on incoming datagrams.\nSuch control messages contain a <i>struct in6_pktinfo</i>,\nas per RFC 3542. Allowed only for <b>SOCK_DGRAM</b> or\n<b>SOCK_RAW</b> sockets. Argument is a pointer to a boolean\nvalue in an integer.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_RTHDR, IPV6_AUTHHDR,\nIPV6_DSTOPTS, IPV6_HOPOPTS, IPV6_FLOWINFO, <br>\nIPV6_HOPLIMIT</b></p>\n\n<p style=\"margin-left:22%;\">Set delivery of control\nmessages for incoming datagrams containing extension headers\nfrom the received packet. <b>IPV6_RTHDR</b> delivers the\nrouting header, <b>IPV6_AUTHHDR</b> delivers the\nauthentication header, <b>IPV6_DSTOPTS</b> delivers the\ndestination options, <b>IPV6_HOPOPTS</b> delivers the hop\noptions, <b>IPV6_FLOWINFO</b> delivers an integer containing\nthe flow ID, <b>IPV6_HOPLIMIT</b> delivers an integer\ncontaining the hop count of the packet. The control messages\nhave the same type as the socket option. All these header\noptions can also be set for outgoing packets by putting the\nappropriate control message into the control buffer of\n<a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>. Allowed only for <b>SOCK_DGRAM</b> or\n<b>SOCK_RAW</b> sockets. Argument is a pointer to a boolean\nvalue.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_RECVERR</b></p>\n\n<p style=\"margin-left:22%;\">Control receiving of\nasynchronous error options. See <b>IP_RECVERR</b> in\n<a href=\"https://man.page/7/ip\">ip(7)</a> for details. Argument is a pointer to\nboolean.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_ROUTER_ALERT</b></p>\n\n<p style=\"margin-left:22%;\">Pass forwarded packets\ncontaining a router alert hop-by-hop option to this socket.\nAllowed only for <b>SOCK_RAW</b> sockets. The tapped packets\nare not forwarded by the kernel, it is the user&rsquo;s\nresponsibility to send them out again. Argument is a pointer\nto an integer. A positive integer indicates a router alert\noption value to intercept. Packets carrying a router alert\noption with a value field containing this integer will be\ndelivered to the socket. A negative integer disables\ndelivery of packets with router alert options to this\nsocket.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_UNICAST_HOPS</b></p>\n\n<p style=\"margin-left:22%;\">Set the unicast hop limit for\nthe socket. Argument is a pointer to an integer. -1 in the\nvalue means use the route default, otherwise it should be\nbetween 0 and 255.</p>\n\n<p style=\"margin-left:11%;\"><b>IPV6_V6ONLY</b> (since Linux\n2.4.21 and 2.6)</p>\n\n<p style=\"margin-left:22%;\">If this flag is set to true\n(nonzero), then the socket is restricted to sending and\nreceiving IPv6 packets only. In this case, an IPv4 and an\nIPv6 application can bind to a single port at the same\ntime.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If this flag is\nset to false (zero), then the socket can be used to send and\nreceive packets to and from an IPv6 address or an\nIPv4-mapped IPv6 address.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument is\na pointer to a boolean value in an integer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The default\nvalue for this flag is defined by the contents of the file\n<i>/proc/sys/net/ipv6/bindv6only</i>. The default value for\nthat file is 0 (false).</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>ENODEV</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The user tried to <a href=\"https://man.page/2/bind\">bind(2)</a>\nto a link-local IPv6 address, but the <i>sin6_scope_id</i>\nin the supplied <i>sockaddr_in6</i> structure is not a valid\ninterface index.</p></td></tr>\n</table>\n\n<h2>VERSIONS\n<a name=\"VERSIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux 2.4 will\nbreak binary compatibility for the <i>sockaddr_in6</i> for\n64-bit hosts by changing the alignment of <i>in6_addr</i>\nand adding an additional <i>sin6_scope_id</i> field. The\nkernel interfaces stay compatible, but a program including\n<i>sockaddr_in6</i> or <i>in6_addr</i> into other structures\nmay not be. This is not a problem for 32-bit hosts like\ni386.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sin6_flowinfo</i> field is new in Linux 2.4. It is\ntransparently passed/read by the kernel when the passed\naddress length contains it. Some programs that pass a longer\naddress buffer and then check the outgoing address length\nmay break.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>sockaddr_in6</i> structure is bigger than the generic\n<i>sockaddr</i>. Programs that assume that all address types\ncan be stored safely in a <i>struct sockaddr</i> need to be\nchanged to use <i>struct sockaddr_storage</i> for that\ninstead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>SOL_IP</b>,\n<b>SOL_IPV6</b>, <b>SOL_ICMPV6</b>, and other <b>SOL_*</b>\nsocket options are nonportable variants of <b>IPPROTO_*</b>.\nSee also <a href=\"https://man.page/7/ip\">ip(7)</a>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The IPv6\nextended API as in RFC&nbsp;2292 is currently only partly\nimplemented; although the 2.2 kernel has near complete\nsupport for receiving options, the macros for generating\nIPv6 options are missing in glibc 2.1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IPSec support\nfor EH and AH headers is missing.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Flow label\nmanagement is not complete and not documented here.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This man page\nis not complete.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/cmsg\">cmsg(3)</a>,\n<a href=\"https://man.page/7/ip\">ip(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC&nbsp;2553:\nIPv6 BASIC API; Linux tries to be compliant to this.\nRFC&nbsp;2460: IPv6 specification.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#VERSIONS\">VERSIONS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}