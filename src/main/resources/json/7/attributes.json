{"name":"attributes","description":"attributes - POSIX safety concepts","body":"\n\n<h1 align=\"center\">ATTRIBUTES</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">attributes -\nPOSIX safety concepts</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nthe text of this man page is based on the material taken\nfrom the &quot;POSIX Safety Concepts&quot; section of the\nGNU C Library manual. Further details on the topics\ndescribed here can be found in that manual.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\nfunction manual pages include a section ATTRIBUTES that\ndescribes the safety of calling the function in various\ncontexts. This section annotates functions with the\nfollowing safety markings: <i><br>\nMT-Safe</i></p>\n\n<p style=\"margin-left:22%;\"><i>MT-Safe</i> or Thread-Safe\nfunctions are safe to call in the presence of other threads.\nMT, in MT-Safe, stands for Multi Thread.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Being MT-Safe\ndoes not imply a function is atomic, nor that it uses any of\nthe memory synchronization mechanisms POSIX exposes to\nusers. It is even possible that calling MT-Safe functions in\nsequence does not yield an MT-Safe combination. For example,\nhaving a thread call two MT-Safe functions one right after\nthe other does not guarantee behavior equivalent to atomic\nexecution of a combination of both functions, since\nconcurrent calls in other threads may interfere in a\ndestructive way.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Whole-program\noptimizations that could inline functions across library\ninterfaces may expose unsafe reordering, and so performing\ninlining across the GNU C Library interface is not\nrecommended. The documented MT-Safety status is not\nguaranteed under whole-program optimization. However,\nfunctions defined in user-visible headers are designed to be\nsafe for inlining.</p>\n\n<p style=\"margin-left:11%;\"><i>MT-Unsafe</i></p>\n\n<p style=\"margin-left:22%;\"><i>MT-Unsafe</i> functions are\nnot safe to call in a multithreaded programs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other keywords\nthat appear in safety notes are defined in subsequent\nsections.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Conditionally\nsafe features</b> <br>\nFor some features that make functions unsafe to call in\ncertain contexts, there are known ways to avoid the safety\nproblem other than refraining from calling the function\naltogether. The keywords that follow refer to such features,\nand each of their definitions indicates how the whole\nprogram needs to be constrained in order to remove the\nsafety problem indicated by the keyword. Only when all the\nreasons that make a function unsafe are observed and\naddressed, by applying the documented constraints, does the\nfunction become safe to call in a context.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><i>init</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>Functions marked with <i>init</i> as an MT-Unsafe\nfeature perform MT-Unsafe initialization when they are first\ncalled.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Calling such a\nfunction at least once in single-threaded mode removes this\nspecific cause for the function to be regarded as MT-Unsafe.\nIf no other cause for that remains, the function can then be\nsafely called after other threads are started.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p style=\"margin-top: 1em\"><i>race</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Functions annotated with\n<i>race</i> as an MT-Safety issue operate on objects in ways\nthat may cause data races or similar forms of destructive\ninterference out of concurrent execution. In some cases, the\nobjects are passed to the functions by users; in others,\nthey are used by the functions to return values to users; in\nothers, they are not even exposed to users.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>const</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Functions marked with <i>const</i> as an MT-Safety issue\nnon-atomically modify internal objects that are better\nregarded as constant, because a substantial portion of the\nGNU C Library accesses them without synchronization. Unlike\n<i>race</i>, which causes both readers and writers of\ninternal objects to be regarded as MT-Unsafe, this mark is\napplied to writers only. Writers remain MT-Unsafe to call,\nbut the then-mandatory constness of objects they modify\nenables readers to be regarded as MT-Safe (as long as no\nother reasons for them to be unsafe remain), since the lack\nof synchronization is not a problem when the objects are\neffectively constant.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The identifier\nthat follows the <i>const</i> mark will appear by itself as\na safety note in readers. Programs that wish to work around\nthis safety issue, so as to call writers, may use a\nnon-recursive read-write lock associated with the\nidentifier, and guard <i>all</i> calls to functions marked\nwith <i>const</i> followed by the identifier with a write\nlock, and <i>all</i> calls to functions marked with the\nidentifier by itself with a read lock.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><i>sig</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Functions marked with <i>sig</i>\nas a MT-Safety issue may temporarily install a signal\nhandler for internal purposes, which may interfere with\nother uses of the signal, identified after a colon.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This safety\nproblem can be worked around by ensuring that no other uses\nof the signal will take place for the duration of the call.\nHolding a non-recursive mutex while calling all functions\nthat use the same temporary signal; blocking that signal\nbefore the call and resetting its handler afterwards is\nrecommended.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\"><i>term</i></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Functions marked with\n<i>term</i> as an MT-Safety issue may change the terminal\nsettings in the recommended way, namely: call\n<a href=\"https://man.page/3/tcgetattr\">tcgetattr(3)</a>, modify some flags, and then call\n<a href=\"https://man.page/3/tcsetattr\">tcsetattr(3)</a>, this creates a window in which changes\nmade by other threads are lost. Thus, functions marked with\n<i>term</i> are MT-Unsafe.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">It is thus\nadvisable for applications using the terminal to avoid\nconcurrent and reentrant interactions with it, by not using\nit in signal handlers or blocking signals that might use it,\nand holding a lock while calling these functions and\ninteracting with the terminal. This lock should also be used\nfor mutual exclusion with functions marked with\n<i>race:tcattr(fd)</i>, where <i>fd</i> is a file descriptor\nfor the controlling terminal. The caller may use a single\nmutex for simplicity, or use one mutex per terminal, even if\nreferenced by different file descriptors.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Other safety\nremarks</b> <br>\nAdditional keywords may be attached to functions, indicating\nfeatures that do not make a function unsafe to call, but\nthat may need to be taken into account in certain classes of\nprograms:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><i>locale</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Functions annotated with\n<i>locale</i> as an MT-Safety issue read from the locale\nobject without any form of synchronization. Functions\nannotated with <i>locale</i> called concurrently with locale\nchanges may behave in ways that do not correspond to any of\nthe locales active during their execution, but an\nunpredictable mix thereof.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">We do not mark\nthese functions as MT-Unsafe, however, because functions\nthat modify the locale object are marked with\n<i>const:locale</i> and regarded as unsafe. Being unsafe,\nthe latter are not to be called when multiple threads are\nrunning or asynchronous signals are enabled, and so the\nlocale can be considered effectively constant in these\ncontexts, which makes the former safe.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><i>env</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Functions marked with <i>env</i>\nas an MT-Safety issue access the environment with\n<a href=\"https://man.page/3/getenv\">getenv(3)</a> or similar, without any guards to ensure\nsafety in the presence of concurrent modifications.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">We do not mark\nthese functions as MT-Unsafe, however, because functions\nthat modify the environment are all marked with\n<i>const:env</i> and regarded as unsafe. Being unsafe, the\nlatter are not to be called when multiple threads are\nrunning or asynchronous signals are enabled, and so the\nenvironment can be considered effectively constant in these\ncontexts, which makes the former safe.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><i>hostid</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The function marked with\n<i>hostid</i> as an MT-Safety issue reads from the\nsystem-wide data structures that hold the &quot;host\nID&quot; of the machine. These data structures cannot\ngenerally be modified atomically. Since it is expected that\nthe &quot;host ID&quot; will not normally change, the\nfunction that reads from it (<a href=\"https://man.page/3/gethostid\">gethostid(3)</a>) is\nregarded as safe, whereas the function that modifies it\n(<a href=\"https://man.page/3/sethostid\">sethostid(3)</a>) is marked with <i>const:hostid</i>,\nindicating it may require special care if it is to be\ncalled. In this specific case, the special care amounts to\nsystem-wide (not merely intra-process) coordination.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><i>sigintr</i></p>\n\n<p style=\"margin-left:22%;\">Functions marked with\n<i>sigintr</i> as an MT-Safety issue access the GNU C\nLibrary <i>_sigintr</i> internal data structure without any\nguards to ensure safety in the presence of concurrent\nmodifications.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">We do not mark\nthese functions as MT-Unsafe, however, because functions\nthat modify this data structure are all marked with\n<i>const:sigintr</i> and regarded as unsafe. Being unsafe,\nthe latter are not to be called when multiple threads are\nrunning or asynchronous signals are enabled, and so the data\nstructure can be considered effectively constant in these\ncontexts, which makes the former safe.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><i>cwd</i></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Functions marked with <i>cwd</i> as an MT-Safety issue\nmay temporarily change the current working directory during\ntheir execution, which may cause relative pathnames to be\nresolved in unexpected ways in other threads or within\nasynchronous signal or cancellation handlers.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This is not\nenough of a reason to mark so-marked functions as MT-Unsafe,\nbut when this behavior is optional (e.g., <a href=\"https://man.page/3/nftw\">nftw(3)</a>\nwith <b>FTW_CHDIR</b>), avoiding the option may be a good\nalternative to using full pathnames or file\ndescriptor-relative (e.g., <a href=\"https://man.page/2/openat\">openat(2)</a>) system\ncalls.</p>\n\n<p style=\"margin-left:11%;\"><i>:identifier</i></p>\n\n<p style=\"margin-left:22%;\">Annotations may sometimes be\nfollowed by identifiers, intended to group several functions\nthat, for example, access the data structures in an unsafe\nway, as in <i>race</i> and <i>const</i>, or to provide more\nspecific information, such as naming a signal in a function\nmarked with <i>sig</i>. It is envisioned that it may be\napplied to <i>lock</i> and <i>corrupt</i> as well in the\nfuture.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In most cases,\nthe identifier will name a set of functions, but it may name\nglobal objects or function arguments, or identifiable\nproperties or logical components associated with them, with\na notation such as, for example, <i>:buf(arg)</i> to denote\na buffer associated with the argument <i>arg</i>, or\n<i>:tcattr(fd)</i> to denote the terminal attributes of a\nfile descriptor <i>fd</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The most common\nuse for identifiers is to provide logical groups of\nfunctions and arguments that need to be protected by the\nsame synchronization primitive in order to ensure safe\noperation in a given context.</p>\n\n<p style=\"margin-left:11%;\"><i>/condition</i></p>\n\n<p style=\"margin-left:22%;\">Some safety annotations may be\nconditional, in that they only apply if a boolean expression\ninvolving arguments, global variables or even the underlying\nkernel evaluates to true. For example, <i>/!ps</i> and\n<i>/one_per_line</i> indicate the preceding marker only\napplies when argument <i>ps</i> is NULL, or global variable\n<i>one_per_line</i> is nonzero.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When all marks\nthat render a function unsafe are adorned with such\nconditions, and none of the named conditions hold, then the\nfunction can be regarded as safe.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/pthreads\">pthreads(7)</a>,\n<a href=\"https://man.page/7/signal-safety\">signal-safety(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}