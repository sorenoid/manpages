{"name":"pcap-filter","description":"pcap-filter - packet filter syntax","body":"\n\n<h1 align=\"center\">PCAP-FILTER</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pcap-filter -\npacket filter syntax</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pcap_compile</b>()\nis used to compile a string into a filter program. The\nresulting filter program can then be applied to some stream\nof packets to determine which packets will be supplied to\n<b>pcap_loop</b>(3PCAP), <b>pcap_dispatch</b>(3PCAP),\n<b>pcap_next</b>(3PCAP), or <b>pcap_next_ex</b>(3PCAP).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The <i>filter\nexpression</i> consists of one or more <i>primitives</i>.\nPrimitives usually consist of an <i>id</i> (name or number)\npreceded by one or more qualifiers. There are three\ndifferent kinds of qualifier:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>type</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>type</i> qualifiers say what kind of thing the id\nname or number refers to. Possible types are <b>host</b>,\n<b>net</b>, <b>port</b> and <b>portrange</b>. E.g.,\n&rsquo;<b>host</b> foo&rsquo;, &rsquo;<b>net</b>\n128.3&rsquo;, &rsquo;<b>port</b> 20&rsquo;,\n&rsquo;<b>portrange</b> 6000-6008&rsquo;. If there is no\ntype qualifier, <b>host</b> is assumed.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>dir</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>dir</i> qualifiers specify a particular transfer\ndirection to and/or from <i>id</i>. Possible directions are\n<b>src</b>, <b>dst</b>, <b>src or dst</b>, <b>src and\ndst</b>, <b>ra</b>, <b>ta</b>, <b>addr1</b>, <b>addr2</b>,\n<b>addr3</b>, and <b>addr4</b>. E.g., &rsquo;<b>src</b>\nfoo&rsquo;, &rsquo;<b>dst net</b> 128.3&rsquo;,\n&rsquo;<b>src or dst port</b> ftp-data&rsquo;. If there is\nno dir qualifier, &rsquo;<b>src or dst</b>&rsquo; is\nassumed. The <b>ra</b>, <b>ta</b>, <b>addr1</b>,\n<b>addr2</b>, <b>addr3</b>, and <b>addr4</b> qualifiers are\nonly valid for IEEE 802.11 Wireless LAN link layers.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><i>proto</i></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p><i>proto</i> qualifiers restrict the match to a\nparticular protocol. Possible protos are: <b>ether</b>,\n<b>fddi</b>, <b>tr</b>, <b>wlan</b>, <b>ip</b>, <b>ip6</b>,\n<b>arp</b>, <b>rarp</b>, <b>decnet</b>, <b>tcp</b> and\n<b>udp</b>. E.g., &rsquo;<b>ether src</b> foo&rsquo;,\n&rsquo;<b>arp net</b> 128.3&rsquo;, &rsquo;<b>tcp port</b>\n21&rsquo;, &rsquo;<b>udp portrange</b> 7000-7009&rsquo;,\n&rsquo;<b>wlan addr2</b> 0:2:3:4:5:6&rsquo;. If there is no\nproto qualifier, all protocols consistent with the type are\nassumed. E.g., &rsquo;<b>src</b> foo&rsquo; means\n&rsquo;<b>(ip or arp or rarp) src</b> foo&rsquo; (except the\nlatter is not legal syntax), &rsquo;<b>net</b> bar&rsquo;\nmeans &rsquo;<b>(ip or arp or rarp) net</b> bar&rsquo; and\n&rsquo;<b>port</b> 53&rsquo; means &rsquo;<b>(tcp or udp)\nport</b> 53&rsquo;.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">[<b>fddi</b> is\nactually an alias for <b>ether</b>; the parser treats them\nidentically as meaning &rsquo;&rsquo;the data link level\nused on the specified network interface&rsquo;&rsquo;. FDDI\nheaders contain Ethernet-like source and destination\naddresses, and often contain Ethernet-like packet types, so\nyou can filter on these FDDI fields just as with the\nanalogous Ethernet fields. FDDI headers also contain other\nfields, but you cannot name them explicitly in a filter\nexpression.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Similarly,\n<b>tr</b> and <b>wlan</b> are aliases for <b>ether</b>; the\nprevious paragraph&rsquo;s statements about FDDI headers\nalso apply to Token Ring and 802.11 wireless LAN headers.\nFor 802.11 headers, the destination address is the DA field\nand the source address is the SA field; the BSSID, RA, and\nTA fields aren&rsquo;t tested.]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In addition to\nthe above, there are some special &rsquo;primitive&rsquo;\nkeywords that don&rsquo;t follow the pattern:\n<b>gateway</b>, <b>broadcast</b>, <b>less</b>,\n<b>greater</b> and arithmetic expressions. All of these are\ndescribed below.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">More complex\nfilter expressions are built up by using the words\n<b>and</b>, <b>or</b> and <b>not</b> (or equivalently:\n&rsquo;<b>&amp;&amp;</b>&rsquo;, &rsquo;<b>||</b>&rsquo; and\n&rsquo;<b>!</b>&rsquo; respectively) to combine primitives.\nE.g., &rsquo;<b>host</b> foo <b>and not port</b> ftp <b>and\nnot port</b> ftp-data&rsquo;. To save typing, identical\nqualifier lists can be omitted. E.g., &rsquo;<b>tcp dst\nport</b> ftp <b>or</b> ftp-data <b>or</b> domain&rsquo; is\nexactly the same as &rsquo;<b>tcp dst port</b> ftp <b>or tcp\ndst port</b> ftp-data <b>or tcp dst port</b>\ndomain&rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Allowable\nprimitives are: <b><br>\ndst host</b> <i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if the IPv4/v6 destination\nfield of the packet is <i>host</i>, which may be either an\naddress or a name.</p>\n\n<p style=\"margin-left:11%;\"><b>src host</b> <i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if the IPv4/v6 source\nfield of the packet is <i>host</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>host</b> <i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if either the IPv4/v6\nsource or destination of the packet is <i>host</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Any of the\nabove host expressions can be prepended with the keywords,\n<b>ip</b>, <b>arp</b>, <b>rarp</b>, or <b>ip6</b> as in:</p>\n\n<p style=\"margin-left:29%;\"><b>ip host</b> <i>host</i></p>\n\n<p style=\"margin-left:22%;\">which is equivalent to:</p>\n\n<p style=\"margin-left:29%;\"><b>ether proto \\ip and host</b>\n<i>host</i></p>\n\n<p style=\"margin-left:22%;\">If <i>host</i> is a name with\nmultiple IPv4 addresses, each address will be checked for a\nmatch.</p>\n\n<p style=\"margin-left:11%;\"><b>ether dst</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the Ethernet\ndestination address is <i>ehost</i>. <i>Ehost</i> may be\neither a name from /etc/ethers or a numerical MAC address of\nthe form &quot;xx:xx:xx:xx:xx:xx&quot;,\n&quot;xx.xx.xx.xx.xx.xx&quot;,\n&quot;xx-xx-xx-xx-xx-xx&quot;, &quot;xxxx.xxxx.xxxx&quot;,\n&quot;xxxxxxxxxxxx&quot;, or various mixes of\n&rsquo;:&rsquo;, &rsquo;.&rsquo;, and &rsquo;-&rsquo;, where\neach &quot;x&quot; is a hex digit (0-9, a-f, or A-F).</p>\n\n<p style=\"margin-left:11%;\"><b>ether src</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the Ethernet source\naddress is <i>ehost</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>ether host</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if either the Ethernet\nsource or destination address is <i>ehost</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>gateway</b> <i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet used\n<i>host</i> as a gateway. I.e., the Ethernet source or\ndestination address was <i>host</i> but neither the IP\nsource nor the IP destination was <i>host</i>. <i>Host</i>\nmust be a name and must be found both by the machine&rsquo;s\nhost-name-to-IP-address resolution mechanisms (host name\nfile, DNS, NIS, etc.) and by the machine&rsquo;s\nhost-name-to-Ethernet-address resolution mechanism\n(/etc/ethers, etc.). (An equivalent expression is</p>\n\n<p style=\"margin-left:29%;\"><b>ether host</b> <i>ehost</i>\n<b>and not host</b> <i>host</i></p>\n\n<p style=\"margin-left:22%;\">which can be used with either\nnames or numbers for <i>host / ehost</i>.) This syntax does\nnot work in IPv6-enabled configuration at this moment.</p>\n\n<p style=\"margin-left:11%;\"><b>dst net</b> <i>net</i></p>\n\n<p style=\"margin-left:22%;\">True if the IPv4/v6 destination\naddress of the packet has a network number of <i>net</i>.\n<i>Net</i> may be either a name from the networks database\n(/etc/networks, etc.) or a network number. An IPv4 network\nnumber can be written as a dotted quad (e.g., 192.168.1.0),\ndotted triple (e.g., 192.168.1), dotted pair (e.g, 172.16),\nor single number (e.g., 10); the netmask is 255.255.255.255\nfor a dotted quad (which means that it&rsquo;s really a host\nmatch), 255.255.255.0 for a dotted triple, 255.255.0.0 for a\ndotted pair, or 255.0.0.0 for a single number. An IPv6\nnetwork number must be written out fully; the netmask is\nff:ff:ff:ff:ff:ff:ff:ff, so IPv6 &quot;network&quot; matches\nare really always host matches, and a network match requires\na netmask length.</p>\n\n<p style=\"margin-left:11%;\"><b>src net</b> <i>net</i></p>\n\n<p style=\"margin-left:22%;\">True if the IPv4/v6 source\naddress of the packet has a network number of\n<i>net</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>net</b> <i>net</i></p>\n\n<p style=\"margin-left:22%;\">True if either the IPv4/v6\nsource or destination address of the packet has a network\nnumber of <i>net</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>net</b> <i>net</i>\n<b>mask</b> <i>netmask</i></p>\n\n<p style=\"margin-left:22%;\">True if the IPv4 address\nmatches <i>net</i> with the specific <i>netmask</i>. May be\nqualified with <b>src</b> or <b>dst</b>. Note that this\nsyntax is not valid for IPv6 <i>net</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>net</b>\n<i>net</i>/<i>len</i></p>\n\n<p style=\"margin-left:22%;\">True if the IPv4/v6 address\nmatches <i>net</i> with a netmask <i>len</i> bits wide. May\nbe qualified with <b>src</b> or <b>dst</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>dst port</b> <i>port</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is IPv4 TCP,\nIPv4 UDP, IPv6 TCP or IPv6 UDP and has a destination port\nvalue of <i>port</i>. The <i>port</i> can be a number or a\nname used in /etc/services (see <b>tcp</b>(4P) and\n<b>udp</b>(4P)). If a name is used, both the port number and\nprotocol are checked. If a number or ambiguous name is used,\nonly the port number is checked (e.g., &rsquo;<b>dst\nport</b> 513&rsquo; will print both tcp/login traffic and\nudp/who traffic, and &rsquo;<b>port domain</b>&rsquo; will\nprint both tcp/domain and udp/domain traffic).</p>\n\n<p style=\"margin-left:11%;\"><b>src port</b> <i>port</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet has a source\nport value of <i>port</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>port</b> <i>port</i></p>\n\n<p style=\"margin-left:22%;\">True if either the source or\ndestination port of the packet is <i>port</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>dst portrange</b>\n<i>port1-port2</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is IPv4 TCP,\nIPv4 UDP, IPv6 TCP or IPv6 UDP and has a destination port\nvalue between <i>port1</i> and <i>port2</i> (both\ninclusive). <i>port1</i> and <i>port2</i> are interpreted in\nthe same fashion as the <i>port</i> parameter for\n<b>port</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>src portrange</b>\n<i>port1-port2</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet has a source\nport value between <i>port1</i> and <i>port2</i> (both\ninclusive).</p>\n\n<p style=\"margin-left:11%;\"><b>portrange</b>\n<i>port1-port2</i></p>\n\n<p style=\"margin-left:22%;\">True if either the source or\ndestination port of the packet is between <i>port1</i> and\n<i>port2</i> (both inclusive).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Any of the\nabove port or port range expressions can be prepended with\nthe keywords, <b>tcp</b> or <b>udp</b>, as in:</p>\n\n<p style=\"margin-left:29%;\"><b>tcp src port</b>\n<i>port</i></p>\n\n<p style=\"margin-left:22%;\">which matches only TCP packets\nwhose source port is <i>port</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>less</b> <i>length</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet has a length\nless than or equal to <i>length</i>. This is equivalent\nto:</p>\n\n<p style=\"margin-left:29%;\"><b>len &lt;=</b>\n<i>length</i></p>\n\n<p style=\"margin-left:11%;\"><b>greater</b>\n<i>length</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet has a length\ngreater than or equal to <i>length</i>. This is equivalent\nto:</p>\n\n<p style=\"margin-left:29%;\"><b>len &gt;=</b>\n<i>length</i></p>\n\n<p style=\"margin-left:11%;\"><b>ip proto</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv4\npacket (see <b>ip</b>(4P)) of protocol type <i>protocol</i>.\n<i>Protocol</i> can be a number or one of the names\n<b>icmp</b>, <b>icmp6</b>, <b>igmp</b>, <b>igrp</b>,\n<b>pim</b>, <b>ah</b>, <b>esp</b>, <b>vrrp</b>, <b>udp</b>,\nor <b>tcp</b>. Note that the identifiers <b>tcp</b>,\n<b>udp</b>, and <b>icmp</b> are also keywords and must be\nescaped via backslash (\\). Note that this primitive does not\nchase the protocol header chain.</p>\n\n<p style=\"margin-left:11%;\"><b>ip6 proto</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv6\npacket of protocol type <i>protocol</i>. Note that this\nprimitive does not chase the protocol header chain.</p>\n\n<p style=\"margin-left:11%;\"><b>proto</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv4\nor IPv6 packet of protocol type <i>protocol</i>. Note that\nthis primitive does not chase the protocol header chain.</p>\n\n<p style=\"margin-left:11%;\"><b>tcp</b>, <b>udp</b>,\n<b>icmp</b></p>\n\n<p style=\"margin-left:22%;\">Abbreviations for:</p>\n\n<p style=\"margin-left:29%;\"><b>proto\n\\</b><i>protocol</i></p>\n\n<p style=\"margin-left:22%;\"><b>where</b> <i>protocol</i> is\none of the above protocols.</p>\n\n<p style=\"margin-left:11%;\"><b>ip6 protochain</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is IPv6\npacket, and contains protocol header with type\n<i>protocol</i> in its protocol header chain. For\nexample,</p>\n\n<p style=\"margin-left:29%;\"><b>ip6 protochain</b> 6</p>\n\n<p style=\"margin-left:22%;\">matches any IPv6 packet with\nTCP protocol header in the protocol header chain. The packet\nmay contain, for example, authentication header, routing\nheader, or hop-by-hop option header, between IPv6 header and\nTCP header. The BPF code emitted by this primitive is\ncomplex and cannot be optimized by the BPF optimizer code,\nand is not supported by filter engines in the kernel, so\nthis can be somewhat slow, and may cause more packets to be\ndropped.</p>\n\n<p style=\"margin-left:11%;\"><b>ip protochain</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">Equivalent to <b>ip6\nprotochain</b> <i>protocol</i>, but this is for IPv4.</p>\n\n<p style=\"margin-left:11%;\"><b>protochain</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv4\nor IPv6 packet of protocol type <i>protocol</i>. Note that\nthis primitive chases the protocol header chain.</p>\n\n<p style=\"margin-left:11%;\"><b>ether broadcast</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an\nEthernet broadcast packet. The <b>ether</b> keyword is\noptional.</p>\n\n<p style=\"margin-left:11%;\"><b>ip broadcast</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv4\nbroadcast packet. It checks for both the all-zeroes and\nall-ones broadcast conventions, and looks up the subnet mask\non the interface on which the capture is being done.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the subnet\nmask of the interface on which the capture is being done is\nnot available, either because the interface on which capture\nis being done has no netmask or because the capture is being\ndone on the Linux &quot;any&quot; interface, which can\ncapture on more than one interface, this check will not work\ncorrectly.</p>\n\n<p style=\"margin-left:11%;\"><b>ether multicast</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an\nEthernet multicast packet. The <b>ether</b> keyword is\noptional. This is shorthand for &rsquo;<b>ether[</b>0<b>]\n&amp;</b> 1 <b>!=</b> 0&rsquo;.</p>\n\n<p style=\"margin-left:11%;\"><b>ip multicast</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv4\nmulticast packet.</p>\n\n<p style=\"margin-left:11%;\"><b>ip6 multicast</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IPv6\nmulticast packet.</p>\n\n<p style=\"margin-left:11%;\"><b>ether proto</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is of ether\ntype <i>protocol</i>. <i>Protocol</i> can be a number or one\nof the names <b>aarp</b>, <b>arp</b>, <b>atalk</b>,\n<b>decnet</b>, <b>ip</b>, <b>ip6</b>, <b>ipx</b>,\n<b>iso</b>, <b>lat</b>, <b>loopback</b>, <b>mopdl</b>,\n<b>moprc</b>, <b>netbeui</b>, <b>rarp</b>, <b>sca</b> or\n<b>stp</b>. Note these identifiers (except <b>loopback</b>)\nare also keywords and must be escaped via backslash (\\).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">[In the case of\nFDDI (e.g., &rsquo;<b>fddi proto \\arp</b>&rsquo;), Token\nRing (e.g., &rsquo;<b>tr proto \\arp</b>&rsquo;), and IEEE\n802.11 wireless LANs (e.g., &rsquo;<b>wlan proto\n\\arp</b>&rsquo;), for most of those protocols, the protocol\nidentification comes from the 802.2 Logical Link Control\n(LLC) header, which is usually layered on top of the FDDI,\nToken Ring, or 802.11 header.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When filtering\nfor most protocol identifiers on FDDI, Token Ring, or\n802.11, the filter checks only the protocol ID field of an\nLLC header in so-called SNAP format with an Organizational\nUnit Identifier (OUI) of 0x000000, for encapsulated\nEthernet; it doesn&rsquo;t check whether the packet is in\nSNAP format with an OUI of 0x000000. The exceptions are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"4%\">\n\n\n<p><b>iso</b></p></td>\n<td width=\"6%\"></td>\n<td width=\"68%\">\n\n\n<p>the filter checks the DSAP (Destination Service Access\nPoint) and SSAP (Source Service Access Point) fields of the\nLLC header;</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>stp</b> and\n<b>netbeui</b></p>\n\n<p style=\"margin-left:32%;\">the filter checks the DSAP of\nthe LLC header;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>atalk</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the filter checks for a SNAP-format packet with an OUI\nof 0x080007 and the AppleTalk etype.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">In the case of\nEthernet, the filter checks the Ethernet type field for most\nof those protocols. The exceptions are: <b><br>\niso</b>, <b>stp</b>, and <b>netbeui</b></p>\n\n<p style=\"margin-left:32%;\">the filter checks for an 802.3\nframe and then checks the LLC header as it does for FDDI,\nToken Ring, and 802.11;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>atalk</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the filter checks both for the AppleTalk etype in an\nEthernet frame and for a SNAP-format packet as it does for\nFDDI, Token Ring, and 802.11;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>aarp</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the filter checks for the AppleTalk ARP etype in either\nan Ethernet frame or an 802.2 SNAP frame with an OUI of\n0x000000;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ipx</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>the filter checks for the IPX etype in an Ethernet\nframe, the IPX DSAP in the LLC header, the\n802.3-with-no-LLC-header encapsulation of IPX, and the IPX\netype in a SNAP frame.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ip</b>, <b>ip6</b>,\n<b>arp</b>, <b>rarp</b>, <b>atalk</b>, <b>aarp</b>,\n<b>decnet</b>, <b>iso</b>, <b>stp</b>, <b>ipx</b>,\n<b>netbeui</b></p>\n\n<p style=\"margin-left:22%;\">Abbreviations for:</p>\n\n<p style=\"margin-left:29%;\"><b>ether proto\n\\</b><i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">where <i>protocol</i> is one of\nthe above protocols.</p>\n\n<p style=\"margin-left:11%;\"><b>lat</b>, <b>moprc</b>,\n<b>mopdl</b></p>\n\n<p style=\"margin-left:22%;\">Abbreviations for:</p>\n\n<p style=\"margin-left:29%;\"><b>ether proto\n\\</b><i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">where <i>protocol</i> is one of\nthe above protocols. Note that not all applications using\n<b>pcap</b>(3PCAP) currently know how to parse these\nprotocols.</p>\n\n<p style=\"margin-left:11%;\"><b>decnet src</b>\n<i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if the DECnet source\naddress is <i>host</i>, which may be an address of the form\n&rsquo;&rsquo;10.123&rsquo;&rsquo;, or a DECnet host name.\n[DECnet host name support is only available on ULTRIX\nsystems that are configured to run DECnet.]</p>\n\n<p style=\"margin-left:11%;\"><b>decnet dst</b>\n<i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if the DECnet destination\naddress is <i>host</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>decnet host</b>\n<i>host</i></p>\n\n<p style=\"margin-left:22%;\">True if either the DECnet\nsource or destination address is <i>host</i>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>llc</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet has an 802.2 LLC header. This\nincludes:</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Ethernet\npackets with a length field rather than a type field that\naren&rsquo;t raw NetWare-over-802.3 packets;</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">IEEE 802.11\ndata packets;</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Token Ring\npackets (no check is done for LLC frames);</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">FDDI packets\n(no check is done for LLC frames);</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\">LLC-encapsulated\nATM packets, for SunATM on Solaris.</p>\n\n<p style=\"margin-left:11%;\"><b>llc</b> <i>type</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet has an 802.2\nLLC header and has the specified <i>type</i>. <i>type</i>\ncan be one of:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>i</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Information (I) PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>s</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Supervisory (S) PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>u</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Unnumbered (U) PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>rr</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Receiver Ready (RR) S PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>rnr</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Receiver Not Ready (RNR) S PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>rej</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Reject (REJ) S PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ui</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Unnumbered Information (UI) U PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>ua</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Unnumbered Acknowledgment (UA) U PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>disc</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Disconnect (DISC) U PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>sabme</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Set Asynchronous Balanced Mode Extended (SABME) U\nPDUs</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>test</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Test (TEST) U PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>xid</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Exchange Identification (XID) U PDUs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>frmr</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>Frame Reject (FRMR) U PDUs</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>inbound</b></p>\n\n<p style=\"margin-left:22%;\">Packet was received by the host\nperforming the capture rather than being sent by that host.\nThis is only supported for certain link-layer types, such as\nSLIP and the &rsquo;&rsquo;cooked&rsquo;&rsquo; Linux\ncapture mode used for the &rsquo;&rsquo;any&rsquo;&rsquo;\ndevice and for some other device types.</p>\n\n<p style=\"margin-left:11%;\"><b>outbound</b></p>\n\n<p style=\"margin-left:22%;\">Packet was sent by the host\nperforming the capture rather than being received by that\nhost. This is only supported for certain link-layer types,\nsuch as SLIP and the &rsquo;&rsquo;cooked&rsquo;&rsquo;\nLinux capture mode used for the\n&rsquo;&rsquo;any&rsquo;&rsquo; device and for some other\ndevice types.</p>\n\n<p style=\"margin-left:11%;\"><b>ifname</b>\n<i>interface</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet was logged\nas coming from the specified interface (applies only to\npackets logged by OpenBSD&rsquo;s or FreeBSD&rsquo;s\n<a href=\"https://man.page/4/pf\">pf(4)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>on</b> <i>interface</i></p>\n\n<p style=\"margin-left:22%;\">Synonymous with the\n<b>ifname</b> modifier.</p>\n\n<p style=\"margin-left:11%;\"><b>rnr</b> <i>num</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet was logged\nas matching the specified PF rule number (applies only to\npackets logged by OpenBSD&rsquo;s or FreeBSD&rsquo;s\n<a href=\"https://man.page/4/pf\">pf(4)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>rulenum</b> <i>num</i></p>\n\n<p style=\"margin-left:22%;\">Synonymous with the <b>rnr</b>\nmodifier.</p>\n\n<p style=\"margin-left:11%;\"><b>reason</b> <i>code</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet was logged\nwith the specified PF reason code. The known codes are:\n<b>match</b>, <b>bad-offset</b>, <b>fragment</b>,\n<b>short</b>, <b>normalize</b>, and <b>memory</b> (applies\nonly to packets logged by OpenBSD&rsquo;s or FreeBSD&rsquo;s\n<a href=\"https://man.page/4/pf\">pf(4)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>rset</b> <i>name</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet was logged\nas matching the specified PF ruleset name of an anchored\nruleset (applies only to packets logged by OpenBSD&rsquo;s\nor FreeBSD&rsquo;s <a href=\"https://man.page/4/pf\">pf(4)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>ruleset</b> <i>name</i></p>\n\n<p style=\"margin-left:22%;\">Synonymous with the <b>rset</b>\nmodifier.</p>\n\n<p style=\"margin-left:11%;\"><b>srnr</b> <i>num</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet was logged\nas matching the specified PF rule number of an anchored\nruleset (applies only to packets logged by OpenBSD&rsquo;s\nor FreeBSD&rsquo;s <a href=\"https://man.page/4/pf\">pf(4)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>subrulenum</b>\n<i>num</i></p>\n\n<p style=\"margin-left:22%;\">Synonymous with the <b>srnr</b>\nmodifier.</p>\n\n<p style=\"margin-left:11%;\"><b>action</b> <i>act</i></p>\n\n<p style=\"margin-left:22%;\">True if PF took the specified\naction when the packet was logged. Known actions are:\n<b>pass</b> and <b>block</b> and, with later versions of\n<a href=\"https://man.page/4/pf\">pf(4)</a>, <b>nat</b>, <b>rdr</b>, <b>binat</b> and\n<b>scrub</b> (applies only to packets logged by\nOpenBSD&rsquo;s or FreeBSD&rsquo;s <a href=\"https://man.page/4/pf\">pf(4)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>wlan ra</b> <i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the IEEE 802.11 RA is\n<i>ehost</i>. The RA field is used in all frames except for\nmanagement frames.</p>\n\n<p style=\"margin-left:11%;\"><b>wlan ta</b> <i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the IEEE 802.11 TA is\n<i>ehost</i>. The TA field is used in all frames except for\nmanagement frames and CTS (Clear To Send) and ACK\n(Acknowledgment) control frames.</p>\n\n<p style=\"margin-left:11%;\"><b>wlan addr1</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the first IEEE 802.11\naddress is <i>ehost</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>wlan addr2</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the second IEEE 802.11\naddress, if present, is <i>ehost</i>. The second address\nfield is used in all frames except for CTS (Clear To Send)\nand ACK (Acknowledgment) control frames.</p>\n\n<p style=\"margin-left:11%;\"><b>wlan addr3</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the third IEEE 802.11\naddress, if present, is <i>ehost</i>. The third address\nfield is used in management and data frames, but not in\ncontrol frames.</p>\n\n<p style=\"margin-left:11%;\"><b>wlan addr4</b>\n<i>ehost</i></p>\n\n<p style=\"margin-left:22%;\">True if the fourth IEEE 802.11\naddress, if present, is <i>ehost</i>. The fourth address\nfield is only used for WDS (Wireless Distribution System)\nframes.</p>\n\n<p style=\"margin-left:11%;\"><b>type</b>\n<i>wlan_type</i></p>\n\n<p style=\"margin-left:22%;\">True if the IEEE 802.11 frame\ntype matches the specified <i>wlan_type</i>. Valid\n<i>wlan_type</i>s are: <b>mgt</b>, <b>ctl</b> and\n<b>data</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>type</b> <i>wlan_type</i>\n<b>subtype</b> <i>wlan_subtype</i></p>\n\n<p style=\"margin-left:22%;\">True if the IEEE 802.11 frame\ntype matches the specified <i>wlan_type</i> and frame\nsubtype matches the specified <i>wlan_subtype</i>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\nspecified <i>wlan_type</i> is <b>mgt</b>, then valid\n<i>wlan_subtype</i>s are: <b>assoc-req</b>,\n<b>assoc-resp</b>, <b>reassoc-req</b>, <b>reassoc-resp</b>,\n<b>probe-req</b>, <b>probe-resp</b>, <b>beacon</b>,\n<b>atim</b>, <b>disassoc</b>, <b>auth</b> and\n<b>deauth</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\nspecified <i>wlan_type</i> is <b>ctl</b>, then valid\n<i>wlan_subtype</i>s are: <b>ps-poll</b>, <b>rts</b>,\n<b>cts</b>, <b>ack</b>, <b>cf-end</b> and\n<b>cf-end-ack</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If the\nspecified <i>wlan_type</i> is <b>data</b>, then valid\n<i>wlan_subtype</i>s are: <b>data</b>, <b>data-cf-ack</b>,\n<b>data-cf-poll</b>, <b>data-cf-ack-poll</b>, <b>null</b>,\n<b>cf-ack</b>, <b>cf-poll</b>, <b>cf-ack-poll</b>,\n<b>qos-data</b>, <b>qos-data-cf-ack</b>,\n<b>qos-data-cf-poll</b>, <b>qos-data-cf-ack-poll</b>,\n<b>qos</b>, <b>qos-cf-poll</b> and\n<b>qos-cf-ack-poll</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>subtype</b>\n<i>wlan_subtype</i></p>\n\n<p style=\"margin-left:22%;\">True if the IEEE 802.11 frame\nsubtype matches the specified <i>wlan_subtype</i> and frame\nhas the type to which the specified <i>wlan_subtype</i>\nbelongs.</p>\n\n<p style=\"margin-left:11%;\"><b>dir</b> <i>dir</i></p>\n\n<p style=\"margin-left:22%;\">True if the IEEE 802.11 frame\ndirection matches the specified <i>dir</i>. Valid directions\nare: <b>nods</b>, <b>tods</b>, <b>fromds</b>, <b>dstods</b>,\nor a numeric value.</p>\n\n<p style=\"margin-left:11%;\"><b>vlan</b>\n<i>[vlan_id]</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an IEEE\n802.1Q VLAN packet. If the optional <i>vlan_id</i> is\nspecified, only true if the packet has the specified\n<i>vlan_id</i>. Note that the first <b>vlan</b> keyword\nencountered in an expression changes the decoding offsets\nfor the remainder of the expression on the assumption that\nthe packet is a VLAN packet. The &rsquo;<b>vlan</b>\n<i>[vlan_id]</i>&rsquo; keyword may be used more than once,\nto filter on VLAN hierarchies. Each use of that keyword\nincrements the filter offsets by 4.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:29%;\"><b>vlan</b> 100 <b>&amp;&amp;\nvlan</b> 200</p>\n\n<p style=\"margin-left:22%;\">filters on VLAN 200\nencapsulated within VLAN 100, and</p>\n\n<p style=\"margin-left:29%;\"><b>vlan &amp;&amp; vlan</b> 300\n<b>&amp;&amp; ip</b></p>\n\n<p style=\"margin-left:22%;\">filters IPv4 protocol\nencapsulated in VLAN 300 encapsulated within any higher\norder VLAN.</p>\n\n<p style=\"margin-left:11%;\"><b>mpls</b>\n<i>[label_num]</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an MPLS\npacket. If the optional <i>label_num</i> is specified, only\ntrue if the packet has the specified <i>label_num</i>. Note\nthat the first <b>mpls</b> keyword encountered in an\nexpression changes the decoding offsets for the remainder of\nthe expression on the assumption that the packet is a\nMPLS-encapsulated IP packet. The &rsquo;<b>mpls</b>\n<i>[label_num]</i>&rsquo; keyword may be used more than\nonce, to filter on MPLS hierarchies. Each use of that\nkeyword increments the filter offsets by 4.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:29%;\"><b>mpls</b> 100000\n<b>&amp;&amp; mpls</b> 1024</p>\n\n<p style=\"margin-left:22%;\">filters packets with an outer\nlabel of 100000 and an inner label of 1024, and</p>\n\n<p style=\"margin-left:29%;\"><b>mpls &amp;&amp; mpls</b>\n1024 <b>&amp;&amp; host</b> 192.9.200.1</p>\n\n<p style=\"margin-left:22%;\">filters packets to or from\n192.9.200.1 with an inner label of 1024 and any outer\nlabel.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>pppoed</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is a PPP-over-Ethernet Discovery\npacket (Ethernet type 0x8863).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>pppoes</b>\n<i>[session_id]</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is a\nPPP-over-Ethernet Session packet (Ethernet type 0x8864). If\nthe optional <i>session_id</i> is specified, only true if\nthe packet has the specified <i>session_id</i>. Note that\nthe first <b>pppoes</b> keyword encountered in an expression\nchanges the decoding offsets for the remainder of the\nexpression on the assumption that the packet is a PPPoE\nsession packet.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:29%;\"><b>pppoes</b> 0x27\n<b>&amp;&amp; ip</b></p>\n\n<p style=\"margin-left:22%;\">filters IPv4 protocol\nencapsulated in PPPoE session id 0x27.</p>\n\n<p style=\"margin-left:11%;\"><b>geneve</b> <i>[vni]</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is a Geneve\npacket (UDP port 6081). If the optional <i>vni</i> is\nspecified, only true if the packet has the specified\n<i>vni</i>. Note that when the <b>geneve</b> keyword is\nencountered in an expression, it changes the decoding\noffsets for the remainder of the expression on the\nassumption that the packet is a Geneve packet.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:29%;\"><b>geneve</b> 0xb <b>&amp;&amp;\nip</b></p>\n\n<p style=\"margin-left:22%;\">filters IPv4 protocol\nencapsulated in Geneve with VNI 0xb. This will match both\nIPv4 directly encapsulated in Geneve as well as IPv4\ncontained inside an Ethernet frame.</p>\n\n<p style=\"margin-left:11%;\"><b>iso proto</b>\n<i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an OSI\npacket of protocol type <i>protocol</i>. <i>Protocol</i> can\nbe a number or one of the names <b>clnp</b>, <b>esis</b>, or\n<b>isis</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>clnp</b>, <b>esis</b>,\n<b>isis</b></p>\n\n<p style=\"margin-left:22%;\">Abbreviations for:</p>\n\n<p style=\"margin-left:29%;\"><b>iso proto\n\\</b><i>protocol</i></p>\n\n<p style=\"margin-left:22%;\">where <i>protocol</i> is one of\nthe above protocols.</p>\n\n<p style=\"margin-left:11%;\"><b>l1</b>, <b>l2</b>,\n<b>iih</b>, <b>lsp</b>, <b>snp</b>, <b>csnp</b>,\n<b>psnp</b></p>\n\n<p style=\"margin-left:22%;\">Abbreviations for IS-IS PDU\ntypes.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>vpi</b> <i>n</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, with a virtual path identifier of <i>n</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>vci</b> <i>n</i></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, with a virtual channel identifier of <i>n</i>.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>lane</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is an ATM LANE packet. Note that the first\n<b>lane</b> keyword encountered in an expression changes the\ntests done in the remainder of the expression on the\nassumption that the packet is either a LANE emulated\nEthernet packet or a LANE LE Control packet. If <b>lane</b>\nisn&rsquo;t specified, the tests are done under the\nassumption that the packet is an LLC-encapsulated\npacket.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>oamf4s</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is a segment OAM F4 flow cell (VPI=0 &amp;\nVCI=3).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>oamf4e</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is an end-to-end OAM F4 flow cell (VPI=0 &amp;\nVCI=4).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>oamf4</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is a segment or end-to-end OAM F4 flow cell\n(VPI=0 &amp; (VCI=3 | VCI=4)).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>oam</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is a segment or end-to-end OAM F4 flow cell\n(VPI=0 &amp; (VCI=3 | VCI=4)).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>metac</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is on a meta signaling circuit (VPI=0 &amp;\nVCI=1).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>bcc</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is on a broadcast signaling circuit (VPI=0\n&amp; VCI=2).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>sc</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is on a signaling circuit (VPI=0 &amp;\nVCI=5).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ilmic</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>True if the packet is an ATM packet, for SunATM on\nSolaris, and is on an ILMI circuit (VPI=0 &amp; VCI=16).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>connectmsg</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an ATM\npacket, for SunATM on Solaris, and is on a signaling circuit\nand is a Q.2931 Setup, Call Proceeding, Connect, Connect\nAck, Release, or Release Done message.</p>\n\n<p style=\"margin-left:11%;\"><b>metaconnect</b></p>\n\n<p style=\"margin-left:22%;\">True if the packet is an ATM\npacket, for SunATM on Solaris, and is on a meta signaling\ncircuit and is a Q.2931 Setup, Call Proceeding, Connect,\nRelease, or Release Done message.</p>\n\n<p style=\"margin-left:11%;\"><i>expr relop expr</i></p>\n\n<p style=\"margin-left:22%;\">True if the relation holds,\nwhere <i>relop</i> is one of &gt;, &lt;, &gt;=, &lt;=, =,\n!=, and <i>expr</i> is an arithmetic expression composed of\ninteger constants (expressed in standard C syntax), the\nnormal binary operators [+, -, *, /, %, &amp;, |, ^,\n&lt;&lt;, &gt;&gt;], a length operator, and special packet\ndata accessors. Note that all comparisons are unsigned, so\nthat, for example, 0x80000000 and 0xffffffff are &gt; 0.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The % and ^\noperators are currently only supported for filtering in the\nkernel on Linux with 3.7 and later kernels; on all other\nsystems, if those operators are used, filtering will be done\nin user mode, which will increase the overhead of capturing\npackets and may cause more packets to be dropped.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To access data\ninside the packet, use the following syntax:</p>\n\n<p style=\"margin-left:29%;\"><i>proto</i> <b>[</b>\n<i>expr</i> <b>:</b> <i>size</i> <b>]</b></p>\n\n<p style=\"margin-left:22%;\"><i>Proto</i> is one of\n<b>ether, fddi, tr, wlan, ppp, slip, link, ip, arp, rarp,\ntcp, udp, icmp, ip6</b> or <b>radio</b>, and indicates the\nprotocol layer for the index operation. (<b>ether, fddi,\nwlan, tr, ppp, slip</b> and <b>link</b> all refer to the\nlink layer. <b>radio</b> refers to the &quot;radio\nheader&quot; added to some 802.11 captures.) Note that\n<b>tcp</b>, <b>udp</b> and other upper-layer protocol types\nonly apply to IPv4, not IPv6 (this will be fixed in the\nfuture). The byte offset, relative to the indicated protocol\nlayer, is given by <i>expr</i>. <i>Size</i> is optional and\nindicates the number of bytes in the field of interest; it\ncan be either one, two, or four, and defaults to one. The\nlength operator, indicated by the keyword <b>len</b>, gives\nthe length of the packet.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For example,\n&rsquo;<b>ether[</b>0<b>] &amp;</b> 1 <b>!=</b> 0&rsquo;\ncatches all multicast traffic. The expression\n&rsquo;<b>ip[</b>0<b>] &amp;</b> 0xf <b>!=</b> 5&rsquo;\ncatches all IPv4 packets with options. The expression\n&rsquo;<b>ip[</b>6:2<b>] &amp;</b> 0x1fff <b>=</b> 0&rsquo;\ncatches only unfragmented IPv4 datagrams and frag zero of\nfragmented IPv4 datagrams. This check is implicitly applied\nto the <b>tcp</b> and <b>udp</b> index operations. For\ninstance, <b>tcp[</b>0<b>]</b> always means the first byte\nof the TCP <i>header</i>, and never means the first byte of\nan intervening fragment.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Some offsets\nand field values may be expressed as names rather than as\nnumeric values. The following protocol header field offsets\nare available: <b>icmptype</b> (ICMP type field),\n<b>icmp6type</b> (ICMPv6 type field), <b>icmpcode</b> (ICMP\ncode field), <b>icmp6code</b> (ICMPv6 code field) and\n<b>tcpflags</b> (TCP flags field).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nICMP type field values are available: <b>icmp-echoreply</b>,\n<b>icmp-unreach</b>, <b>icmp-sourcequench</b>,\n<b>icmp-redirect</b>, <b>icmp-echo</b>,\n<b>icmp-routeradvert</b>, <b>icmp-routersolicit</b>,\n<b>icmp-timxceed</b>, <b>icmp-paramprob</b>,\n<b>icmp-tstamp</b>, <b>icmp-tstampreply</b>,\n<b>icmp-ireq</b>, <b>icmp-ireqreply</b>,\n<b>icmp-maskreq</b>, <b>icmp-maskreply</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nICMPv6 type fields are available:\n<b>icmp6-destinationrunreach</b>, <b>icmp6-packettoobig</b>,\n<b>icmp6-timeexceeded</b>, <b>icmp6-parameterproblem</b>,\n<b>icmp6-echo</b>, <b>icmp6-echoreply</b>,\n<b>icmp6-multicastlistenerquery</b>,\n<b>icmp6-multicastlistenerreportv1</b>,\n<b>icmp6-multicastlistenerdone</b>,\n<b>icmp6-routersolicit</b>, <b>icmp6-routeradvert</b>,\n<b>icmp6-neighborsolicit</b>, <b>icmp6-neighboradvert</b>,\n<b>icmp6-redirect</b>, <b>icmp6-routerrenum</b>,\n<b>icmp6-nodeinformationquery</b>,\n<b>icmp6-nodeinformationresponse</b>,\n<b>icmp6-ineighbordiscoverysolicit</b>,\n<b>icmp6-ineighbordiscoveryadvert</b>,\n<b>icmp6-multicastlistenerreportv2</b>,\n<b>icmp6-homeagentdiscoveryrequest</b>,\n<b>icmp6-homeagentdiscoveryreply</b>,\n<b>icmp6-mobileprefixsolicit</b>,\n<b>icmp6-mobileprefixadvert</b>,\n<b>icmp6-certpathsolicit</b>, <b>icmp6-certpathadvert</b>,\n<b>icmp6-multicastrouteradvert</b>,\n<b>icmp6-multicastroutersolicit</b>,\n<b>icmp6-multicastrouterterm</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The following\nTCP flags field values are available: <b>tcp-fin</b>,\n<b>tcp-syn</b>, <b>tcp-rst</b>, <b>tcp-push</b>,\n<b>tcp-ack</b>, <b>tcp-urg</b>, <b>tcp-ece</b>,\n<b>tcp-cwr</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Primitives may\nbe combined using:</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">A parenthesized\ngroup of primitives and operators.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Negation\n(&rsquo;<b>!</b>&rsquo; or &rsquo;<b>not</b>&rsquo;).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Concatenation\n(&rsquo;<b>&amp;&amp;</b>&rsquo; or\n&rsquo;<b>and</b>&rsquo;).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Alternation\n(&rsquo;<b>||</b>&rsquo; or &rsquo;<b>or</b>&rsquo;).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Negation has\nthe highest precedence. Alternation and concatenation have\nequal precedence and associate left to right. Note that\nexplicit <b>and</b> tokens, not juxtaposition, are now\nrequired for concatenation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If an\nidentifier is given without a keyword, the most recent\nkeyword is assumed. For example,</p>\n\n<p style=\"margin-left:18%;\"><b>not host</b> vs <b>and</b>\nace</p>\n\n<p style=\"margin-left:11%;\">is short for</p>\n\n<p style=\"margin-left:18%;\"><b>not host</b> vs <b>and\nhost</b> ace</p>\n\n<p style=\"margin-left:11%;\">which should not be confused\nwith</p>\n\n<p style=\"margin-left:18%;\"><b>not (host</b> vs <b>or</b>\nace<b>)</b></p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select all\npackets arriving at or departing from\n&rsquo;sundown&rsquo;:</p>\n\n<p style=\"margin-left:22%;\"><b>host</b> sundown</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select\ntraffic between &rsquo;helios&rsquo; and either\n&rsquo;hot&rsquo; or &rsquo;ace&rsquo;:</p>\n\n<p style=\"margin-left:22%;\"><b>host</b> helios <b>and\n(</b>hot <b>or</b> ace<b>)</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select all\nIPv4 packets between &rsquo;ace&rsquo; and any host except\n&rsquo;helios&rsquo;:</p>\n\n<p style=\"margin-left:22%;\"><b>ip host</b> ace <b>and\nnot</b> helios</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select all\ntraffic between local hosts and hosts at Berkeley:</p>\n\n<p style=\"margin-left:22%;\"><b>net</b> ucb-ether</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select all\nFTP traffic through Internet gateway &rsquo;snup&rsquo;:</p>\n\n<p style=\"margin-left:22%;\"><b>gateway</b> snup <b>and\n(port</b> ftp <b>or</b> ftp-data<b>)</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select IPv4\ntraffic neither sourced from nor destined for local hosts\n(if you gateway to one other net, this stuff should never\nmake it onto your local net).</p>\n\n<p style=\"margin-left:22%;\"><b>ip and not net</b>\nlocalnet</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select the\nstart and end packets (the SYN and FIN packets) of each TCP\nconversation that involves a non-local host.</p>\n\n<p style=\"margin-left:22%;\"><b>tcp[tcpflags] &amp;\n(tcp-syn|tcp-fin) !=</b> 0 <b>and not src and dst net</b>\nlocalnet</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select the\nTCP packets with flags RST and ACK both set. (i.e. select\nonly the RST and ACK flags in the flags field, and if the\nresult is &quot;RST and ACK both set&quot;, match)</p>\n\n<p style=\"margin-left:22%;\"><b>tcp[tcpflags] &amp;\n(tcp-rst|tcp-ack) == (tcp-rst|tcp-ack)</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select all\nIPv4 HTTP packets to and from port 80, i.e. print only\npackets that contain data, not, for example, SYN and FIN\npackets and ACK-only packets. (IPv6 is left as an exercise\nfor the reader.)</p>\n\n<p style=\"margin-left:22%;\"><b>tcp port</b> 80 <b>and\n(((ip[</b>2:2<b>] -\n((ip[</b>0<b>]&amp;</b>0xf<b>)&lt;&lt;</b>2<b>)) -\n((tcp[</b>12<b>]&amp;</b>0xf0<b>)&gt;&gt;</b>2<b>)) !=</b>\n0<b>)</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select IPv4\npackets longer than 576 bytes sent through gateway\n&rsquo;snup&rsquo;:</p>\n\n<p style=\"margin-left:22%;\"><b>gateway</b> snup <b>and\nip[</b>2:2<b>] &gt;</b> 576</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select IPv4\nbroadcast or multicast packets that were <i>not</i> sent via\nEthernet broadcast or multicast:</p>\n\n<p style=\"margin-left:22%;\"><b>ether[</b>0<b>] &amp;</b> 1\n<b>=</b> 0 <b>and ip[</b>16<b>] &gt;=</b> 224</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To select all\nICMP packets that are not echo requests/replies (i.e., not\nping packets):</p>\n\n<p style=\"margin-left:22%;\"><b>icmp[icmptype] != icmp-echo\nand icmp[icmptype] != icmp-echoreply <br>\nicmp6[icmp6type] != icmp6-echo and icmp6[icmp6type] !=\nicmp6-echoreply</b></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>pcap</b>(3PCAP)</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To report a\nsecurity issue please send an e-mail to\nsecurity@tcpdump.org.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To report bugs\nand other problems, contribute patches, request a feature,\nprovide generic feedback etc please see the file\n<i>CONTRIBUTING.md</i> in the libpcap source tree root.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Filter\nexpressions on fields other than those in Token Ring headers\nwill not correctly handle source-routed Token Ring\npackets.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Filter\nexpressions on fields other than those in 802.11 headers\nwill not correctly handle 802.11 data packets with both To\nDS and From DS set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">&rsquo;<b>ip6\nproto</b>&rsquo; should chase header chain, but at this\nmoment it does not. &rsquo;<b>ip6 protochain</b>&rsquo; is\nsupplied for this behavior. For example, to match IPv6\nfragments: &rsquo;<b>ip6 protochain</b> 44&rsquo;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Arithmetic\nexpression against transport layer headers, like\n<b>tcp[0]</b>, does not work against IPv6 packets. It only\nlooks at IPv4 packets.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#BUGS\">BUGS</a>"],"level":7}