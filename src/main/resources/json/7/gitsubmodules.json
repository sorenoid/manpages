{"name":"gitsubmodules","description":"gitsubmodules - Mounting one repository inside another","body":"\n\n<h1 align=\"center\">GITSUBMODULES</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitsubmodules -\nMounting one repository inside another</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">.gitmodules,\n$GIT_DIR/config</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">git submodule\n<br>\ngit &lt;command&gt; --recurse-submodules</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A submodule is\na repository embedded inside another repository. The\nsubmodule has its own history; the repository it is embedded\nin is called a superproject.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On the\nfilesystem, a submodule usually (but not always - see FORMS\nbelow) consists of (i) a Git directory located under the\n<b>$GIT_DIR/modules/</b> directory of its superproject, (ii)\na working directory inside the superproject&rsquo;s working\ndirectory, and a <b>.git</b> file at the root of the\nsubmodule&rsquo;s working directory pointing to (i).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Assuming the\nsubmodule has a Git directory at\n<b>$GIT_DIR/modules/foo/</b> and a working directory at\n<b>path/to/bar/</b>, the superproject tracks the submodule\nvia a <b>gitlink</b> entry in the tree at <b>path/to/bar</b>\nand an entry in its <b>.gitmodules</b> file (see\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>) of the form <b>submodule.foo.path =\npath/to/bar</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b>gitlink</b> entry contains the object name of the commit\nthat the superproject expects the submodule&rsquo;s working\ndirectory to be at.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The section\n<b>submodule.foo.*</b> in the <b>.gitmodules</b> file gives\nadditional hints to Git&rsquo;s porcelain layer. For\nexample, the <b>submodule.foo.url</b> setting specifies\nwhere to obtain the submodule.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Submodules can\nbe used for at least two different use cases:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Using\nanother project while maintaining independent history.\nSubmodules allow you to contain the working tree of another\nproject within your own working tree while keeping the\nhistory of both projects separate. Also, since submodules\nare fixed to an arbitrary version, the other project can be\nindependently developed without affecting the superproject,\nallowing the superproject project to fix itself to new\nversions only when desired.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Splitting a\n(logically single) project into multiple repositories and\ntying them back together. This can be used to overcome\ncurrent limitations of Git&rsquo;s implementation to have\nfiner grained access:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Size of\nthe Git repository: In its current form Git scales up poorly\nfor large repositories containing content that is not\ncompressed by delta computation between trees. For example,\nyou can use submodules to hold large binary assets and these\nrepositories can be shallowly cloned such that you do not\nhave a large history locally.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Transfer\nsize: In its current form Git requires the whole working\ntree present. It does not allow partial trees to be\ntransferred in fetch or clone. If the project you work on\nconsists of multiple repositories tied together as\nsubmodules in a superproject, you can avoid fetching the\nworking trees of the repositories you are not interested\nin.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">&bull; Access\ncontrol: By restricting user access to submodules, this can\nbe used to implement read/write policies for different\nusers.</p>\n\n<h2>THE CONFIGURATION OF SUBMODULES\n<a name=\"THE CONFIGURATION OF SUBMODULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Submodule\noperations can be configured using the following mechanisms\n(from highest to lowest precedence):</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\ncommand line for those commands that support taking\nsubmodules as part of their pathspecs. Most commands have a\nboolean flag <b>--recurse-submodules</b> which specify\nwhether to recurse into submodules. Examples are <b>grep</b>\nand <b>checkout</b>. Some commands take enums, such as\n<b>fetch</b> and <b>push</b>, where you can specify how\nsubmodules are affected.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\nconfiguration inside the submodule. This includes\n<b>$GIT_DIR/config</b> in the submodule, but also settings\nin the tree such as a <b>.gitattributes</b> or\n<b>.gitignore</b> files that specify behavior of commands\ninside the submodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For example an\neffect from the submodule&rsquo;s <b>.gitignore</b> file\nwould be observed when you run <b>git status\n--ignore-submodules=none</b> in the superproject. This\ncollects information from the submodule&rsquo;s working\ndirectory by running <b>status</b> in the submodule while\npaying attention to the <b>.gitignore</b> file of the\nsubmodule.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\nsubmodule&rsquo;s <b>$GIT_DIR/config</b> file would come\ninto play when running <b>git push\n--recurse-submodules=check</b> in the superproject, as this\nwould check if the submodule has any changes not published\nto any remote. The remotes are configured in the submodule\nas usual in the <b>$GIT_DIR/config</b> file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\nconfiguration file <b>$GIT_DIR/config</b> in the\nsuperproject. Git only recurses into active submodules (see\n&quot;ACTIVE SUBMODULES&quot; section below).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\nsubmodule is not yet initialized, then the configuration\ninside the submodule does not exist yet, so where to obtain\nthe submodule from is configured here for example.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\n<b>.gitmodules</b> file inside the superproject. A project\nusually uses this file to suggest defaults for the upstream\ncollection of repositories for the mapping that is required\nbetween a submodule&rsquo;s name and its path.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This file\nmainly serves as the mapping between the name and path of\nsubmodules in the superproject, such that the\nsubmodule&rsquo;s Git directory can be located.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If the\nsubmodule has never been initialized, this is the only place\nwhere submodule configuration is found. It serves as the\nlast fallback to specify where to obtain the submodule\nfrom.</p>\n\n<h2>FORMS\n<a name=\"FORMS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Submodules can\ntake the following forms:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\nbasic form described in DESCRIPTION with a Git directory, a\nworking directory, a <b>gitlink</b>, and a\n<b>.gitmodules</b> entry.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n&quot;Old-form&quot; submodule: A working directory with an\nembedded <b>.git</b> directory, and the tracking\n<b>gitlink</b> and <b>.gitmodules</b> entry in the\nsuperproject. This is typically found in repositories\ngenerated using older versions of Git.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It is possible\nto construct these old form repositories manually.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">When\ndeinitialized or deleted (see below), the submodule&rsquo;s\nGit directory is automatically moved to\n<b>$GIT_DIR/modules/&lt;name&gt;/</b> of the\nsuperproject.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nDeinitialized submodule: A <b>gitlink</b>, and a\n<b>.gitmodules</b> entry, but no submodule working\ndirectory. The submodule&rsquo;s Git directory may be there\nas after deinitializing the Git directory is kept around.\nThe directory which is supposed to be the working directory\nis empty instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">A submodule can\nbe deinitialized by running <b>git submodule deinit</b>.\nBesides emptying the working directory, this command only\nmodifies the superproject&rsquo;s <b>$GIT_DIR/config</b>\nfile, so the superproject&rsquo;s history is not affected.\nThis can be undone using <b>git submodule init</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Deleted\nsubmodule: A submodule can be deleted by running <b>git rm\n&lt;submodule path&gt; &amp;&amp; git commit</b>. This can\nbe undone using <b>git revert</b>.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The deletion\nremoves the superproject&rsquo;s tracking data, which are\nboth the <b>gitlink</b> entry and the section in the\n<b>.gitmodules</b> file. The submodule&rsquo;s working\ndirectory is removed from the file system, but the Git\ndirectory is kept around as it to make it possible to\ncheckout past commits without requiring fetching from\nanother repository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">To completely\nremove a submodule, manually delete\n<b>$GIT_DIR/modules/&lt;name&gt;/</b>.</p>\n\n<h2>ACTIVE SUBMODULES\n<a name=\"ACTIVE SUBMODULES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A submodule is\nconsidered active,</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. if\n<b>submodule.&lt;name&gt;.active</b> is set to\n<b>true</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">or</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. if the\nsubmodule&rsquo;s path matches the pathspec in\n<b>submodule.active</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">or</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. if\n<b>submodule.&lt;name&gt;.url</b> is set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and these are\nevaluated in this order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\nexample:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[submodule\n&quot;foo&quot;] <br>\nactive = false <br>\nurl = https://example.org/foo <br>\n[submodule &quot;bar&quot;] <br>\nactive = true <br>\nurl = https://example.org/bar <br>\n[submodule &quot;baz&quot;] <br>\nurl = https://example.org/baz</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the above\nconfig only the submodule <i>bar</i> and <i>baz</i> are\nactive, <i>bar</i> due to (1) and <i>baz</i> due to (3).\n<i>foo</i> is inactive because (1) takes precedence over\n(3)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that (3)\nis a historical artefact and will be ignored if the (1) and\n(2) specify that the submodule is not active. In other\nwords, if we have a <b>submodule.&lt;name&gt;.active</b> set\nto <b>false</b> or if the submodule&rsquo;s path is excluded\nin the pathspec in <b>submodule.active</b>, the url\ndoesn&rsquo;t matter whether it is present or not. This is\nillustrated in the example that follows.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[submodule\n&quot;foo&quot;] <br>\nactive = true <br>\nurl = https://example.org/foo <br>\n[submodule &quot;bar&quot;] <br>\nurl = https://example.org/bar <br>\n[submodule &quot;baz&quot;] <br>\nurl = https://example.org/baz <br>\n[submodule &quot;bob&quot;] <br>\nignore = true <br>\n[submodule] <br>\nactive = b* <br>\nactive = :(exclude) baz</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In here all\nsubmodules except <i>baz</i> (foo, bar, bob) are active.\n<i>foo</i> due to its own active flag and all the others due\nto the submodule active pathspec, which specifies that any\nsubmodule starting with <i>b</i> except <i>baz</i> are also\nactive, regardless of the presence of the .url field.</p>\n\n<h2>WORKFLOW FOR A THIRD PARTY LIBRARY\n<a name=\"WORKFLOW FOR A THIRD PARTY LIBRARY\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Add a\nsubmodule <br>\ngit submodule add &lt;url&gt; &lt;path&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Occasionally\nupdate the submodule to a new version: <br>\ngit -C &lt;path&gt; checkout &lt;new version&gt; <br>\ngit add &lt;path&gt; <br>\ngit commit -m &quot;update submodule to new\nversion&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># See the list\nof submodules in a superproject <br>\ngit submodule status</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># See FORMS on\nremoving submodules</p>\n\n<h2>WORKFLOW FOR AN ARTIFICIALLY SPLIT REPO\n<a name=\"WORKFLOW FOR AN ARTIFICIALLY SPLIT REPO\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Enable\nrecursion for relevant commands, such that <br>\n# regular commands recurse into submodules by default <br>\ngit config --global submodule.recurse true</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Unlike most\nother commands below, clone still needs <br>\n# its own recurse flag: <br>\ngit clone --recurse &lt;URL&gt; &lt;directory&gt; <br>\ncd &lt;directory&gt;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Get to know\nthe code: <br>\ngit grep foo <br>\ngit ls-files --recurse-submodules</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><big>Note</big>\n<br>\ngit ls-files</b> also requires its own\n<b>--recurse-submodules</b> flag.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Get new code\n<br>\ngit fetch <br>\ngit pull --rebase</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># Change\nworktree <br>\ngit checkout <br>\ngit reset</p>\n\n<h2>IMPLEMENTATION DETAILS\n<a name=\"IMPLEMENTATION DETAILS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>When\ncloning or pulling a repository containing submodules the\nsubmodules will not be checked out by default; you can\ninstruct <b>clone</b> to recurse into submodules. The\n<b>init</b> and <b>update</b> subcommands of <b>git\nsubmodule</b> will maintain submodules checked out and at an\nappropriate revision in your working tree. Alternatively you\ncan set <b>submodule.recurse</b> to have <b>checkout</b>\nrecursing into submodules (note that\n<b>submodule.recurse</b> also affects other Git commands,\nsee <a href=\"https://man.page/1/git-config\">git-config(1)</a> for a complete list).</big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><a href=\"https://man.page/1/git-submodule\">git-submodule(1)</a>,\n<a href=\"https://man.page/5/gitmodules\">gitmodules(5)</a>.</big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Part of\nthe <a href=\"https://man.page/1/git\">git(1)</a> suite</big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#THE CONFIGURATION OF SUBMODULES\">THE CONFIGURATION OF SUBMODULES</a>","<a href=\"#FORMS\">FORMS</a>","<a href=\"#ACTIVE SUBMODULES\">ACTIVE SUBMODULES</a>","<a href=\"#WORKFLOW FOR A THIRD PARTY LIBRARY\">WORKFLOW FOR A THIRD PARTY LIBRARY</a>","<a href=\"#WORKFLOW FOR AN ARTIFICIALLY SPLIT REPO\">WORKFLOW FOR AN ARTIFICIALLY SPLIT REPO</a>","<a href=\"#IMPLEMENTATION DETAILS\">IMPLEMENTATION DETAILS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>"],"level":7}