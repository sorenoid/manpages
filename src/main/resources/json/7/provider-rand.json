{"name":"provider-rand","body":"\n\n<h1 align=\"center\">PROVIDER-RAND</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">provider-rand -\nThe random number generation library &lt;-&gt; provider\nfunctions</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/core_dispatch.h&gt; <br>\n#include &lt;openssl/core_names.h&gt; <br>\n/* <br>\n* None of these are actual functions, but are displayed like\nthis for <br>\n* the function signatures for functions that are offered as\nfunction <br>\n* pointers in OSSL_DISPATCH arrays. <br>\n*/ <br>\n/* Context management */ <br>\nvoid *OSSL_FUNC_rand_newctx(void *provctx, void *parent,\n<br>\nconst OSSL_DISPATCH *parent_calls); <br>\nvoid OSSL_FUNC_rand_freectx(void *ctx); <br>\n/* Random number generator functions: NIST */ <br>\nint OSSL_FUNC_rand_instantiate(void *ctx, unsigned int\nstrength, <br>\nint prediction_resistance, <br>\nconst unsigned char *pstr, size_t pstr_len, <br>\nconst OSSL_PARAM params[]); <br>\nint OSSL_FUNC_rand_uninstantiate(void *ctx); <br>\nint OSSL_FUNC_rand_generate(void *ctx, unsigned char *out,\nsize_t outlen, <br>\nunsigned int strength, int prediction_resistance, <br>\nconst unsigned char *addin, size_t addin_len); <br>\nint OSSL_FUNC_rand_reseed(void *ctx, int\nprediction_resistance, <br>\nconst unsigned char *ent, size_t ent_len, <br>\nconst unsigned char *addin, size_t addin_len); <br>\n/* Random number generator functions: additional */ <br>\nsize_t OSSL_FUNC_rand_nonce(void *ctx, unsigned char *out,\nsize_t outlen, <br>\nint strength, size_t min_noncelen, <br>\nsize_t max_noncelen); <br>\nsize_t OSSL_FUNC_rand_get_seed(void *ctx, unsigned char\n**buffer, <br>\nint entropy, size_t min_len, size_t max_len, <br>\nint prediction_resistance, <br>\nconst unsigned char *adin, size_t adin_len); <br>\nvoid OSSL_FUNC_rand_clear_seed(void *ctx, unsigned char\n*buffer, size_t b_len); <br>\nint OSSL_FUNC_rand_verify_zeroization(void *ctx); <br>\n/* Context Locking */ <br>\nint OSSL_FUNC_rand_enable_locking(void *ctx); <br>\nint OSSL_FUNC_rand_lock(void *ctx); <br>\nvoid OSSL_FUNC_rand_unlock(void *ctx); <br>\n/* RAND parameter descriptors */ <br>\nconst OSSL_PARAM *OSSL_FUNC_rand_gettable_params(void\n*provctx); <br>\nconst OSSL_PARAM *OSSL_FUNC_rand_gettable_ctx_params(void\n*ctx, void *provctx); <br>\nconst OSSL_PARAM *OSSL_FUNC_rand_settable_ctx_params(void\n*ctx, void *provctx); <br>\n/* RAND parameters */ <br>\nint OSSL_FUNC_rand_get_params(OSSL_PARAM params[]); <br>\nint OSSL_FUNC_rand_get_ctx_params(void *ctx, OSSL_PARAM\nparams[]); <br>\nint OSSL_FUNC_rand_set_ctx_params(void *ctx, const\nOSSL_PARAM params[]);</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\ndocumentation is primarily aimed at provider authors. See\n<a href=\"https://man.page/7/provider\">provider(7)</a> for further information.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>RAND</small> operation enables providers to implement\nrandom number generation algorithms and random number\nsources and make them available to applications via the\n<small>API</small> function <b><small>EVP_RAND</small></b>\n(3).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nManagement Functions <br>\nOSSL_FUNC_rand_newctx()</b> should create and return a\npointer to a provider side structure for holding context\ninformation during a rand operation. A pointer to this\ncontext will be passed back in a number of the other rand\noperation function calls. The parameter <i>provctx</i> is\nthe provider context generated during provider\ninitialisation (see <a href=\"https://man.page/7/provider\">provider(7)</a>). The parameter\n<i>parent</i> specifies another rand instance to be used for\nseeding purposes. If <small>NULL</small> and the specific\ninstance supports it, the operating system will be used for\nseeding. The parameter <i>parent_calls</i> points to the\ndispatch table for <i>parent</i>. Thus, the parent need not\nbe from the same provider as the new instance.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_freectx()</b>\nis passed a pointer to the provider side rand context in the\n<i>mctx</i> parameter. If it receives <small>NULL</small> as\n<i>ctx</i> value, it should not do anything other than\nreturn. This function should free any resources associated\nwith that context.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Random\nNumber Generator Functions: <small>NIST</small></b> <br>\nThese functions correspond to those defined in <small>NIST\nSP 800-90A</small> and <small>SP 800-90C.</small></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_instantiate()</b>\nis used to instantiate the <small>DRBG</small> <i>ctx</i> at\na requested security <i>strength</i>. In addition,\n<i>prediction_resistance</i> can be requested. Additional\ninput <i>addin</i> of length <i>addin_len</i> bytes can\noptionally be provided. The parameters specified in\n<i>params</i> configure the <small>DRBG</small> and these\nshould be processed before instantiation.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_uninstantiate()</b>\nis used to uninstantiate the <small>DRBG</small> <i>ctx</i>.\nAfter being uninstantiated, a <small>DRBG</small> is unable\nto produce output until it is instantiated anew.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_generate()</b>\nis used to generate random bytes from the\n<small>DRBG</small> <i>ctx</i>. It will generate\n<i>outlen</i> bytes placing them into the buffer pointed to\nby <i>out</i>. The generated bytes will meet the specified\nsecurity <i>strength</i> and, if\n<i>prediction_resistance</i> is true, the bytes will be\nproduced after reseeding from a live entropy source.\nAdditional input <i>addin</i> of length <i>addin_len</i>\nbytes can optionally be provided.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Random\nNumber Generator Functions: Additional <br>\nOSSL_FUNC_rand_nonce()</b> is used to generate a nonce of\nthe given <i>strength</i> with a length from\n<i>min_noncelen</i> to <i>max_noncelen</i>. If the output\nbuffer <i>out</i> is <small>NULL,</small> the length of the\nnonce should be returned.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_get_seed()</b>\nis used by deterministic generators to obtain their seeding\nmaterial from their parent. The seed bytes will meet the\nspecified security level of <i>entropy</i> bits and there\nwill be between <i>min_len</i> and <i>max_len</i> inclusive\nbytes in total. If <i>prediction_resistance</i> is true, the\nbytes will be produced from a live entropy source.\nAdditional input <i>addin</i> of length <i>addin_len</i>\nbytes can optionally be provided. A pointer to the seed\nmaterial is returned in <i>*buffer</i> and this must be\nfreed by a later call to\n<b>OSSL_FUNC_rand_clear_seed()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_clear_seed()</b>\nfrees a seed <i>buffer</i> of length <i>b_len</i> bytes\nwhich was previously allocated by\n<b>OSSL_FUNC_rand_get_seed()</b>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_verify_zeroization()</b>\nis used to determine if the internal state of the\n<small>DRBG</small> is zero. This capability is mandated by\n<small>NIST</small> as part of the self tests, it is\nunlikely to be useful in other circumstances.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Context\nLocking</b> <br>\nWhen DRBGs are used by multiple threads, there must be\nlocking employed to ensure their proper operation. Because\nlocking introduces an overhead, it is disabled by\ndefault.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_enable_locking()</b>\nallows locking to be turned on for a <small>DRBG</small> and\nall of its parent DRBGs. From this call onwards, the\n<small>DRBG</small> can be used in a thread safe manner.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_lock()</b>\nis used to lock a <small>DRBG.</small> Once locked,\nexclusive access is guaranteed.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_unlock()</b>\nis used to unlock a <small>DRBG.</small></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Rand\nParameters</b> <br>\nSee <b><small>OSSL_PARAM</small></b> (3) for further details\non the parameters structure used by these functions.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_get_params()</b>\ngets details of parameter values associated with the\nprovider algorithm and stores them in <i>params</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_set_ctx_params()</b>\nsets rand parameters associated with the given provider side\nrand context <i>ctx</i> to <i>params</i>. Any parameter\nsettings are additional to any that were previously set.\nPassing <small>NULL</small> for <i>params</i> should return\ntrue.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_get_ctx_params()</b>\ngets details of currently set parameter values associated\nwith the given provider side rand context <i>ctx</i> and\nstores them in <i>params</i>. Passing <small>NULL</small>\nfor <i>params</i> should return true.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_gettable_params()</b>,\n<b>OSSL_FUNC_rand_gettable_ctx_params()</b>, and\n<b>OSSL_FUNC_rand_settable_ctx_params()</b> all return\nconstant <b><small>OSSL_PARAM</small></b> arrays as\ndescriptors of the parameters that\n<b>OSSL_FUNC_rand_get_params()</b>,\n<b>OSSL_FUNC_rand_get_ctx_params()</b>, and\n<b>OSSL_FUNC_rand_set_ctx_params()</b> can handle,\nrespectively. <b>OSSL_FUNC_rand_gettable_ctx_params()</b>\nand <b>OSSL_FUNC_rand_settable_ctx_params()</b> will return\nthe parameters associated with the provider side context\n<i>ctx</i> in its current state if it is not\n<small>NULL.</small> Otherwise, they return the parameters\nassociated with the provider side algorithm\n<i>provctx</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Parameters\ncurrently recognised by built-in rands are as follows. Not\nall parameters are relevant to, or are understood by all\nrands: <br>\n&quot;state&quot; (\n<b><small>OSSL_RAND_PARAM_STATE</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Returns the state of the random\nnumber generator.</p>\n\n<p style=\"margin-left:11%;\">&quot;strength&quot; (\n<b><small>OSSL_RAND_PARAM_STRENGTH</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Returns the bit strength of the\nrandom number generator.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For rands that\nare also deterministic random bit generators (DRBGs), these\nadditional parameters are recognised. Not all parameters are\nrelevant to, or are understood by all <small>DRBG</small>\nrands: <br>\n&quot;reseed_requests&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_REQUESTS</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Reads or set the number of\ngenerate requests before reseeding the associated\n<small>RAND</small> ctx.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;reseed_time_interval&quot;\n( <b><small>OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL</small></b>\n) &lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Reads or set the number of\nelapsed seconds before reseeding the associated\n<small>RAND</small> ctx.</p>\n\n<p style=\"margin-left:11%;\">&quot;max_request&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_REQUESTS</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the maximum number of\nbytes that can be generated in a single call to\nOSSL_FUNC_rand_generate.</p>\n\n<p style=\"margin-left:11%;\">&quot;min_entropylen&quot; (\n<b><small>OSSL_DRBG_PARAM_MIN_ENTROPYLEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_entropylen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_ENTROPYLEN</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the minimum and maximum\nnumber of bytes of random material that can be used to seed\nthe <small>DRBG.</small></p>\n\n<p style=\"margin-left:11%;\">&quot;min_noncelen&quot; (\n<b><small>OSSL_DRBG_PARAM_MIN_NONCELEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_noncelen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_NONCELEN</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the minimum and maximum\nnumber of bytes of nonce that can be used to instantiate the\n<small>DRBG.</small></p>\n\n<p style=\"margin-left:11%;\">&quot;max_perslen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_PERSLEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_adinlen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_ADINLEN</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Specify the minimum and maximum\nnumber of bytes of personalisation string that can be used\nwith the <small>DRBG.</small></p>\n\n<p style=\"margin-left:11%;\">&quot;reseed_counter&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_COUNTER</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Specifies the number of times\nthe <small>DRBG</small> has been seeded or reseeded.</p>\n\n<p style=\"margin-left:11%;\">&quot;digest&quot; (\n<b><small>OSSL_DRBG_PARAM_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;cipher&quot; (\n<b><small>OSSL_DRBG_PARAM_CIPHER</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;mac&quot; ( <b><small>OSSL_DRBG_PARAM_MAC</small></b>\n) &lt; <small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the name of the underlying\ncipher, digest or <small>MAC</small> to be used. It must\nname a suitable algorithm for the <small>DRBG</small>\nthat&rsquo;s being used.</p>\n\n<p style=\"margin-left:11%;\">&quot;properties&quot; (\n<b><small>OSSL_DRBG_PARAM_PROPERTIES</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the properties to be\nqueried when trying to fetch an underlying algorithm. This\nmust be given together with the algorithm naming parameter\nto be considered valid.</p>\n\n<h2>RETURN VALUES\n<a name=\"RETURN VALUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_newctx()</b>\nshould return the newly created provider side rand context,\nor <small>NULL</small> on failure.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_gettable_params()</b>,\n<b>OSSL_FUNC_rand_gettable_ctx_params()</b> and\n<b>OSSL_FUNC_rand_settable_ctx_params()</b> should return a\nconstant <b><small>OSSL_PARAM</small></b> array, or\n<small>NULL</small> if none is offered.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_nonce()</b>\nreturns the size of the generated nonce, or 0 on error.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>OSSL_FUNC_rand_get_seed()</b>\nreturns the size of the generated seed, or 0 on error.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nremaining functions should return 1 for success or 0 on\nerror.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>RAND</small> life-cycle is described in\n<a href=\"https://man.page/7/life_cycle-rand\">life_cycle-rand(7)</a>. Providers should ensure that the\nvarious transitions listed there are supported. At some\npoint the <small>EVP</small> layer will begin enforcing the\nlisted transitions.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a>,\n<b><small>RAND</small></b> (7),\n<b><small>EVP_RAND</small></b> (7),\n<a href=\"https://man.page/7/life_cycle-rand\">life_cycle-rand(7)</a>, <b><small>EVP_RAND</small></b>\n(3)</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The provider\n<small>RAND</small> interface was introduced in OpenSSL\n3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#RETURN VALUES\">RETURN VALUES</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}