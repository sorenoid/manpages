{"name":"openssl-glossary","description":"openssl-glossary\n- An OpenSSL Glossary\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nAlgorithm\n\n<p style=\"margin-left:17%;\">Cryptograpic primitives such as\nthe <small>SHA256</small> digest, or <small>AES</small>\nencryption are referred to in OpenSSL as\n&quot;algorithms&quot;. There can be more than one\nimplementation for any given algorithm available for\nuse.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/crypto\">crypto(7)</a>\n\n<p style=\"margin-left:11%;\"><small>ASN.1, ASN1</small>\n\n<p style=\"margin-left:17%;\"><small>ASN.1</small>\n(&quot;Abstract Syntax Notation One&quot;) is a notation for\ndescribing abstract types and values. It is defined in the\nITU-T documents X.680 to X.683:\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://www.itu.int/rec/T-REC-X.680&gt;,\n&lt;https://www.itu.int/rec/T-REC-X.681&gt;,\n&lt;https://www.itu.int/rec/T-REC-X.682&gt;,\n&lt;https://www.itu.int/rec/T-REC-X.683&gt;\n\n<p style=\"margin-left:11%;\">Base Provider\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains encoders and decoders for OpenSSL keys. All the\nalgorithm implementations in the Base Provider are also\navailable in the Default Provider.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-base\">OSSL_PROVIDER-base(7)</a>\n\n<p style=\"margin-left:11%;\">Decoder\n\n<p style=\"margin-left:17%;\">A decoder is a type of\nalgorithm used for decoding keys and parameters from some\nexternal format such as <small>PEM</small> or\n<small>DER.</small>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/3/OSSL_DECODER_CTX_new_for_pkey\">OSSL_DECODER_CTX_new_for_pkey(3)</a>\n\n<p style=\"margin-left:11%;\">Default Provider\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains the most commmon OpenSSL algorithm implementations.\nIt is loaded by default if no other provider is available.\nAll the algorithm implementations in the Base Provider are\nalso available in the Default Provider.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-default\">OSSL_PROVIDER-default(7)</a>\n\n<p style=\"margin-left:11%;\"><small>DER</small>\n(&quot;Distinguished Encoding Rules&quot;)\n\n<p style=\"margin-left:17%;\"><small>DER</small> is a binary\nencoding of data, structured according to an\n<small>ASN.1</small> specification. This is a common\nencoding used for cryptographic objects such as private and\npublic keys, certificates, CRLs, ...\n\n<p style=\"margin-left:17%; margin-top: 1em\">It is defined\nin ITU-T document X.690:\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://www.itu.int/rec/T-REC-X.690&gt;\n\n<p style=\"margin-left:11%;\">Encoder\n\n<p style=\"margin-left:17%;\">An encoder is a type of\nalgorithm used for encoding keys and parameters to some\nexternal format such as <small>PEM</small> or\n<small>DER.</small>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/3/OSSL_ENCODER_CTX_new_for_pkey\">OSSL_ENCODER_CTX_new_for_pkey(3)</a>\n\n<p style=\"margin-left:11%;\">Explicit Fetching\n\n<p style=\"margin-left:17%;\">Explicit Fetching is a type of\nFetching (see Fetching). Explicit Fetching is where a\nfunction call is made to obtain an algorithm object\nrepresenting an implementation such as\n<a href=\"https://man.page/3/EVP_MD_fetch\">EVP_MD_fetch(3)</a> or <a href=\"https://man.page/3/EVP_CIPHER_fetch\">EVP_CIPHER_fetch(3)</a>\n\n<p style=\"margin-left:11%;\">Fetching\n\n<p style=\"margin-left:17%;\">Fetching is the process of\nlooking through the available algorithm implementations,\napplying selection criteria (via a property query string),\nand finally choosing the implementation that will be\nused.\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also see\nExplicit Fetching and Implict Fetching.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/crypto\">crypto(7)</a>\n\n<p style=\"margin-left:11%;\"><small>FIPS</small>\nProvider\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains OpenSSL algorithm implementations that have been\nvalidated according to the <small>FIPS 140-2</small>\nstandard.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>OSSL_PROVIDER-FIPS</small></b>\n(7)\n\n<p style=\"margin-left:11%;\">Implicit Fetching\n\n<p style=\"margin-left:17%;\">Implicit Fetching is a type of\nFetching (see Fetching). Implicit Fetching is where an\nalgorithm object with no associated implementation is used\nsuch as the return value from <a href=\"https://man.page/3/EVP_sha256\">EVP_sha256(3)</a> or\n<a href=\"https://man.page/3/EVP_aes_128_cbc\">EVP_aes_128_cbc(3)</a>. With implicit fetching an\nimplementation is fetched automatically using default\nselection criteria the first time the algorithm is used.\n\n<p style=\"margin-left:11%;\">Legacy Provider\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains algorithm implementations that are considered\ninsecure or are no longer in common use.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-legacy\">OSSL_PROVIDER-legacy(7)</a>\n\n<p style=\"margin-left:11%;\">Library Context\n\n<p style=\"margin-left:17%;\">A Library Context in OpenSSL is\nrepresented by the type <b><small>OSSL_LIB_CTX</small></b> .\nIt can be thought of as a scope within which configuration\noptions apply. If an application does not explicitly create\na library context then the &quot;default&quot; one is used.\nMany OpenSSL functions can take a library context as an\nargument. A <small>NULL</small> value can always be passed\nto indicate the default library context.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>OSSL_LIB_CTX</small></b>\n(3)\n\n<p style=\"margin-left:11%;\"><small>MSBLOB</small>\n\n<p style=\"margin-left:17%;\"><small>MSBLOB</small> is a\nMicrosoft specific binary format for <small>RSA</small> and\n<small>DSA</small> keys, both private and public. This form\nis never passphrase protected.\n\n<p style=\"margin-left:11%;\">Null Provider\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains no algorithm implementations. This can be useful to\nprevent the default provider from being automatically loaded\nin a library context.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-null\">OSSL_PROVIDER-null(7)</a>\n\n<p style=\"margin-left:11%;\">Operation\n\n<p style=\"margin-left:17%;\">An operation is a group of\nOpenSSL functions with a common purpose such as encryption,\nor digesting.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/crypto\">crypto(7)</a>\n\n<p style=\"margin-left:11%;\"><small>PEM</small>\n(&quot;Privacy Enhanced Message&quot;)\n\n<p style=\"margin-left:17%;\"><small>PEM</small> is a format\nused for encoding of binary content into a mail and\n<small>ASCII</small> friendly form. The content is a series\nof base64-encoded lines, surrounded by begin/end markers\neach on their own line. For example:\n\n<p style=\"margin-left:17%; margin-top: 1em\">-----BEGIN\nPRIVATE KEY----- <br>\nMIICdg.... <br>\n... bhTQ== <br>\n-----END PRIVATE KEY-----\n\n<p style=\"margin-left:17%; margin-top: 1em\">Optional header\nline(s) may appear after the begin line, and their existence\ndepends on the type of object being written or read.\n\n<p style=\"margin-left:17%; margin-top: 1em\">For all OpenSSL\nuses, the binary content is expected to be a\n<small>DER</small> encoded structure.\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is defined\nin <small>IETF RFC 1421:</small>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://tools.ietf.org/html/rfc1421&gt;\n\n<p style=\"margin-left:11%;\">PKCS#8\n\n<p style=\"margin-left:17%;\">PKCS#8 is a specification of\n<small>ASN.1</small> structures that OpenSSL uses for\nstoring or transmitting any private key in a key type\nagnostic manner. There are two structures worth noting for\nOpenSSL use, one that contains the key data in unencrypted\nform (known as &quot;PrivateKeyInfo&quot;) and an encrypted\nwrapper structure (known as\n&quot;EncryptedPrivateKeyInfo&quot;).\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is\nspecified in <small>RFC 5208:</small>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://tools.ietf.org/html/rfc5208&gt;\n\n<p style=\"margin-left:11%;\">Property\n\n<p style=\"margin-left:17%;\">A property is a way of\nclassifying and selecting algorithm implementations. A\nproperty is a key/value pair expressed as a string. For\nexample all algorithm implementations in the default\nprovider have the property &quot;provider=default&quot;. An\nalgorithm implementation can have multiple properties\ndefined against it.\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also see\nProperty Query String.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/property\">property(7)</a>\n\n<p style=\"margin-left:11%;\">Property Query String\n\n<p style=\"margin-left:17%;\">A property query string is a\nstring containing a sequence of properties that can be used\nto select an algorithm implementation. For example the query\nstring &quot;provider=example,foo=bar&quot; will select\nalgorithms from the &quot;example&quot; provider that have a\n&quot;foo&quot; property defined for them with a value of\n&quot;bar&quot;.\n\n<p style=\"margin-left:17%; margin-top: 1em\">Property Query\nStrings are used during fetching. See Fetching.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/property\">property(7)</a>\n\n<p style=\"margin-left:11%;\">Provider\n\n<p style=\"margin-left:17%;\">A provider in OpenSSL is a\ncomponent that groups together algorithm implementations.\nProviders can come from OpenSSL itself or from third\nparties.\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><small>PVK</small></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><small>PVK</small> is a Microsoft specific binary format\nfor <small>RSA</small> and <small>DSA</small> private keys.\nThis form may be passphrase protected.</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">SubjectPublicKeyInfo\n\n<p style=\"margin-left:17%;\">SubjectPublicKeyInfo is an\n<small>ASN.1</small> structure that OpenSSL uses for storing\nand transmitting any public key in a key type agnostic\nmanner.\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is\nspecified as part of the specification for certificates,\n<small>RFC 5280:</small>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://tools.ietf.org/html/rfc5280&gt;\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\nThis glossary\nwas added in OpenSSL 3.0.\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\nCopyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.\n\nLicensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.","body":"\n\n<h1 align=\"center\">OPENSSL-GLOSSARY</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">openssl-glossary\n- An OpenSSL Glossary</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Algorithm</p>\n\n<p style=\"margin-left:17%;\">Cryptograpic primitives such as\nthe <small>SHA256</small> digest, or <small>AES</small>\nencryption are referred to in OpenSSL as\n&quot;algorithms&quot;. There can be more than one\nimplementation for any given algorithm available for\nuse.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/crypto\">crypto(7)</a></p>\n\n<p style=\"margin-left:11%;\"><small>ASN.1, ASN1</small></p>\n\n<p style=\"margin-left:17%;\"><small>ASN.1</small>\n(&quot;Abstract Syntax Notation One&quot;) is a notation for\ndescribing abstract types and values. It is defined in the\nITU-T documents X.680 to X.683:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://www.itu.int/rec/T-REC-X.680&gt;,\n&lt;https://www.itu.int/rec/T-REC-X.681&gt;,\n&lt;https://www.itu.int/rec/T-REC-X.682&gt;,\n&lt;https://www.itu.int/rec/T-REC-X.683&gt;</p>\n\n<p style=\"margin-left:11%;\">Base Provider</p>\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains encoders and decoders for OpenSSL keys. All the\nalgorithm implementations in the Base Provider are also\navailable in the Default Provider.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-base\">OSSL_PROVIDER-base(7)</a></p>\n\n<p style=\"margin-left:11%;\">Decoder</p>\n\n<p style=\"margin-left:17%;\">A decoder is a type of\nalgorithm used for decoding keys and parameters from some\nexternal format such as <small>PEM</small> or\n<small>DER.</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/3/OSSL_DECODER_CTX_new_for_pkey\">OSSL_DECODER_CTX_new_for_pkey(3)</a></p>\n\n<p style=\"margin-left:11%;\">Default Provider</p>\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains the most commmon OpenSSL algorithm implementations.\nIt is loaded by default if no other provider is available.\nAll the algorithm implementations in the Base Provider are\nalso available in the Default Provider.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-default\">OSSL_PROVIDER-default(7)</a></p>\n\n<p style=\"margin-left:11%;\"><small>DER</small>\n(&quot;Distinguished Encoding Rules&quot;)</p>\n\n<p style=\"margin-left:17%;\"><small>DER</small> is a binary\nencoding of data, structured according to an\n<small>ASN.1</small> specification. This is a common\nencoding used for cryptographic objects such as private and\npublic keys, certificates, CRLs, ...</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It is defined\nin ITU-T document X.690:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://www.itu.int/rec/T-REC-X.690&gt;</p>\n\n<p style=\"margin-left:11%;\">Encoder</p>\n\n<p style=\"margin-left:17%;\">An encoder is a type of\nalgorithm used for encoding keys and parameters to some\nexternal format such as <small>PEM</small> or\n<small>DER.</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/3/OSSL_ENCODER_CTX_new_for_pkey\">OSSL_ENCODER_CTX_new_for_pkey(3)</a></p>\n\n<p style=\"margin-left:11%;\">Explicit Fetching</p>\n\n<p style=\"margin-left:17%;\">Explicit Fetching is a type of\nFetching (see Fetching). Explicit Fetching is where a\nfunction call is made to obtain an algorithm object\nrepresenting an implementation such as\n<a href=\"https://man.page/3/EVP_MD_fetch\">EVP_MD_fetch(3)</a> or <a href=\"https://man.page/3/EVP_CIPHER_fetch\">EVP_CIPHER_fetch(3)</a></p>\n\n<p style=\"margin-left:11%;\">Fetching</p>\n\n<p style=\"margin-left:17%;\">Fetching is the process of\nlooking through the available algorithm implementations,\napplying selection criteria (via a property query string),\nand finally choosing the implementation that will be\nused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also see\nExplicit Fetching and Implict Fetching.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/crypto\">crypto(7)</a></p>\n\n<p style=\"margin-left:11%;\"><small>FIPS</small>\nProvider</p>\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains OpenSSL algorithm implementations that have been\nvalidated according to the <small>FIPS 140-2</small>\nstandard.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>OSSL_PROVIDER-FIPS</small></b>\n(7)</p>\n\n<p style=\"margin-left:11%;\">Implicit Fetching</p>\n\n<p style=\"margin-left:17%;\">Implicit Fetching is a type of\nFetching (see Fetching). Implicit Fetching is where an\nalgorithm object with no associated implementation is used\nsuch as the return value from <a href=\"https://man.page/3/EVP_sha256\">EVP_sha256(3)</a> or\n<a href=\"https://man.page/3/EVP_aes_128_cbc\">EVP_aes_128_cbc(3)</a>. With implicit fetching an\nimplementation is fetched automatically using default\nselection criteria the first time the algorithm is used.</p>\n\n<p style=\"margin-left:11%;\">Legacy Provider</p>\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains algorithm implementations that are considered\ninsecure or are no longer in common use.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-legacy\">OSSL_PROVIDER-legacy(7)</a></p>\n\n<p style=\"margin-left:11%;\">Library Context</p>\n\n<p style=\"margin-left:17%;\">A Library Context in OpenSSL is\nrepresented by the type <b><small>OSSL_LIB_CTX</small></b> .\nIt can be thought of as a scope within which configuration\noptions apply. If an application does not explicitly create\na library context then the &quot;default&quot; one is used.\nMany OpenSSL functions can take a library context as an\nargument. A <small>NULL</small> value can always be passed\nto indicate the default library context.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><small>OSSL_LIB_CTX</small></b>\n(3)</p>\n\n<p style=\"margin-left:11%;\"><small>MSBLOB</small></p>\n\n<p style=\"margin-left:17%;\"><small>MSBLOB</small> is a\nMicrosoft specific binary format for <small>RSA</small> and\n<small>DSA</small> keys, both private and public. This form\nis never passphrase protected.</p>\n\n<p style=\"margin-left:11%;\">Null Provider</p>\n\n<p style=\"margin-left:17%;\">An OpenSSL Provider that\ncontains no algorithm implementations. This can be useful to\nprevent the default provider from being automatically loaded\nin a library context.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/OSSL_PROVIDER-null\">OSSL_PROVIDER-null(7)</a></p>\n\n<p style=\"margin-left:11%;\">Operation</p>\n\n<p style=\"margin-left:17%;\">An operation is a group of\nOpenSSL functions with a common purpose such as encryption,\nor digesting.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/crypto\">crypto(7)</a></p>\n\n<p style=\"margin-left:11%;\"><small>PEM</small>\n(&quot;Privacy Enhanced Message&quot;)</p>\n\n<p style=\"margin-left:17%;\"><small>PEM</small> is a format\nused for encoding of binary content into a mail and\n<small>ASCII</small> friendly form. The content is a series\nof base64-encoded lines, surrounded by begin/end markers\neach on their own line. For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">-----BEGIN\nPRIVATE KEY----- <br>\nMIICdg.... <br>\n... bhTQ== <br>\n-----END PRIVATE KEY-----</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Optional header\nline(s) may appear after the begin line, and their existence\ndepends on the type of object being written or read.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">For all OpenSSL\nuses, the binary content is expected to be a\n<small>DER</small> encoded structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is defined\nin <small>IETF RFC 1421:</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://tools.ietf.org/html/rfc1421&gt;</p>\n\n<p style=\"margin-left:11%;\">PKCS#8</p>\n\n<p style=\"margin-left:17%;\">PKCS#8 is a specification of\n<small>ASN.1</small> structures that OpenSSL uses for\nstoring or transmitting any private key in a key type\nagnostic manner. There are two structures worth noting for\nOpenSSL use, one that contains the key data in unencrypted\nform (known as &quot;PrivateKeyInfo&quot;) and an encrypted\nwrapper structure (known as\n&quot;EncryptedPrivateKeyInfo&quot;).</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is\nspecified in <small>RFC 5208:</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://tools.ietf.org/html/rfc5208&gt;</p>\n\n<p style=\"margin-left:11%;\">Property</p>\n\n<p style=\"margin-left:17%;\">A property is a way of\nclassifying and selecting algorithm implementations. A\nproperty is a key/value pair expressed as a string. For\nexample all algorithm implementations in the default\nprovider have the property &quot;provider=default&quot;. An\nalgorithm implementation can have multiple properties\ndefined against it.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Also see\nProperty Query String.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/property\">property(7)</a></p>\n\n<p style=\"margin-left:11%;\">Property Query String</p>\n\n<p style=\"margin-left:17%;\">A property query string is a\nstring containing a sequence of properties that can be used\nto select an algorithm implementation. For example the query\nstring &quot;provider=example,foo=bar&quot; will select\nalgorithms from the &quot;example&quot; provider that have a\n&quot;foo&quot; property defined for them with a value of\n&quot;bar&quot;.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Property Query\nStrings are used during fetching. See Fetching.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/property\">property(7)</a></p>\n\n<p style=\"margin-left:11%;\">Provider</p>\n\n<p style=\"margin-left:17%;\">A provider in OpenSSL is a\ncomponent that groups together algorithm implementations.\nProviders can come from OpenSSL itself or from third\nparties.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><a href=\"https://man.page/7/provider\">provider(7)</a></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><small>PVK</small></p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p><small>PVK</small> is a Microsoft specific binary format\nfor <small>RSA</small> and <small>DSA</small> private keys.\nThis form may be passphrase protected.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">SubjectPublicKeyInfo</p>\n\n<p style=\"margin-left:17%;\">SubjectPublicKeyInfo is an\n<small>ASN.1</small> structure that OpenSSL uses for storing\nand transmitting any public key in a key type agnostic\nmanner.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This is\nspecified as part of the specification for certificates,\n<small>RFC 5280:</small></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;https://tools.ietf.org/html/rfc5280&gt;</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This glossary\nwas added in OpenSSL 3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}