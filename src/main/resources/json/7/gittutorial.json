{"name":"gittutorial","description":"gittutorial - A\ntutorial introduction to Git","body":"\n\n<h1 align=\"center\">GITTUTORIAL</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gittutorial - A\ntutorial introduction to Git</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git *</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This tutorial\nexplains how to import a new project into Git, make changes\nto it, and share changes with other developers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If you are\ninstead primarily interested in using Git to fetch a\nproject, for example, to test the latest version, you may\nprefer to start with the first two chapters of\n<b><font color=\"#0000FF\">The Git User&rsquo;s\nManual</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">First,\nnote that you can get documentation for a command such as\n<b>git log --graph</b> with:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\nman git-log</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">or:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit help log</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\nthe latter, you can use the manual viewer of your choice;\nsee <a href=\"https://man.page/1/git-help\">git-help(1)</a> for more information.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">It\nis a good idea to introduce yourself to Git with your name\nand public email address before doing any operation. The\neasiest way to do so is:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit config --global user.name &quot;Your Name Comes\nHere&quot; <br>\n$ git config --global user.email\nyou@yourdomain.example.com</font></p>\n\n<h2>IMPORTING A NEW PROJECT\n<a name=\"IMPORTING A NEW PROJECT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Assume\nyou have a tarball project.tar.gz with your initial work.\nYou can place it under Git revision control as\nfollows.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ntar xzf project.tar.gz <br>\n$ cd project <br>\n$ git init</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Git\nwill reply</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Initialized\nempty Git repository in .git/</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You&rsquo;ve\nnow initialized the working directory&mdash;you may notice a\nnew directory created, named &quot;.git&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Next,\ntell Git to take a snapshot of the contents of all files\nunder the current directory (note the <i>.</i>), with <i>git\nadd</i>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit add .</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nsnapshot is now stored in a temporary staging area which Git\ncalls the &quot;index&quot;. You can permanently store the\ncontents of the index in the repository with <i>git\ncommit</i>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit commit</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nwill prompt you for a commit message. You&rsquo;ve now\nstored the first version of your project in Git.</font></p>\n\n<h2>MAKING CHANGES\n<a name=\"MAKING CHANGES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Modify\nsome files, then add their updated contents to the\nindex:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit add file1 file2 file3</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\nare now ready to commit. You can see what is about to be\ncommitted using <i>git diff</i> with the --cached\noption:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit diff --cached</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">(Without\n--cached, <i>git diff</i> will show you any changes that\nyou&rsquo;ve made but not yet added to the index.) You can\nalso get a brief summary of the situation with <i>git\nstatus</i>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit status <br>\nOn branch master <br>\nChanges to be committed: <br>\nYour branch is up to date with 'origin/master'. <br>\n(use &quot;git restore --staged &lt;file&gt;...&quot; to\nunstage)</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">modified:\nfile1 <br>\nmodified: file2 <br>\nmodified: file3</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou need to make any further adjustments, do so now, and\nthen add any newly modified content to the index. Finally,\ncommit your changes with:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit commit</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nwill again prompt you for a message describing the change,\nand then record a new version of the project.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Alternatively,\ninstead of running <i>git add</i> beforehand, you can\nuse</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit commit -a</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">which\nwill automatically notice any modified (but not new) files,\nadd them to the index, and commit, all in one\nstep.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nnote on commit messages: Though not required, it&rsquo;s a\ngood idea to begin the commit message with a single short\n(less than 50 character) line summarizing the change,\nfollowed by a blank line and then a more thorough\ndescription. The text up to the first blank line in a commit\nmessage is treated as the commit title, and that title is\nused throughout Git. For example, <a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a>\nturns a commit into email, and it uses the title on the\nSubject line and the rest of the commit in the\nbody.</font></p>\n\n<h2>GIT TRACKS CONTENT NOT FILES\n<a name=\"GIT TRACKS CONTENT NOT FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Many\nrevision control systems provide an <b>add</b> command that\ntells the system to start tracking changes to a new file.\nGit&rsquo;s <b>add</b> command does something simpler and\nmore powerful: <i>git add</i> is used both for new and newly\nmodified files, and in both cases it takes a snapshot of the\ngiven files and stages that content in the index, ready for\ninclusion in the next commit.</font></p>\n\n<h2>VIEWING PROJECT HISTORY\n<a name=\"VIEWING PROJECT HISTORY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">At\nany point you can view the history of your changes\nusing</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou also want to see complete diffs at each step,\nuse</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log -p</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Often\nthe overview of the change is useful to get a feel of each\nstep</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log --stat --summary</font></p>\n\n<h2>MANAGING BRANCHES\n<a name=\"MANAGING BRANCHES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">A\nsingle Git repository can maintain multiple branches of\ndevelopment. To create a new branch named\n&quot;experimental&quot;, use</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit branch experimental</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou now run</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit branch</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">you&rsquo;ll\nget a list of all existing branches:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">experimental\n<br>\n* master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&quot;experimental&quot; branch is the one you just created,\nand the &quot;master&quot; branch is a default branch that\nwas created for you automatically. The asterisk marks the\nbranch you are currently on; type</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit switch experimental</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">to\nswitch to the experimental branch. Now edit a file, commit\nthe change, and switch back to the master branch:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">(edit\nfile) <br>\n$ git commit -a <br>\n$ git switch master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Check\nthat the change you made is no longer visible, since it was\nmade on the experimental branch and you&rsquo;re back on the\nmaster branch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan make a different change on the master branch:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">(edit\nfile) <br>\n$ git commit -a</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">at\nthis point the two branches have diverged, with different\nchanges made in each. To merge the changes made in\nexperimental into master, run</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit merge experimental</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nthe changes don&rsquo;t conflict, you&rsquo;re done. If\nthere are conflicts, markers will be left in the problematic\nfiles showing the conflict;</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit diff</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\nshow this. Once you&rsquo;ve edited the files to resolve the\nconflicts,</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit commit -a</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\ncommit the result of the merge. Finally,</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngitk</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\nshow a nice graphical representation of the resulting\nhistory.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">At\nthis point you could delete the experimental branch\nwith</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit branch -d experimental</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\ncommand ensures that the changes in the experimental branch\nare already in the current branch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou develop on a branch crazy-idea, then regret it, you can\nalways delete the branch with</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit branch -D crazy-idea</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Branches\nare cheap and easy, so this is a good way to try something\nout.</font></p>\n\n<h2>USING GIT FOR COLLABORATION\n<a name=\"USING GIT FOR COLLABORATION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Suppose\nthat Alice has started a new project with a Git repository\nin /home/alice/project, and that Bob, who has a home\ndirectory on the same machine, wants to\ncontribute.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Bob\nbegins with:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">bob$\ngit clone /home/alice/project myrepo</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\ncreates a new directory &quot;myrepo&quot; containing a\nclone of Alice&rsquo;s repository. The clone is on an equal\nfooting with the original project, possessing its own copy\nof the original project&rsquo;s history.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Bob\nthen makes some changes and commits them:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">(edit\nfiles) <br>\nbob$ git commit -a <br>\n(repeat as necessary)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nhe&rsquo;s ready, he tells Alice to pull changes from the\nrepository at /home/bob/myrepo. She does this\nwith:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ncd /home/alice/project <br>\nalice$ git pull /home/bob/myrepo master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nmerges the changes from Bob&rsquo;s &quot;master&quot;\nbranch into Alice&rsquo;s current branch. If Alice has made\nher own changes in the meantime, then she may need to\nmanually fix any conflicts.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n&quot;pull&quot; command thus performs two operations: it\nfetches changes from a remote branch, then merges them into\nthe current branch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat in general, Alice would want her local changes\ncommitted before initiating this &quot;pull&quot;. If\nBob&rsquo;s work conflicts with what Alice did since their\nhistories forked, Alice will use her working tree and the\nindex to resolve conflicts, and existing local changes will\ninterfere with the conflict resolution process (Git will\nstill perform the fetch but will refuse to merge &mdash;\nAlice will have to get rid of her local changes in some way\nand pull again when this happens).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Alice\ncan peek at what Bob did without merging first, using the\n&quot;fetch&quot; command; this allows Alice to inspect what\nBob did, using a special symbol &quot;FETCH_HEAD&quot;, in\norder to determine if he has anything worth pulling, like\nthis:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ngit fetch /home/bob/myrepo master <br>\nalice$ git log -p HEAD..FETCH_HEAD</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\noperation is safe even if Alice has uncommitted local\nchanges. The range notation &quot;HEAD..FETCH_HEAD&quot;\nmeans &quot;show everything that is reachable from the\nFETCH_HEAD but exclude anything that is reachable from\nHEAD&quot;. Alice already knows everything that leads to her\ncurrent state (HEAD), and reviews what Bob has in his state\n(FETCH_HEAD) that she has not seen with this\ncommand.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nAlice wants to visualize what Bob did since their histories\nforked she can issue the following command:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngitk HEAD..FETCH_HEAD</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nuses the same two-dot range notation we saw earlier with\n<i>git log</i>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Alice\nmay want to view what both of them did since they forked.\nShe can use three-dot form instead of the two-dot\nform:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngitk HEAD...FETCH_HEAD</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\nmeans &quot;show everything that is reachable from either\none, but exclude anything that is reachable from both of\nthem&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Please\nnote that these range notation can be used with both gitk\nand &quot;git log&quot;.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\ninspecting what Bob did, if there is nothing urgent, Alice\nmay decide to continue working without pulling from Bob. If\nBob&rsquo;s history does have something Alice would\nimmediately need, Alice may choose to stash her\nwork-in-progress first, do a &quot;pull&quot;, and then\nfinally unstash her work-in-progress on top of the resulting\nhistory.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">When\nyou are working in a small closely knit group, it is not\nunusual to interact with the same repository over and over\nagain. By defining <i>remote</i> repository shorthand, you\ncan make it easier:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ngit remote add bob /home/bob/myrepo</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">With\nthis, Alice can perform the first part of the\n&quot;pull&quot; operation alone using the <i>git fetch</i>\ncommand without merging them with her own branch,\nusing:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ngit fetch bob</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Unlike\nthe longhand form, when Alice fetches from Bob using a\nremote repository shorthand set up with <i>git remote</i>,\nwhat was fetched is stored in a remote-tracking branch, in\nthis case <b>bob/master</b>. So after this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ngit log -p master..bob/master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">shows\na list of all the changes that Bob made since he branched\nfrom Alice&rsquo;s master branch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">After\nexamining those changes, Alice could merge the changes into\nher master branch:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ngit merge bob/master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\n<b>merge</b> can also be done by <i>pulling from her own\nremote-tracking branch</i>, like this:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">alice$\ngit pull . remotes/bob/master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat git pull always merges into the current branch,\nregardless of what else is given on the command\nline.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Later,\nBob can update his repo with Alice&rsquo;s latest changes\nusing</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">bob$\ngit pull</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat he doesn&rsquo;t need to give the path to Alice&rsquo;s\nrepository; when Bob cloned Alice&rsquo;s repository, Git\nstored the location of her repository in the repository\nconfiguration, and that location is used for\npulls:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">bob$\ngit config --get remote.origin.url <br>\n/home/alice/project</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">(The\ncomplete configuration created by <i>git clone</i> is\nvisible using <b>git config -l</b>, and the\n<a href=\"https://man.page/1/git-config\">git-config(1)</a> man page explains the meaning of each\noption.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Git\nalso keeps a pristine copy of Alice&rsquo;s master branch\nunder the name &quot;origin/master&quot;:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">bob$\ngit branch -r <br>\norigin/master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nBob later decides to work from a different host, he can\nstill perform clones and pulls using the ssh\nprotocol:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">bob$\ngit clone alice.org:/home/alice/project myrepo</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Alternatively,\nGit has a native protocol, or can use http; see\n<a href=\"https://man.page/1/git-pull\">git-pull(1)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Git\ncan also be used in a CVS-like mode, with a central\nrepository that various users push changes to; see\n<a href=\"https://man.page/1/git-push\">git-push(1)</a> and\n<a href=\"https://man.page/7/gitcvs-migration\">gitcvs-migration(7)</a>.</font></p>\n\n<h2>EXPLORING HISTORY\n<a name=\"EXPLORING HISTORY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Git\nhistory is represented as a series of interrelated commits.\nWe have already seen that the <i>git log</i> command can\nlist those commits. Note that first line of each git log\nentry also gives a name for the commit:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log <br>\ncommit c82a22c39cbc32576f64f5c6b3f24b99ea8149c7 <br>\nAuthor: Junio C Hamano &lt;junkio@cox.net&gt; <br>\nDate: Tue May 16 17:18:22 2006 -0700</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">merge-base:\nClarify the comments on post processing.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">We\ncan give this name to <i>git show</i> to see the details\nabout this commit.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit show c82a22c39cbc32576f64f5c6b3f24b99ea8149c7</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">But\nthere are other ways to refer to commits. You can use any\ninitial part of the name that is long enough to uniquely\nidentify the commit:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit show c82a22c39c # the first few characters of the name\nare <br>\n# usually enough <br>\n$ git show HEAD # the tip of the current branch <br>\n$ git show experimental # the tip of the\n&quot;experimental&quot; branch</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Every\ncommit usually has one &quot;parent&quot; commit which\npoints to the previous state of the project:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit show HEAD^ # to see the parent of HEAD <br>\n$ git show HEAD^^ # to see the grandparent of HEAD <br>\n$ git show HEAD~4 # to see the great-great grandparent of\nHEAD</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat merge commits may have more than one parent:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit show HEAD^1 # show the first parent of HEAD (same as\nHEAD^) <br>\n$ git show HEAD^2 # show the second parent of\nHEAD</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan also give commits names of your own; after\nrunning</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit tag v2.5 1b2e1d63ff</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">you\ncan refer to 1b2e1d63ff by the name &quot;v2.5&quot;. If you\nintend to share this name with other people (for example, to\nidentify a release version), you should create a\n&quot;tag&quot; object, and perhaps sign it; see\n<a href=\"https://man.page/1/git-tag\">git-tag(1)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Any\nGit command that needs to know a commit can take any of\nthese names. For example:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit diff v2.5 HEAD # compare the current HEAD to v2.5 <br>\n$ git branch stable v2.5 # start a new branch named\n&quot;stable&quot; based <br>\n# at v2.5 <br>\n$ git reset --hard HEAD^ # reset your current branch and\nworking <br>\n# directory to its state at HEAD^</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Be\ncareful with that last command: in addition to losing any\nchanges in the working directory, it will also remove all\nlater commits from this branch. If this branch is the only\nbranch containing those commits, they will be lost. Also,\ndon&rsquo;t use <i>git reset</i> on a publicly-visible\nbranch that other developers pull from, as it will force\nneedless merges on other developers to clean up the history.\nIf you need to undo changes that you have pushed, use <i>git\nrevert</i> instead.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>git grep</i> command can search for strings in any\nversion of your project, so</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit grep &quot;hello&quot; v2.5</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">searches\nfor all occurrences of &quot;hello&quot; in v2.5.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou leave out the commit name, <i>git grep</i> will search\nany of the files it manages in your current directory.\nSo</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit grep &quot;hello&quot;</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">is\na quick way to search just the files that are tracked by\nGit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Many\nGit commands also take sets of commits, which can be\nspecified in a number of ways. Here are some examples with\n<i>git log</i>:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log v2.5..v2.6 # commits between v2.5 and v2.6 <br>\n$ git log v2.5.. # commits since v2.5 <br>\n$ git log --since=&quot;2 weeks ago&quot; # commits from the\nlast 2 weeks <br>\n$ git log v2.5.. Makefile # commits since v2.5 which modify\n<br>\n# Makefile</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan also give <i>git log</i> a &quot;range&quot; of commits\nwhere the first is not necessarily an ancestor of the\nsecond; for example, if the tips of the branches\n&quot;stable&quot; and &quot;master&quot; diverged from a\ncommon commit some time ago, then</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log stable..master</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\nlist commits made in the master branch but not in the stable\nbranch, while</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit log master..stable</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">will\nshow the list of commits made on the stable branch but not\nthe master branch.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<i>git log</i> command has a weakness: it must present\ncommits in a list. When the history has lines of development\nthat diverged and then merged back together, the order in\nwhich <i>git log</i> presents those commits is\nmeaningless.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Most\nprojects with multiple contributors (such as the Linux\nkernel, or Git itself) have frequent merges, and <i>gitk</i>\ndoes a better job of visualizing their history. For\nexample,</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngitk --since=&quot;2 weeks ago&quot; drivers/</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">allows\nyou to browse any commits from the last 2 weeks of commits\nthat modified files under the &quot;drivers&quot; directory.\n(Note: you can adjust gitk&rsquo;s fonts by holding down the\ncontrol key while pressing &quot;-&quot; or\n&quot;+&quot;.)</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Finally,\nmost commands that take filenames will optionally allow you\nto precede any filename by a commit, to specify a particular\nversion of the file:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit diff v2.5:Makefile HEAD:Makefile.in</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">You\ncan also use <i>git show</i> to see any such\nfile:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">$\ngit show v2.5:Makefile</font></p>\n\n<h2>NEXT STEPS\n<a name=\"NEXT STEPS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">This\ntutorial should be enough to perform basic distributed\nrevision control for your projects. However, to fully\nunderstand the depth and power of Git you need to understand\ntwo simple ideas on which it is based:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe object database is the rather elegant system used to\nstore the history of your project&mdash;files, directories,\nand commits.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe index file is a cache of the state of a directory tree,\nused to create commits, check out working directories, and\nhold the various trees involved in a merge.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\ntwo of this tutorial explains the object database, the index\nfile, and a few other odds and ends that you&rsquo;ll need\nto make the most of Git. You can find it at\n<a href=\"https://man.page/7/gittutorial-2\">gittutorial-2(7)</a>.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nyou don&rsquo;t want to continue with that right away, a few\nother digressions that may be interesting at this point\nare:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a>, <a href=\"https://man.page/1/git-am\">git-am(1)</a>: These convert\nseries of git commits into emailed patches, and vice versa,\nuseful for projects such as the Linux kernel which rely\nheavily on emailed patches.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<a href=\"https://man.page/1/git-bisect\">git-bisect(1)</a>: When there is a regression in your\nproject, one way to track down the bug is by searching\nthrough the history to find the exact commit that&rsquo;s to\nblame. Git bisect can help you perform a binary search for\nthat commit. It is smart enough to perform a\nclose-to-optimal search even in the case of complex\nnon-linear history with lots of merged branches.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<a href=\"https://man.page/7/gitworkflows\">gitworkflows(7)</a>: Gives an overview of recommended\nworkflows.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<a href=\"https://man.page/7/giteveryday\">giteveryday(7)</a>: Everyday Git with 20 Commands Or\nSo.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\n<a href=\"https://man.page/7/gitcvs-migration\">gitcvs-migration(7)</a>: Git for CVS users.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/7/gittutorial-2\">gittutorial-2(7)</a>,\n<a href=\"https://man.page/7/gitcvs-migration\">gitcvs-migration(7)</a>, <a href=\"https://man.page/7/gitcore-tutorial\">gitcore-tutorial(7)</a>,\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>, <a href=\"https://man.page/1/git-help\">git-help(1)</a>,\n<a href=\"https://man.page/7/gitworkflows\">gitworkflows(7)</a>, <a href=\"https://man.page/7/giteveryday\">giteveryday(7)</a>,</font>\n<b><font color=\"#0000FF\">The Git User&rsquo;s\nManual</font></b>\n<small><font color=\"#000000\">[1]</font></small></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">The Git\nUser&rsquo;s Manual</font></p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/user-manual.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#IMPORTING A NEW PROJECT\">IMPORTING A NEW PROJECT</a>","<a href=\"#MAKING CHANGES\">MAKING CHANGES</a>","<a href=\"#GIT TRACKS CONTENT NOT FILES\">GIT TRACKS CONTENT NOT FILES</a>","<a href=\"#VIEWING PROJECT HISTORY\">VIEWING PROJECT HISTORY</a>","<a href=\"#MANAGING BRANCHES\">MANAGING BRANCHES</a>","<a href=\"#USING GIT FOR COLLABORATION\">USING GIT FOR COLLABORATION</a>","<a href=\"#EXPLORING HISTORY\">EXPLORING HISTORY</a>","<a href=\"#NEXT STEPS\">NEXT STEPS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}