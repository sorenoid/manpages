{"name":"time_namespaces","description":"time_namespaces\n- overview of Linux time namespaces\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nTime namespaces\nvirtualize the values of two system clocks:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>CLOCK_MONOTONIC</b> (and likewise\n<b>CLOCK_MONOTONIC_COARSE</b> and\n<b>CLOCK_MONOTONIC_RAW</b>), a nonsettable clock that\nrepresents monotonic time since&mdash;as described by\nPOSIX&mdash;&quot;some unspecified point in the\npast&quot;. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>CLOCK_BOOTTIME</b> (and likewise\n<b>CLOCK_BOOTTIME_ALARM</b>), a nonsettable clock that is\nidentical to <b>CLOCK_MONOTONIC</b>, except that it also\nincludes any time that the system is suspended.</td></tr>\n</table>\n\nThus, the\nprocesses in a time namespace share per-namespace values for\nthese clocks. This affects various APIs that measure against\nthese clocks, including: <a href=\"https://man.page/2/clock_gettime\">clock_gettime(2)</a>,\n<a href=\"https://man.page/2/clock_nanosleep\">clock_nanosleep(2)</a>, <a href=\"https://man.page/2/nanosleep\">nanosleep(2)</a>,\n<a href=\"https://man.page/2/timer_settime\">timer_settime(2)</a>, <a href=\"https://man.page/2/timerfd_settime\">timerfd_settime(2)</a>, and\n<i>/proc/uptime</i>.\n\nCurrently, the\nonly way to create a time namespace is by calling\n<a href=\"https://man.page/2/unshare\">unshare(2)</a> with the <b>CLONE_NEWTIME</b> flag. This\ncall creates a new time namespace but does <i>not</i> place\nthe calling process in the new namespace. Instead, the\ncalling process&rsquo;s subsequently created children are\nplaced in the new namespace. This allows clock offsets (see\nbelow) for the new namespace to be set before the first\nprocess is placed in the namespace. The\n<i>/proc/[pid]/ns/time_for_children</i> symbolic link shows\nthe time namespace in which the children of a process will\nbe created. (A process can use a file descriptor opened on\nthis symbolic link in a call to <a href=\"https://man.page/2/setns\">setns(2)</a> in order to\nmove into the namespace.)\n\n\n<b>/proc/PID/timens_offsets</b>\n<br>\nAssociated with each time namespace are offsets, expressed\nwith respect to the initial time namespace, that define the\nvalues of the monotonic and boot-time clocks in that\nnamespace. These offsets are exposed via the file\n<i>/proc/PID/timens_offsets</i>. Within this file, the\noffsets are expressed as lines consisting of three\nspace-delimited fields:\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;clock-id&gt;\n&lt;offset-secs&gt; &lt;offset-nanosecs&gt;\n\nThe\n<i>clock-id</i> is a string that identifies the clock whose\noffsets are being shown. This field is either\n<i>monotonic</i>, for <b>CLOCK_MONOTONIC</b>, or\n<i>boottime</i>, for <b>CLOCK_BOOTTIME</b>. The remaining\nfields express the offset (seconds plus nanoseconds) for the\nclock in this time namespace. These offsets are expressed\nrelative to the clock values in the initial time namespace.\nThe <i>offset-secs</i> value can be negative, subject to\nrestrictions noted below; <i>offset-nanosecs</i> is an\nunsigned value.\n\nIn the initial\ntime namespace, the contents of the <i>timens_offsets</i>\nfile are as follows:\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\n/proc/self/timens_offsets</b> <br>\nmonotonic 0 0 <br>\nboottime 0 0\n\nIn a new time\nnamespace that has had no member processes, the clock\noffsets can be modified by writing newline-terminated\nrecords of the same form to the <i>timens_offsets</i> file.\nThe file can be written to multiple times, but after the\nfirst process has been created in or has entered the\nnamespace, <a href=\"https://man.page/2/write\">write(2)</a>s on this file fail with the error\n<b>EACCES</b>. In order to write to the\n<i>timens_offsets</i> file, a process must have the\n<b>CAP_SYS_TIME</b> capability in the user namespace that\nowns the time namespace.\n\nWrites to the\n<i>timens_offsets</i> file can fail with the following\nerrors:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">An <i>offset-nanosecs</i> value\nis greater than 999,999,999.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A <i>clock-id</i> value is not valid.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller does not have the <b>CAP_SYS_TIME</b>\ncapability. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An <i>offset-secs</i> value is out of range. In\nparticular; </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">&bull;\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\"></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\"><i>offset-secs</i> can&rsquo;t\nbe set to a value which would make the current time on the\ncorresponding clock inside the namespace a negative value;\nand </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><i>offset-secs</i> can&rsquo;t be set to a value such\nthat the time on the corresponding clock inside the\nnamespace would exceed half of the value of the kernel\nconstant <b>KTIME_SEC_MAX</b> (this limits the clock value\nto a maximum of approximately 146 years).</td></tr>\n</table>\n\nIn a new time\nnamespace created by <a href=\"https://man.page/2/unshare\">unshare(2)</a>, the contents of the\n<i>timens_offsets</i> file are inherited from the time\nnamespace of the creating process.\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\nUse of time\nnamespaces requires a kernel that is configured with the\n<b>CONFIG_TIME_NS</b> option.\n\nNote that time\nnamespaces do not virtualize the <b>CLOCK_REALTIME</b>\nclock. Virtualization of this clock was avoided for reasons\nof complexity and overhead within the kernel.\n\nFor\ncompatibility with the initial implementation, when writing\na <i>clock-id</i> to the <i>/proc/[pid]/timens_offsets</i>\nfile, the numerical values of the IDs can be written instead\nof the symbolic names show above; i.e., 1 instead of\n<i>monotonic</i>, and 7 instead of <i>boottime</i>. For\nredability, the use of the symbolic names over the numbers\nis preferred.\n\nThe motivation\nfor adding time namespaces was to allow the monotonic and\nboot-time clocks to maintain consistent values during\ncontainer migration and checkpoint/restore.\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\nThe following\nshell session demonstrates the operation of time namespaces.\nWe begin by displaying the inode number of the time\nnamespace of a shell in the initial time namespace:\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>readlink\n/proc/$$/ns/time</b> <br>\ntime:[4026531834]\n\nContinuing in\nthe initial time namespace, we display the system uptime\nusing <a href=\"https://man.page/1/uptime\">uptime(1)</a> and use the <i>clock_times</i>\nexample program shown in <a href=\"https://man.page/2/clock_getres\">clock_getres(2)</a> to display\nthe values of various clocks:\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>uptime\n--pretty</b> <br>\nup 21 hours, 17 minutes <br>\n$ <b>./clock_times</b> <br>\nCLOCK_REALTIME : 1585989401.971 (18356 days + 8h 36m 41s)\n<br>\nCLOCK_TAI : 1585989438.972 (18356 days + 8h 37m 18s) <br>\nCLOCK_MONOTONIC: 56338.247 (15h 38m 58s) <br>\nCLOCK_BOOTTIME : 76633.544 (21h 17m 13s)\n\nWe then use\n<a href=\"https://man.page/1/unshare\">unshare(1)</a> to create a time namespace and execute a\n<a href=\"https://man.page/1/bash\">bash(1)</a> shell. From the new shell, we use the\nbuilt-in <b>echo</b> command to write records to the\n<i>timens_offsets</i> file adjusting the offset for the\n<b>CLOCK_MONOTONIC</b> clock forward 2 days and the offset\nfor the <b>CLOCK_BOOTTIME</b> clock forward 7 days:\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>PS1=&quot;ns2# &quot; sudo unshare -T -- bash --norc</b>\n<br>\nns2# <b>echo &quot;monotonic $((2*24*60*60)) 0&quot; &gt;\n/proc/$$/timens_offsets</b> <br>\nns2# <b>echo &quot;boottime $((7*24*60*60)) 0&quot; &gt;\n/proc/$$/timens_offsets</b>\n\nAbove, we\nstarted the <a href=\"https://man.page/1/bash\">bash(1)</a> shell with the <b>--norc</b>\noptions so that no start-up scripts were executed. This\nensures that no child processes are created from the shell\nbefore we have a chance to update the <i>timens_offsets</i>\nfile.\n\nWe then use\n<a href=\"https://man.page/1/cat\">cat(1)</a> to display the contents of the\n<i>timens_offsets</i> file. The execution of <a href=\"https://man.page/1/cat\">cat(1)</a>\ncreates the first process in the new time namespace, after\nwhich further attempts to update the <i>timens_offsets</i>\nfile produce an error.\n\n<p style=\"margin-left:17%; margin-top: 1em\">ns2# <b>cat\n/proc/$$/timens_offsets</b> <br>\nmonotonic 172800 0 <br>\nboottime 604800 0 <br>\nns2# <b>echo &quot;boottime $((9*24*60*60)) 0&quot; &gt;\n/proc/$$/timens_offsets</b> <br>\nbash: echo: write error: Permission denied\n\nContinuing in\nthe new namespace, we execute <a href=\"https://man.page/1/uptime\">uptime(1)</a> and the\n<i>clock_times</i> example program:\n\n<p style=\"margin-left:17%; margin-top: 1em\">ns2# <b>uptime\n--pretty</b> <br>\nup 1 week, 21 hours, 18 minutes <br>\nns2# <b>./clock_times</b> <br>\nCLOCK_REALTIME : 1585989457.056 (18356 days + 8h 37m 37s)\n<br>\nCLOCK_TAI : 1585989494.057 (18356 days + 8h 38m 14s) <br>\nCLOCK_MONOTONIC: 229193.332 (2 days + 15h 39m 53s) <br>\nCLOCK_BOOTTIME : 681488.629 (7 days + 21h 18m 8s)\n\nFrom the above\noutput, we can see that the monotonic and boot-time clocks\nhave different values in the new time namespace.\n\nExamining the\n<i>/proc/[pid]/ns/time</i> and\n<i>/proc/[pid]/ns/time_for_children</i> symbolic links, we\nsee that the shell is a member of the initial time\nnamespace, but its children are created in the new\nnamespace.\n\n<p style=\"margin-left:17%; margin-top: 1em\">ns2#\n<b>readlink /proc/$$/ns/time</b> <br>\ntime:[4026531834] <br>\nns2# <b>readlink /proc/$$/ns/time_for_children</b> <br>\ntime:[4026532900] <br>\nns2# <b>readlink /proc/self/ns/time</b> # Creates a child\nprocess <br>\ntime:[4026532900]\n\nReturning to\nthe shell in the initial time namespace, we see that the\nmonotonic and boot-time clocks are unaffected by the\n<i>timens_offsets</i> changes that were made in the other\ntime namespace:\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>uptime\n--pretty</b> <br>\nup 21 hours, 19 minutes <br>\n$ <b>./clock_times</b> <br>\nCLOCK_REALTIME : 1585989401.971 (18356 days + 8h 38m 51s)\n<br>\nCLOCK_TAI : 1585989438.972 (18356 days + 8h 39m 28s) <br>\nCLOCK_MONOTONIC: 56338.247 (15h 41m 8s) <br>\nCLOCK_BOOTTIME : 76633.544 (21h 19m 23s)\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/1/nsenter\">nsenter(1)</a>,\n<a href=\"https://man.page/1/unshare\">unshare(1)</a>, <a href=\"https://man.page/2/clock_settime\">clock_settime(2)</a>, <a href=\"https://man.page/2/setns\">setns(2)</a>,\n<a href=\"https://man.page/2/unshare\">unshare(2)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>, <a href=\"https://man.page/7/time\">time(7)</a>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\nThis page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.","body":"\n\n<h1 align=\"center\">TIME_NAMESPACES</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">time_namespaces\n- overview of Linux time namespaces</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Time namespaces\nvirtualize the values of two system clocks:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>CLOCK_MONOTONIC</b> (and likewise\n<b>CLOCK_MONOTONIC_COARSE</b> and\n<b>CLOCK_MONOTONIC_RAW</b>), a nonsettable clock that\nrepresents monotonic time since&mdash;as described by\nPOSIX&mdash;&quot;some unspecified point in the\npast&quot;.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p><b>CLOCK_BOOTTIME</b> (and likewise\n<b>CLOCK_BOOTTIME_ALARM</b>), a nonsettable clock that is\nidentical to <b>CLOCK_MONOTONIC</b>, except that it also\nincludes any time that the system is suspended.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus, the\nprocesses in a time namespace share per-namespace values for\nthese clocks. This affects various APIs that measure against\nthese clocks, including: <a href=\"https://man.page/2/clock_gettime\">clock_gettime(2)</a>,\n<a href=\"https://man.page/2/clock_nanosleep\">clock_nanosleep(2)</a>, <a href=\"https://man.page/2/nanosleep\">nanosleep(2)</a>,\n<a href=\"https://man.page/2/timer_settime\">timer_settime(2)</a>, <a href=\"https://man.page/2/timerfd_settime\">timerfd_settime(2)</a>, and\n<i>/proc/uptime</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently, the\nonly way to create a time namespace is by calling\n<a href=\"https://man.page/2/unshare\">unshare(2)</a> with the <b>CLONE_NEWTIME</b> flag. This\ncall creates a new time namespace but does <i>not</i> place\nthe calling process in the new namespace. Instead, the\ncalling process&rsquo;s subsequently created children are\nplaced in the new namespace. This allows clock offsets (see\nbelow) for the new namespace to be set before the first\nprocess is placed in the namespace. The\n<i>/proc/[pid]/ns/time_for_children</i> symbolic link shows\nthe time namespace in which the children of a process will\nbe created. (A process can use a file descriptor opened on\nthis symbolic link in a call to <a href=\"https://man.page/2/setns\">setns(2)</a> in order to\nmove into the namespace.)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc/PID/timens_offsets</b>\n<br>\nAssociated with each time namespace are offsets, expressed\nwith respect to the initial time namespace, that define the\nvalues of the monotonic and boot-time clocks in that\nnamespace. These offsets are exposed via the file\n<i>/proc/PID/timens_offsets</i>. Within this file, the\noffsets are expressed as lines consisting of three\nspace-delimited fields:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&lt;clock-id&gt;\n&lt;offset-secs&gt; &lt;offset-nanosecs&gt;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>clock-id</i> is a string that identifies the clock whose\noffsets are being shown. This field is either\n<i>monotonic</i>, for <b>CLOCK_MONOTONIC</b>, or\n<i>boottime</i>, for <b>CLOCK_BOOTTIME</b>. The remaining\nfields express the offset (seconds plus nanoseconds) for the\nclock in this time namespace. These offsets are expressed\nrelative to the clock values in the initial time namespace.\nThe <i>offset-secs</i> value can be negative, subject to\nrestrictions noted below; <i>offset-nanosecs</i> is an\nunsigned value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the initial\ntime namespace, the contents of the <i>timens_offsets</i>\nfile are as follows:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>cat\n/proc/self/timens_offsets</b> <br>\nmonotonic 0 0 <br>\nboottime 0 0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a new time\nnamespace that has had no member processes, the clock\noffsets can be modified by writing newline-terminated\nrecords of the same form to the <i>timens_offsets</i> file.\nThe file can be written to multiple times, but after the\nfirst process has been created in or has entered the\nnamespace, <a href=\"https://man.page/2/write\">write(2)</a>s on this file fail with the error\n<b>EACCES</b>. In order to write to the\n<i>timens_offsets</i> file, a process must have the\n<b>CAP_SYS_TIME</b> capability in the user namespace that\nowns the time namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Writes to the\n<i>timens_offsets</i> file can fail with the following\nerrors:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">An <i>offset-nanosecs</i> value\nis greater than 999,999,999.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A <i>clock-id</i> value is not valid.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>The caller does not have the <b>CAP_SYS_TIME</b>\ncapability.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ERANGE</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>An <i>offset-secs</i> value is out of range. In\nparticular;</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%;\">&bull;</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\"></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p style=\"margin-top: 1em\"><i>offset-secs</i> can&rsquo;t\nbe set to a value which would make the current time on the\ncorresponding clock inside the namespace a negative value;\nand</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p><i>offset-secs</i> can&rsquo;t be set to a value such\nthat the time on the corresponding clock inside the\nnamespace would exceed half of the value of the kernel\nconstant <b>KTIME_SEC_MAX</b> (this limits the clock value\nto a maximum of approximately 146 years).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In a new time\nnamespace created by <a href=\"https://man.page/2/unshare\">unshare(2)</a>, the contents of the\n<i>timens_offsets</i> file are inherited from the time\nnamespace of the creating process.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Use of time\nnamespaces requires a kernel that is configured with the\n<b>CONFIG_TIME_NS</b> option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that time\nnamespaces do not virtualize the <b>CLOCK_REALTIME</b>\nclock. Virtualization of this clock was avoided for reasons\nof complexity and overhead within the kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\ncompatibility with the initial implementation, when writing\na <i>clock-id</i> to the <i>/proc/[pid]/timens_offsets</i>\nfile, the numerical values of the IDs can be written instead\nof the symbolic names show above; i.e., 1 instead of\n<i>monotonic</i>, and 7 instead of <i>boottime</i>. For\nredability, the use of the symbolic names over the numbers\nis preferred.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The motivation\nfor adding time namespaces was to allow the monotonic and\nboot-time clocks to maintain consistent values during\ncontainer migration and checkpoint/restore.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nshell session demonstrates the operation of time namespaces.\nWe begin by displaying the inode number of the time\nnamespace of a shell in the initial time namespace:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>readlink\n/proc/$$/ns/time</b> <br>\ntime:[4026531834]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Continuing in\nthe initial time namespace, we display the system uptime\nusing <a href=\"https://man.page/1/uptime\">uptime(1)</a> and use the <i>clock_times</i>\nexample program shown in <a href=\"https://man.page/2/clock_getres\">clock_getres(2)</a> to display\nthe values of various clocks:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>uptime\n--pretty</b> <br>\nup 21 hours, 17 minutes <br>\n$ <b>./clock_times</b> <br>\nCLOCK_REALTIME : 1585989401.971 (18356 days + 8h 36m 41s)\n<br>\nCLOCK_TAI : 1585989438.972 (18356 days + 8h 37m 18s) <br>\nCLOCK_MONOTONIC: 56338.247 (15h 38m 58s) <br>\nCLOCK_BOOTTIME : 76633.544 (21h 17m 13s)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then use\n<a href=\"https://man.page/1/unshare\">unshare(1)</a> to create a time namespace and execute a\n<a href=\"https://man.page/1/bash\">bash(1)</a> shell. From the new shell, we use the\nbuilt-in <b>echo</b> command to write records to the\n<i>timens_offsets</i> file adjusting the offset for the\n<b>CLOCK_MONOTONIC</b> clock forward 2 days and the offset\nfor the <b>CLOCK_BOOTTIME</b> clock forward 7 days:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$\n<b>PS1=&quot;ns2# &quot; sudo unshare -T -- bash --norc</b>\n<br>\nns2# <b>echo &quot;monotonic $((2*24*60*60)) 0&quot; &gt;\n/proc/$$/timens_offsets</b> <br>\nns2# <b>echo &quot;boottime $((7*24*60*60)) 0&quot; &gt;\n/proc/$$/timens_offsets</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Above, we\nstarted the <a href=\"https://man.page/1/bash\">bash(1)</a> shell with the <b>--norc</b>\noptions so that no start-up scripts were executed. This\nensures that no child processes are created from the shell\nbefore we have a chance to update the <i>timens_offsets</i>\nfile.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">We then use\n<a href=\"https://man.page/1/cat\">cat(1)</a> to display the contents of the\n<i>timens_offsets</i> file. The execution of <a href=\"https://man.page/1/cat\">cat(1)</a>\ncreates the first process in the new time namespace, after\nwhich further attempts to update the <i>timens_offsets</i>\nfile produce an error.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ns2# <b>cat\n/proc/$$/timens_offsets</b> <br>\nmonotonic 172800 0 <br>\nboottime 604800 0 <br>\nns2# <b>echo &quot;boottime $((9*24*60*60)) 0&quot; &gt;\n/proc/$$/timens_offsets</b> <br>\nbash: echo: write error: Permission denied</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Continuing in\nthe new namespace, we execute <a href=\"https://man.page/1/uptime\">uptime(1)</a> and the\n<i>clock_times</i> example program:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ns2# <b>uptime\n--pretty</b> <br>\nup 1 week, 21 hours, 18 minutes <br>\nns2# <b>./clock_times</b> <br>\nCLOCK_REALTIME : 1585989457.056 (18356 days + 8h 37m 37s)\n<br>\nCLOCK_TAI : 1585989494.057 (18356 days + 8h 38m 14s) <br>\nCLOCK_MONOTONIC: 229193.332 (2 days + 15h 39m 53s) <br>\nCLOCK_BOOTTIME : 681488.629 (7 days + 21h 18m 8s)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From the above\noutput, we can see that the monotonic and boot-time clocks\nhave different values in the new time namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Examining the\n<i>/proc/[pid]/ns/time</i> and\n<i>/proc/[pid]/ns/time_for_children</i> symbolic links, we\nsee that the shell is a member of the initial time\nnamespace, but its children are created in the new\nnamespace.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">ns2#\n<b>readlink /proc/$$/ns/time</b> <br>\ntime:[4026531834] <br>\nns2# <b>readlink /proc/$$/ns/time_for_children</b> <br>\ntime:[4026532900] <br>\nns2# <b>readlink /proc/self/ns/time</b> # Creates a child\nprocess <br>\ntime:[4026532900]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Returning to\nthe shell in the initial time namespace, we see that the\nmonotonic and boot-time clocks are unaffected by the\n<i>timens_offsets</i> changes that were made in the other\ntime namespace:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>uptime\n--pretty</b> <br>\nup 21 hours, 19 minutes <br>\n$ <b>./clock_times</b> <br>\nCLOCK_REALTIME : 1585989401.971 (18356 days + 8h 38m 51s)\n<br>\nCLOCK_TAI : 1585989438.972 (18356 days + 8h 39m 28s) <br>\nCLOCK_MONOTONIC: 56338.247 (15h 41m 8s) <br>\nCLOCK_BOOTTIME : 76633.544 (21h 19m 23s)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/nsenter\">nsenter(1)</a>,\n<a href=\"https://man.page/1/unshare\">unshare(1)</a>, <a href=\"https://man.page/2/clock_settime\">clock_settime(2)</a>, <a href=\"https://man.page/2/setns\">setns(2)</a>,\n<a href=\"https://man.page/2/unshare\">unshare(2)</a>, <a href=\"https://man.page/7/namespaces\">namespaces(7)</a>, <a href=\"https://man.page/7/time\">time(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}