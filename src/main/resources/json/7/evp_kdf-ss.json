{"name":"evp_kdf-ss","description":"EVP_KDF-SS - The Single Step / One Step EVP_KDF implementation","body":"\n\n<h1 align=\"center\">EVP_KDF-SS</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF-SS -\nThe Single Step / One Step EVP_KDF implementation</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<small>EVP_KDF-SS</small> algorithm implements the Single\nStep key derivation function ( <small>SSKDF</small> ).\n<small>SSKDF</small> derives a key using input such as a\nshared secret key (that was generated during the execution\nof a key establishment scheme) and fixedinfo.\n<small>SSKDF</small> is also informally referred to as\n&rsquo;Concat <small>KDF</small> &rsquo;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Auxiliary\nfunction</b> <br>\nThe implementation uses a selectable auxiliary function H,\nwhich can be one of: <b><br>\nH(x) = hash(x, digest=md) <br>\nH(x) = HMAC_hash(x, key=salt, digest=md) <br>\nH(x) = KMACxxx(x, key=salt, custom=&quot;\n<small>KDF&quot;,</small> outlen=mac_size)</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both the\n<small>HMAC</small> and <small>KMAC</small> implementations\nset the key using the &rsquo;salt&rsquo; value. The hash and\n<small>HMAC</small> also require the digest to be set.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Identity</b>\n<br>\n&quot; <small>SSKDF&quot;</small> is the name for this\nimplementation; it can be used with the\n<b>EVP_KDF_fetch()</b> function.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Supported\nparameters</b> <br>\nThe supported parameters are: <br>\n&quot;properties&quot; (\n<b><small>OSSL_KDF_PARAM_PROPERTIES</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;digest&quot; (\n<b><small>OSSL_KDF_PARAM_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt; <br>\n&quot;mac&quot; ( <b><small>OSSL_KDF_PARAM_MAC</small></b> )\n&lt; <small>UTF8</small> string&gt; <br>\n&quot;maclen&quot; (\n<b><small>OSSL_KDF_PARAM_MAC_SIZE</small></b> ) &lt;unsigned\ninteger&gt; <br>\n&quot;salt&quot; ( <b><small>OSSL_KDF_PARAM_SALT</small></b>\n) &lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">These parameters work as\ndescribed in &quot; <small>PARAMETERS&quot;</small> in\n<b><small>EVP_KDF</small></b> (3).</p>\n\n<p style=\"margin-left:11%;\">&quot;key&quot; (\n<b><small>EVP_KDF_CTRL_SET_KEY</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">This parameter set the shared\nsecret that is used for key derivation.</p>\n\n<p style=\"margin-left:11%;\">&quot;info&quot; (\n<b><small>OSSL_KDF_PARAM_INFO</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">This parameter sets an optional\nvalue for fixedinfo, also known as otherinfo.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A context for\n<small>SSKDF</small> can be obtained by calling:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF *kdf =\nEVP_KDF_fetch(NULL, &quot;SSKDF&quot;, NULL); <br>\nEVP_KDF_CTX *kctx = EVP_KDF_CTX_new(kdf);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The output\nlength of an <small>SSKDF</small> is specified via the\n<i>keylen</i> parameter to the <a href=\"https://man.page/3/EVP_KDF_derive\">EVP_KDF_derive(3)</a>\nfunction.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nderives 10 bytes using H(x) = <small>SHA-256,</small> with\nthe secret key &quot;secret&quot; and fixedinfo value\n&quot;label&quot;:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF *kdf;\n<br>\nEVP_KDF_CTX *kctx; <br>\nunsigned char out[10]; <br>\nOSSL_PARAM params[4], *p = params; <br>\nkdf = EVP_KDF_fetch(NULL, &quot;SSKDF&quot;, NULL); <br>\nkctx = EVP_KDF_CTX_new(kdf); <br>\nEVP_KDF_free(kdf); <br>\n*p++ =\nOSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST, <br>\nSN_sha256, strlen(SN_sha256)); <br>\n*p++ = OSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_KEY,\n<br>\n&quot;secret&quot;, (size_t)6); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_INFO, <br>\n&quot;label&quot;, (size_t)5); <br>\n*p = OSSL_PARAM_construct_end(); <br>\nif (EVP_KDF_derive(kctx, out, sizeof(out), params) &lt;= 0)\n{ <br>\nerror(&quot;EVP_KDF_derive&quot;); <br>\n} <br>\nEVP_KDF_CTX_free(kctx);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nderives 10 bytes using H(x) = <small>HMAC</small> (\n<small>SHA-256</small> ), with the secret key\n&quot;secret&quot;, fixedinfo value &quot;label&quot; and\nsalt &quot;salt&quot;:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF *kdf;\n<br>\nEVP_KDF_CTX *kctx; <br>\nunsigned char out[10]; <br>\nOSSL_PARAM params[6], *p = params; <br>\nkdf = EVP_KDF_fetch(NULL, &quot;SSKDF&quot;, NULL); <br>\nkctx = EVP_KDF_CTX_new(kdf); <br>\nEVP_KDF_free(kdf); <br>\n*p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_MAC,\n<br>\nSN_hmac, strlen(SN_hmac)); <br>\n*p++ =\nOSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST, <br>\nSN_sha256, strlen(SN_sha256)); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(EVP_KDF_CTRL_SET_KEY, <br>\n&quot;secret&quot;, (size_t)6); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_INFO, <br>\n&quot;label&quot;, (size_t)5); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SALT, <br>\n&quot;salt&quot;, (size_t)4); <br>\n*p = OSSL_PARAM_construct_end(); <br>\nif (EVP_KDF_derive(kctx, out, sizeof(out), params) &lt;= 0)\n{ <br>\nerror(&quot;EVP_KDF_derive&quot;); <br>\n} <br>\nEVP_KDF_CTX_free(kctx);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nderives 10 bytes using H(x) = <small>KMAC128</small>\n(x,salt,outlen), with the secret key &quot;secret&quot;\nfixedinfo value &quot;label&quot;, salt of &quot;salt&quot;\nand <small>KMAC</small> outlen of 20:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_KDF *kdf;\n<br>\nEVP_KDF_CTX *kctx; <br>\nunsigned char out[10]; <br>\nOSSL_PARAM params[7], *p = params; <br>\nkdf = EVP_KDF_fetch(NULL, &quot;SSKDF&quot;, NULL); <br>\nkctx = EVP_KDF_CTX_new(kdf); <br>\nEVP_KDF_free(kdf); <br>\n*p++ = OSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_MAC,\n<br>\nSN_kmac128, strlen(SN_kmac128)); <br>\n*p++ =\nOSSL_PARAM_construct_utf8_string(OSSL_KDF_PARAM_DIGEST, <br>\nSN_sha256, strlen(SN_sha256)); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(EVP_KDF_CTRL_SET_KEY, <br>\n&quot;secret&quot;, (size_t)6); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_INFO, <br>\n&quot;label&quot;, (size_t)5); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_KDF_PARAM_SALT, <br>\n&quot;salt&quot;, (size_t)4); <br>\n*p++ = OSSL_PARAM_construct_size_t(OSSL_KDF_PARAM_MAC_SIZE,\n(size_t)20); <br>\n*p = OSSL_PARAM_construct_end(); <br>\nif (EVP_KDF_derive(kctx, out, sizeof(out), params) &lt;= 0)\n{ <br>\nerror(&quot;EVP_KDF_derive&quot;); <br>\n} <br>\nEVP_KDF_CTX_free(kctx);</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>NIST</small>\nSP800-56Cr1.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>EVP_KDF</small></b>\n(3), <a href=\"https://man.page/3/EVP_KDF_CTX_new\">EVP_KDF_CTX_new(3)</a>, <a href=\"https://man.page/3/EVP_KDF_CTX_free\">EVP_KDF_CTX_free(3)</a>,\n<a href=\"https://man.page/3/EVP_KDF_CTX_set_params\">EVP_KDF_CTX_set_params(3)</a>,\n<a href=\"https://man.page/3/EVP_KDF_CTX_get_kdf_size\">EVP_KDF_CTX_get_kdf_size(3)</a>,\n<a href=\"https://man.page/3/EVP_KDF_derive\">EVP_KDF_derive(3)</a>, &quot;\n<small>PARAMETERS&quot;</small> in\n<b><small>EVP_KDF</small></b> (3)</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This\nfunctionality was added to OpenSSL 3.0.</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights Reserved.\nCopyright (c) 2019, Oracle and/or its affiliates. All rights\nreserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}