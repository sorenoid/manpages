{"name":"gitcvs-migration","description":"gitcvs-migration - Git for CVS users","body":"\n\n<h1 align=\"center\">GITCVS-MIGRATION</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitcvs-migration\n- Git for CVS users</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>git\ncvsimport</i> *</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git differs\nfrom CVS in that every working tree contains a repository\nwith a full copy of the project history, and no repository\nis inherently more important than any other. However, you\ncan emulate the CVS model by designating a single shared\nrepository which people can synchronize with; this document\nexplains how to do that.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some basic\nfamiliarity with Git is required. Having gone through\n<a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a> and <a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a> should be\nsufficient.</p>\n\n<h2>DEVELOPING AGAINST A SHARED REPOSITORY\n<a name=\"DEVELOPING AGAINST A SHARED REPOSITORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Suppose a\nshared repository is set up in /pub/repo.git on the host\nfoo.com. Then as an individual committer you can clone the\nshared repository over ssh with:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git clone\nfoo.com:/pub/repo.git/ my-project <br>\n$ cd my-project</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">and hack away.\nThe equivalent of <i>cvs update</i> is</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git pull\norigin</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">which merges in\nany work that others might have done since the clone\noperation. If there are uncommitted changes in your working\ntree, commit them first before running git pull.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b><big>Note</big></b>\n<br>\nThe <i>pull</i> command knows where to get updates from\nbecause of certain configuration variables that were set by\nthe first <i>git clone</i> command; see <b>git config -l</b>\nand the <a href=\"https://man.page/1/git-config\">git-config(1)</a> man page for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can update\nthe shared repository with your changes by first committing\nyour changes, and then using the <i>git push</i>\ncommand:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git push\norigin master</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">to\n&quot;push&quot; those commits to the shared repository. If\nsomeone else has updated the repository more recently,\n<i>git push</i>, like <i>cvs commit</i>, will complain, in\nwhich case you must pull any changes before attempting the\npush again.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In the <i>git\npush</i> command above we specify the name of the remote\nbranch to update (<b>master</b>). If we leave that out,\n<i>git push</i> tries to update any branches in the remote\nrepository that have the same name as a branch in the local\nrepository. So the last <i>push</i> can be done with either\nof:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ git push\norigin <br>\n$ git push foo.com:/pub/project.git/</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">as long as the\nshared repository does not have any branches other than\n<b>master</b>.</p>\n\n<h2>SETTING UP A SHARED REPOSITORY\n<a name=\"SETTING UP A SHARED REPOSITORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>We assume\nyou have already created a Git repository for your project,\npossibly created from scratch or from a tarball (see\n<a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a>), or imported from an already existing\nCVS repository (see the next section).</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Assume\nyour existing repo is at /home/alice/myproject. Create a new\n&quot;bare&quot; repository (a repository without a working\ntree) and fetch your project into it:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ mkdir\n/pub/my-repo.git <br>\n$ cd /pub/my-repo.git <br>\n$ git --bare init --shared <br>\n$ git --bare fetch /home/alice/myproject\nmaster:master</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Next, give\nevery team member read/write access to this repository. One\neasy way to do this is to give all the team members ssh\naccess to the machine where the repository is hosted. If you\ndon&rsquo;t want to give them a full shell on the machine,\nthere is a restricted shell which only allows users to do\nGit pushes and pulls; see <a href=\"https://man.page/1/git-shell\">git-shell(1)</a>.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Put all\nthe committers in the same group, and make the repository\nwritable by that group:</big></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big>$ chgrp -R\n$group /pub/my-repo.git</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>Make sure\ncommitters have a umask of at most 027, so that the\ndirectories they create are writable and searchable by other\ngroup members.</big></p>\n\n<h2>IMPORTING A CVS ARCHIVE\n<a name=\"IMPORTING A CVS ARCHIVE\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><b><big>Note</big></b>\n<br>\nThese instructions use the <b>git-cvsimport</b> script which\nships with git, but other importers may provide better\nresults. See the note in <a href=\"https://man.page/1/git-cvsimport\">git-cvsimport(1)</a> for other\noptions.</big></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big>First,\ninstall version 2.1 or higher of cvsps from\n<b><font color=\"#0000FF\">https://github.com/andreyvit/cvsps</font></b>\n<font color=\"#000000\">and make sure it is in your path. Then\ncd to a checked out CVS working directory of the project you\nare interested in and run\n<a href=\"https://man.page/1/git-cvsimport\">git-cvsimport(1)</a>:</font></big></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><big><font color=\"#000000\">$\ngit cvsimport -C &lt;destination&gt;\n&lt;module&gt;</font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\">This\nputs a Git archive of the named CVS module in the directory\n&lt;destination&gt;, which will be created if\nnecessary.</font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\">The\nimport checks out from CVS every revision of every file.\nReportedly cvsimport can average some twenty revisions per\nsecond, so for a medium-sized project this should not take\nmore than a couple of minutes. Larger projects or remote\nrepositories may take longer.</font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\">The\nmain trunk is stored in the Git branch named <b>origin</b>,\nand additional CVS branches are stored in Git branches with\nthe same names. The most recent version of the main trunk is\nalso left checked out on the <b>master</b> branch, so you\ncan start adding your own changes right\naway.</font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\">The\nimport is incremental, so if you call it again next month it\nwill fetch any CVS updates that have been made in the\nmeantime. For this to work, you must not modify the imported\nbranches; instead, create new branches for your own changes,\nand merge in the imported branches as\nnecessary.</font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\">If\nyou want a shared repository, you will need to make a bare\nclone of the imported directory, as described above. Then\ntreat the imported directory as another development clone\nfor purposes of merging incremental\nimports.</font></big></p>\n\n<h2>ADVANCED SHARED REPOSITORY MANAGEMENT\n<a name=\"ADVANCED SHARED REPOSITORY MANAGEMENT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>Git\nallows you to specify scripts called &quot;hooks&quot; to be\nrun at certain points. You can use these, for example, to\nsend all commits to the shared repository to a mailing list.\nSee <a href=\"https://man.page/5/githooks\">githooks(5)</a>.</big></font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>You\ncan enforce finer grained permissions using update hooks.\nSee</big></font> <big><b><font color=\"#0000FF\">Controlling\naccess to branches using update hooks</font></b></big>\n<font color=\"#000000\">[1] <big>.</big></font></big></p>\n\n<h2>PROVIDING CVS ACCESS TO A GIT REPOSITORY\n<a name=\"PROVIDING CVS ACCESS TO A GIT REPOSITORY\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>It\nis also possible to provide true CVS access to a Git\nrepository, so that developers can still use CVS; see\n<a href=\"https://man.page/1/git-cvsserver\">git-cvsserver(1)</a> for details.</big></font></big></p>\n\n<h2>ALTERNATIVE DEVELOPMENT MODELS\n<a name=\"ALTERNATIVE DEVELOPMENT MODELS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>CVS\nusers are accustomed to giving a group of developers commit\naccess to a common repository. As we&rsquo;ve seen, this is\nalso possible with Git. However, the distributed nature of\nGit allows other development models, and you may want to\nfirst consider whether one of them might be a better fit for\nyour project.</big></font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>For\nexample, you can choose a single person to maintain the\nproject&rsquo;s primary public repository. Other developers\nthen clone this repository and each work in their own clone.\nWhen they have a series of changes that they&rsquo;re happy\nwith, they ask the maintainer to pull from the branch\ncontaining the changes. The maintainer reviews their changes\nand pulls them into the primary repository, which other\ndevelopers pull from as necessary to stay coordinated. The\nLinux kernel and other projects use variants of this\nmodel.</big></font></big></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>With\na small group, developers may just pull changes from each\nother&rsquo;s repositories without the need for a central\nmaintainer.</big></font></big></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big><a href=\"https://man.page/7/gittutorial\">gittutorial(7)</a>,\n<a href=\"https://man.page/7/gittutorial-2\">gittutorial-2(7)</a>, <a href=\"https://man.page/7/gitcore-tutorial\">gitcore-tutorial(7)</a>,\n<a href=\"https://man.page/7/gitglossary\">gitglossary(7)</a>, <a href=\"https://man.page/7/giteveryday\">giteveryday(7)</a>,</big></font>\n<big><b><font color=\"#0000FF\">The Git User&rsquo;s\nManual</font></b></big>\n<font color=\"#000000\">[2]</font></big></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><big><font color=\"#000000\"><big>Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</big></font></big></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><font color=\"#000000\"><big>1.</big></font></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><font color=\"#000000\"><big>Controlling\naccess to branches using update hooks</big></font></big></p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><font color=\"#000000\"><big>file:///usr/share/doc/git/html/howto/update-hook-example.html</big></font></big></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><font color=\"#000000\"><big>2.</big></font></big></p> </td>\n<td width=\"2%\"></td>\n<td width=\"32%\">\n\n\n\n<p style=\"margin-top: 1em\"><big><font color=\"#000000\"><big>The\nGit User&rsquo;s Manual</big></font></big></p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><big><font color=\"#000000\"><big>file:///usr/share/doc/git/html/user-manual.html</big></font></big></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#DEVELOPING AGAINST A SHARED REPOSITORY\">DEVELOPING AGAINST A SHARED REPOSITORY</a>","<a href=\"#SETTING UP A SHARED REPOSITORY\">SETTING UP A SHARED REPOSITORY</a>","<a href=\"#IMPORTING A CVS ARCHIVE\">IMPORTING A CVS ARCHIVE</a>","<a href=\"#ADVANCED SHARED REPOSITORY MANAGEMENT\">ADVANCED SHARED REPOSITORY MANAGEMENT</a>","<a href=\"#PROVIDING CVS ACCESS TO A GIT REPOSITORY\">PROVIDING CVS ACCESS TO A GIT REPOSITORY</a>","<a href=\"#ALTERNATIVE DEVELOPMENT MODELS\">ALTERNATIVE DEVELOPMENT MODELS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}