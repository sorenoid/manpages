{"name":"ip","description":"ip - Linux IPv4\nprotocol implementation","body":"\n\n<h1 align=\"center\">IP</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">ip - Linux IPv4\nprotocol implementation</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>#include\n&lt;sys/socket.h&gt; <br>\n#include &lt;netinet/in.h&gt; <br>\n#include &lt;netinet/ip.h&gt;</b> /* superset of previous\n*/</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>tcp_socket</i>\n<b>= socket(AF_INET, SOCK_STREAM, 0);</b> <i><br>\nudp_socket</i> <b>= socket(AF_INET, SOCK_DGRAM, 0);</b>\n<i><br>\nraw_socket</i> <b>= socket(AF_INET, SOCK_RAW,</b>\n<i>protocol</i><b>);</b></p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux\nimplements the Internet Protocol, version 4, described in\nRFC&nbsp;791 and RFC&nbsp;1122. <b>ip</b> contains a level 2\nmulticasting implementation conforming to RFC&nbsp;1112. It\nalso contains an IP router including a packet filter.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The programming\ninterface is BSD-sockets compatible. For more information on\nsockets, see <a href=\"https://man.page/7/socket\">socket(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An IP socket is\ncreated using <a href=\"https://man.page/2/socket\">socket(2)</a>:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">socket(AF_INET,\nsocket_type, protocol);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Valid socket\ntypes include <b>SOCK_STREAM</b> to open a stream socket,\n<b>SOCK_DGRAM</b> to open a datagram socket, and\n<b>SOCK_RAW</b> to open a <a href=\"https://man.page/7/raw\">raw(7)</a> socket to access the\nIP protocol directly.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>protocol</i>\nis the IP protocol in the IP header to be received or sent.\nValid values for <i>protocol</i> include:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"74%\">\n\n\n<p>0 and <b>IPPROTO_TCP</b> for <a href=\"https://man.page/7/tcp\">tcp(7)</a> stream\nsockets;</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"74%\">\n\n\n<p>0 and <b>IPPROTO_UDP</b> for <a href=\"https://man.page/7/udp\">udp(7)</a> datagram\nsockets;</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"74%\">\n\n\n<p><b>IPPROTO_SCTP</b> for <a href=\"https://man.page/7/sctp\">sctp(7)</a> stream sockets;\nand</p> </td>\n<td width=\"12%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"74%\">\n\n\n<p><b>IPPROTO_UDPLITE</b> for <a href=\"https://man.page/7/udplite\">udplite(7)</a> datagram\nsockets.</p> </td>\n<td width=\"12%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\n<b>SOCK_RAW</b> you may specify a valid IANA IP protocol\ndefined in RFC&nbsp;1700 assigned numbers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a process\nwants to receive new incoming packets or connections, it\nshould bind a socket to a local interface address using\n<a href=\"https://man.page/2/bind\">bind(2)</a>. In this case, only one IP socket may be\nbound to any given local (address, port) pair. When\n<b>INADDR_ANY</b> is specified in the bind call, the socket\nwill be bound to <i>all</i> local interfaces. When\n<a href=\"https://man.page/2/listen\">listen(2)</a> is called on an unbound socket, the socket\nis automatically bound to a random free port with the local\naddress set to <b>INADDR_ANY</b>. When <a href=\"https://man.page/2/connect\">connect(2)</a> is\ncalled on an unbound socket, the socket is automatically\nbound to a random free port or to a usable shared port with\nthe local address set to <b>INADDR_ANY</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A TCP local\nsocket address that has been bound is unavailable for some\ntime after closing, unless the <b>SO_REUSEADDR</b> flag has\nbeen set. Care should be taken when using this flag as it\nmakes TCP less reliable.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Address\nformat</b> <br>\nAn IP socket address is defined as a combination of an IP\ninterface address and a 16-bit port number. The basic IP\nprotocol does not supply port numbers, they are implemented\nby higher level protocols like <a href=\"https://man.page/7/udp\">udp(7)</a> and\n<a href=\"https://man.page/7/tcp\">tcp(7)</a>. On raw sockets <i>sin_port</i> is set to the\nIP protocol.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nsockaddr_in { <br>\nsa_family_t sin_family; /* address family: AF_INET */ <br>\nin_port_t sin_port; /* port in network byte order */ <br>\nstruct in_addr sin_addr; /* internet address */ <br>\n};</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">/* Internet\naddress. */ <br>\nstruct in_addr { <br>\nuint32_t s_addr; /* address in network byte order */ <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sin_family</i>\nis always set to <b>AF_INET</b>. This is required; in Linux\n2.2 most networking functions return <b>EINVAL</b> when this\nsetting is missing. <i>sin_port</i> contains the port in\nnetwork byte order. The port numbers below 1024 are called\n<i>privileged ports</i> (or sometimes: <i>reserved\nports</i>). Only a privileged process (on Linux: a process\nthat has the <b>CAP_NET_BIND_SERVICE</b> capability in the\nuser namespace governing its network namespace) may\n<a href=\"https://man.page/2/bind\">bind(2)</a> to these sockets. Note that the raw IPv4\nprotocol as such has no concept of a port, they are\nimplemented only by higher protocols like <a href=\"https://man.page/7/tcp\">tcp(7)</a> and\n<a href=\"https://man.page/7/udp\">udp(7)</a>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>sin_addr</i>\nis the IP host address. The <i>s_addr</i> member of\n<i>struct in_addr</i> contains the host interface address in\nnetwork byte order. <i>in_addr</i> should be assigned one of\nthe <b>INADDR_*</b> values (e.g., <b>INADDR_LOOPBACK</b>)\nusing <a href=\"https://man.page/3/htonl\">htonl(3)</a> or set using the <a href=\"https://man.page/3/inet_aton\">inet_aton(3)</a>,\n<a href=\"https://man.page/3/inet_addr\">inet_addr(3)</a>, <a href=\"https://man.page/3/inet_makeaddr\">inet_makeaddr(3)</a> library\nfunctions or directly with the name resolver (see\n<a href=\"https://man.page/3/gethostbyname\">gethostbyname(3)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">IPv4 addresses\nare divided into unicast, broadcast, and multicast\naddresses. Unicast addresses specify a single interface of a\nhost, broadcast addresses specify all hosts on a network,\nand multicast addresses address all hosts in a multicast\ngroup. Datagrams to broadcast addresses can be sent or\nreceived only when the <b>SO_BROADCAST</b> socket flag is\nset. In the current implementation, connection-oriented\nsockets are allowed to use only unicast addresses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\naddress and the port are always stored in network byte\norder. In particular, this means that you need to call\n<a href=\"https://man.page/3/htons\">htons(3)</a> on the number that is assigned to a port.\nAll address/port manipulation functions in the standard\nlibrary work in network byte order.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are\nseveral special addresses: <b>INADDR_LOOPBACK</b>\n(127.0.0.1) always refers to the local host via the loopback\ndevice; <b>INADDR_ANY</b> (0.0.0.0) means any address for\nbinding; <b>INADDR_BROADCAST</b> (255.255.255.255) means any\nhost and has the same effect on bind as <b>INADDR_ANY</b>\nfor historical reasons.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Socket\noptions</b> <br>\nIP supports some protocol-specific socket options that can\nbe set with <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> and read with\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>. The socket option level for IP is\n<b>IPPROTO_IP</b>. A boolean integer flag is zero when it is\nfalse, otherwise true.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When an invalid\nsocket option is specified, <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> and\n<a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> fail with the error <b>ENOPROTOOPT</b>.\n<b><br>\nIP_ADD_MEMBERSHIP</b> (since Linux 1.2)</p>\n\n<p style=\"margin-left:22%;\">Join a multicast group.\nArgument is an <i>ip_mreqn</i> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct ip_mreqn\n{ <br>\nstruct in_addr imr_multiaddr; /* IP multicast group <br>\naddress */ <br>\nstruct in_addr imr_address; /* IP address of local <br>\ninterface */ <br>\nint imr_ifindex; /* interface index */ <br>\n};</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>imr_multiaddr</i>\ncontains the address of the multicast group the application\nwants to join or leave. It must be a valid multicast address\n(or <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> fails with the error\n<b>EINVAL</b>). <i>imr_address</i> is the address of the\nlocal interface with which the system should join the\nmulticast group; if it is equal to <b>INADDR_ANY</b>, an\nappropriate interface is chosen by the system.\n<i>imr_ifindex</i> is the interface index of the interface\nthat should join/leave the <i>imr_multiaddr</i> group, or 0\nto indicate any interface.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<i>ip_mreqn</i> structure is available only since Linux 2.2.\nFor compatibility, the old <i>ip_mreq</i> structure (present\nsince Linux 1.2) is still supported; it differs from\n<i>ip_mreqn</i> only by not including the <i>imr_ifindex</i>\nfield. (The kernel determines which structure is being\npassed based on the size passed in <i>optlen</i>.)</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>IP_ADD_MEMBERSHIP</b>\nis valid only for <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>IP_ADD_SOURCE_MEMBERSHIP</b>\n(since Linux 2.4.22 / 2.5.68)</p>\n\n<p style=\"margin-left:22%;\">Join a multicast group and\nallow receiving data only from a specified source. Argument\nis an <i>ip_mreq_source</i> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nip_mreq_source { <br>\nstruct in_addr imr_multiaddr; /* IP multicast group <br>\naddress */ <br>\nstruct in_addr imr_interface; /* IP address of local <br>\ninterface */ <br>\nstruct in_addr imr_sourceaddr; /* IP address of <br>\nmulticast source */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>ip_mreq_source</i> structure is similar to\n<i>ip_mreqn</i> described under <b>IP_ADD_MEMBERSHIP</b>.\nThe <i>imr_multiaddr</i> field contains the address of the\nmulticast group the application wants to join or leave. The\n<i>imr_interface</i> field is the address of the local\ninterface with which the system should join the multicast\ngroup. Finally, the <i>imr_sourceaddr</i> field contains the\naddress of the source the application wants to receive data\nfrom.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option can\nbe used multiple times to allow receiving data from more\nthan one source.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_BIND_ADDRESS_NO_PORT</b>\n(since Linux 4.2)</p>\n\n<p style=\"margin-left:22%;\">Inform the kernel to not\nreserve an ephemeral port when using <a href=\"https://man.page/2/bind\">bind(2)</a> with a\nport number of 0. The port will later be automatically\nchosen at <a href=\"https://man.page/2/connect\">connect(2)</a> time, in a way that allows\nsharing a source port as long as the 4-tuple is unique.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_BLOCK_SOURCE</b> (since\nLinux 2.4.22 / 2.5.68)</p>\n\n<p style=\"margin-left:22%;\">Stop receiving multicast data\nfrom a specific source in a given group. This is valid only\nafter the application has subscribed to the multicast group\nusing either <b>IP_ADD_MEMBERSHIP</b> or\n<b>IP_ADD_SOURCE_MEMBERSHIP</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Argument is an\n<i>ip_mreq_source</i> structure as described under\n<b>IP_ADD_SOURCE_MEMBERSHIP</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_DROP_MEMBERSHIP</b>\n(since Linux 1.2)</p>\n\n<p style=\"margin-left:22%;\">Leave a multicast group.\nArgument is an <i>ip_mreqn</i> or <i>ip_mreq</i> structure\nsimilar to <b>IP_ADD_MEMBERSHIP</b>.</p>\n\n\n<p style=\"margin-left:11%;\"><b>IP_DROP_SOURCE_MEMBERSHIP</b>\n(since Linux 2.4.22 / 2.5.68)</p>\n\n<p style=\"margin-left:22%;\">Leave a source-specific\ngroup&mdash;that is, stop receiving data from a given\nmulticast group that come from a given source. If the\napplication has subscribed to multiple sources within the\nsame group, data from the remaining sources will still be\ndelivered. To stop receiving data from all sources at once,\nuse <b>IP_DROP_MEMBERSHIP</b>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Argument is an\n<i>ip_mreq_source</i> structure as described under\n<b>IP_ADD_SOURCE_MEMBERSHIP</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_FREEBIND</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">If enabled, this boolean option\nallows binding to an IP address that is nonlocal or does not\n(yet) exist. This permits listening on a socket, without\nrequiring the underlying network interface or the specified\ndynamic IP address to be up at the time that the application\nis trying to bind to it. This option is the per-socket\nequivalent of the <i>ip_nonlocal_bind /proc</i> interface\ndescribed below.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_HDRINCL</b> (since Linux\n2.0)</p>\n\n<p style=\"margin-left:22%;\">If enabled, the user supplies\nan IP header in front of the user data. Valid only for\n<b>SOCK_RAW</b> sockets; see <a href=\"https://man.page/7/raw\">raw(7)</a> for more\ninformation. When this flag is enabled, the values set by\n<b>IP_OPTIONS</b>, <b>IP_TTL</b>, and <b>IP_TOS</b> are\nignored.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MSFILTER</b> (since Linux\n2.4.22 / 2.5.68)</p>\n\n<p style=\"margin-left:22%;\">This option provides access to\nthe advanced full-state filtering API. Argument is an\n<i>ip_msfilter</i> structure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">struct\nip_msfilter { <br>\nstruct in_addr imsf_multiaddr; /* IP multicast group <br>\naddress */ <br>\nstruct in_addr imsf_interface; /* IP address of local <br>\ninterface */ <br>\nuint32_t imsf_fmode; /* Filter-mode */</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">uint32_t\nimsf_numsrc; /* Number of sources in <br>\nthe following array */ <br>\nstruct in_addr imsf_slist[1]; /* Array of source <br>\naddresses */ <br>\n};</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are two\nmacros, <b>MCAST_INCLUDE</b> and <b>MCAST_EXCLUDE</b>, which\ncan be used to specify the filtering mode. Additionally, the\n<b>IP_MSFILTER_SIZE</b>(n) macro exists to determine how\nmuch memory is needed to store <i>ip_msfilter</i> structure\nwith <i>n</i> sources in the source list.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For the full\ndescription of multicast source filtering refer to RFC\n3376.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MTU</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">Retrieve the current known path\nMTU of the current socket. Returns an integer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\"><b>IP_MTU</b>\nis valid only for <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> and can be employed\nonly when the socket has been connected.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MTU_DISCOVER</b> (since\nLinux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Set or receive the Path MTU\nDiscovery setting for a socket. When enabled, Linux will\nperform Path MTU Discovery as defined in RFC&nbsp;1191 on\n<b>SOCK_STREAM</b> sockets. For non-<b>SOCK_STREAM</b>\nsockets, <b>IP_PMTUDISC_DO</b> forces the\ndon&rsquo;t-fragment flag to be set on all outgoing packets.\nIt is the user&rsquo;s responsibility to packetize the data\nin MTU-sized chunks and to do the retransmits if necessary.\nThe kernel will reject (with <b>EMSGSIZE</b>) datagrams that\nare bigger than the known path MTU. <b>IP_PMTUDISC_WANT</b>\nwill fragment a datagram if needed according to the path\nMTU, or will set the don&rsquo;t-fragment flag\notherwise.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The system-wide\ndefault can be toggled between <b>IP_PMTUDISC_WANT</b> and\n<b>IP_PMTUDISC_DONT</b> by writing (respectively, zero and\nnonzero values) to the\n<i>/proc/sys/net/ipv4/ip_no_pmtu_disc</i> file.</p>\n\n\n<p align=\"center\" style=\"margin-top: 1em\"><img src=\"grohtml-3547431.png\" alt=\"Image grohtml-3547431.png\"></p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When PMTU\ndiscovery is enabled, the kernel automatically keeps track\nof the path MTU per destination host. When it is connected\nto a specific peer with <a href=\"https://man.page/2/connect\">connect(2)</a>, the currently\nknown path MTU can be retrieved conveniently using the\n<b>IP_MTU</b> socket option (e.g., after an <b>EMSGSIZE</b>\nerror occurred). The path MTU may change over time. For\nconnectionless sockets with many destinations, the new MTU\nfor a given destination can also be accessed using the error\nqueue (see <b>IP_RECVERR</b>). A new error will be queued\nfor every incoming MTU update.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">While MTU\ndiscovery is in progress, initial packets from datagram\nsockets may be dropped. Applications using UDP should be\naware of this and not take it into account for their packet\nretransmit strategy.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To bootstrap\nthe path MTU discovery process on unconnected sockets, it is\npossible to start with a big datagram size (headers up to 64\nkilobytes long) and let it shrink by updates of the path\nMTU.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">To get an\ninitial estimate of the path MTU, connect a datagram socket\nto the destination address using <a href=\"https://man.page/2/connect\">connect(2)</a> and\nretrieve the MTU by calling <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> with the\n<b>IP_MTU</b> option.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">It is possible\nto implement RFC 4821 MTU probing with <b>SOCK_DGRAM</b> or\n<b>SOCK_RAW</b> sockets by setting a value of\n<b>IP_PMTUDISC_PROBE</b> (available since Linux 2.6.22).\nThis is also particularly useful for diagnostic tools such\nas <b>tracepath</b>(8) that wish to deliberately send probe\npackets larger than the observed Path MTU.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MULTICAST_ALL</b> (since\nLinux 2.6.31)</p>\n\n<p style=\"margin-left:22%;\">This option can be used to\nmodify the delivery policy of multicast messages to sockets\nbound to the wildcard <b>INADDR_ANY</b> address. The\nargument is a boolean integer (defaults to 1). If set to 1,\nthe socket will receive messages from all the groups that\nhave been joined globally on the whole system. Otherwise, it\nwill deliver messages only from the groups that have been\nexplicitly joined (for example via the\n<b>IP_ADD_MEMBERSHIP</b> option) on this particular\nsocket.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MULTICAST_IF</b> (since\nLinux 1.2)</p>\n\n<p style=\"margin-left:22%;\">Set the local device for a\nmulticast socket. The argument for <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> is\nan <i>ip_mreqn</i> or (since Linux 3.5) <i>ip_mreq</i>\nstructure similar to <b>IP_ADD_MEMBERSHIP</b>, or an\n<i>in_addr</i> structure. (The kernel determines which\nstructure is being passed based on the size passed in\n<i>optlen</i>.) For <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a>, the argument is an\n<i>in_addr</i> structure.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MULTICAST_LOOP</b> (since\nLinux 1.2)</p>\n\n<p style=\"margin-left:22%;\">Set or read a boolean integer\nargument that determines whether sent multicast packets\nshould be looped back to the local sockets.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_MULTICAST_TTL</b> (since\nLinux 1.2)</p>\n\n<p style=\"margin-left:22%;\">Set or read the time-to-live\nvalue of outgoing multicast packets for this socket. It is\nvery important for multicast packets to set the smallest TTL\npossible. The default is 1 which means that multicast\npackets don&rsquo;t leave the local network unless the user\nprogram explicitly requests it. Argument is an integer.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_NODEFRAG</b> (since Linux\n2.6.36)</p>\n\n<p style=\"margin-left:22%;\">If enabled (argument is\nnonzero), the reassembly of outgoing packets is disabled in\nthe netfilter layer. The argument is an integer.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This option is\nvalid only for <b>SOCK_RAW</b> sockets.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_OPTIONS</b> (since Linux\n2.0)</p>\n\n<p style=\"margin-left:22%;\">Set or get the IP options to be\nsent with every packet from this socket. The arguments are a\npointer to a memory buffer containing the options and the\noption length. The <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> call sets the IP\noptions associated with a socket. The maximum option size\nfor IPv4 is 40 bytes. See RFC&nbsp;791 for the allowed\noptions. When the initial connection request packet for a\n<b>SOCK_STREAM</b> socket contains IP options, the IP\noptions will be set automatically to the options from the\ninitial packet with routing headers reversed. Incoming\npackets are not allowed to change options after the\nconnection is established. The processing of all incoming\nsource routing options is disabled by default and can be\nenabled by using the <i>accept_source_route /proc</i>\ninterface. Other options like timestamps are still handled.\nFor datagram sockets, IP options can be set only by the\nlocal user. Calling <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> with\n<b>IP_OPTIONS</b> puts the current IP options used for\nsending into the supplied buffer.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_PASSSEC</b> (since Linux\n2.6.17)</p>\n\n<p style=\"margin-left:22%;\">If labeled IPSEC or NetLabel is\nconfigured on the sending and receiving hosts, this option\nenables receiving of the security context of the peer socket\nin an ancillary message of type <b>SCM_SECURITY</b>\nretrieved using <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>. This option is supported\nonly for UDP sockets; for TCP or SCTP sockets, see the\ndescription of the <b>SO_PEERSEC</b> option below.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The value given\nas an argument to <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> and returned as the\nresult of <a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> is an integer boolean\nflag.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The security\ncontext returned in the <b>SCM_SECURITY</b> ancillary\nmessage is of the same format as the one described under the\n<b>SO_PEERSEC</b> option below.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note: the reuse\nof the <b>SCM_SECURITY</b> message type for the\n<b>IP_PASSSEC</b> socket option was likely a mistake, since\nother IP control messages use their own numbering scheme in\nthe IP namespace and often use the socket option value as\nthe message type. There is no conflict currently since the\nIP option with the same value as <b>SCM_SECURITY</b> is\n<b>IP_HDRINCL</b> and this is never used for a control\nmessage type.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_PKTINFO</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">Pass an <b>IP_PKTINFO</b>\nancillary message that contains a <i>pktinfo</i> structure\nthat supplies some information about the incoming packet.\nThis works only for datagram oriented sockets. The argument\nis a flag that tells the socket whether the\n<b>IP_PKTINFO</b> message should be passed or not. The\nmessage itself can be sent/retrieved only as a control\nmessage with a packet using <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a> or\n<a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>.</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nin_pktinfo { <br>\nunsigned int ipi_ifindex; /* Interface index */ <br>\nstruct in_addr ipi_spec_dst; /* Local address */ <br>\nstruct in_addr ipi_addr; /* Header Destination <br>\naddress */ <br>\n};</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>ipi_ifindex</i>\nis the unique index of the interface the packet was received\non. <i>ipi_spec_dst</i> is the local address of the packet\nand <i>ipi_addr</i> is the destination address in the packet\nheader. If <b>IP_PKTINFO</b> is passed to <a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>\nand <i>ipi_spec_dst</i> is not zero, then it is used as the\nlocal source address for the routing table lookup and for\nsetting up IP source route options. When <i>ipi_ifindex</i>\nis not zero, the primary local address of the interface\nspecified by the index overwrites <i>ipi_spec_dst</i> for\nthe routing table lookup.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_RECVERR</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">Enable extended reliable error\nmessage passing. When enabled on a datagram socket, all\ngenerated errors will be queued in a per-socket error queue.\nWhen the user receives an error from a socket operation, the\nerrors can be received by calling <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a> with the\n<b>MSG_ERRQUEUE</b> flag set. The <i>sock_extended_err</i>\nstructure describing the error will be passed in an\nancillary message with the type <b>IP_RECVERR</b> and the\nlevel <b>IPPROTO_IP</b>. This is useful for reliable error\nhandling on unconnected sockets. The received data portion\nof the error queue contains the error packet.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The\n<b>IP_RECVERR</b> control message contains a\n<i>sock_extended_err</i> structure:</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">#define\nSO_EE_ORIGIN_NONE 0 <br>\n#define SO_EE_ORIGIN_LOCAL 1 <br>\n#define SO_EE_ORIGIN_ICMP 2 <br>\n#define SO_EE_ORIGIN_ICMP6 3</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct\nsock_extended_err { <br>\nuint32_t ee_errno; /* error number */ <br>\nuint8_t ee_origin; /* where the error originated */ <br>\nuint8_t ee_type; /* type */ <br>\nuint8_t ee_code; /* code */ <br>\nuint8_t ee_pad; <br>\nuint32_t ee_info; /* additional information */ <br>\nuint32_t ee_data; /* other data */ <br>\n/* More data may follow */ <br>\n};</p>\n\n<p style=\"margin-left:28%; margin-top: 1em\">struct sockaddr\n*SO_EE_OFFENDER(struct sock_extended_err *);</p>\n\n\n<p style=\"margin-left:22%; margin-top: 1em\"><i>ee_errno</i>\ncontains the <i>errno</i> number of the queued error.\n<i>ee_origin</i> is the origin code of where the error\noriginated. The other fields are protocol-specific. The\nmacro <b>SO_EE_OFFENDER</b> returns a pointer to the address\nof the network object where the error originated from given\na pointer to the ancillary message. If this address is not\nknown, the <i>sa_family</i> member of the <i>sockaddr</i>\ncontains <b>AF_UNSPEC</b> and the other fields of the\n<i>sockaddr</i> are undefined.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">IP uses the\n<i>sock_extended_err</i> structure as follows:\n<i>ee_origin</i> is set to <b>SO_EE_ORIGIN_ICMP</b> for\nerrors received as an ICMP packet, or\n<b>SO_EE_ORIGIN_LOCAL</b> for locally generated errors.\nUnknown values should be ignored. <i>ee_type</i> and\n<i>ee_code</i> are set from the type and code fields of the\nICMP header. <i>ee_info</i> contains the discovered MTU for\n<b>EMSGSIZE</b> errors. The message also contains the\n<i>sockaddr_in of the node</i> caused the error, which can\nbe accessed with the <b>SO_EE_OFFENDER</b> macro. The\n<i>sin_family</i> field of the <b>SO_EE_OFFENDER</b> address\nis <b>AF_UNSPEC</b> when the source was unknown. When the\nerror originated from the network, all IP options\n(<b>IP_OPTIONS</b>, <b>IP_TTL</b>, etc.) enabled on the\nsocket and contained in the error packet are passed as\ncontrol messages. The payload of the packet causing the\nerror is returned as normal payload. Note that TCP has no\nerror queue; <b>MSG_ERRQUEUE</b> is not permitted on\n<b>SOCK_STREAM</b> sockets. <b>IP_RECVERR</b> is valid for\nTCP, but all errors are returned by socket function return\nor <b>SO_ERROR</b> only.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For raw\nsockets, <b>IP_RECVERR</b> enables passing of all received\nICMP errors to the application, otherwise errors are\nreported only on connected sockets</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">It sets or\nretrieves an integer boolean flag. <b>IP_RECVERR</b>\ndefaults to off.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_RECVOPTS</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">Pass all incoming IP options to\nthe user in a <b>IP_OPTIONS</b> control message. The routing\nheader and other options are already filled in for the local\nhost. Not supported for <b>SOCK_STREAM</b> sockets.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_RECVORIGDSTADDR</b>\n(since Linux 2.6.29)</p>\n\n<p style=\"margin-left:22%;\">This boolean option enables the\n<b>IP_ORIGDSTADDR</b> ancillary message in\n<a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>, in which the kernel returns the original\ndestination address of the datagram being received. The\nancillary message contains a <i>struct sockaddr_in</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_RECVTOS</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">If enabled, the <b>IP_TOS</b>\nancillary message is passed with incoming packets. It\ncontains a byte which specifies the Type of\nService/Precedence field of the packet header. Expects a\nboolean integer flag.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_RECVTTL</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">When this flag is set, pass a\n<b>IP_TTL</b> control message with the time-to-live field of\nthe received packet as a 32 bit integer. Not supported for\n<b>SOCK_STREAM</b> sockets.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_RETOPTS</b> (since Linux\n2.2)</p>\n\n<p style=\"margin-left:22%;\">Identical to\n<b>IP_RECVOPTS</b>, but returns raw unprocessed options with\ntimestamp and route record options not filled in for this\nhop.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_ROUTER_ALERT</b> (since\nLinux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Pass all to-be forwarded\npackets with the IP Router Alert option set to this socket.\nValid only for raw sockets. This is useful, for instance,\nfor user-space RSVP daemons. The tapped packets are not\nforwarded by the kernel; it is the user&rsquo;s\nresponsibility to send them out again. Socket binding is\nignored, such packets are filtered only by protocol. Expects\nan integer flag.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_TOS</b> (since Linux\n1.0)</p>\n\n<p style=\"margin-left:22%;\">Set or receive the\nType-Of-Service (TOS) field that is sent with every IP\npacket originating from this socket. It is used to\nprioritize packets on the network. TOS is a byte. There are\nsome standard TOS flags defined: <b>IPTOS_LOWDELAY</b> to\nminimize delays for interactive traffic,\n<b>IPTOS_THROUGHPUT</b> to optimize throughput,\n<b>IPTOS_RELIABILITY</b> to optimize for reliability,\n<b>IPTOS_MINCOST</b> should be used for &quot;filler\ndata&quot; where slow transmission doesn&rsquo;t matter. At\nmost one of these TOS values can be specified. Other bits\nare invalid and shall be cleared. Linux sends\n<b>IPTOS_LOWDELAY</b> datagrams first by default, but the\nexact behavior depends on the configured queueing\ndiscipline. Some high-priority levels may require superuser\nprivileges (the <b>CAP_NET_ADMIN</b> capability).</p>\n\n<p style=\"margin-left:11%;\"><b>IP_TRANSPARENT</b> (since\nLinux 2.6.24)</p>\n\n<p style=\"margin-left:22%;\">Setting this boolean option\nenables transparent proxying on this socket. This socket\noption allows the calling application to bind to a nonlocal\nIP address and operate both as a client and a server with\nthe foreign address as the local endpoint. NOTE: this\nrequires that routing be set up in a way that packets going\nto the foreign address are routed through the TProxy box\n(i.e., the system hosting the application that employs the\n<b>IP_TRANSPARENT</b> socket option). Enabling this socket\noption requires superuser privileges (the\n<b>CAP_NET_ADMIN</b> capability).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">TProxy\nredirection with the iptables TPROXY target also requires\nthat this option be set on the redirected socket.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_TTL</b> (since Linux\n1.0)</p>\n\n<p style=\"margin-left:22%;\">Set or retrieve the current\ntime-to-live field that is used in every packet sent from\nthis socket.</p>\n\n<p style=\"margin-left:11%;\"><b>IP_UNBLOCK_SOURCE</b> (since\nLinux 2.4.22 / 2.5.68)</p>\n\n<p style=\"margin-left:22%;\">Unblock previously blocked\nmulticast source. Returns <b>EADDRNOTAVAIL</b> when given\nsource is not being blocked.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Argument is an\n<i>ip_mreq_source</i> structure as described under\n<b>IP_ADD_SOURCE_MEMBERSHIP</b>.</p>\n\n<p style=\"margin-left:11%;\"><b>SO_PEERSEC</b> (since Linux\n2.6.17)</p>\n\n<p style=\"margin-left:22%;\">If labeled IPSEC or NetLabel is\nconfigured on both the sending and receiving hosts, this\nread-only socket option returns the security context of the\npeer socket connected to this socket. By default, this will\nbe the same as the security context of the process that\ncreated the peer socket unless overridden by the policy or\nby a process with the required permissions.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The argument to\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> is a pointer to a buffer of the\nspecified length in bytes into which the security context\nstring will be copied. If the buffer length is less than the\nlength of the security context string, then\n<a href=\"https://man.page/2/getsockopt\">getsockopt(2)</a> returns -1, sets <i>errno</i> to\n<b>ERANGE</b>, and returns the required length via\n<i>optlen</i>. The caller should allocate at least\n<b>NAME_MAX</b> bytes for the buffer initially, although\nthis is not guaranteed to be sufficient. Resizing the buffer\nto the returned length and retrying may be necessary.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The security\ncontext string may include a terminating null character in\nthe returned length, but is not guaranteed to do so: a\nsecurity context &quot;foo&quot; might be represented as\neither {&rsquo;f&rsquo;,&rsquo;o&rsquo;,&rsquo;o&rsquo;} of\nlength 3 or\n{&rsquo;f&rsquo;,&rsquo;o&rsquo;,&rsquo;o&rsquo;,&rsquo;\\0&rsquo;}\nof length 4, which are considered to be interchangeable. The\nstring is printable, does not contain non-terminating null\ncharacters, and is in an unspecified encoding (in\nparticular, it is not guaranteed to be ASCII or UTF-8).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The use of this\noption for sockets in the <b>AF_INET</b> address family is\nsupported since Linux 2.6.17 for TCP sockets, and since\nLinux 4.17 for SCTP sockets.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For SELinux,\nNetLabel conveys only the MLS portion of the security\ncontext of the peer across the wire, defaulting the rest of\nthe security context to the values defined in the policy for\nthe netmsg initial security identifier (SID). However,\nNetLabel can be configured to pass full security contexts\nover loopback. Labeled IPSEC always passes full security\ncontexts as part of establishing the security association\n(SA) and looks them up based on the association for each\npacket.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>/proc\ninterfaces</b> <br>\nThe IP protocol supports a set of <i>/proc</i> interfaces to\nconfigure some global parameters. The parameters can be\naccessed by reading or writing files in the directory\n<i>/proc/sys/net/ipv4/</i>. Interfaces described as\n<i>Boolean</i> take an integer value, with a nonzero value\n(&quot;true&quot;) meaning that the corresponding option is\nenabled, and a zero value (&quot;false&quot;) meaning that\nthe option is disabled. <i><br>\nip_always_defrag</i> (Boolean; since Linux 2.2.13)</p>\n\n<p style=\"margin-left:22%;\">[New with kernel 2.2.13; in\nearlier kernel versions this feature was controlled at\ncompile time by the <b>CONFIG_IP_ALWAYS_DEFRAG</b> option;\nthis option is not present in 2.4.x and later]</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When this\nboolean flag is enabled (not equal 0), incoming fragments\n(parts of IP packets that arose when some host between\norigin and destination decided that the packets were too\nlarge and cut them into pieces) will be reassembled\n(defragmented) before being processed, even if they are\nabout to be forwarded.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Enable only if\nrunning either a firewall that is the sole link to your\nnetwork or a transparent proxy; never ever use it for a\nnormal router or host. Otherwise, fragmented communication\ncan be disturbed if the fragments travel over different\nlinks. Defragmentation also has a large memory and CPU time\ncost.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This is\nautomagically turned on when masquerading or transparent\nproxying are configured.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_autoconfig</i> (since\nLinux 2.2 to 2.6.17)</p>\n\n<p style=\"margin-left:22%;\">Not documented.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_default_ttl</i> (integer;\ndefault: 64; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">Set the default time-to-live\nvalue of outgoing packets. This can be changed per socket\nwith the <b>IP_TTL</b> option.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_dynaddr</i> (Boolean;\ndefault: disabled; since Linux 2.0.31)</p>\n\n<p style=\"margin-left:22%;\">Enable dynamic socket address\nand masquerading entry rewriting on interface address\nchange. This is useful for dialup interface with changing IP\naddresses. 0 means no rewriting, 1 turns it on and 2 enables\nverbose mode.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_forward</i> (Boolean;\ndefault: disabled; since Linux 1.2)</p>\n\n<p style=\"margin-left:22%;\">Enable IP forwarding with a\nboolean flag. IP forwarding can be also set on a\nper-interface basis.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_local_port_range</i>\n(since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">This file contains two integers\nthat define the default local port range allocated to\nsockets that are not explicitly bound to a port\nnumber&mdash;that is, the range used for <i>ephemeral\nports</i>. An ephemeral port is allocated to a socket in the\nfollowing circumstances:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>the port number in a socket address is specified as 0\nwhen calling <a href=\"https://man.page/2/bind\">bind(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/listen\">listen(2)</a> is called on a stream socket that was\nnot previously bound;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/connect\">connect(2)</a> was called on a socket that was not\npreviously bound;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p><a href=\"https://man.page/2/sendto\">sendto(2)</a> is called on a datagram socket that was\nnot previously bound.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Allocation of\nephemeral ports starts with the first number in\n<i>ip_local_port_range</i> and ends with the second number.\nIf the range of ephemeral ports is exhausted, then the\nrelevant system call returns an error (but see BUGS).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that the\nport range in <i>ip_local_port_range</i> should not conflict\nwith the ports used by masquerading (although the case is\nhandled). Also, arbitrary choices may cause problems with\nsome firewall packet filters that make assumptions about the\nlocal ports in use. The first number should be at least\ngreater than 1024, or better, greater than 4096, to avoid\nclashes with well known ports and to minimize firewall\nproblems.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_no_pmtu_disc</i>\n(Boolean; default: disabled; since Linux 2.2)</p>\n\n<p style=\"margin-left:22%;\">If enabled, don&rsquo;t do Path\nMTU Discovery for TCP sockets by default. Path MTU discovery\nmay fail if misconfigured firewalls (that drop all ICMP\npackets) or misconfigured interfaces (e.g., a point-to-point\nlink where the both ends don&rsquo;t agree on the MTU) are\non the path. It is better to fix the broken routers on the\npath than to turn off Path MTU Discovery globally, because\nnot doing it incurs a high cost to the network.</p>\n\n<p style=\"margin-left:11%;\"><i>ip_nonlocal_bind</i>\n(Boolean; default: disabled; since Linux 2.4)</p>\n\n<p style=\"margin-left:22%;\">If set, allows processes to\n<a href=\"https://man.page/2/bind\">bind(2)</a> to nonlocal IP addresses, which can be quite\nuseful, but may break some applications.</p>\n\n<p style=\"margin-left:11%;\"><i>ip6frag_time</i> (integer;\ndefault: 30)</p>\n\n<p style=\"margin-left:22%;\">Time in seconds to keep an IPv6\nfragment in memory.</p>\n\n<p style=\"margin-left:11%;\"><i>ip6frag_secret_interval</i>\n(integer; default: 600)</p>\n\n<p style=\"margin-left:22%;\">Regeneration interval (in\nseconds) of the hash secret (or lifetime for the hash\nsecret) for IPv6 fragments.</p>\n\n<p style=\"margin-left:11%;\"><i>ipfrag_high_thresh</i>\n(integer), <i>ipfrag_low_thresh</i> (integer)</p>\n\n<p style=\"margin-left:22%;\">If the amount of queued IP\nfragments reaches <i>ipfrag_high_thresh</i>, the queue is\npruned down to <i>ipfrag_low_thresh</i>. Contains an integer\nwith the number of bytes.</p>\n\n<p style=\"margin-left:11%;\"><i>neigh/*</i></p>\n\n<p style=\"margin-left:22%;\">See <a href=\"https://man.page/7/arp\">arp(7)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Ioctls</b>\n<br>\nAll ioctls described in <a href=\"https://man.page/7/socket\">socket(7)</a> apply to\n<b>ip</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Ioctls to\nconfigure generic device parameters are described in\n<a href=\"https://man.page/7/netdevice\">netdevice(7)</a>.</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>EACCES</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">The user tried to execute an\noperation without the necessary permissions. These include:\nsending a packet to a broadcast address without having the\n<b>SO_BROADCAST</b> flag set; sending a packet via a\n<i>prohibit</i> route; modifying firewall settings without\nsuperuser privileges (the <b>CAP_NET_ADMIN</b> capability);\nbinding to a privileged port without superuser privileges\n(the <b>CAP_NET_BIND_SERVICE</b> capability).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EADDRINUSE</b></p>\n\n<p style=\"margin-left:22%;\">Tried to bind to an address\nalready in use.</p>\n\n<p style=\"margin-left:11%;\"><b>EADDRNOTAVAIL</b></p>\n\n<p style=\"margin-left:22%;\">A nonexistent interface was\nrequested or the requested source address was not local.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EAGAIN</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"70%\">\n\n\n<p>Operation on a nonblocking socket would block.</p></td>\n<td width=\"8%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EALREADY</b></p>\n\n<p style=\"margin-left:22%;\">A connection operation on a\nnonblocking socket is already in progress.</p>\n\n<p style=\"margin-left:11%;\"><b>ECONNABORTED</b></p>\n\n<p style=\"margin-left:22%;\">A connection was closed during\nan <a href=\"https://man.page/2/accept\">accept(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>EHOSTUNREACH</b></p>\n\n<p style=\"margin-left:22%;\">No valid routing table entry\nmatches the destination address. This error can be caused by\nan ICMP message from a remote router or for the local\nrouting table.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>EINVAL</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Invalid argument passed. For send operations this can be\ncaused by sending to a <i>blackhole</i> route.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>EISCONN</b></p>\n\n<p style=\"margin-left:22%;\"><a href=\"https://man.page/2/connect\">connect(2)</a> was called on\nan already connected socket.</p>\n\n<p style=\"margin-left:11%;\"><b>EMSGSIZE</b></p>\n\n<p style=\"margin-left:22%;\">Datagram is bigger than an MTU\non the path and it cannot be fragmented.</p>\n\n<p style=\"margin-left:11%;\"><b>ENOBUFS</b>,\n<b>ENOMEM</b></p>\n\n<p style=\"margin-left:22%;\">Not enough free memory. This\noften means that the memory allocation is limited by the\nsocket buffer limits, not by the system memory, but this is\nnot 100% consistent.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOENT</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p><b>SIOCGSTAMP</b> was called on a socket where no packet\narrived.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>ENOPKG</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>A kernel subsystem was not configured.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ENOPROTOOPT</b> and\n<b>EOPNOTSUPP</b></p>\n\n<p style=\"margin-left:22%;\">Invalid socket option\npassed.</p>\n\n<p style=\"margin-left:11%;\"><b>ENOTCONN</b></p>\n\n<p style=\"margin-left:22%;\">The operation is defined only\non a connected socket, but the socket wasn&rsquo;t\nconnected.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPERM</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>User doesn&rsquo;t have permission to set high priority,\nchange configuration, or send signals to the requested\nprocess or group.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>EPIPE</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>The connection was unexpectedly closed or shut down by\nthe other end.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>ESOCKTNOSUPPORT</b></p>\n\n<p style=\"margin-left:22%;\">The socket is not configured or\nan unknown socket type was requested.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Other errors\nmay be generated by the overlaying protocols; see\n<a href=\"https://man.page/7/tcp\">tcp(7)</a>, <a href=\"https://man.page/7/raw\">raw(7)</a>, <a href=\"https://man.page/7/udp\">udp(7)</a>, and\n<a href=\"https://man.page/7/socket\">socket(7)</a>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>IP_FREEBIND</b>,\n<b>IP_MSFILTER</b>, <b>IP_MTU</b>, <b>IP_MTU_DISCOVER</b>,\n<b>IP_RECVORIGDSTADDR</b>, <b>IP_PASSSEC</b>,\n<b>IP_PKTINFO</b>, <b>IP_RECVERR</b>,\n<b>IP_ROUTER_ALERT</b>, and <b>IP_TRANSPARENT</b> are\nLinux-specific.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Be very careful\nwith the <b>SO_BROADCAST</b> option - it is not privileged\nin Linux. It is easy to overload the network with careless\nbroadcasts. For new application protocols it is better to\nuse a multicast group instead of broadcasting. Broadcasting\nis discouraged.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some other BSD\nsockets implementations provide <b>IP_RCVDSTADDR</b> and\n<b>IP_RECVIF</b> socket options to get the destination\naddress and the interface of received datagrams. Linux has\nthe more general <b>IP_PKTINFO</b> for the same task.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some BSD\nsockets implementations also provide an <b>IP_RECVTTL</b>\noption, but an ancillary message with type <b>IP_RECVTTL</b>\nis passed with the incoming packet. This is different from\nthe <b>IP_TTL</b> option used in Linux.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using the\n<b>SOL_IP</b> socket options level isn&rsquo;t portable;\nBSD-based stacks use the <b>IPPROTO_IP</b> level.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>INADDR_ANY</b>\n(0.0.0.0) and <b>INADDR_BROADCAST</b> (255.255.255.255) are\nbyte-order-neutral. <br>\nThis means <a href=\"https://man.page/3/htonl\">htonl(3)</a> has no effect on them.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Compatibility</b>\n<br>\nFor compatibility with Linux 2.0, the obsolete\n<b>socket(AF_INET, SOCK_PACKET,</b> <i>protocol</i><b>)</b>\nsyntax is still supported to open a <a href=\"https://man.page/7/packet\">packet(7)</a> socket.\nThis is deprecated and should be replaced by\n<b>socket(AF_PACKET, SOCK_RAW,</b> <i>protocol</i><b>)</b>\ninstead. The main difference is the new <i>sockaddr_ll</i>\naddress structure for generic link layer information instead\nof the old <b>sockaddr_pkt</b>.</p>\n\n<h2>BUGS\n<a name=\"BUGS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are too\nmany inconsistent error values.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The error used\nto diagnose exhaustion of the ephemeral port range differs\nacross the various system calls (<a href=\"https://man.page/2/connect\">connect(2)</a>,\n<a href=\"https://man.page/2/bind\">bind(2)</a>, <a href=\"https://man.page/2/listen\">listen(2)</a>, <a href=\"https://man.page/2/sendto\">sendto(2)</a>) that can\nassign ephemeral ports.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The ioctls to\nconfigure IP-specific interface options and ARP tables are\nnot described.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Receiving the\noriginal destination address with <b>MSG_ERRQUEUE</b> in\n<i>msg_name</i> by <a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a> does not work in some\n2.2 kernels.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/recvmsg\">recvmsg(2)</a>,\n<a href=\"https://man.page/2/sendmsg\">sendmsg(2)</a>, <a href=\"https://man.page/3/byteorder\">byteorder(3)</a>,\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>, <a href=\"https://man.page/7/icmp\">icmp(7)</a>, <a href=\"https://man.page/7/ipv6\">ipv6(7)</a>,\n<a href=\"https://man.page/7/netdevice\">netdevice(7)</a>, <a href=\"https://man.page/7/netlink\">netlink(7)</a>, <a href=\"https://man.page/7/raw\">raw(7)</a>,\n<a href=\"https://man.page/7/socket\">socket(7)</a>, <a href=\"https://man.page/7/tcp\">tcp(7)</a>, <a href=\"https://man.page/7/udp\">udp(7)</a>,\n<b>ip</b>(8)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The kernel\nsource file\n<i>Documentation/networking/ip-sysctl.txt</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">RFC&nbsp;791\nfor the original IP specification. RFC&nbsp;1122 for the\nIPv4 host requirements. RFC&nbsp;1812 for the IPv4 router\nrequirements.</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#BUGS\">BUGS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}