{"name":"systemd.offline-updates","description":"systemd.offline-updates - Implementation of offline updates in systemd","body":"\n\n<h1 align=\"center\">SYSTEMD.OFFLINE-UPDATES</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd.offline-updates\n- Implementation of offline updates in systemd</p>\n\n<h2>IMPLEMENTING OFFLINE SYSTEM UPDATES\n<a name=\"IMPLEMENTING OFFLINE SYSTEM UPDATES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This man page\ndescribes how to implement &quot;offline&quot; system\nupdates with systemd. By &quot;offline&quot; OS updates we\nmean package installations and updates that are run with the\nsystem booted into a special system update mode, in order to\navoid problems related to conflicts of libraries and\nservices that are currently running with those on disk. This\ndocument is inspired by this <b><font color=\"#0000FF\">GNOME\ndesign whiteboard</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nlogic:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nThe package manager prepares system updates by downloading\nall (.rpm or .deb or whatever) packages to update off-line\nin a special directory /var/lib/system-update (or another\ndirectory of the package/upgrade manager's\nchoice).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nWhen the user OK'ed the update, the symlink /system-update\nis created that points to /var/lib/system-update (or\nwherever the directory with the upgrade files is located)\nand the system is rebooted. This symlink is in the root\ndirectory, since we need to check for it very early at boot,\nat a time where /var/ is not available yet.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nVery early in the new boot\n<b>systemd-system-update-generator</b>(8) checks whether\n/system-update exists. If so, it (temporarily and for this\nboot only) redirects (i.e. symlinks) default.target to\nsystem-update.target, a special target that pulls in the\nbase system (i.e. sysinit.target, so that all file systems\nare mounted but little else) and the system update\nunits.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">4.\nThe system now continues to boot into default.target, and\nthus into system-update.target. This target pulls in all\nsystem update units. Only one service should perform an\nupdate (see the next point), and all the other ones should\nexit cleanly with a &quot;success&quot; return code and\nwithout doing anything. Update services should be ordered\nafter sysinit.target so that the update starts after all\nfile systems have been mounted.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">5.\nAs the first step, an update service should check if the\n/system-update symlink points to the location used by that\nupdate service. In case it does not exist or points to a\ndifferent location, the service must exit without error. It\nis possible for multiple update services to be installed,\nand for multiple update services to be launched in parallel,\nand only the one that corresponds to the tool that\n<i>created</i> the symlink before reboot should perform any\nactions. It is unsafe to run multiple updates in\nparallel.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">6.\nThe update service should now do its job. If applicable and\npossible, it should create a file system snapshot, then\ninstall all packages. After completion (regardless whether\nthe update succeeded or failed) the machine must be\nrebooted, for example by calling <b>systemctl reboot</b>. In\naddition, on failure the script should revert to the old\nfile system snapshot (without the symlink).</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">7.\nThe update scripts should exit only after the update is\nfinished. It is expected that the service which performs the\nupdate will cause the machine to reboot after it is done. If\nthe system-update.target is successfully reached, i.e. all\nupdate services have run, and the /system-update symlink\nstill exists, it will be removed and the machine rebooted as\na safety measure.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">8.\nAfter a reboot, now that the /system-update symlink is gone,\nthe generator won't redirect default.target anymore and the\nsystem now boots into the default target again.</font></p>\n\n<h2>RECOMMENDATIONS\n<a name=\"RECOMMENDATIONS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nTo make things a bit more robust we recommend hooking the\nupdate script into system-update.target via a .wants/\nsymlink in the distribution package, rather than depending\non <b>systemctl enable</b> in the postinst scriptlets of\nyour package. More specifically, for your update script\ncreate a .service file, without [Install] section, and then\nadd a symlink like\n/lib/systemd/system/system-update.target.wants/foobar.service\n&acirc; ../foobar.service to your package.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nMake sure to remove the /system-update symlink as early as\npossible in the update script to avoid reboot loops in case\nthe update fails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nUse <i>FailureAction=reboot</i> in the service file for your\nupdate script to ensure that a reboot is automatically\ntriggered if the update fails. <i>FailureAction=</i> makes\nsure that the specified unit is activated if your script\nexits uncleanly (by non-zero error code, or\nsignal/coredump). If your script succeeds you should trigger\nthe reboot in your own code, for example by invoking\nlogind's <b>Reboot()</b> call or calling <b>systemctl\nreboot</b>. See <b>org.freedesktop.login1</b>(5) for details\nabout the logind D-Bus API.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">4.\nThe update service should declare\n<i>DefaultDependencies=no</i>,\n<i>Requires=sysinit.target</i>, <i>After=sysinit.target</i>,\n<i>After=system-update-pre.target</i>,\n<i>Before=system-update.target</i> and explicitly pull in\nany other services it requires.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">5.\nIt may be desirable to always run an auxiliary unit when\nbooting into offline-updates mode, which itself does not\ninstall updates. To do this create a .service file with\n<i>Wants=system-update-pre.target</i> and\n<i>Before=system-update-pre.target</i> and add a symlink to\nthat file under /lib/systemd/system-update.target.wants\n.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/systemd\">systemd(1)</a>,\n<b>systemd.generator</b>(7),\n<b>systemd-system-update-generator</b>(8),\n<b>dnf.plugin.system-upgrade</b>(8)</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"35%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">GNOME\ndesign whiteboard</font></p></td>\n<td width=\"48%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://wiki.gnome.org/Design/OS/SoftwareUpdates</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#IMPLEMENTING OFFLINE SYSTEM UPDATES\">IMPLEMENTING OFFLINE SYSTEM UPDATES</a>","<a href=\"#RECOMMENDATIONS\">RECOMMENDATIONS</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}