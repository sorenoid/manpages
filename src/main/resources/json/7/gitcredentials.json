{"name":"gitcredentials","body":"\n\n<h1 align=\"center\">GITCREDENTIALS</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitcredentials\n- Providing usernames and passwords to Git</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">git config\ncredential.https://example.com.username myusername <br>\ngit config credential.helper &quot;$helper\n$options&quot;</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git will\nsometimes need credentials from the user in order to perform\noperations; for example, it may need to ask for a username\nand password in order to access a remote repository over\nHTTP. This manual describes the mechanisms Git uses to\nrequest these credentials, as well as some features to avoid\ninputting these credentials repeatedly.</p>\n\n<h2>REQUESTING CREDENTIALS\n<a name=\"REQUESTING CREDENTIALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Without any\ncredential helpers defined, Git will try the following\nstrategies to ask the user for usernames and passwords:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. If the\n<b>GIT_ASKPASS</b> environment variable is set, the program\nspecified by the variable is invoked. A suitable prompt is\nprovided to the program on the command line, and the\nuser&rsquo;s input is read from its standard output.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Otherwise,\nif the <b>core.askPass</b> configuration variable is set,\nits value is used as above.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Otherwise,\nif the <b>SSH_ASKPASS</b> environment variable is set, its\nvalue is used as above.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">4. Otherwise,\nthe user is prompted on the terminal.</p>\n\n<h2>AVOIDING REPETITION\n<a name=\"AVOIDING REPETITION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">It can be\ncumbersome to input the same credentials over and over. Git\nprovides two methods to reduce this annoyance:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Static\nconfiguration of usernames for a given authentication\ncontext.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Credential\nhelpers to cache or store passwords, or to interact with a\nsystem password wallet or keychain.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first is\nsimple and appropriate if you do not have secure storage\navailable for a password. It is generally configured by\nadding this to your config:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[credential\n&quot;https://example.com&quot;] <br>\nusername = me</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Credential\nhelpers, on the other hand, are external programs from which\nGit can request both usernames and passwords; they typically\ninterface with secure storage provided by the OS or other\nprograms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To use a\nhelper, you must first select one to use. Git currently\nincludes the following helpers:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">cache</p>\n\n<p style=\"margin-left:17%;\">Cache credentials in memory for\na short period of time. See <a href=\"https://man.page/1/git-credential-cache\">git-credential-cache(1)</a>\nfor details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">store</p>\n\n<p style=\"margin-left:17%;\">Store credentials indefinitely\non disk. See <a href=\"https://man.page/1/git-credential-store\">git-credential-store(1)</a> for details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You may also\nhave third-party helpers installed; search for\n<b>credential-*</b> in the output of <b>git help -a</b>, and\nconsult the documentation of individual helpers. Once you\nhave selected a helper, you can tell Git to use it by\nputting its name into the credential.helper variable.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. Find a\nhelper.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git help -a |\ngrep credential- <br>\ncredential-foo</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Read its\ndescription.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git help\ncredential-foo</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Tell Git to\nuse it.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git config\n--global credential.helper foo</p>\n\n<h2>CREDENTIAL CONTEXTS\n<a name=\"CREDENTIAL CONTEXTS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git considers\neach credential to have a context defined by a URL. This\ncontext is used to look up context-specific configuration,\nand is passed to any helpers, which may use it as an index\ninto secure storage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For instance,\nimagine we are accessing <b>https://example.com/foo.git</b>.\nWhen Git looks into a config file to see if a section\nmatches this context, it will consider the two a match if\nthe context is a more-specific subset of the pattern in the\nconfig file. For example, if you have this in your config\nfile:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[credential\n&quot;https://example.com&quot;] <br>\nusername = foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">then we will\nmatch: both protocols are the same, both hosts are the same,\nand the &quot;pattern&quot; URL does not care about the path\ncomponent at all. However, this context would not match:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">[credential\n&quot;https://kernel.org&quot;] <br>\nusername = foo</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">because the\nhostnames differ. Nor would it match <b>foo.example.com</b>;\nGit compares hostnames exactly, without considering whether\ntwo hosts are part of the same domain. Likewise, a config\nentry for <b>http://example.com</b> would not match: Git\ncompares the protocols exactly. However, you may use\nwildcards in the domain name and other pattern matching\ntechniques as with the <b>http.&lt;url&gt;.*</b>\noptions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n&quot;pattern&quot; URL does include a path component, then\nthis too must match exactly: the context\n<b>https://example.com/bar/baz.git</b> will match a config\nentry for <b>https://example.com/bar/baz.git</b> (in\naddition to matching the config entry for\n<b>https://example.com</b>) but will not match a config\nentry for <b>https://example.com/bar</b>.</p>\n\n<h2>CONFIGURATION OPTIONS\n<a name=\"CONFIGURATION OPTIONS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Options for a\ncredential context can be configured either in\n<b>credential.*</b> (which applies to all credentials), or\n<b>credential.&lt;url&gt;.*</b>, where &lt;url&gt; matches\nthe context as described above.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\noptions are available in either location:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">helper</p>\n\n<p style=\"margin-left:17%;\">The name of an external\ncredential helper, and any associated options. If the helper\nname is not an absolute path, then the string <b>git\ncredential-</b> is prepended. The resulting string is\nexecuted by the shell (so, for example, setting this to\n<b>foo --option=bar</b> will execute <b>git credential-foo\n--option=bar</b> via the shell. See the manual of specific\nhelpers for examples of their use.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If there are\nmultiple instances of the <b>credential.helper</b>\nconfiguration variable, each helper will be tried in turn,\nand may provide a username, password, or nothing. Once Git\nhas acquired both a username and a password, no more helpers\nwill be tried.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If\n<b>credential.helper</b> is configured to the empty string,\nthis resets the helper list to empty (so you may override a\nhelper set by a lower-priority config file by configuring\nthe empty-string helper, followed by whatever set of helpers\nyou would like).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">username</p>\n\n<p style=\"margin-left:17%;\">A default username, if one is\nnot provided in the URL.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">useHttpPath</p>\n\n<p style=\"margin-left:17%;\">By default, Git does not\nconsider the &quot;path&quot; component of an http URL to be\nworth matching via external helpers. This means that a\ncredential stored for <b>https://example.com/foo.git</b>\nwill also be used for <b>https://example.com/bar.git</b>. If\nyou do want to distinguish these cases, set this option to\n<b>true</b>.</p>\n\n<h2>CUSTOM HELPERS\n<a name=\"CUSTOM HELPERS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can write\nyour own custom helpers to interface with any system in\nwhich you keep credentials.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Credential\nhelpers are programs executed by Git to fetch or save\ncredentials from and to long-term storage (where\n&quot;long-term&quot; is simply longer than a single Git\nprocess; e.g., credentials may be stored in-memory for a few\nminutes, or indefinitely on disk).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each helper is\nspecified by a single string in the configuration variable\n<b>credential.helper</b> (and others, see\n<a href=\"https://man.page/1/git-config\">git-config(1)</a>). The string is transformed by Git into\na command to be executed using these rules:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1. If the\nhelper string begins with &quot;!&quot;, it is considered a\nshell snippet, and everything after the &quot;!&quot;\nbecomes the command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2. Otherwise,\nif the helper string begins with an absolute path, the\nverbatim helper string becomes the command.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3. Otherwise,\nthe string &quot;git credential-&quot; is prepended to the\nhelper string, and the result becomes the command.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The resulting\ncommand then has an &quot;operation&quot; argument appended\nto it (see below for details), and the result is executed by\nthe shell.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here are some\nexample specifications:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># run &quot;git\ncredential-foo&quot; <br>\n[credential] <br>\nhelper = foo</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># same as\nabove, but pass an argument to the helper <br>\n[credential] <br>\nhelper = &quot;foo --bar=baz&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># the arguments\nare parsed by the shell, so use shell <br>\n# quoting if necessary <br>\n[credential] <br>\nhelper = &quot;foo --bar='whitespace arg'&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># you can also\nuse an absolute path, which will not use the git wrapper\n<br>\n[credential] <br>\nhelper = &quot;/path/to/my/helper --with-arguments&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># or you can\nspecify your own shell snippet <br>\n[credential &quot;https://example.com&quot;] <br>\nusername = your_user <br>\nhelper = &quot;!f() { test \\&quot;$1\\&quot; = get &amp;&amp;\necho \\&quot;password=$(cat $HOME/.secret)\\&quot;; };\nf&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generally\nspeaking, rule (3) above is the simplest for users to\nspecify. Authors of credential helpers should make an effort\nto assist their users by naming their program\n&quot;git-credential-$NAME&quot;, and putting it in the\n<b>$PATH</b> or <b>$GIT_EXEC_PATH</b> during installation,\nwhich will allow a user to enable it with <b>git config\ncredential.helper $NAME</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a helper\nis executed, it will have one &quot;operation&quot; argument\nappended to its command line, which is one of:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>get</b></p>\n\n<p style=\"margin-left:17%;\">Return a matching credential,\nif any exists.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>store</b></p>\n\n<p style=\"margin-left:17%;\">Store the credential, if\napplicable to the helper.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>erase</b></p>\n\n<p style=\"margin-left:17%;\">Remove a matching credential,\nif any, from the helper&rsquo;s storage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The details of\nthe credential will be provided on the helper&rsquo;s stdin\nstream. The exact format is the same as the input/output\nformat of the <b>git credential</b> plumbing command (see\nthe section <b>INPUT/OUTPUT FORMAT</b> in\n<a href=\"https://man.page/1/git-credential\">git-credential(1)</a> for a detailed specification).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\n<b>get</b> operation, the helper should produce a list of\nattributes on stdout in the same format (see\n<a href=\"https://man.page/1/git-credential\">git-credential(1)</a> for common attributes). A helper is\nfree to produce a subset, or even no values at all if it has\nnothing useful to provide. Any provided attributes will\noverwrite those already known about by Git&rsquo;s\ncredential subsystem.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">While it is\npossible to override all attributes, well behaving helpers\nshould refrain from doing so for any attribute other than\nusername and password.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a helper\noutputs a <b>quit</b> attribute with a value of <b>true</b>\nor <b>1</b>, no further helpers will be consulted, nor will\nthe user be prompted (if no credential has been provided,\nthe operation will then fail).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Similarly, no\nmore helpers will be consulted once both username and\npassword had been provided.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For a\n<b>store</b> or <b>erase</b> operation, the helper&rsquo;s\noutput is ignored.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a helper\nfails to perform the requested operation or needs to notify\nthe user of a potential issue, it may write to stderr.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If it does not\nsupport the requested operation (e.g., a read-only store),\nit should silently ignore the request.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a helper\nreceives any other operation, it should silently ignore the\nrequest. This leaves room for future operations to be added\n(older helpers will just ignore the new requests).</p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Part of the\n<a href=\"https://man.page/1/git\">git(1)</a> suite</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#REQUESTING CREDENTIALS\">REQUESTING CREDENTIALS</a>","<a href=\"#AVOIDING REPETITION\">AVOIDING REPETITION</a>","<a href=\"#CREDENTIAL CONTEXTS\">CREDENTIAL CONTEXTS</a>","<a href=\"#CONFIGURATION OPTIONS\">CONFIGURATION OPTIONS</a>","<a href=\"#CUSTOM HELPERS\">CUSTOM HELPERS</a>","<a href=\"#GIT\">GIT</a>"],"level":7}