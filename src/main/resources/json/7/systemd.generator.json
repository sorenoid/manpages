{"name":"systemd.generator","body":"\n\n<h1 align=\"center\">SYSTEMD.GENERATOR</h1>\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd.generator\n- systemd unit generators</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\"><b>/path/to/generator</b>\n<i>normal-dir early-dir late-dir</i></p></td>\n<td width=\"15%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/run/systemd/system-generators/*\n<br>\n/etc/systemd/system-generators/* <br>\n/usr/local/lib/systemd/system-generators/* <br>\n/lib/systemd/system-generators/*</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/run/systemd/user-generators/*\n<br>\n/etc/systemd/user-generators/* <br>\n/usr/local/lib/systemd/user-generators/* <br>\n/usr/lib/systemd/user-generators/*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generators are\nsmall executables placed in /lib/systemd/system-generators/\nand other directories listed above. <a href=\"https://man.page/1/systemd\">systemd(1)</a> will\nexecute these binaries very early at bootup and at\nconfiguration reload time &mdash; before unit files are\nloaded. Their main purpose is to convert configuration that\nis not native to the service manager into dynamically\ngenerated unit files, symlinks or unit file drop-ins, so\nthat they can extend the unit file hierarchy the service\nmanager subsequently loads and operates on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each generator\nis called with three directory paths that are to be used for\ngenerator output. In these three directories, generators may\ndynamically generate unit files (regular ones, instances, as\nwell as templates), unit file .d/ drop-ins, and create\nsymbolic links to unit files to add additional dependencies,\ncreate aliases, or instantiate existing templates. Those\ndirectories are included in the unit load path of\n<a href=\"https://man.page/1/systemd\">systemd(1)</a>, allowing generated configuration to\nextend or override existing definitions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Directory paths\nfor generator output differ by priority: .../generator.early\nhas priority higher than the admin configuration in /etc/,\nwhile .../generator has lower priority than /etc/ but higher\nthan vendor configuration in /usr/, and .../generator.late\nhas priority lower than all other configuration. See the\nnext section and the discussion of unit load paths and unit\noverriding in <b>systemd.unit</b>(5).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generators are\nloaded from a set of paths determined during compilation, as\nlisted above. System and user generators are loaded from\ndirectories with names ending in system-generators/ and\nuser-generators/, respectively. Generators found in\ndirectories listed earlier override the ones with the same\nname in directories lower in the list. A symlink to\n/dev/null or an empty file can be used to mask a generator,\nthereby preventing it from running. Please note that the\norder of the two directories with the highest priority is\nreversed with respect to the unit load path, and generators\nin /run/ overwrite those in /etc/.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After\ninstalling new generators or updating the configuration,\n<b>systemctl daemon-reload</b> may be executed. This will\ndelete the previous configuration created by generators,\nre-run all generators, and cause <b>systemd</b> to reload\nunits from disk. See <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for more\ninformation.</p>\n\n<h2>OUTPUT DIRECTORIES\n<a name=\"OUTPUT DIRECTORIES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generators are\ninvoked with three arguments: paths to directories where\ngenerators can place their generated unit files or symlinks.\nBy default those paths are runtime directories that are\nincluded in the search path of <b>systemd</b>, but a\ngenerator may be called with different paths for debugging\npurposes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">1.\n<i>normal-dir</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In normal use\nthis is /run/systemd/generator in case of the system\ngenerators and $XDG_RUNTIME_DIR/generator in case of the\nuser generators. Unit files placed in this directory take\nprecedence over vendor unit configuration but not over\nnative user/administrator unit configuration.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">2.\n<i>early-dir</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In normal use\nthis is /run/systemd/generator.early in case of the system\ngenerators and $XDG_RUNTIME_DIR/generator.early in case of\nthe user generators. Unit files placed in this directory\noverride unit files in /usr/, /run/ and /etc/. This means\nthat unit files placed in this directory take precedence\nover all normal configuration, both vendor and\nuser/administrator.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">3.\n<i>late-dir</i></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In normal use\nthis is /run/systemd/generator.late in case of the system\ngenerators and $XDG_RUNTIME_DIR/generator.late in case of\nthe user generators. This directory may be used to extend\nthe unit file tree without overriding any other unit files.\nAny native configuration files supplied by the vendor or\nuser/administrator take precedence.</p>\n\n<h2>NOTES ABOUT WRITING GENERATORS\n<a name=\"NOTES ABOUT WRITING GENERATORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; All\ngenerators are executed in parallel. That means all\nexecutables are started at the very same time and need to be\nable to cope with this parallelism.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nGenerators are run very early at boot and cannot rely on any\nexternal services. They may not talk to any other process.\nThat includes simple things such as logging to\n<a href=\"https://man.page/3/syslog\">syslog(3)</a>, or <b>systemd</b> itself (this means: no\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a>)! Non-essential file systems like /var/\nand /home/ are mounted after generators have run. Generators\ncan however rely on the most basic kernel functionality to\nbe available, as well as mounted /sys/, /proc/, /dev/, /usr/\nand /run/ file systems.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Units\nwritten by generators are removed when the configuration is\nreloaded. That means the lifetime of the generated units is\nclosely bound to the reload cycles of <b>systemd</b>\nitself.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nGenerators should only be used to generate unit files,\n.d/*.conf drop-ins for them and symlinks to them, not any\nother kind of non-unit related configuration. Due to the\nlifecycle logic mentioned above, generators are not a good\nfit to generate dynamic configuration for other services. If\nyou need to generate dynamic configuration for other\nservices, do so in normal services you order before the\nservice in question.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that using\nthe <i>StandardInputData=</i>/<i>StandardInputText=</i>\nsettings of service unit files (see <b>systemd.exec</b>(5)),\nit is possible to make arbitrary input data (including\ndaemon-specific configuration) part of the unit definitions,\nwhich often might be sufficient to embed data or\nconfiguration for other programs into unit files in a native\nfashion.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Since\n<a href=\"https://man.page/3/syslog\">syslog(3)</a> is not available (see above), log messages\nhave to be written to /dev/kmsg instead.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; The\ngenerator should always include its own name in a comment at\nthe top of the generated file, so that the user can easily\nfigure out which component created or amended a particular\nunit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">The\n<i>SourcePath=</i> directive should be used in generated\nfiles to specify the source configuration file they are\ngenerated from. This makes things more easily understood by\nthe user and also has the benefit that systemd can warn the\nuser about configuration files that changed on disk but have\nnot been read yet by systemd. The <i>SourcePath=</i> value\ndoes not have to be a file in a physical filesystem. For\nexample, in the common case of the generator looking at the\nkernel command line, <b>SourcePath=/proc/cmdline</b> should\nbe used.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nGenerators may write out dynamic unit files or just hook\nunit files into other units with the usual .wants/ or\n.requires/ symlinks. Often, it is nicer to simply\ninstantiate a template unit file from /usr/ with a generator\ninstead of writing out entirely dynamic unit files. Of\ncourse, this works only if a single parameter is to be\nused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; If you\nare careful, you can implement generators in shell scripts.\nWe do recommend C code however, since generators are\nexecuted synchronously and hence delay the entire boot if\nthey are slow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nRegarding overriding semantics: there are two rules we try\nto follow when thinking about the overriding semantics:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">1. User\nconfiguration should override vendor configuration. This\n(mostly) means that stuff from /etc/ should override stuff\nfrom /usr/.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">2. Native\nconfiguration should override non-native configuration. This\n(mostly) means that stuff you generate should never override\nnative unit files for the same purpose.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Of these two\nrules the first rule is probably the more important one and\nbreaks the second one sometimes. Hence, when deciding\nwhether to use argv[1], argv[2], or argv[3], your default\nchoice should probably be argv[1].</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Instead\nof heading off now and writing all kind of generators for\nlegacy configuration file formats, please think twice! It is\noften a better idea to just deprecate old stuff instead of\nkeeping it artificially alive.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;1.&nbsp;systemd-fstab-generator</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-fstab-generator</b>(8)\nconverts /etc/fstab into native mount units. It uses argv[1]\nas location to place the generated unit files in order to\nallow the user to override /etc/fstab with their own native\nunit files, but also to ensure that /etc/fstab overrides any\nvendor default from /usr/.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After editing\n/etc/fstab, the user should invoke <b>systemctl\ndaemon-reload</b>. This will re-run all generators and cause\n<b>systemd</b> to reload units from disk. To actually mount\nnew directories added to fstab, <b>systemctl start</b>\n<i>/path/to/mountpoint</i> or <b>systemctl start\nlocal-fs.target</b> may be used.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;2.&nbsp;systemd-system-update-generator</b></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-system-update-generator</b>(8)\ntemporarily redirects default.target to\nsystem-update.target, if a system update is scheduled. Since\nthis needs to override the default user configuration for\ndefault.target, it uses argv[2]. For details about this\nlogic, see <b>systemd.offline-updates</b>(7).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;3.&nbsp;Debugging\na generator</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">dir=$(mktemp\n-d) <br>\nSYSTEMD_LOG_LEVEL=debug\n/lib/systemd/system-generators/systemd-fstab-generator \\\n<br>\n&quot;$dir&quot; &quot;$dir&quot; &quot;$dir&quot; <br>\nfind $dir</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/systemd\">systemd(1)</a>,\n<b>systemd-cryptsetup-generator</b>(8),\n<b>systemd-debug-generator</b>(8),\n<b>systemd-fstab-generator</b>(8), <a href=\"https://man.page/5/fstab\">fstab(5)</a>,\n<b>systemd-getty-generator</b>(8),\n<b>systemd-gpt-auto-generator</b>(8),\n<b>systemd-hibernate-resume-generator</b>(8),\n<b>systemd-rc-local-generator</b>(8),\n<b>systemd-system-update-generator</b>(8),\n<b>systemd-sysv-generator</b>(8),\n<b>systemd-xdg-autostart-generator</b>(8),\n<b>systemd.unit</b>(5), <a href=\"https://man.page/1/systemctl\">systemctl(1)</a>,\n<b>systemd.environment-generator</b>(7)</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#OUTPUT DIRECTORIES\">OUTPUT DIRECTORIES</a>","<a href=\"#NOTES ABOUT WRITING GENERATORS\">NOTES ABOUT WRITING GENERATORS</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":7}