{"name":"fips_module","description":"fips_module - OpenSSL fips module guide","body":"\n\n<h1 align=\"center\">FIPS_MODULE</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">fips_module -\nOpenSSL fips module guide</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">See the\nindividual manual pages for details.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This guide\ndetails different ways that OpenSSL can be used in\nconjunction with the <small>FIPS</small> module. Which is\nthe correct approach to use will depend on your own specific\ncircumstances and what you are attempting to achieve.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nold functions <b>FIPS_mode()</b> and <b>FIPS_mode_set()</b>\nare no longer present so you must remove them from your\napplication if you use them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Applications\nwritten to use the OpenSSL 3.0 <small>FIPS</small> module\nshould not use any legacy APIs or features that avoid the\n<small>FIPS</small> module. Specifically this includes:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Low level cryptographic APIs (use the high level APIs,\nsuch as <small>EVP,</small> instead)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Engines</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p>Any functions that create or modify custom &quot;\n<small>METHODS&quot;</small> (for example\n<b>EVP_MD_meth_new()</b>, <b>EVP_CIPHER_meth_new()</b>,\n<b>EVP_PKEY_meth_new()</b>, <b>RSA_meth_new()</b>,\n<b>EC_KEY_METHOD_new()</b>, etc.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">All of the\nabove APIs are deprecated in OpenSSL 3.0 - so a simple rule\nis to avoid using all deprecated functions. See\n<a href=\"https://man.page/7/migration_guide\">migration_guide(7)</a> for a list of deprecated\nfunctions.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Making all\napplications use the <small>FIPS</small> module by\ndefault</b> <br>\nOne simple approach is to cause all applications that are\nusing OpenSSL to only use the <small>FIPS</small> module for\ncryptographic algorithms by default.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This approach\ncan be done purely via configuration. As long as\napplications are built and linked against OpenSSL 3.0 and do\nnot override the loading of the default config file or its\nsettings then they can automatically start using the\n<small>FIPS</small> module without the need for any further\ncode changes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To do this the\ndefault OpenSSL config file will have to be modified. The\nlocation of this config file will depend on the platform,\nand any options that were given during the build process.\nYou can check the location of the config file by running\nthis command:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ openssl\nversion -d <br>\nOPENSSLDIR: &quot;/usr/local/ssl&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Caution: Many\nOperating Systems install OpenSSL by default. It is a common\nerror to not have the correct version of OpenSSL in your\n$PATH. Check that you are running an OpenSSL 3.0 version\nlike this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$ openssl\nversion -v <br>\nOpenSSL 3.0.0-dev xx XXX xxxx (Library: OpenSSL 3.0.0-dev xx\nXXX xxxx)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b><small>OPENSSLDIR</small></b> value above gives the\ndirectory name for where the default config file is stored.\nSo in this case the default config file will be called\n<i>/usr/local/ssl/openssl.cnf</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Edit the config\nfile to add the following lines near the beginning:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">config_diagnostics\n= 1 <br>\nopenssl_conf = openssl_init <br>\n.include /usr/local/ssl/fipsmodule.cnf <br>\n[openssl_init] <br>\nproviders = provider_sect <br>\n[provider_sect] <br>\nfips = fips_sect <br>\nbase = base_sect <br>\n[base_sect] <br>\nactivate = 1</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Obviously the\ninclude file location above should match the path and name\nof the <small>FIPS</small> module config file that you\ninstalled earlier. See\n&lt;https://github.com/openssl/openssl/blob/master/README-FIPS.md&gt;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For\n<small>FIPS</small> usage, it is recommened that the\n<b>config_diagnostics</b> option is enabled to prevent\naccidental use of non-FIPS validated algorithms via broken\nor mistaken configuration. See <a href=\"https://man.page/5/config\">config(5)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Any\napplications that use OpenSSL 3.0 and are started after\nthese changes are made will start using only the\n<small>FIPS</small> module unless those applications take\nexplicit steps to avoid this default behaviour. Note that\nthis configuration also activates the &quot;base&quot;\nprovider. The base provider does not include any\ncryptographic algorithms (and therefore does not impact the\nvalidation status of any cryptographic operations), but does\ninclude other supporting algorithms that may be required. It\nis designed to be used in conjunction with the\n<small>FIPS</small> module.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This approach\nhas the primary advantage that it is simple, and no code\nchanges are required in applications in order to benefit\nfrom the <small>FIPS</small> module. There are some\ndisadvantages to this approach:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">You may not want all\napplications to use the <small>FIPS</small> module.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">It may be the\ncase that some applications should and some should not use\nthe <small>FIPS</small> module.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">If applications take explicit\nsteps to not load the default config file or set different\nsettings.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This method\nwill not work for these cases.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">The algorithms available in the\n<small>FIPS</small> module are a subset of the algorithms\nthat are available in the default OpenSSL Provider.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If any\napplications attempt to use any algorithms that are not\npresent, then they will fail.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p style=\"margin-top: 1em\">Usage of certain deprecated APIs\navoids the use of the <small>FIPS</small> module.</p></td></tr>\n</table>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If any\napplications use those APIs then the <small>FIPS</small>\nmodule will not be used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Selectively\nmaking applications use the <small>FIPS</small> module by\ndefault</b> <br>\nA variation on the above approach is to do the same thing on\nan individual application basis. The default OpenSSL config\nfile depends on the compiled in value for\n<b><small>OPENSSLDIR</small></b> as described in the section\nabove. However it is also possible to override the config\nfile to be used via the <b><small>OPENSSL_CONF</small></b>\nenvironment variable. For example the following, on Unix,\nwill cause the application to be executed with a\nnon-standard config file location:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">$\nOPENSSL_CONF=/my/nondefault/openssl.cnf myapplication</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using this\nmechanism you can control which config file is loaded (and\nhence whether the <small>FIPS</small> module is loaded) on\nan application by application basis.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This removes\nthe disadvantage listed above that you may not want all\napplications to use the <small>FIPS</small> module. All the\nother advantages and disadvantages still apply.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Programmatically\nloading the <small>FIPS</small> module (default library\ncontext)</b> <br>\nApplications may choose to load the <small>FIPS</small>\nprovider explicitly rather than relying on config to do\nthis. The config file is still necessary in order to hold\nthe <small>FIPS</small> module config data (such as its self\ntest status and integrity data). But in this case we do not\nautomatically activate the <small>FIPS</small> provider via\nthat config file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To do things\nthis way configure as per &quot;Making all applications use\nthe <small>FIPS</small> module by default&quot; above, but\nedit the <i>fipsmodule.cnf</i> file to remove or comment out\nthe line which says &quot;activate = 1&quot; (note that\nsetting this value to 0 is <i>not</i> sufficient). This\nmeans all the required config information will be available\nto load the <small>FIPS</small> module, but it is not\nautomatically loaded when the application starts. The\n<small>FIPS</small> provider can then be loaded\nprogrammatically like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/provider.h&gt; <br>\nint main(void) <br>\n{ <br>\nOSSL_PROVIDER *fips; <br>\nOSSL_PROVIDER *base; <br>\nfips = OSSL_PROVIDER_load(NULL, &quot;fips&quot;); <br>\nif (fips == NULL) { <br>\nprintf(&quot;Failed to load FIPS provider\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\nbase = OSSL_PROVIDER_load(NULL, &quot;base&quot;); <br>\nif (base == NULL) { <br>\nOSSL_PROVIDER_unload(fips); <br>\nprintf(&quot;Failed to load base provider\\n&quot;); <br>\nexit(EXIT_FAILURE); <br>\n} <br>\n/* Rest of application */ <br>\nOSSL_PROVIDER_unload(base); <br>\nOSSL_PROVIDER_unload(fips); <br>\nexit(EXIT_SUCCESS); <br>\n}</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that this\nshould be one of the first things that you do in your\napplication. If any OpenSSL functions get called that\nrequire the use of cryptographic functions before this\noccurs then, if no provider has yet been loaded, then the\ndefault provider will be automatically loaded. If you then\nlater explicitly load the <small>FIPS</small> provider then\nyou will have both the <small>FIPS</small> and the default\nprovider loaded at the same time. It is undefined which\nimplementation of an algorithm will be used if multiple\nimplementations are available and you have not explicitly\nspecified via a property query (see below) which one should\nbe used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Also note that\nin this example we have additionally loaded the\n&quot;base&quot; provider. This loads a sub-set of\nalgorithms that are also available in the default provider -\nspecifically non cryptographic ones which may be used in\nconjunction with the <small>FIPS</small> provider. For\nexample this contains algorithms for encoding and decoding\nkeys. If you decide not to load the default provider then\nyou will usually want to load the base provider instead.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this example\nwe are using the &quot;default&quot; library context.\nOpenSSL functions operate within the scope of a library\ncontext. If no library context is explicitly specified then\nthe default library context is used. For further details\nabout library contexts see the\n<b><small>OSSL_LIB_CTX</small></b> (3) man page.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Loading the\n<small>FIPS</small> module at the same time as other\nproviders</b> <br>\nIt is possible to have the <small>FIPS</small> provider and\nother providers (such as the default provider) all loaded at\nthe same time into the same library context. You can use a\nproperty query string during algorithm fetches to specify\nwhich implementation you would like to use.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For example to\nfetch an implementation of <small>SHA256</small> which\nconforms to <small>FIPS</small> standards you can specify\nthe property query &quot;fips=yes&quot; like this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_MD *sha256;\n<br>\nsha256 = EVP_MD_fetch(NULL, &quot;SHA2-256&quot;,\n&quot;fips=yes&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If no property\nquery is specified, or more than one implementation matches\nthe property query then it is undefined which implementation\nof a particular algorithm will be returned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\nshows an explicit request for an implementation of\n<small>SHA256</small> from the default provider:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_MD *sha256;\n<br>\nsha256 = EVP_MD_fetch(NULL, &quot;SHA2-256&quot;,\n&quot;provider=default&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is also\npossible to set a default property query string. The\nfollowing example sets the default property query of\n&quot;fips=yes&quot; for all fetches within the default\nlibrary context:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_set_default_properties(NULL,\n&quot;fips=yes&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a fetch\nfunction has both an explicit property query specified, and\na default property query is defined then the two queries are\nmerged together and both apply. The local property query\noverrides the default properties if the same property name\nis specified in both.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are two\nimportant built-in properties that you should be aware\nof:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n&quot;provider&quot; property enables you to specify which\nprovider you want an implementation to be fetched from, e.g.\n&quot;provider=default&quot; or &quot;provider=fips&quot;.\nAll algorithms implemented in a provider have this property\nset on them.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is also\nthe &quot;fips&quot; property. All <small>FIPS</small>\nalgorithms match against the property query\n&quot;fips=yes&quot;. There are also some non-cryptographic\nalgorithms available in the default and base providers that\nalso have the &quot;fips=yes&quot; property defined for\nthem. These are the encoder and decoder algorithms that can\n(for example) be used to write out a key generated in the\n<small>FIPS</small> provider to a file. The encoder and\ndecoder algorithms are not in the <small>FIPS</small> module\nitself but are allowed to be used in conjunction with the\n<small>FIPS</small> algorithms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nto specify default properties within a config file. For\nexample the following config file automatically loads the\ndefault and fips providers and sets the default property\nvalue to be &quot;fips=yes&quot;. Note that this config file\ndoes not load the &quot;base&quot; provider. All supporting\nalgorithms that are in &quot;base&quot; are also in\n&quot;default&quot;, so it is unnecessary in this case:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">config_diagnostics\n= 1 <br>\nopenssl_conf = openssl_init <br>\n.include /usr/local/ssl/fipsmodule.cnf <br>\n[openssl_init] <br>\nproviders = provider_sect <br>\nalg_section = algorithm_sect <br>\n[provider_sect] <br>\nfips = fips_sect <br>\ndefault = default_sect <br>\n[default_sect] <br>\nactivate = 1 <br>\n[algorithm_sect] <br>\ndefault_properties = fips=yes</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Programmatically\nloading the <small>FIPS</small> module (nondefault library\ncontext)</b> <br>\nIn addition to using properties to separate usage of the\n<small>FIPS</small> module from other usages this can also\nbe achieved using library contexts. In this example we\ncreate two library contexts. In one we assume the existence\nof a config file called <i>openssl-fips.cnf</i> that\nautomatically loads and configures the <small>FIPS</small>\nand base providers. The other library context will just use\nthe default provider.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">OSSL_LIB_CTX\n*fips_libctx, *nonfips_libctx; <br>\nOSSL_PROVIDER *defctxnull = NULL; <br>\nEVP_MD *fipssha256 = NULL, *nonfipssha256 = NULL; <br>\nint ret = 1; <br>\n/* <br>\n* Create two nondefault library contexts. One for fips usage\nand <br>\n* one for non-fips usage <br>\n*/ <br>\nfips_libctx = OSSL_LIB_CTX_new(); <br>\nnonfips_libctx = OSSL_LIB_CTX_new(); <br>\nif (fips_libctx == NULL || nonfips_libctx == NULL) <br>\ngoto err; <br>\n/* Prevent anything from using the default library context\n*/ <br>\ndefctxnull = OSSL_PROVIDER_load(NULL, &quot;null&quot;);\n<br>\n/* <br>\n* Load config file for the FIPS library context. We assume\nthat <br>\n* this config file will automatically activate the FIPS and\nbase <br>\n* providers so we don't need to explicitly load them here.\n<br>\n*/ <br>\nif (!OSSL_LIB_CTX_load_config(fips_libctx,\n&quot;openssl-fips.cnf&quot;)) <br>\ngoto err; <br>\n/* <br>\n* We don't need to do anything special to load the default\n<br>\n* provider into nonfips_libctx. This happens automatically\nif no <br>\n* other providers are loaded. <br>\n* Because we don't call OSSL_LIB_CTX_load_config()\nexplicitly for <br>\n* nonfips_libctx it will just use the default config file.\n<br>\n*/ <br>\n/* As an example get some digests */ <br>\n/* Get a FIPS validated digest */ <br>\nfipssha256 = EVP_MD_fetch(fips_libctx, &quot;SHA2-256&quot;,\nNULL); <br>\nif (fipssha256 == NULL) <br>\ngoto err; <br>\n/* Get a non-FIPS validated digest */ <br>\nnonfipssha256 = EVP_MD_fetch(nonfips_libctx,\n&quot;SHA2-256&quot;, NULL); <br>\nif (nonfipssha256 == NULL) <br>\ngoto err; <br>\n/* Use the digests */ <br>\nprintf(&quot;Success\\n&quot;); <br>\nret = 0; <br>\nerr: <br>\nEVP_MD_free(fipssha256); <br>\nEVP_MD_free(nonfipssha256); <br>\nOSSL_LIB_CTX_free(fips_libctx); <br>\nOSSL_LIB_CTX_free(nonfips_libctx); <br>\nOSSL_PROVIDER_unload(defctxnull); <br>\nreturn ret;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that we\nhave made use of the special &quot;null&quot; provider here\nwhich we load into the default library context. We could\nhave chosen to use the default library context for\n<small>FIPS</small> usage, and just create one additional\nlibrary context for other usages - or vice versa. However if\ncode has not been converted to use library contexts then the\ndefault library context will be automatically used. This\ncould be the case for your own existing applications as well\nas certain parts of OpenSSL itself. Not all parts of OpenSSL\nare library context aware. If this happens then you could\n&quot;accidentally&quot; use the wrong library context for a\nparticular operation. To be sure this doesn&rsquo;t happen\nyou can load the &quot;null&quot; provider into the default\nlibrary context. Because a provider has been explicitly\nloaded, the default provider will not automatically load.\nThis means code using the default context by accident will\nfail because no algorithms will be available.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">See\n&quot;Library Context&quot; in <a href=\"https://man.page/7/migration_guide\">migration_guide(7)</a> for\nadditional information about the Library Context.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using\nEncoders and Decoders with the <small>FIPS</small>\nmodule</b> <br>\nEncoders and decoders are used to read and write keys or\nparameters from or to some external format (for example a\n<small>PEM</small> file). If your application generates keys\nor parameters that then need to be written into\n<small>PEM</small> or <small>DER</small> format then it is\nlikely that you will need to use an encoder to do this.\nSimilarly you need a decoder to read previously saved keys\nand parameters. In most cases this will be invisible to you\nif you are using APIs that existed in OpenSSL 1.1.1 or\nearlier such as <a href=\"https://man.page/3/i2d_PrivateKey\">i2d_PrivateKey(3)</a>. However the\nappropriate encoder/decoder will need to be available in the\nlibrary context associated with the key or parameter object.\nThe built-in OpenSSL encoders and decoders are implemented\nin both the default and base providers and are not in the\n<small>FIPS</small> module boundary. However since they are\nnot cryptographic algorithms themselves it is still possible\nto use them in conjunction with the <small>FIPS</small>\nmodule, and therefore these encoders/decoders have the\n&quot;fips=yes&quot; property against them. You should\nensure that either the default or base provider is loaded\ninto the library context in this case.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using the\n<small>FIPS</small> module in <small>SSL/TLS</small></b>\n<br>\nWriting an application that uses libssl in conjunction with\nthe <small>FIPS</small> module is much the same as writing a\nnormal libssl application. If you are using global\nproperties and the default library context to specify usage\nof <small>FIPS</small> validated algorithms then this will\nhappen automatically for all cryptographic algorithms in\nlibssl. If you are using a nondefault library context to\nload the <small>FIPS</small> provider then you can supply\nthis to libssl using the function <a href=\"https://man.page/3/SSL_CTX_new_ex\">SSL_CTX_new_ex(3)</a>.\nThis works as a drop in replacement for the function\n<a href=\"https://man.page/3/SSL_CTX_new\">SSL_CTX_new(3)</a> except it provides you with the\ncapability to specify the library context to be used. You\ncan also use the same function to specify libssl specific\nproperties to use.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this first\nexample we create two <small>SSL_CTX</small> objects using\ntwo different library contexts.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* We assume that a nondefault library context with the FIPS\n<br>\n* provider loaded has been created called fips_libctx. <br>\n*/ <br>\nSSL_CTX *fips_ssl_ctx = SSL_CTX_new_ex(fips_libctx, NULL,\nTLS_method()); <br>\n/* <br>\n* We assume that a nondefault library context with the\ndefault <br>\n* provider loaded has been created called non_fips_libctx.\n<br>\n*/ <br>\nSSL_CTX *non_fips_ssl_ctx = SSL_CTX_new_ex(non_fips_libctx,\nNULL, <br>\nTLS_method());</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this second\nexample we create two <small>SSL_CTX</small> objects using\ndifferent properties to specify <small>FIPS</small>\nusage:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">/* <br>\n* The &quot;fips=yes&quot; property includes all FIPS\napproved algorithms <br>\n* as well as encoders from the default provider that are\nallowed <br>\n* to be used. The NULL below indicates that we are using the\n<br>\n* default library context. <br>\n*/ <br>\nSSL_CTX *fips_ssl_ctx = SSL_CTX_new_ex(NULL,\n&quot;fips=yes&quot;, TLS_method()); <br>\n/* <br>\n* The &quot;provider!=fips&quot; property allows algorithms\nfrom any <br>\n* provider except the FIPS provider <br>\n*/ <br>\nSSL_CTX *non_fips_ssl_ctx = SSL_CTX_new_ex(NULL,\n&quot;provider!=fips&quot;, <br>\nTLS_method());</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Confirming\nthat an algorithm is being provided by the\n<small>FIPS</small> module</b> <br>\nA chain of links needs to be followed to go from an\nalgorithm instance to the provider that implements it. The\nprocess is similar for all algorithms. Here the example of a\ndigest is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To go from an\n<b><small>EVP_MD_CTX</small></b> to an\n<b><small>EVP_MD</small></b> , use <a href=\"https://man.page/3/EVP_MD_CTX_md\">EVP_MD_CTX_md(3)</a> .\nTo go from the <b><small>EVP_MD</small></b> to its\n<b><small>OSSL_PROVIDER</small></b> , use\n<a href=\"https://man.page/3/EVP_MD_get0_provider\">EVP_MD_get0_provider(3)</a>. To extract the name from the\n<b><small>OSSL_PROVIDER</small></b> , use\n<a href=\"https://man.page/3/OSSL_PROVIDER_get0_name\">OSSL_PROVIDER_get0_name(3)</a>.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/7/migration_guide\">migration_guide(7)</a>,\n<a href=\"https://man.page/7/crypto\">crypto(7)</a>, <a href=\"https://man.page/5/fips_config\">fips_config(5)</a></p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright 2021\nThe OpenSSL Project Authors. All Rights Reserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}