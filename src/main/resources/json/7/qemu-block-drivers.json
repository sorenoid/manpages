{"name":"qemu-block-drivers","description":"qemu-block-drivers\n- QEMU block drivers reference","body":"\n\n<h1 align=\"center\">QEMU-BLOCK-DRIVERS</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">qemu-block-drivers\n- QEMU block drivers reference</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">QEMU block\ndriver reference manual</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Disk image\nfile formats</b> <br>\nQEMU supports many image file formats that can be used with\nVMs as well as with any of the tools (like <b>qemu-img</b>).\nThis includes the preferred formats raw and qcow2 as well as\nformats that are supported for compatibility with older QEMU\nversions or other hypervisors.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Depending on\nthe image format, different options can be passed to\n<b>qemu-img create</b> and <b>qemu-img convert</b> using the\n<b>-o</b> option. This section describes each format and the\noptions that are supported for it.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>raw</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p>Raw disk image format. This format has the advantage of\nbeing simple and easily exportable to all other emulators.\nIf your file system supports <i>holes</i> (for example in\next2 or ext3 on Linux or NTFS on Windows), then only the\nwritten sectors will reserve space. Use <b>qemu-img info</b>\nto know the real size used by the image or <b>ls -ls</b> on\nUnix/Linux.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\npreallocation</b></p>\n\n<p style=\"margin-left:32%;\">Preallocation mode (allowed\nvalues: <b>off</b>, <b>falloc</b>, <b>full</b>).\n<b>falloc</b> mode preallocates space for image by calling\n<b>posix_fallocate()</b>. <b>full</b> mode preallocates\nspace for image by writing data to underlying storage. This\ndata may or may not be zero, depending on the storage\nlocation.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>qcow2</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>QEMU image format, the most versatile format. Use it to\nhave smaller images (useful if your filesystem does not\nsupports holes, for example on Windows), zlib based\ncompression and support of multiple VM snapshots.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"9%\">\n\n\n<p style=\"margin-top: 1em\"><b>compat</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">Determines the qcow2 version to\nuse. <b>compat=0.10</b> uses the traditional image format\nthat can be read by any QEMU since 0.10. <b>compat=1.1</b>\nenables image format extensions that only QEMU 1.1 and newer\nunderstand (this is the default). Amongst others, this\nincludes zero clusters, which allow efficient copy-on-read\nfor sparse images.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%;\"><b>backing_file</b></p>\n\n<p style=\"margin-left:32%;\">File name of a base image (see\n<b>create</b> subcommand)</p>\n\n<p style=\"margin-left:22%;\"><b>backing_fmt</b></p>\n\n<p style=\"margin-left:32%;\">Image format of the base\nimage</p>\n\n<p style=\"margin-left:22%;\"><b>encryption</b></p>\n\n<p style=\"margin-left:32%;\">This option is deprecated and\nequivalent to <b>encrypt.format=aes</b></p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.format</b></p>\n\n<p style=\"margin-left:32%;\">If this is set to <b>luks</b>,\nit requests that the qcow2 payload (not qcow2 header) be\nencrypted using the LUKS format. The passphrase to use to\nunlock the LUKS key slot is given by the\n<b>encrypt.key-secret</b> parameter. LUKS encryption\nparameters can be tuned with the other <b>encrypt.*</b>\nparameters.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">If this is set\nto <b>aes</b>, the image is encrypted with 128-bit AES-CBC.\nThe encryption key is given by the <b>encrypt.key-secret</b>\nparameter. This encryption format is considered to be flawed\nby modern cryptography standards, suffering from a number of\ndesign problems:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p>The AES-CBC cipher is used with predictable\ninitialization vectors based on the sector number. This\nmakes it vulnerable to chosen plaintext attacks which can\nreveal the existence of encrypted data.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p>The user passphrase is directly used as the encryption\nkey. A poorly chosen or short passphrase will compromise the\nsecurity of the encryption.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p>In the event of the passphrase being compromised there\nis no way to change the passphrase to protect data in any\nqcow images. The files must be cloned, using a different\nencryption passphrase in the new file. The original file\nmust then be securely erased using a program like shred,\nthough even this is ineffective with many modern storage\ntechnologies.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">The use of this\nis no longer supported in system emulators. Support only\nremains in the command line utilities, for the purposes of\ndata liberation and interoperability with old versions of\nQEMU. The <b>luks</b> format should be used instead.</p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.key-secret</b></p>\n\n<p style=\"margin-left:32%;\">Provides the ID of a\n<b>secret</b> object that contains the passphrase\n(<b>encrypt.format=luks</b>) or encryption key\n(<b>encrypt.format=aes</b>).</p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.cipher-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the cipher algorithm\nand key length. Currently defaults to <b>aes-256</b>. Only\nused when <b>encrypt.format=luks</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.cipher-mode</b></p>\n\n<p style=\"margin-left:32%;\">Name of the encryption mode to\nuse. Currently defaults to <b>xts</b>. Only used when\n<b>encrypt.format=luks</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.ivgen-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the initialization\nvector generator algorithm. Currently defaults to\n<b>plain64</b>. Only used when\n<b>encrypt.format=luks</b>.</p>\n\n\n<p style=\"margin-left:22%;\"><b>encrypt.ivgen-hash-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the hash algorithm to\nuse with the initialization vector generator (if required).\nDefaults to <b>sha256</b>. Only used when\n<b>encrypt.format=luks</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.hash-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the hash algorithm to\nuse for PBKDF algorithm Defaults to <b>sha256</b>. Only used\nwhen <b>encrypt.format=luks</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>encrypt.iter-time</b></p>\n\n<p style=\"margin-left:32%;\">Amount of time, in\nmilliseconds, to use for PBKDF algorithm per key slot.\nDefaults to <b>2000</b>. Only used when\n<b>encrypt.format=luks</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>cluster_size</b></p>\n\n<p style=\"margin-left:32%;\">Changes the qcow2 cluster size\n(must be between 512 and 2M). Smaller cluster sizes can\nimprove the image file size whereas larger cluster sizes\ngenerally provide better performance.</p>\n\n<p style=\"margin-left:22%;\"><b>preallocation</b></p>\n\n<p style=\"margin-left:32%;\">Preallocation mode (allowed\nvalues: <b>off</b>, <b>metadata</b>, <b>falloc</b>,\n<b>full</b>). An image with preallocated metadata is\ninitially larger but can improve performance when the image\nneeds to grow. <b>falloc</b> and <b>full</b> preallocations\nare like the same options of <b>raw</b> format, but sets up\nmetadata also.</p>\n\n<p style=\"margin-left:22%;\"><b>lazy_refcounts</b></p>\n\n<p style=\"margin-left:32%;\">If this option is set to\n<b>on</b>, reference count updates are postponed with the\ngoal of avoiding metadata I/O and improving performance.\nThis is particularly interesting with\n<b>cache=writethrough</b> which doesn't batch metadata\nupdates. The tradeoff is that after a host crash, the\nreference count tables must be rebuilt, i.e. on the next\nopen an (automatic) <b>qemu-img check -r all</b> is\nrequired, which may take some time.</p>\n\n<p style=\"margin-left:32%; margin-top: 1em\">This option can\nonly be enabled if <b>compat=1.1</b> is specified.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"7%\">\n\n\n<p><b>nocow</b></p></td>\n<td width=\"3%\"></td>\n<td width=\"68%\">\n\n\n<p>If this option is set to <b>on</b>, it will turn off COW\nof the file. It's only valid on btrfs, no effect on other\nfile systems.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Btrfs has low\nperformance when hosting a VM image file, even more when the\nguest on the VM also using btrfs as file system. Turning off\nCOW is a way to mitigate this bad performance. Generally\nthere are two ways to turn off COW on btrfs:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p style=\"margin-top: 1em\">&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p style=\"margin-top: 1em\">Disable it by mounting with\nnodatacow, then all newly created files will be NOCOW.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"32%\"></td>\n<td width=\"2%\">\n\n\n<p>&bull;</p></td>\n<td width=\"1%\"></td>\n<td width=\"65%\">\n\n\n<p>For an empty file, add the NOCOW file attribute. That's\nwhat this option does.</p></td></tr>\n</table>\n\n<p style=\"margin-left:32%; margin-top: 1em\">Note: this\noption is only valid to new or empty files. If there is an\nexisting file which is COW and has data blocks already, it\ncouldn't be changed to NOCOW by setting <b>nocow=on</b>. One\ncan issue <b>lsattr filename</b> to check if the NOCOW flag\nis set or not (Capital 'C' is NOCOW flag).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p style=\"margin-top: 1em\"><b>qed</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"78%\">\n\n\n<p style=\"margin-top: 1em\">Old QEMU image format with\nsupport for backing files and compact image files (when your\nfilesystem or transport medium does not support holes).</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">When converting\nQED images to qcow2, you might want to consider using the\n<b>lazy_refcounts=on</b> option to get a more QED-like\nbehaviour.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\nbacking_file</b></p>\n\n<p style=\"margin-left:32%;\">File name of a base image (see\n<b>create</b> subcommand).</p>\n\n<p style=\"margin-left:22%;\"><b>backing_fmt</b></p>\n\n<p style=\"margin-left:32%;\">Image file format of backing\nfile (optional). Useful if the format cannot be autodetected\nbecause it has no header, like some vhd/vpc files.</p>\n\n<p style=\"margin-left:22%;\"><b>cluster_size</b></p>\n\n<p style=\"margin-left:32%;\">Changes the cluster size (must\nbe power-of-2 between 4K and 64K). Smaller cluster sizes can\nimprove the image file size whereas larger cluster sizes\ngenerally provide better performance.</p>\n\n<p style=\"margin-left:22%;\"><b>table_size</b></p>\n\n<p style=\"margin-left:32%;\">Changes the number of clusters\nper L1/L2 table (must be power-of-2 between 1 and 16). There\nis normally no need to change this value but this option can\nbetween used for performance benchmarking.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>qcow</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>Old QEMU image format with support for backing files,\ncompact image files, encryption and compression.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions:</p>\n\n<p style=\"margin-left:26%;\"><b>backing_file</b></p>\n\n<p style=\"margin-left:37%;\">File name of a base image (see\n<b>create</b> subcommand)</p>\n\n<p style=\"margin-left:26%;\"><b>encryption</b></p>\n\n<p style=\"margin-left:37%;\">This option is deprecated and\nequivalent to <b>encrypt.format=aes</b></p>\n\n<p style=\"margin-left:26%;\"><b>encrypt.format</b></p>\n\n<p style=\"margin-left:37%;\">If this is set to <b>aes</b>,\nthe image is encrypted with 128-bit AES-CBC. The encryption\nkey is given by the <b>encrypt.key-secret</b> parameter.\nThis encryption format is considered to be flawed by modern\ncryptography standards, suffering from a number of design\nproblems enumerated previously against the <b>qcow2</b>\nimage format.</p>\n\n<p style=\"margin-left:37%; margin-top: 1em\">The use of this\nis no longer supported in system emulators. Support only\nremains in the command line utilities, for the purposes of\ndata liberation and interoperability with old versions of\nQEMU.</p>\n\n<p style=\"margin-left:37%; margin-top: 1em\">Users requiring\nnative encryption should use the <b>qcow2</b> format instead\nwith <b>encrypt.format=luks</b>.</p>\n\n<p style=\"margin-left:26%;\"><b>encrypt.key-secret</b></p>\n\n<p style=\"margin-left:37%;\">Provides the ID of a\n<b>secret</b> object that contains the encryption key\n(<b>encrypt.format=aes</b>).</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>luks</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"78%\">\n\n\n<p>LUKS v1 encryption format, compatible with Linux\ndm-crypt/cryptsetup</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\nkey-secret</b></p>\n\n<p style=\"margin-left:32%;\">Provides the ID of a\n<b>secret</b> object that contains the passphrase.</p>\n\n<p style=\"margin-left:22%;\"><b>cipher-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the cipher algorithm\nand key length. Currently defaults to <b>aes-256</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>cipher-mode</b></p>\n\n<p style=\"margin-left:32%;\">Name of the encryption mode to\nuse. Currently defaults to <b>xts</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>ivgen-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the initialization\nvector generator algorithm. Currently defaults to\n<b>plain64</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>ivgen-hash-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the hash algorithm to\nuse with the initialization vector generator (if required).\nDefaults to <b>sha256</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>hash-alg</b></p>\n\n<p style=\"margin-left:32%;\">Name of the hash algorithm to\nuse for PBKDF algorithm Defaults to <b>sha256</b>.</p>\n\n<p style=\"margin-left:22%;\"><b>iter-time</b></p>\n\n<p style=\"margin-left:32%;\">Amount of time, in\nmilliseconds, to use for PBKDF algorithm per key slot.\nDefaults to <b>2000</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>vdi</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"60%\">\n\n\n<p>VirtualBox 1.1 compatible image format.</p></td>\n<td width=\"18%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"20%\">\n\n\n<p style=\"margin-top: 1em\"><b>static</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n\n\n<p style=\"margin-top: 1em\">If this option is set to\n<b>on</b>, the image is created with metadata\npreallocation.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"20%\">\n\n\n<p><b>vmdk</b></p></td>\n<td width=\"1%\"></td>\n<td width=\"68%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">VMware 3 and 4\ncompatible image format.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\nbacking_file</b></p>\n\n<p style=\"margin-left:32%;\">File name of a base image (see\n<b>create</b> subcommand).</p>\n\n<p style=\"margin-left:22%;\"><b>compat6</b></p>\n\n<p style=\"margin-left:32%;\">Create a VMDK version 6 image\n(instead of version 4)</p>\n\n<p style=\"margin-left:22%;\"><b>hwversion</b></p>\n\n<p style=\"margin-left:32%;\">Specify vmdk virtual hardware\nversion. Compat6 flag cannot be enabled if hwversion is\nspecified.</p>\n\n<p style=\"margin-left:22%;\"><b>subformat</b></p>\n\n<p style=\"margin-left:32%;\">Specifies which VMDK subformat\nto use. Valid options are <b>monolithicSparse</b> (default),\n<b>monolithicFlat</b>, <b>twoGbMaxExtentSparse</b>,\n<b>twoGbMaxExtentFlat</b> and <b>streamOptimized</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p><b>vpc</b></p></td>\n<td width=\"7%\"></td>\n<td width=\"61%\">\n\n\n<p>VirtualPC compatible image format (VHD).</p></td>\n<td width=\"17%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\nsubformat</b></p>\n\n<p style=\"margin-left:32%;\">Specifies which VHD subformat\nto use. Valid options are <b>dynamic</b> (default) and\n<b>fixed</b>.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"6%\">\n\n\n<p><b>VHDX</b></p></td>\n<td width=\"5%\"></td>\n<td width=\"60%\">\n\n\n<p>Hyper-V compatible image format (VHDX).</p></td>\n<td width=\"18%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\nsubformat</b></p>\n\n<p style=\"margin-left:32%;\">Specifies which VHDX subformat\nto use. Valid options are <b>dynamic</b> (default) and\n<b>fixed</b>. <b><br>\nblock_state_zero</b></p>\n\n<p style=\"margin-left:43%;\">Force use of payload blocks of\ntype 'ZERO'. Can be set to <b>on</b> (default) or\n<b>off</b>. When set to <b>off</b>, new blocks will be\ncreated as <b>PAYLOAD_BLOCK_NOT_PRESENT</b>, which means\nparsers are free to return arbitrary data for those blocks.\nDo not set to <b>off</b> when using <b>qemu-img convert</b>\nwith <b>subformat=dynamic</b>.</p>\n\n<p style=\"margin-left:32%;\"><b>block_size</b></p>\n\n<p style=\"margin-left:43%;\">Block size; min 1 MB, max 256\nMB. 0 means auto-calculate based on image size.</p>\n\n<p style=\"margin-left:32%;\"><b>log_size</b></p>\n\n<p style=\"margin-left:43%;\">Log size; min 1 MB.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Read-only\nformats</b> <br>\nMore disk image file formats are supported in a read-only\nmode.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>bochs</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Bochs images of <b>growing</b> type.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>cloop</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Linux Compressed Loop image, useful only to reuse\ndirectly compressed CD-ROM images present for example in the\nKnoppix CD-ROMs.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"7%\">\n\n\n<p><b>dmg</b></p></td>\n<td width=\"4%\"></td>\n<td width=\"78%\">\n\n\n<p>Apple disk image.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>parallels</b></p>\n\n<p style=\"margin-left:22%;\">Parallels disk image\nformat.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Using host\ndrives</b> <br>\nIn addition to disk image files, QEMU can directly access\nhost devices. We describe here the usage for QEMU version\n&gt;= 0.8.3.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux</b>\n<br>\nOn Linux, you can directly use the host device filename\ninstead of a disk image filename provided you have enough\nprivileges to access it. For example, use <b>/dev/cdrom</b>\nto access to the CDROM.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>CD</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>You can specify a CDROM device even if no CDROM is\nloaded. QEMU has specific code to detect CDROM insertion or\nremoval. CDROM ejection by the guest OS is supported.\nCurrently only data CDs are supported.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p><b>Floppy</b></p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>You can specify a floppy device even if no floppy is\nloaded. Floppy removal is currently not detected accurately\n(if you change floppy without doing floppy access while the\nfloppy is not loaded, the guest OS will think that the same\nfloppy is loaded). Use of the host's floppy device is\ndeprecated, and support for it will be removed in a future\nrelease.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>Hard disks</b></p>\n\n<p style=\"margin-left:22%;\">Hard disks can be used.\nNormally you must specify the whole disk (<b>/dev/hdb</b>\ninstead of <b>/dev/hdb1</b>) so that the guest OS can see it\nas a partitioned disk. WARNING: unless you know what you do,\nit is better to only make READ-ONLY accesses to the hard\ndisk otherwise you may corrupt your host data (use the\n<b>-snapshot</b> command line option or modify the device\npermissions accordingly).</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Windows</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p><b>CD</b></p></td>\n<td width=\"8%\"></td>\n<td width=\"78%\">\n\n\n<p>The preferred syntax is the drive letter (e.g.\n<b>d:</b>). The alternate syntax <b>\\\\.\\d:</b> is supported.\n<b>/dev/cdrom</b> is supported as an alias to the first\nCDROM drive.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Currently there\nis no specific code to handle removable media, so it is\nbetter to use the <b>change</b> or <b>eject</b> monitor\ncommands to change or eject media.</p>\n\n<p style=\"margin-left:11%;\"><b>Hard disks</b></p>\n\n<p style=\"margin-left:22%;\">Hard disks can be used with the\nsyntax: <b>\\\\.\\PhysicalDriveN</b> where <i>N</i> is the\ndrive number (0 is the first hard disk).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">WARNING: unless\nyou know what you do, it is better to only make READ-ONLY\naccesses to the hard disk otherwise you may corrupt your\nhost data (use the <b>-snapshot</b> command line so that the\nmodifications are written in a temporary file).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Mac OS X\n<br>\n/dev/cdrom</b> is an alias to the first CDROM.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently there\nis no specific code to handle removable media, so it is\nbetter to use the <b>change</b> or <b>eject</b> monitor\ncommands to change or eject media.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Virtual FAT\ndisk images</b> <br>\nQEMU can automatically create a virtual FAT disk image from\na directory tree. In order to use it, just type:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux.img -hdb fat:/my_directory</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Then you access\naccess to all the files in the <b>/my_directory</b>\ndirectory without having to copy them in a disk image or to\nexport them via SAMBA or NFS. The default access is\n<i>read-only</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Floppies can be\nemulated with the <b>:floppy:</b> option:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux.img -fda fat:floppy:/my_directory</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A read/write\nsupport is available for testing (beta stage) with the\n<b>:rw:</b> option:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux.img -fda fat:floppy:rw:/my_directory</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">What you should\n<i>never</i> do:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>use non-ASCII filenames</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>use &quot;-snapshot&quot; together with\n&quot;:rw:&quot;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>expect it to work when loadvm'ing</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>write to the FAT directory on the host system while\naccessing it with the guest system</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>NBD\naccess</b> <br>\nQEMU can access directly to block device exported using the\nNetwork Block Device protocol.</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux.img -hdb nbd://my_nbd_server.mydomain.org:1024/</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the NBD\nserver is located on the same host, you can use an unix\nsocket instead of an inet socket:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux.img -hdb nbd+unix://?socket=/tmp/my_socket</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this case,\nthe block device must be exported using <b>qemu-nbd</b>:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-nbd --socket=/tmp/my_socket my_disk.qcow2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The use of\n<b>qemu-nbd</b> allows sharing of a disk between several\nguests:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-nbd --socket=/tmp/my_socket --share=2 my_disk.qcow2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">and then you\ncan use it with two guests:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux1.img -hdb nbd+unix://?socket=/tmp/my_socket\nqemu-system-x86_64 linux2.img -hdb nbd+unix://?socket=/tmp/my_socket</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\n<b>nbd-server</b> uses named exports (supported since NBD\n2.9.18, or with QEMU's own embedded NBD server), you must\nspecify an export name in the URI:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 -cdrom nbd://localhost/debian-500-ppc-netinst\nqemu-system-x86_64 -cdrom nbd://localhost/openSUSE-11.1-ppc-netinst</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The URI syntax\nfor NBD is supported since QEMU 1.3. An alternative syntax\nis also available. Here are some example of the older\nsyntax:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 linux.img -hdb nbd:my_nbd_server.mydomain.org:1024\nqemu-system-x86_64 linux2.img -hdb nbd:unix:/tmp/my_socket\nqemu-system-x86_64 -cdrom nbd:localhost:10809:exportname=debian-500-ppc-netinst</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>iSCSI\nLUNs</b> <br>\niSCSI is a popular protocol used to access SCSI devices\nacross a computer network.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are two\ndifferent ways iSCSI devices can be used by QEMU.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The first\nmethod is to mount the iSCSI LUN on the host, and make it\nappear as any other ordinary SCSI device on the host and\nthen to access this device as a /dev/sd device from QEMU.\nHow to do this differs between host OSes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The second\nmethod involves using the iSCSI initiator that is built into\nQEMU. This provides a mechanism that works the same way\nregardless of which host OS you are running QEMU on. This\nsection will describe this second method of using iSCSI\ntogether with QEMU.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In QEMU, iSCSI\ndevices are described using special iSCSI URLs. URL\nsyntax:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">iscsi://[&lt;username&gt;[%&lt;password&gt;]@]&lt;host&gt;[:&lt;port&gt;]/&lt;target-iqn-name&gt;/&lt;lun&gt;</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Username and\npassword are optional and only used if your target is set up\nusing CHAP authentication for access control. Alternatively\nthe username and password can also be set via environment\nvariables to have these not show up in the process list:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">export LIBISCSI_CHAP_USERNAME=&lt;username&gt;\nexport LIBISCSI_CHAP_PASSWORD=&lt;password&gt;\niscsi://&lt;host&gt;/&lt;target-iqn-name&gt;/&lt;lun&gt;</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various session\nrelated parameters can be set via special options, either in\na configuration file provided via '-readconfig' or directly\non the command line.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the\ninitiator-name is not specified qemu will use a default name\nof 'iqn.2008-11.org.linux-kvm[:&lt;uuid&gt;'] where\n&lt;uuid&gt; is the UUID of the virtual machine. If the UUID\nis not specified qemu will use\n'iqn.2008-11.org.linux-kvm[:&lt;name&gt;'] where\n&lt;name&gt; is the name of the virtual machine.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Setting a\nspecific initiator name to use when logging in to the\ntarget:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">-iscsi initiator-name=iqn.qemu.test:my-initiator</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Controlling\nwhich type of header digest to negotiate with the\ntarget:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">-iscsi header-digest=CRC32C|CRC32C-NONE|NONE-CRC32C|NONE</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">These can also\nbe set via a configuration file:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">[iscsi]\n  user = &quot;CHAP username&quot;\n  password = &quot;CHAP password&quot;\n  initiator-name = &quot;iqn.qemu.test:my-initiator&quot;\n  # header digest is one of CRC32C|CRC32C-NONE|NONE-CRC32C|NONE\n  header-digest = &quot;CRC32C&quot;</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Setting the\ntarget name allows different options for different\ntargets:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">[iscsi &quot;iqn.target.name&quot;]\n  user = &quot;CHAP username&quot;\n  password = &quot;CHAP password&quot;\n  initiator-name = &quot;iqn.qemu.test:my-initiator&quot;\n  # header digest is one of CRC32C|CRC32C-NONE|NONE-CRC32C|NONE\n  header-digest = &quot;CRC32C&quot;</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">How to use a\nconfiguration file to set iSCSI configuration options:</p>\n<pre style=\"margin-left:15%; margin-top: 1em\">cat &gt;iscsi.conf &lt;&lt;EOF\n[iscsi]\n  user = &quot;me&quot;\n  password = &quot;my password&quot;\n  initiator-name = &quot;iqn.qemu.test:my-initiator&quot;\n  header-digest = &quot;CRC32C&quot;\nEOF\n\n\nqemu-system-x86_64 -drive file=iscsi://127.0.0.1/iqn.qemu.test/1 \\\n  -readconfig iscsi.conf</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">How to set up a\nsimple iSCSI target on loopback and access it via QEMU: this\nexample shows how to set up an iSCSI target with one CDROM\nand one DISK using the Linux STGT software target. This\ntarget is available on Red Hat based systems as the package\n'scsi-target-utils'.</p>\n<pre style=\"margin-left:15%; margin-top: 1em\">tgtd --iscsi portal=127.0.0.1:3260\ntgtadm --lld iscsi --op new --mode target --tid 1 -T iqn.qemu.test\ntgtadm --lld iscsi --mode logicalunit --op new --tid 1 --lun 1 \\\n    -b /IMAGES/disk.img --device-type=disk\ntgtadm --lld iscsi --mode logicalunit --op new --tid 1 --lun 2 \\\n    -b /IMAGES/cd.iso --device-type=cd\ntgtadm --lld iscsi --op bind --mode target --tid 1 -I ALL\n\n\nqemu-system-x86_64 -iscsi initiator-name=iqn.qemu.test:my-initiator \\\n  -boot d -drive file=iscsi://127.0.0.1/iqn.qemu.test/1 \\\n  -cdrom iscsi://127.0.0.1/iqn.qemu.test/2</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GlusterFS\ndisk images</b> <br>\nGlusterFS is a user space distributed file system.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can boot\nfrom the GlusterFS disk image with the command:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">URI:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 -drive file=gluster[+TYPE]://[HOST}[:PORT]]/VOLUME/PATH\n                             [?socket=...][,file.debug=9][,file.logfile=...]</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">JSON:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 'json:{&quot;driver&quot;:&quot;qcow2&quot;,\n                         &quot;file&quot;:{&quot;driver&quot;:&quot;gluster&quot;,\n                                  &quot;volume&quot;:&quot;testvol&quot;,&quot;path&quot;:&quot;a.img&quot;,&quot;debug&quot;:9,&quot;logfile&quot;:&quot;...&quot;,\n                                  &quot;server&quot;:[{&quot;type&quot;:&quot;tcp&quot;,&quot;host&quot;:&quot;...&quot;,&quot;port&quot;:&quot;...&quot;},\n                                            {&quot;type&quot;:&quot;unix&quot;,&quot;socket&quot;:&quot;...&quot;}]}}'</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>gluster</i>\nis the protocol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>TYPE</i>\nspecifies the transport type used to connect to gluster\nmanagement daemon (glusterd). Valid transport types are tcp\nand unix. In the URI form, if a transport type isn't\nspecified, then tcp type is assumed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>HOST</i>\nspecifies the server where the volume file specification for\nthe given volume resides. This can be either a hostname or\nan ipv4 address. If transport type is unix, then <i>HOST</i>\nfield should not be specified. Instead <i>socket</i> field\nneeds to be populated with the path to unix domain\nsocket.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>PORT</i> is\nthe port number on which glusterd is listening. This is\noptional and if not specified, it defaults to port 24007. If\nthe transport type is unix, then <i>PORT</i> should not be\nspecified.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>VOLUME</i>\nis the name of the gluster volume which contains the disk\nimage.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>PATH</i> is\nthe path to the actual disk image that resides on gluster\nvolume.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>debug</i> is\nthe logging level of the gluster protocol driver. Debug\nlevels are 0-9, with 9 being the most verbose, and 0\nrepresenting no debugging output. The default level is 4.\nThe current logging levels defined in the gluster source are\n0 - None, 1 - Emergency, 2 - Alert, 3 - Critical, 4 - Error,\n5 - Warning, 6 - Notice, 7 - Info, 8 - Debug, 9 - Trace</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>logfile</i>\nis a commandline option to mention log file path which helps\nin logging to the specified file and also help in persisting\nthe gfapi logs. The default is stderr.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">You can create\na GlusterFS disk image with the command:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-img create gluster://HOST/VOLUME/PATH SIZE</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Examples</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 -drive file=gluster://1.2.3.4/testvol/a.img\nqemu-system-x86_64 -drive file=gluster+tcp://1.2.3.4/testvol/a.img\nqemu-system-x86_64 -drive file=gluster+tcp://1.2.3.4:24007/testvol/dir/a.img\nqemu-system-x86_64 -drive file=gluster+tcp://[1:2:3:4:5:6:7:8]/testvol/dir/a.img\nqemu-system-x86_64 -drive file=gluster+tcp://[1:2:3:4:5:6:7:8]:24007/testvol/dir/a.img\nqemu-system-x86_64 -drive file=gluster+tcp://server.domain.com:24007/testvol/dir/a.img\nqemu-system-x86_64 -drive file=gluster+unix:///testvol/dir/a.img?socket=/tmp/glusterd.socket\nqemu-system-x86_64 -drive file=gluster+rdma://1.2.3.4:24007/testvol/a.img\nqemu-system-x86_64 -drive file=gluster://1.2.3.4/testvol/a.img,file.debug=9,file.logfile=/var/log/qemu-gluster.log\nqemu-system-x86_64 'json:{&quot;driver&quot;:&quot;qcow2&quot;,\n                         &quot;file&quot;:{&quot;driver&quot;:&quot;gluster&quot;,\n                                  &quot;volume&quot;:&quot;testvol&quot;,&quot;path&quot;:&quot;a.img&quot;,\n                                  &quot;debug&quot;:9,&quot;logfile&quot;:&quot;/var/log/qemu-gluster.log&quot;,\n                                  &quot;server&quot;:[{&quot;type&quot;:&quot;tcp&quot;,&quot;host&quot;:&quot;1.2.3.4&quot;,&quot;port&quot;:24007},\n                                            {&quot;type&quot;:&quot;unix&quot;,&quot;socket&quot;:&quot;/var/run/glusterd.socket&quot;}]}}'\nqemu-system-x86_64 -drive driver=qcow2,file.driver=gluster,file.volume=testvol,file.path=/path/a.img,\n                                     file.debug=9,file.logfile=/var/log/qemu-gluster.log,\n                                     file.server.0.type=tcp,file.server.0.host=1.2.3.4,file.server.0.port=24007,\n                                     file.server.1.type=unix,file.server.1.socket=/var/run/glusterd.socket</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Secure Shell\n(ssh) disk images</b> <br>\nYou can access disk images located on a remote ssh server by\nusing the ssh protocol:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 -drive file=ssh://[USER@]SERVER[:PORT]/PATH[?host_key_check=HOST_KEY_CHECK]</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternative\nsyntax using properties:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 -drive file.driver=ssh[,file.user=USER],file.host=SERVER[,file.port=PORT],file.path=PATH[,file.host_key_check=HOST_KEY_CHECK]</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>ssh</i> is\nthe protocol.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>USER</i> is\nthe remote user. If not specified, then the local username\nis tried.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>SERVER</i>\nspecifies the remote ssh server. Any ssh server can be used,\nbut it must implement the sftp-server protocol. Most\nUnix/Linux systems should work without requiring any extra\nconfiguration.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>PORT</i> is\nthe port number on which sshd is listening. By default the\nstandard ssh port (22) is used.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>PATH</i> is\nthe path to the disk image.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The optional\n<i>HOST_KEY_CHECK</i> parameter controls how the remote\nhost's key is checked. The default is <b>yes</b> which means\nto use the local <b>.ssh/known_hosts</b> file. Setting this\nto <b>no</b> turns off known-hosts checking. Or you can\ncheck that the host key matches a specific fingerprint:\n<b>host_key_check=md5:78:45:8e:14:57:4f:d5:45:83:0a:0e:f3:49:82:c9:c8</b>\n(<b>sha1:</b> can also be used as a prefix, but note that\nOpenSSH tools only use MD5 to print fingerprints).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Currently\nauthentication must be done using ssh-agent. Other\nauthentication methods may be supported in future.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note: Many ssh\nservers do not support an <b>fsync</b>-style operation. The\nssh driver cannot guarantee that disk flush requests are\nobeyed, and this causes a risk of disk corruption if the\nremote server or network goes down during writes. The driver\nwill print a warning when <b>fsync</b> is not supported:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">warning: ssh server ssh.example.com:22 does not support fsync</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">With\nsufficiently new versions of libssh and OpenSSH,\n<b>fsync</b> is supported.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>NVMe disk\nimages</b> <br>\nNVM Express (NVMe) storage controllers can be accessed\ndirectly by a userspace driver in QEMU. This bypasses the\nhost kernel file system and block layers while retaining\nQEMU block layer functionalities, such as block jobs, I/O\nthrottling, image formats, etc. Disk I/O performance is\ntypically higher than with <b>-drive file=/dev/sda</b> using\neither thread pool or linux-aio.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The controller\nwill be exclusively used by the QEMU process once started.\nTo be able to share storage between multiple VMs and other\napplications on the host, please use the file based\nprotocols.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before starting\nQEMU, bind the host NVMe controller to the host vfio-pci\ndriver. For example:</p>\n<pre style=\"margin-left:15%; margin-top: 1em\"># modprobe vfio-pci\n# lspci -n -s 0000:06:0d.0\n06:0d.0 0401: 1102:0002 (rev 08)\n# echo 0000:06:0d.0 &gt; /sys/bus/pci/devices/0000:06:0d.0/driver/unbind\n# echo 1102 0002 &gt; /sys/bus/pci/drivers/vfio-pci/new_id\n\n\n# qemu-system-x86_64 -drive file=nvme://HOST:BUS:SLOT.FUNC/NAMESPACE</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternative\nsyntax using properties:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">qemu-system-x86_64 -drive file.driver=nvme,file.device=HOST:BUS:SLOT.FUNC,file.namespace=NAMESPACE</pre>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>HOST</i>:<i>BUS</i>:<i>SLOT</i>.<i>FUNC</i>\nis the NVMe controller's PCI device address on the host.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>NAMESPACE</i>\nis the NVMe namespace number, starting from 1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Disk image\nfile locking</b> <br>\nBy default, QEMU tries to protect image files from\nunexpected concurrent access, as long as it's supported by\nthe block protocol driver and host operating system. If\nmultiple QEMU processes (including QEMU emulators and\nutilities) try to open the same image with conflicting\naccessing modes, all but the first one will get an\nerror.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This feature is\ncurrently supported by the file protocol on Linux with the\nOpen File Descriptor (OFD) locking API, and can be\nconfigured to fall back to POSIX locking if the POSIX host\ndoesn't support Linux OFD locking.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To explicitly\nenable image locking, specify &quot;locking=on&quot; in the\nfile protocol driver options. If OFD locking is not\npossible, a warning will be printed and the POSIX locking\nAPI will be used. In this case there is a risk that the lock\nwill get silently lost when doing hot plugging and block\njobs, due to the shortcomings of the POSIX locking API.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">QEMU\ntransparently handles lock handover during shared storage\nmigration. For shared virtual disk images between multiple\nVMs, the &quot;share-rw&quot; device option should be\nused.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By default, the\nguest has exclusive write access to its disk image. If the\nguest can safely share the disk image with other writers the\n<b>-device ...,share-rw=on</b> parameter can be used. This\nis only safe if the guest is running software, such as a\ncluster file system, that coordinates disk accesses to avoid\ncorruption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that\nshare-rw=on only declares the guest's ability to share the\ndisk. Some QEMU features, such as image file formats,\nrequire exclusive write access to the disk image and this is\nunaffected by the share-rw=on option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Alternatively,\nlocking can be fully disabled by &quot;locking=off&quot;\nblock device option. In the command line, the option is\nusually in the form of &quot;file.locking=off&quot; as the\nprotocol driver is normally placed as a &quot;file&quot;\nchild under a format driver. For example:</p>\n\n<pre style=\"margin-left:15%; margin-top: 1em\">-blockdev driver=qcow2,file.filename=/path/to/image,file.locking=off,file.driver=file</pre>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">To check if\nimage locking is active, check the output of the\n&quot;lslocks&quot; command on host and see if there are\nlocks held by the QEMU process on the image file. More than\none byte could be locked by the QEMU instance, each byte of\nwhich reflects a particular permission that is acquired or\nprotected by the running block driver.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Filter\ndrivers</b> <br>\nQEMU supports several filter drivers, which don't store any\ndata, but perform some additional tasks, hooking io\nrequests. <b><br>\npreallocate</b></p>\n\n<p style=\"margin-left:22%;\">The preallocate filter driver\nis intended to be inserted between format and protocol nodes\nand preallocates some additional space (expanding the\nprotocol file) when writing past the file&acirc;s end. This\ncan be useful for file-systems with slow allocation.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Supported\noptions: <b><br>\nprealloc-align</b></p>\n\n<p style=\"margin-left:32%;\">On preallocation, align the\nfile length to this value (in bytes), default 1M.</p>\n\n<p style=\"margin-left:22%;\"><b>prealloc-size</b></p>\n\n<p style=\"margin-left:32%;\">How much to preallocate (in\nbytes), default 128M.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The HTML\ndocumentation of QEMU for more precise information and Linux\nuser mode emulator invocation.</p>\n\n<h2>AUTHOR\n<a name=\"AUTHOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Fabrice Bellard\nand the QEMU Project developers</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">2022, The QEMU\nProject Developers</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#AUTHOR\">AUTHOR</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}