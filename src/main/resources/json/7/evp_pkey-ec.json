{"name":"evp_pkey-ec","description":"EVP_PKEY-EC, EVP_KEYMGMT-EC - EVP_PKEY EC keytype and algorithm support","body":"\n\n<h1 align=\"center\">EVP_PKEY-EC</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_PKEY-EC,\nEVP_KEYMGMT-EC - EVP_PKEY EC keytype and algorithm\nsupport</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b><small>EC</small></b> keytype is implemented in\nOpenSSL&rsquo;s default provider.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Common\n<small>EC</small> parameters</b> <br>\nThe normal way of specifying domain parameters for an\n<small>EC</small> curve is via the curve name\n&quot;group&quot;. For curves with no curve name, explicit\nparameters can be used that specify &quot;field-type&quot;,\n&quot;p&quot;, &quot;a&quot;, &quot;b&quot;,\n&quot;generator&quot; and &quot;order&quot;. Explicit\nparameters are supported for backwards compability reasons,\nbut they are not compliant with multiple standards\n(including <small>RFC5915</small> ) which only allow named\ncurves.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nKeyGen/Gettable/Import/Export types are available for the\nbuilt-in <small>EC</small> algorithm: <br>\n&quot;group&quot; (\n<b><small>OSSL_PKEY_PARAM_GROUP_NAME</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The curve name.</p>\n\n<p style=\"margin-left:11%;\">&quot;field-type&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_FIELD_TYPE</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">The value should be either\n&quot;prime-field&quot; or\n&quot;characteristic-two-field&quot;, which correspond to\nprime field Fp and binary field F2^m.</p>\n\n<p style=\"margin-left:11%;\">&quot;p&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_P</small></b> ) &lt;unsigned\ninteger&gt;</p>\n\n<p style=\"margin-left:17%;\">For a curve over Fp <i>p</i> is\nthe prime for the field. For a curve over F2^m <i>p</i>\nrepresents the irreducible polynomial - each bit represents\na term in the polynomial. Therefore, there will either be\nthree or five bits set dependent on whether the polynomial\nis a trinomial or a pentanomial.</p>\n\n<p style=\"margin-left:11%;\">&quot;a&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_A</small></b> ) &lt;unsigned\ninteger&gt; <br>\n&quot;b&quot; ( <b><small>OSSL_PKEY_PARAM_EC_B</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;seed&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_SEED</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\"><i>a</i> and <i>b</i>\nrepresents the coefficients of the curve For Fp: y^2 mod p =\nx^3 +ax + b mod p <small>OR</small> For F2^m: y^2 + xy = x^3\n+ ax^2 + b</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>seed</i> is\nan optional value that is for information purposes only. It\nrepresents the random number seed used to generate the\ncoefficient <i>b</i> from a random number.</p>\n\n<p style=\"margin-left:11%;\">&quot;generator&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_GENERATOR</small></b> )\n&lt;octet string&gt; <br>\n&quot;order&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_ORDER</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;cofactor&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_COFACTOR</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">The <i>generator</i> is a well\ndefined point on the curve chosen for cryptographic\noperations. The encoding conforms with Sec. 2.3.3 of the\n<small>SECG SEC 1</small> (&quot;Elliptic Curve\nCryptography&quot;) standard. See\n<b>EC_POINT_oct2point()</b>. Integers used for point\nmultiplications will be between 0 and <i>order</i> - 1.\n<i>cofactor</i> is an optional value. <i>order</i>\nmultiplied by the <i>cofactor</i> gives the number of points\non the curve.</p>\n\n\n<p style=\"margin-left:11%;\">&quot;decoded-from-explicit&quot;\n<br>\n(\n<b><small>OSSL_PKEY_PARAM_EC_DECODED_FROM_EXPLICIT_PARAMS</small></b>\n) &lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Gets a flag indicating wether\nthe key or parameters were decoded from explicit curve\nparameters. Set to 1 if so or 0 if a named curve was\nused.</p>\n\n<p style=\"margin-left:11%;\">&quot;use-cofactor-flag&quot; (\n<b><small>OSSL_PKEY_PARAM_USE_COFACTOR_ECDH</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Enable Cofactor\n<small>DH</small> ( <small>ECC CDH</small> ) if this value\nis 1, otherwise it uses normal <small>EC DH</small> if the\nvalue is zero. The cofactor variant multiplies the shared\nsecret by the <small>EC</small> curve&rsquo;s cofactor (note\nfor some curves the cofactor is 1).</p>\n\n<p style=\"margin-left:11%;\">&quot;encoding&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_ENCODING</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Set the format used for\nserializing the <small>EC</small> group parameters. Valid\nvalues are &quot;explicit&quot; or &quot;named_curve&quot;.\nThe default value is &quot;named_curve&quot;.</p>\n\n<p style=\"margin-left:11%;\">&quot;point-format&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_POINT_CONVERSION_FORMAT</small></b>\n) &lt; <small>UTF8</small> <br>\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets or gets the\npoint_conversion_form for the <i>key</i>. For a description\nof point_conversion_forms please see <a href=\"https://man.page/3/EC_POINT_new\">EC_POINT_new(3)</a>.\nValid values are &quot;uncompressed&quot; or\n&quot;compressed&quot;. The default value is\n&quot;uncompressed&quot;.</p>\n\n<p style=\"margin-left:11%;\">&quot;group-check&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_GROUP_CHECK_TYPE</small></b> )\n&lt; <small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets or Gets the type of group\ncheck done when <b>EVP_PKEY_param_check()</b> is called.\nValid values are &quot;default&quot;, &quot;named&quot; and\n&quot;named-nist&quot;. The &quot;named&quot; type checks\nthat the domain parameters match the inbuilt curve\nparameters, &quot;named-nist&quot; is similiar but also\nchecks that the named curve is a nist curve. The\n&quot;default&quot; type does domain parameter validation\nfor the OpenSSL default provider, but is equivalent to\n&quot;named-nist&quot; for the OpenSSL fips provider.</p>\n\n<p style=\"margin-left:11%;\">&quot;include-public&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_INCLUDE_PUBLIC</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Setting this value to 0\nindicates that the public key should not be included when\nencoding the private key. The default value of 1 will\ninclude the public key.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">See also\n<b><small>EVP_KEYEXCH-ECDH</small></b> (7) for the related\n<b><small>OSSL_EXCHANGE_PARAM_EC_ECDH_COFACTOR_MODE</small></b>\nparameter that can be set on a per-operation basis.</p>\n\n<p style=\"margin-left:11%;\">&quot;pub&quot; (\n<b><small>OSSL_PKEY_PARAM_PUB_KEY</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">The public key value in\n<small>EC</small> point format.</p>\n\n<p style=\"margin-left:11%;\">&quot;priv&quot; (\n<b><small>OSSL_PKEY_PARAM_PRIV_KEY</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">The private key value.</p>\n\n<p style=\"margin-left:11%;\">&quot;encoded-pub-key&quot; (\n<b><small>OSSL_PKEY_PARAM_ENCODED_PUBLIC_KEY</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">Used for getting and setting\nthe encoding of an <small>EC</small> public key. The public\nkey is expected to be a point conforming to Sec. 2.3.4 of\nthe <small>SECG SEC 1</small> (&quot;Elliptic Curve\nCryptography&quot;) standard.</p>\n\n<p style=\"margin-left:11%;\">&quot;qx&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_PUB_X</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Used for getting the\n<small>EC</small> public key X component.</p>\n\n<p style=\"margin-left:11%;\">&quot;qy&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_PUB_Y</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">Used for getting the\n<small>EC</small> public key Y component.</p>\n\n<p style=\"margin-left:11%;\">(\n<b><small>OSSL_PKEY_PARAM_DEFAULT_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Getter that returns the default\ndigest name. (Currently returns &quot;\n<small>SHA256&quot;</small> as of OpenSSL 3.0).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nGettable types are also available for the built-in\n<small>EC</small> algorithm: <br>\n&quot;basis-type&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_CHAR2_TYPE</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Supports the values\n&quot;tpBasis&quot; for a trinomial or &quot;ppBasis&quot;\nfor a pentanomial. This field is only used for a binary\nfield F2^m.</p>\n\n<p style=\"margin-left:11%;\">&quot;m&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_CHAR2_M</small></b> )\n&lt;integer&gt; <br>\n&quot;tp&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_CHAR2_TP_BASIS</small></b> )\n&lt;integer&gt; <br>\n&quot;k1&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_CHAR2_PP_K1</small></b> )\n&lt;integer&gt; <br>\n&quot;k2&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_CHAR2_PP_K2</small></b> )\n&lt;integer&gt; <br>\n&quot;k3&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_CHAR2_PP_K3</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">These fields are only used for\na binary field F2^m. <i>m</i> is the degree of the binary\nfield.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>tp</i> is\nthe middle bit of a trinomial so its value must be in the\nrange m &gt; tp &gt; 0.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><i>k1</i>,\n<i>k2</i> and <i>k3</i> are used to get the middle bits of a\npentanomial such that m &gt; k3 &gt; k2 &gt; k1 &gt; 0</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<b><small>EVP_PKEY</small></b> context can be obtained by\ncalling:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_PKEY_CTX\n*pctx = <br>\nEVP_PKEY_CTX_new_from_name(NULL, &quot;EC&quot;, NULL);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<b><small>EVP_PKEY</small></b> <small>ECDSA</small> or\n<small>ECDH</small> key can be generated with a\n&quot;P-256&quot; named group by calling:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">pkey =\nEVP_EC_gen(&quot;P-256&quot;);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">or like\nthis:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_PKEY *key =\nNULL; <br>\nOSSL_PARAM params[2]; <br>\nEVP_PKEY_CTX *gctx = <br>\nEVP_PKEY_CTX_new_from_name(NULL, &quot;EC&quot;, NULL); <br>\nEVP_PKEY_keygen_init(gctx); <br>\nparams[0] =\nOSSL_PARAM_construct_utf8_string(OSSL_PKEY_PARAM_GROUP_NAME,\n<br>\n&quot;P-256&quot;, 0); <br>\nparams[1] = OSSL_PARAM_construct_end(); <br>\nEVP_PKEY_CTX_set_params(gctx, params); <br>\nEVP_PKEY_generate(gctx, &amp;key); <br>\nEVP_PKEY_print_private(bio_out, key, 0, NULL); <br>\n... <br>\nEVP_PKEY_free(key); <br>\nEVP_PKEY_CTX_free(gctx);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\n<b><small>EVP_PKEY</small></b> <small>EC CDH</small>\n(Cofactor Diffie-Hellman) key can be generated with a\n&quot;K-571&quot; named group by calling:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">int use_cdh =\n1; <br>\nEVP_PKEY *key = NULL; <br>\nOSSL_PARAM params[3]; <br>\nEVP_PKEY_CTX *gctx = <br>\nEVP_PKEY_CTX_new_from_name(NULL, &quot;EC&quot;, NULL); <br>\nEVP_PKEY_keygen_init(gctx); <br>\nparams[0] =\nOSSL_PARAM_construct_utf8_string(OSSL_PKEY_PARAM_GROUP_NAME,\n<br>\n&quot;K-571&quot;, 0); <br>\n/* <br>\n* This curve has a cofactor that is not 1 - so setting CDH\nmode changes <br>\n* the behaviour. For many curves the cofactor is 1 - so\nsetting this has <br>\n* no effect. <br>\n*/ <br>\nparams[1] =\nOSSL_PARAM_construct_int(OSSL_PKEY_PARAM_USE_COFACTOR_ECDH,\n<br>\n&amp;use_cdh); <br>\nparams[2] = OSSL_PARAM_construct_end(); <br>\nEVP_PKEY_CTX_set_params(gctx, params); <br>\nEVP_PKEY_generate(gctx, &amp;key); <br>\nEVP_PKEY_print_private(bio_out, key, 0, NULL); <br>\n... <br>\nEVP_PKEY_free(key); <br>\nEVP_PKEY_CTX_free(gctx);</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/EVP_EC_gen\">EVP_EC_gen(3)</a>,\n<b><small>EVP_KEYMGMT</small></b> (3),\n<b><small>EVP_PKEY</small></b> (3),\n<a href=\"https://man.page/7/provider-keymgmt\">provider-keymgmt(7)</a>,\n<b><small>EVP_SIGNATURE-ECDSA</small></b> (7),\n<b><small>EVP_KEYEXCH-ECDH</small></b> (7)</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}