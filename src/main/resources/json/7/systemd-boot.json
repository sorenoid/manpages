{"name":"systemd-boot","description":"systemd-boot, sd-boot - A simple UEFI boot manager","body":"\n\n<h1 align=\"center\">SYSTEMD-BOOT</h1>\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd-boot,\nsd-boot - A simple UEFI boot manager</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-boot</b>\n(short: <b>sd-boot</b>) is a simple UEFI boot manager. It\nprovides a graphical menu to select the entry to boot and an\neditor for the kernel command line. <b>systemd-boot</b>\nsupports systems with UEFI firmware only.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-boot</b>\nloads boot entry information from the EFI system partition\n(ESP), usually mounted at /efi/, /boot/, or /boot/efi/\nduring OS runtime, as well as from the Extended Boot Loader\npartition if it exists (usually mounted to /boot/).\nConfiguration file fragments, kernels, initrds and other EFI\nimages to boot generally need to reside on the ESP or the\nExtended Boot Loader partition. Linux kernels must be built\nwith <b>CONFIG_EFI_STUB</b> to be able to be directly\nexecuted as an EFI image. During boot <b>systemd-boot</b>\nautomatically assembles a list of boot entries from the\nfollowing sources:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; Boot\nentries defined with <b><font color=\"#0000FF\">Boot Loader\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">description files located in\n/loader/entries/ on the ESP and the Extended Boot Loader\nPartition. These usually describe Linux kernel images with\nassociated initrd images, but alternatively may also\ndescribe arbitrary other EFI executables.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nUnified kernel images following the</font>\n<b><font color=\"#0000FF\">Boot Loader\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">, as executable EFI binaries in\n/EFI/Linux/ on the ESP and the Extended Boot Loader\nPartition.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe Microsoft Windows EFI boot manager, if\ninstalled</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe Apple macOS boot manager, if installed</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe EFI Shell binary, if installed</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nA reboot into the UEFI firmware setup option, if supported\nby the firmware</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>systemd-boot</b>\nsupports the following features:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nBasic boot manager configuration changes (such as timeout\nconfiguration, default boot entry selection, ...) may be\nmade directly from the boot loader UI at boot-time, as well\nas during system runtime with EFI variables.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe boot manager integrates with the <b>systemctl</b>\ncommand to implement features such as <b>systemctl reboot\n--boot-loader-entry=...</b> (for rebooting into a specific\nboot menu entry, i.e. &quot;reboot into Windows&quot;) and\n<b>systemctl reboot --boot-loader-menu=...</b> (for\nrebooting into the boot loader menu), by implementing\nthe</font> <b><font color=\"#0000FF\">Boot Loader\nInterface</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">. See <a href=\"https://man.page/1/systemctl\">systemctl(1)</a> for\ndetails.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nAn EFI variable set by the boot loader informs the OS about\nthe EFI System Partition used during boot. This is then used\nto automatically mount the correct EFI System Partition to\n/efi/ or /boot/ during OS runtime. See\n<b>systemd-gpt-auto-generator</b>(8) for details.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe boot manager provides information about the boot time\nspent in UEFI firmware using the</font>\n<b><font color=\"#0000FF\">Boot Loader Interface</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">. This information can be displayed\nusing <a href=\"https://man.page/1/systemd-analyze\">systemd-analyze(1)</a>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe boot manager implements boot counting and automatic\nfallback to older, working boot entries on failure.\nSee</font> <b><font color=\"#0000FF\">Automatic Boot\nAssessment</font></b>\n<small><font color=\"#000000\">[3]</font></small>\n<font color=\"#000000\">.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\nThe boot manager optionally reads a random seed from the ESP\npartition, combines it with a 'system token' stored in a\npersistent EFI variable and derives a random seed to use by\nthe OS as entropy pool initialization, providing a full\nentropy pool during early boot.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/bootctl\">bootctl(1)</a>\nmay be used from a running system to locate the ESP and the\nExtended Boot Loader Partition, list available entries, and\ninstall <b>systemd-boot</b> itself.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>kernel-install</b>(8)\nmay be used to copy kernel images onto the ESP or the\nExtended Boot Loader Partition and to generate description\nfiles compliant with the Boot Loader\nSpecification.</font></p>\n\n<h2>KEY BINDINGS\n<a name=\"KEY BINDINGS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing keys may be used in the boot menu:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&acirc;\n(Up), &acirc; (Down), j, k, PageUp, PageDown, Home,\nEnd</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Navigate\nup/down in the entry list</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&acirc;&micro;\n(Enter), &acirc; (Right)</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Boot\nselected entry</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">d</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Make\nselected entry the default</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">e</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Edit the\nkernel command line for selected entry</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">+,\nt</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Increase\nthe timeout before default entry is booted</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">-,\nT</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Decrease\nthe timeout</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">v</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Show\nsystemd-boot, UEFI, and firmware versions</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">P</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Print\nstatus</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Q</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Quit</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">h,\n?, F1</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Show a\nhelp screen</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Ctrl+l</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Reprint\nthe screen</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing keys may be pressed during bootup or in the boot\nmenu to directly boot a specific entry:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">l</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Linux</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">w</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Windows</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">a</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">macOS</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">s</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">EFI\nshell</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">1,\n2, 3, 4, 5, 6, 7, 8, 9</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Boot\nentry number 1 ... 9</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nboot menu is shown when a non-zero menu timeout has been\nconfigured. If the menu timeout has been set to zero, it is\nsufficient to press any key &mdash; before the boot loader\ninitializes &mdash; to bring up the boot menu, except for\nthe keys listed immediately above as they directly boot into\nthe selected boot menu item. Note that depending on the\nfirmware implementation the time window where key presses\nare accepted before the boot loader initializes might be\nshort. If the window is missed, reboot and try again,\npossibly pressing a suitable key (e.g. the space bar)\ncontinuously; on most systems it should be possible to hit\nthe time window after a few attempts. To avoid this problem,\nconsider setting a non-zero timeout, thus showing the boot\nmenu unconditionally. Some desktop environments might offer\nan option to directly boot into the boot menu, to avoid the\nproblem altogether. Alternatively, use the command line\n<b>systemctl reboot --boot-loader-menu=0</b> from the\nshell.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\nthe editor, most keys simply insert themselves, but the\nfollowing keys may be used to perform additional\nactions:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&acirc;\n(Left), &acirc; (Right), Home, End</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Navigate\nleft/right</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Esc</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Abort the\nedit and quit the editor</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Ctrl+k</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Clear the\ncommand line</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Ctrl+w,\nAlt+Backspace</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Delete\nword backwards</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Alt+d</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Delete\nword forwards</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">&acirc;&micro;\n(Enter)</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Boot\nentry with the edited command line</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Note\nthat unless configured otherwise in the UEFI firmware,\nsystemd-boot will use the US keyboard layout, so key labels\nmight not match for keys like +/-.</font></p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfiles <b>systemd-boot</b> processes generally reside on the\nUEFI ESP which is usually mounted to /efi/, /boot/ or\n/boot/efi/ during OS runtime. It also processes files on the\nExtended Boot Loader partition which is typically mounted to\n/boot/, if it exists. <b>systemd-boot</b> reads runtime\nconfiguration such as the boot timeout and default entry\nfrom /loader/loader.conf on the ESP (in combination with\ndata read from EFI variables). See <b>loader.conf</b>(5).\nBoot entry description files following the</font>\n<b><font color=\"#0000FF\">Boot Loader\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">are read from /loader/entries/ on the\nESP and the Extended Boot Loader partition. Unified kernel\nboot entries following the</font>\n<b><font color=\"#0000FF\">Boot Loader\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">are read from /EFI/Linux/ on the ESP\nand the Extended Boot Loader partition. Optionally, a random\nseed for early boot entropy pool provisioning is stored in\n/loader/random-seed in the ESP.</font></p>\n\n<h2>EFI VARIABLES\n<a name=\"EFI VARIABLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nfollowing EFI variables are defined, set and read by\n<b>systemd-boot</b>, under the vendor UUID\n&quot;4a67b082-0a4c-41cf-b6c7-440b29bb8c4f&quot;, for\ncommunication between the OS and the boot loader:</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderBootCountPath</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">If boot\ncounting is enabled, contains the path to the file in whose\nname the boot counters are encoded. Set by the boot loader.\n<b>systemd-bless-boot.service</b>(8) uses this information\nto mark a boot as successful as determined by the successful\nactivation of the boot-complete.target target\nunit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderConfigTimeout</i>,\n<i>LoaderConfigTimeoutOneShot</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The menu\ntimeout in seconds. Read by the boot loader.\n<i>LoaderConfigTimeout</i> is maintained persistently, while\n<i>LoaderConfigTimeoutOneShot</i> is a one-time override\nwhich is read once (in which case it takes precedence over\n<i>LoaderConfigTimeout</i>) and then removed.\n<i>LoaderConfigTimeout</i> may be manipulated with the t/T\nkeys, see above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderDevicePartUUID</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Contains\nthe partition UUID of the EFI System Partition the boot\nloader was run from. Set by the boot loader.\n<b>systemd-gpt-auto-generator</b>(8) uses this information\nto automatically find the disk booted from, in order to\ndiscover various other partitions on the same disk\nautomatically.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderEntries</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A list of\nthe identifiers of all discovered boot loader entries. Set\nby the boot loader.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderEntryDefault</i>,\n<i>LoaderEntryOneShot</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nidentifier of the default boot loader entry. Set primarily\nby the OS and read by the boot loader.\n<i>LoaderEntryOneShot</i> sets the default entry for the\nnext boot only, while <i>LoaderEntryDefault</i> sets it\npersistently for all future boots. <a href=\"https://man.page/1/bootctl\">bootctl(1)</a>'s\n<b>set-default</b> and <b>set-oneshot</b> commands make use\nof these variables. The boot loader modifies\n<i>LoaderEntryDefault</i> on request, when the d key is\nused, see above.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderEntrySelected</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The\nidentifier of the boot loader entry currently being booted.\nSet by the boot loader.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderFeatures</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A set of\nflags indicating the features the boot loader supports. Set\nby the boot loader. Use <a href=\"https://man.page/1/bootctl\">bootctl(1)</a> to view this\ndata.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderFirmwareInfo</i>,\n<i>LoaderFirmwareType</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Brief\nfirmware information. Set by the boot loader. Use\n<a href=\"https://man.page/1/bootctl\">bootctl(1)</a> to view this data.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderImageIdentifier</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The path\nof executable of the boot loader used for the current boot,\nrelative to the EFI System Partition's root directory. Set\nby the boot loader. Use <a href=\"https://man.page/1/bootctl\">bootctl(1)</a> to view this\ndata.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderInfo</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Brief\ninformation about the boot loader. Set by the boot loader.\nUse <a href=\"https://man.page/1/bootctl\">bootctl(1)</a> to view this data.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderTimeExecUSec</i>,\n<i>LoaderTimeInitUSec</i>,\n<i>LoaderTimeMenuUsec</i></font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Information\nabout the time spent in various parts of the boot loader.\nSet by the boot loader. Use <a href=\"https://man.page/1/systemd-analyze\">systemd-analyze(1)</a> to\nview this data.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderRandomSeed</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A binary\nrandom seed <b>systemd-boot</b> may optionally pass to the\nOS. This is a volatile EFI variable that is hashed at boot\nfrom the combination of a random seed stored in the ESP (in\n/loader/random-seed) and a &quot;system token&quot;\npersistently stored in the EFI variable\n<i>LoaderSystemToken</i> (see below). During early OS boot\nthe system manager reads this variable and passes it to the\nOS kernel's random pool, crediting the full entropy it\ncontains. This is an efficient way to ensure the system\nstarts up with a fully initialized kernel random pool\n&mdash; as early as the initial RAM disk phase.\n<b>systemd-boot</b> reads the random seed from the ESP,\ncombines it with the &quot;system token&quot;, and both\nderives a new random seed to update in-place the seed stored\nin the ESP, and the random seed to pass to the OS from it\nvia SHA256 hashing in counter mode. This ensures that\ndifferent physical systems that boot the same\n&quot;golden&quot; OS image &mdash; i.e. containing the same\nrandom seed file in the ESP &mdash; will still pass a\ndifferent random seed to the OS. It is made sure the random\nseed stored in the ESP is fully overwritten before the OS is\nbooted, to ensure different random seed data is used between\nsubsequent boots.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">See</font>\n<b><font color=\"#0000FF\">Random Seeds</font></b>\n<small><font color=\"#000000\">[4]</font></small>\n<font color=\"#000000\">for further information.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><i>LoaderSystemToken</i></font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A binary\nrandom data field, that is used for generating the random\nseed to pass to the OS (see above). Note that this random\ndata is generally only generated once, during OS\ninstallation, and is then never updated again.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Many\nof these variables are defined by the</font>\n<b><font color=\"#0000FF\">Boot Loader Interface</font></b>\n<small><font color=\"#000000\">[2]</font></small>\n<font color=\"#000000\">.</font></p>\n\n<h2>BOOT COUNTING\n<a name=\"BOOT COUNTING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>systemd-boot</b>\nimplements a simple boot counting mechanism on top of\nthe</font> <b><font color=\"#0000FF\">Boot Loader\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">, for automatic and unattended\nfallback to older kernel versions/boot loader entries when a\nspecific entry continuously fails. Any boot loader entry\nfile and unified kernel image file that contains a\n&quot;+&quot; followed by one or two numbers (if two they\nneed to be separated by a &quot;-&quot;), before the .conf\nor .efi suffix is subject to boot counting: the first of the\ntwo numbers ('tries left') is decreased by one on every boot\nattempt, the second of the two numbers ('tries done') is\nincreased by one (if 'tries done' is absent it is considered\nequivalent to 0). Depending on the current value of these\ntwo counters the boot entry is considered to be in one of\nthree states:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">1.\nIf the 'tries left' counter of an entry is greater than zero\nthe entry is considered to be in 'indeterminate' state. This\nmeans the entry has not completed booting successfully yet,\nbut also hasn't been determined not to work.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">2.\nIf the 'tries left' counter of an entry is zero it is\nconsidered to be in 'bad' state. This means no further\nattempts to boot this item will be made (that is, unless all\nother boot entries are also in 'bad' state), as all attempts\nto boot this entry have not completed\nsuccessfully.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">3.\nIf the 'tries left' and 'tries done' counters of an entry\nare absent it is considered to be in 'good' state. This\nmeans further boot counting for the entry is turned off, as\nit successfully booted at least once. The\n<b>systemd-bless-boot.service</b>(8) service moves the\ncurrently booted entry from 'indeterminate' into 'good'\nstate when a boot attempt completed successfully.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Generally,\nwhen new entries are added to the boot loader, they first\nstart out in 'indeterminate' state, i.e. with a 'tries left'\ncounter greater than zero. The boot entry remains in this\nstate until either it managed to complete a full boot\nsuccessfully at least once (in which case it will be in\n'good' state) &mdash; or the 'tries left' counter reaches\nzero (in which case it will be in 'bad' state).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Example:\nlet's say a boot loader entry file foo.conf is set up for 3\nboot tries. The installer will hence create it under the\nname foo+3.conf. On first boot, the boot loader will rename\nit to foo+2-1.conf. If that boot does not complete\nsuccessfully, the boot loader will rename it to foo+1-2.conf\non the following boot. If that fails too, it will finally be\nrenamed foo+0-3.conf by the boot loader on next boot, after\nwhich it will be considered 'bad'. If the boot succeeds\nhowever the entry file will be renamed to foo.conf by the\nOS, so that it is considered 'good' from then on.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\nboot menu takes the 'tries left' counter into account when\nsorting the menu entries: entries in 'bad' state are ordered\nat the beginning of the list, and entries in 'good' or\n'indeterminate' at the end. The user can freely choose to\nboot any entry of the menu, including those already marked\n'bad'. If the menu entry to boot is automatically\ndetermined, this means that 'good' or 'indeterminate'\nentries are generally preferred (as the bottom item of the\nmenu is the one booted by default), and 'bad' entries will\nonly be considered if there are no 'good' or 'indeterminate'\nentries left.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">The\n<b>kernel-install</b>(8) kernel install framework optionally\nsets the initial 'tries left' counter to the value specified\nin /etc/kernel/tries when a boot loader entry is first\ncreated.</font></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><a href=\"https://man.page/1/bootctl\">bootctl(1)</a>,\n<b>loader.conf</b>(5), <b>systemd-bless-boot.service</b>(8),\n<b>systemd-boot-system-token.service</b>(8),\n<b>kernel-install</b>(8),</font>\n<b><font color=\"#0000FF\">Boot Loader\nSpecification</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">,</font> <b><font color=\"#0000FF\">Boot\nLoader Interface</font></b>\n<small><font color=\"#000000\">[2]</font></small></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Boot\nLoader Specification</font></p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/BOOT_LOADER_SPECIFICATION</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">2.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"32%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Boot\nLoader Interface</font></p></td>\n<td width=\"51%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/BOOT_LOADER_INTERFACE</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">3.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"38%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Automatic\nBoot Assessment</font></p></td>\n<td width=\"45%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/AUTOMATIC_BOOT_ASSESSMENT</font></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">4.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"18%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">Random\nSeeds</font></p> </td>\n<td width=\"65%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">https://systemd.io/RANDOM_SEEDS</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#KEY BINDINGS\">KEY BINDINGS</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#EFI VARIABLES\">EFI VARIABLES</a>","<a href=\"#BOOT COUNTING\">BOOT COUNTING</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}