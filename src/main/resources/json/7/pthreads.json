{"name":"pthreads","description":"pthreads -\nPOSIX threads\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nPOSIX.1\nspecifies a set of interfaces (functions, header files) for\nthreaded programming commonly known as POSIX threads, or\nPthreads. A single process can contain multiple threads, all\nof which are executing the same program. These threads share\nthe same global memory (data and heap segments), but each\nthread has its own stack (automatic variables).\n\nPOSIX.1 also\nrequires that threads share a range of other attributes\n(i.e., these attributes are process-wide rather than\nper-thread):\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>process ID</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>parent process ID</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>process group ID and session ID</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>controlling terminal</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>user and group IDs</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>open file descriptors</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>record locks (see <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>signal dispositions</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>file mode creation mask (<a href=\"https://man.page/2/umask\">umask(2)</a>)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>current directory (<a href=\"https://man.page/2/chdir\">chdir(2)</a>) and root directory\n(<a href=\"https://man.page/2/chroot\">chroot(2)</a>) </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>interval timers (<a href=\"https://man.page/2/setitimer\">setitimer(2)</a>) and POSIX timers\n(<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>) </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>nice value (<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>resource limits (<a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>measurements of the consumption of CPU time\n(<a href=\"https://man.page/2/times\">times(2)</a>) and resources (<a href=\"https://man.page/2/getrusage\">getrusage(2)</a>)</td></tr>\n</table>\n\nAs well as the\nstack, POSIX.1 specifies that various other attributes are\ndistinct for each thread, including:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p style=\"margin-top: 1em\">thread ID (the <i>pthread_t</i>\ndata type)</td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>signal mask (<a href=\"https://man.page/3/pthread_sigmask\">pthread_sigmask(3)</a>)</td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>the <i>errno</i> variable</td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>alternate signal stack (<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>)</td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>real-time scheduling policy and priority\n(<a href=\"https://man.page/7/sched\">sched(7)</a>) </td>\n<td width=\"6%\">\n</td></tr>\n</table>\n\nThe following\nLinux-specific features are also per-thread:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p style=\"margin-top: 1em\">capabilities (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>) </td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>CPU affinity (<a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>)</td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<b>Pthreads\nfunction return values</b> <br>\nMost pthreads functions return 0 on success, and an error\nnumber on failure. The error numbers that can be returned\nhave the same meaning as the error numbers returned in\n<i>errno</i> by conventional system calls and C library\nfunctions. Note that the pthreads functions do not set\n<i>errno</i>. For each of the pthreads functions that can\nreturn an error, POSIX.1-2001 specifies that the function\ncan never fail with the error <b>EINTR</b>.\n\n<b>Thread\nIDs</b> <br>\nEach of the threads in a process has a unique thread\nidentifier (stored in the type <i>pthread_t</i>). This\nidentifier is returned to the caller of\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, and a thread can obtain its own\nthread identifier using <a href=\"https://man.page/3/pthread_self\">pthread_self(3)</a>.\n\nThread IDs are\nguaranteed to be unique only within a process. (In all\npthreads functions that accept a thread ID as an argument,\nthat ID by definition refers to a thread in the same process\nas the caller.)\n\nThe system may\nreuse a thread ID after a terminated thread has been joined,\nor a detached thread has terminated. POSIX says: &quot;If an\napplication attempts to use a thread ID whose lifetime has\nended, the behavior is undefined.&quot;\n\n<b>Thread-safe\nfunctions</b> <br>\nA thread-safe function is one that can be safely (i.e., it\nwill deliver the same results regardless of whether it is)\ncalled from multiple threads at the same time.\n\nPOSIX.1-2001\nand POSIX.1-2008 require that all functions specified in the\nstandard shall be thread-safe, except for the following\nfunctions:\n\n<p style=\"margin-left:17%; margin-top: 1em\">asctime() <br>\nbasename() <br>\ncatgets() <br>\ncrypt() <br>\nctermid() if passed a non-NULL argument <br>\nctime() <br>\ndbm_clearerr() <br>\ndbm_close() <br>\ndbm_delete() <br>\ndbm_error() <br>\ndbm_fetch() <br>\ndbm_firstkey() <br>\ndbm_nextkey() <br>\ndbm_open() <br>\ndbm_store() <br>\ndirname() <br>\ndlerror() <br>\ndrand48() <br>\necvt() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nencrypt() <br>\nendgrent() <br>\nendpwent() <br>\nendutxent() <br>\nfcvt() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nftw() <br>\ngcvt() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\ngetc_unlocked() <br>\ngetchar_unlocked() <br>\ngetdate() <br>\ngetenv() <br>\ngetgrent() <br>\ngetgrgid() <br>\ngetgrnam() <br>\ngethostbyaddr() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostbyname() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostent() <br>\ngetlogin() <br>\ngetnetbyaddr() <br>\ngetnetbyname() <br>\ngetnetent() <br>\ngetopt() <br>\ngetprotobyname() <br>\ngetprotobynumber() <br>\ngetprotoent() <br>\ngetpwent() <br>\ngetpwnam() <br>\ngetpwuid() <br>\ngetservbyname() <br>\ngetservbyport() <br>\ngetservent() <br>\ngetutxent() <br>\ngetutxid() <br>\ngetutxline() <br>\ngmtime() <br>\nhcreate() <br>\nhdestroy() <br>\nhsearch() <br>\ninet_ntoa() <br>\nl64a() <br>\nlgamma() <br>\nlgammaf() <br>\nlgammal() <br>\nlocaleconv() <br>\nlocaltime() <br>\nlrand48() <br>\nmrand48() <br>\nnftw() <br>\nnl_langinfo() <br>\nptsname() <br>\nputc_unlocked() <br>\nputchar_unlocked() <br>\nputenv() <br>\npututxline() <br>\nrand() <br>\nreaddir() <br>\nsetenv() <br>\nsetgrent() <br>\nsetkey() <br>\nsetpwent() <br>\nsetutxent() <br>\nstrerror() <br>\nstrsignal() [Added in POSIX.1-2008] <br>\nstrtok() <br>\nsystem() [Added in POSIX.1-2008] <br>\ntmpnam() if passed a non-NULL argument <br>\nttyname() <br>\nunsetenv() <br>\nwcrtomb() if its final argument is NULL <br>\nwcsrtombs() if its final argument is NULL <br>\nwcstombs() <br>\nwctomb()\n\n\n<b>Async-cancel-safe\nfunctions</b> <br>\nAn async-cancel-safe function is one that can be safely\ncalled in an application where asynchronous cancelability is\nenabled (see <a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>).\n\nOnly the\nfollowing functions are required to be async-cancel-safe by\nPOSIX.1-2001 and POSIX.1-2008:\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">pthread_cancel()\n<br>\npthread_setcancelstate() <br>\npthread_setcanceltype()\n\n\n<b>Cancellation\npoints</b> <br>\nPOSIX.1 specifies that certain functions must, and certain\nother functions may, be cancellation points. If a thread is\ncancelable, its cancelability type is deferred, and a\ncancellation request is pending for the thread, then the\nthread is canceled when it calls a function that is a\ncancellation point.\n\nThe following\nfunctions are required to be cancellation points by\nPOSIX.1-2001 and/or POSIX.1-2008:\n\n<p style=\"margin-left:17%; margin-top: 1em\">accept() <br>\naio_suspend() <br>\nclock_nanosleep() <br>\nclose() <br>\nconnect() <br>\ncreat() <br>\nfcntl() F_SETLKW <br>\nfdatasync() <br>\nfsync() <br>\ngetmsg() <br>\ngetpmsg() <br>\nlockf() F_LOCK <br>\nmq_receive() <br>\nmq_send() <br>\nmq_timedreceive() <br>\nmq_timedsend() <br>\nmsgrcv() <br>\nmsgsnd() <br>\nmsync() <br>\nnanosleep() <br>\nopen() <br>\nopenat() [Added in POSIX.1-2008] <br>\npause() <br>\npoll() <br>\npread() <br>\npselect() <br>\npthread_cond_timedwait() <br>\npthread_cond_wait() <br>\npthread_join() <br>\npthread_testcancel() <br>\nputmsg() <br>\nputpmsg() <br>\npwrite() <br>\nread() <br>\nreadv() <br>\nrecv() <br>\nrecvfrom() <br>\nrecvmsg() <br>\nselect() <br>\nsem_timedwait() <br>\nsem_wait() <br>\nsend() <br>\nsendmsg() <br>\nsendto() <br>\nsigpause() [POSIX.1-2001 only (moves to &quot;may&quot; list\nin POSIX.1-2008)] <br>\nsigsuspend() <br>\nsigtimedwait() <br>\nsigwait() <br>\nsigwaitinfo() <br>\nsleep() <br>\nsystem() <br>\ntcdrain() <br>\nusleep() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nwait() <br>\nwaitid() <br>\nwaitpid() <br>\nwrite() <br>\nwritev()\n\nThe following\nfunctions may be cancellation points according to\nPOSIX.1-2001 and/or POSIX.1-2008:\n\n<p style=\"margin-left:17%; margin-top: 1em\">access() <br>\nasctime() <br>\nasctime_r() <br>\ncatclose() <br>\ncatgets() <br>\ncatopen() <br>\nchmod() [Added in POSIX.1-2008] <br>\nchown() [Added in POSIX.1-2008] <br>\nclosedir() <br>\ncloselog() <br>\nctermid() <br>\nctime() <br>\nctime_r() <br>\ndbm_close() <br>\ndbm_delete() <br>\ndbm_fetch() <br>\ndbm_nextkey() <br>\ndbm_open() <br>\ndbm_store() <br>\ndlclose() <br>\ndlopen() <br>\ndprintf() [Added in POSIX.1-2008] <br>\nendgrent() <br>\nendhostent() <br>\nendnetent() <br>\nendprotoent() <br>\nendpwent() <br>\nendservent() <br>\nendutxent() <br>\nfaccessat() [Added in POSIX.1-2008] <br>\nfchmod() [Added in POSIX.1-2008] <br>\nfchmodat() [Added in POSIX.1-2008] <br>\nfchown() [Added in POSIX.1-2008] <br>\nfchownat() [Added in POSIX.1-2008] <br>\nfclose() <br>\nfcntl() (for any value of cmd argument) <br>\nfflush() <br>\nfgetc() <br>\nfgetpos() <br>\nfgets() <br>\nfgetwc() <br>\nfgetws() <br>\nfmtmsg() <br>\nfopen() <br>\nfpathconf() <br>\nfprintf() <br>\nfputc() <br>\nfputs() <br>\nfputwc() <br>\nfputws() <br>\nfread() <br>\nfreopen() <br>\nfscanf() <br>\nfseek() <br>\nfseeko() <br>\nfsetpos() <br>\nfstat() <br>\nfstatat() [Added in POSIX.1-2008] <br>\nftell() <br>\nftello() <br>\nftw() <br>\nfutimens() [Added in POSIX.1-2008] <br>\nfwprintf() <br>\nfwrite() <br>\nfwscanf() <br>\ngetaddrinfo() <br>\ngetc() <br>\ngetc_unlocked() <br>\ngetchar() <br>\ngetchar_unlocked() <br>\ngetcwd() <br>\ngetdate() <br>\ngetdelim() [Added in POSIX.1-2008] <br>\ngetgrent() <br>\ngetgrgid() <br>\ngetgrgid_r() <br>\ngetgrnam() <br>\ngetgrnam_r() <br>\ngethostbyaddr() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostbyname() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostent() <br>\ngethostid() <br>\ngethostname() <br>\ngetline() [Added in POSIX.1-2008] <br>\ngetlogin() <br>\ngetlogin_r() <br>\ngetnameinfo() <br>\ngetnetbyaddr() <br>\ngetnetbyname() <br>\ngetnetent() <br>\ngetopt() (if opterr is nonzero) <br>\ngetprotobyname() <br>\ngetprotobynumber() <br>\ngetprotoent() <br>\ngetpwent() <br>\ngetpwnam() <br>\ngetpwnam_r() <br>\ngetpwuid() <br>\ngetpwuid_r() <br>\ngets() <br>\ngetservbyname() <br>\ngetservbyport() <br>\ngetservent() <br>\ngetutxent() <br>\ngetutxid() <br>\ngetutxline() <br>\ngetwc() <br>\ngetwchar() <br>\ngetwd() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nglob() <br>\niconv_close() <br>\niconv_open() <br>\nioctl() <br>\nlink() <br>\nlinkat() [Added in POSIX.1-2008] <br>\nlio_listio() [Added in POSIX.1-2008] <br>\nlocaltime() <br>\nlocaltime_r() <br>\nlockf() [Added in POSIX.1-2008] <br>\nlseek() <br>\nlstat() <br>\nmkdir() [Added in POSIX.1-2008] <br>\nmkdirat() [Added in POSIX.1-2008] <br>\nmkdtemp() [Added in POSIX.1-2008] <br>\nmkfifo() [Added in POSIX.1-2008] <br>\nmkfifoat() [Added in POSIX.1-2008] <br>\nmknod() [Added in POSIX.1-2008] <br>\nmknodat() [Added in POSIX.1-2008] <br>\nmkstemp() <br>\nmktime() <br>\nnftw() <br>\nopendir() <br>\nopenlog() <br>\npathconf() <br>\npclose() <br>\nperror() <br>\npopen() <br>\nposix_fadvise() <br>\nposix_fallocate() <br>\nposix_madvise() <br>\nposix_openpt() <br>\nposix_spawn() <br>\nposix_spawnp() <br>\nposix_trace_clear() <br>\nposix_trace_close() <br>\nposix_trace_create() <br>\nposix_trace_create_withlog() <br>\nposix_trace_eventtypelist_getnext_id() <br>\nposix_trace_eventtypelist_rewind() <br>\nposix_trace_flush() <br>\nposix_trace_get_attr() <br>\nposix_trace_get_filter() <br>\nposix_trace_get_status() <br>\nposix_trace_getnext_event() <br>\nposix_trace_open() <br>\nposix_trace_rewind() <br>\nposix_trace_set_filter() <br>\nposix_trace_shutdown() <br>\nposix_trace_timedgetnext_event() <br>\nposix_typed_mem_open() <br>\nprintf() <br>\npsiginfo() [Added in POSIX.1-2008] <br>\npsignal() [Added in POSIX.1-2008] <br>\npthread_rwlock_rdlock() <br>\npthread_rwlock_timedrdlock() <br>\npthread_rwlock_timedwrlock() <br>\npthread_rwlock_wrlock() <br>\nputc() <br>\nputc_unlocked() <br>\nputchar() <br>\nputchar_unlocked() <br>\nputs() <br>\npututxline() <br>\nputwc() <br>\nputwchar() <br>\nreaddir() <br>\nreaddir_r() <br>\nreadlink() [Added in POSIX.1-2008] <br>\nreadlinkat() [Added in POSIX.1-2008] <br>\nremove() <br>\nrename() <br>\nrenameat() [Added in POSIX.1-2008] <br>\nrewind() <br>\nrewinddir() <br>\nscandir() [Added in POSIX.1-2008] <br>\nscanf() <br>\nseekdir() <br>\nsemop() <br>\nsetgrent() <br>\nsethostent() <br>\nsetnetent() <br>\nsetprotoent() <br>\nsetpwent() <br>\nsetservent() <br>\nsetutxent() <br>\nsigpause() [Added in POSIX.1-2008] <br>\nstat() <br>\nstrerror() <br>\nstrerror_r() <br>\nstrftime() <br>\nsymlink() <br>\nsymlinkat() [Added in POSIX.1-2008] <br>\nsync() <br>\nsyslog() <br>\ntmpfile() <br>\ntmpnam() <br>\nttyname() <br>\nttyname_r() <br>\ntzset() <br>\nungetc() <br>\nungetwc() <br>\nunlink() <br>\nunlinkat() [Added in POSIX.1-2008] <br>\nutime() [Added in POSIX.1-2008] <br>\nutimensat() [Added in POSIX.1-2008] <br>\nutimes() [Added in POSIX.1-2008] <br>\nvdprintf() [Added in POSIX.1-2008] <br>\nvfprintf() <br>\nvfwprintf() <br>\nvprintf() <br>\nvwprintf() <br>\nwcsftime() <br>\nwordexp() <br>\nwprintf() <br>\nwscanf()\n\nAn\nimplementation may also mark other functions not specified\nin the standard as cancellation points. In particular, an\nimplementation is likely to mark any nonstandard function\nthat may block as a cancellation point. (This includes most\nfunctions that can touch files.)\n\nIt should be\nnoted that even if an application is not using asynchronous\ncancellation, that calling a function from the above list\nfrom an asynchronous signal handler may cause the equivalent\nof asynchronous cancellation. The underlying user code may\nnot expect asynchronous cancellation and the state of the\nuser data may become inconsistent. Therefore signals should\nbe used with caution when entering a region of deferred\ncancellation.\n\n<b>Compiling on\nLinux</b> <br>\nOn Linux, programs that use the Pthreads API should be\ncompiled using <i>cc -pthread</i>.\n\n<b>Linux\nimplementations of POSIX threads</b> <br>\nOver time, two threading implementations have been provided\nby the GNU C library on Linux: <b><br>\nLinuxThreads</b>\n\n<p style=\"margin-left:22%;\">This is the original Pthreads\nimplementation. Since glibc 2.4, this implementation is no\nlonger supported.\n\n<p style=\"margin-left:11%;\"><b>NPTL</b> (Native POSIX\nThreads Library)\n\n<p style=\"margin-left:22%;\">This is the modern Pthreads\nimplementation. By comparison with LinuxThreads, NPTL\nprovides closer conformance to the requirements of the\nPOSIX.1 specification and better performance when creating\nlarge numbers of threads. NPTL is available since glibc\n2.3.2, and requires features that are present in the Linux\n2.6 kernel.\n\nBoth of these\nare so-called 1:1 implementations, meaning that each thread\nmaps to a kernel scheduling entity. Both threading\nimplementations employ the Linux <a href=\"https://man.page/2/clone\">clone(2)</a> system\ncall. In NPTL, thread synchronization primitives (mutexes,\nthread joining, and so on) are implemented using the Linux\n<a href=\"https://man.page/2/futex\">futex(2)</a> system call.\n\n\n<b>LinuxThreads</b>\n<br>\nThe notable features of this implementation are the\nfollowing:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>In addition to the main (initial) thread, and the\nthreads that the program creates using\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, the implementation creates a\n&quot;manager&quot; thread. This thread handles thread\ncreation and termination. (Problems can result if this\nthread is inadvertently killed.)</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Signals are used internally by the implementation. On\nLinux 2.2 and later, the first three real-time signals are\nused (see also <a href=\"https://man.page/7/signal\">signal(7)</a>). On older Linux kernels,\n<b>SIGUSR1</b> and <b>SIGUSR2</b> are used. Applications\nmust avoid the use of whichever set of signals is employed\nby the implementation.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share process IDs. (In effect,\nLinuxThreads threads are implemented as processes which\nshare more information than usual, but which do not share a\ncommon process ID.) LinuxThreads threads (including the\nmanager thread) are visible as separate processes using\n<a href=\"https://man.page/1/ps\">ps(1)</a>. </td></tr>\n</table>\n\nThe\nLinuxThreads implementation deviates from the POSIX.1\nspecification in a number of ways, including the\nfollowing:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Calls to <a href=\"https://man.page/2/getpid\">getpid(2)</a> return\na different value in each thread.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Calls to <a href=\"https://man.page/2/getppid\">getppid(2)</a> in threads other than the\nmain thread return the process ID of the manager thread;\ninstead <a href=\"https://man.page/2/getppid\">getppid(2)</a> in these threads should return the\nsame value as <a href=\"https://man.page/2/getppid\">getppid(2)</a> in the main thread.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>When one thread creates a new child process using\n<a href=\"https://man.page/2/fork\">fork(2)</a>, any thread should be able to <a href=\"https://man.page/2/wait\">wait(2)</a>\non the child. However, the implementation allows only the\nthread that created the child to <a href=\"https://man.page/2/wait\">wait(2)</a> on it.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>When a thread calls <a href=\"https://man.page/2/execve\">execve(2)</a>, all other threads\nare terminated (as required by POSIX.1). However, the\nresulting process has the same PID as the thread that called\n<a href=\"https://man.page/2/execve\">execve(2)</a>: it should have the same PID as the main\nthread. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share user and group IDs. This can cause\ncomplications with set-user-ID programs and can cause\nfailures in Pthreads functions if an application changes its\ncredentials using <a href=\"https://man.page/2/seteuid\">seteuid(2)</a> or similar.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share a common session ID and process\ngroup ID.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share record locks created using\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The information returned by <a href=\"https://man.page/2/times\">times(2)</a> and\n<a href=\"https://man.page/2/getrusage\">getrusage(2)</a> is per-thread rather than\nprocess-wide. </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share semaphore undo values (see\n<a href=\"https://man.page/2/semop\">semop(2)</a>). </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share interval timers.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share a common nice value.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX.1 distinguishes the notions of signals that are\ndirected to the process as a whole and signals that are\ndirected to individual threads. According to POSIX.1, a\nprocess-directed signal (sent using <a href=\"https://man.page/2/kill\">kill(2)</a>, for\nexample) should be handled by a single, arbitrarily selected\nthread within the process. LinuxThreads does not support the\nnotion of process-directed signals: signals may be sent only\nto specific threads.</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads have distinct alternate signal stack settings.\nHowever, a new thread&rsquo;s alternate signal stack\nsettings are copied from the thread that created it, so that\nthe threads initially share an alternate signal stack. (A\nnew thread should start with no alternate signal stack\ndefined. If two threads handle signals on their shared\nalternate signal stack at the same time, unpredictable\nprogram failures are likely to occur.)</td></tr>\n</table>\n\n<b>NPTL</b>\n<br>\nWith NPTL, all of the threads in a process are placed in the\nsame thread group; all members of a thread group share the\nsame PID. NPTL does not employ a manager thread.\n\nNPTL makes\ninternal use of the first two real-time signals; these\nsignals cannot be used in applications. See <a href=\"https://man.page/7/nptl\">nptl(7)</a>\nfor further details.\n\nNPTL still has\nat least one nonconformance with POSIX.1:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\">Threads do not share a common\nnice value.</td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\nSome NPTL\nnonconformances occur only with older kernels:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The information returned by\n<a href=\"https://man.page/2/times\">times(2)</a> and <a href=\"https://man.page/2/getrusage\">getrusage(2)</a> is per-thread rather\nthan process-wide (fixed in kernel 2.6.9).</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share resource limits (fixed in kernel\n2.6.10). </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share interval timers (fixed in kernel\n2.6.12). </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Only the main thread is permitted to start a new session\nusing <a href=\"https://man.page/2/setsid\">setsid(2)</a> (fixed in kernel 2.6.16).</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Only the main thread is permitted to make the process\ninto a process group leader using <a href=\"https://man.page/2/setpgid\">setpgid(2)</a> (fixed\nin kernel 2.6.16).</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads have distinct alternate signal stack settings.\nHowever, a new thread&rsquo;s alternate signal stack\nsettings are copied from the thread that created it, so that\nthe threads initially share an alternate signal stack (fixed\nin kernel 2.6.16).</td></tr>\n</table>\n\nNote the\nfollowing further points about the NPTL implementation:\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">If the stack size soft resource\nlimit (see the description of <b>RLIMIT_STACK</b> in\n<a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>) is set to a value other than\n<i>unlimited</i>, then this value defines the default stack\nsize for new threads. To be effective, this limit must be\nset before the program is executed, perhaps using the\n<i>ulimit -s</i> shell built-in command (<i>limit\nstacksize</i> in the C shell).</td></tr>\n</table>\n\n<b>Determining\nthe threading implementation</b> <br>\nSince glibc 2.3.2, the <a href=\"https://man.page/1/getconf\">getconf(1)</a> command can be used\nto determine the system&rsquo;s threading implementation,\nfor example:\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash$ getconf\nGNU_LIBPTHREAD_VERSION <br>\nNPTL 2.3.4\n\nWith older\nglibc versions, a command such as the following should be\nsufficient to determine the default threading\nimplementation:\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash$ $( ldd\n/bin/ls | grep libc.so | awk '{print $3}' ) | \\ <br>\negrep -i 'threads|nptl' <br>\nNative POSIX Threads Library by Ulrich Drepper et al\n\n<b>Selecting\nthe threading implementation: LD_ASSUME_KERNEL</b> <br>\nOn systems with a glibc that supports both LinuxThreads and\nNPTL (i.e., glibc 2.3.<i>x</i>), the <b>LD_ASSUME_KERNEL</b>\nenvironment variable can be used to override the dynamic\nlinker&rsquo;s default choice of threading implementation.\nThis variable tells the dynamic linker to assume that it is\nrunning on top of a particular kernel version. By specifying\na kernel version that does not provide the support required\nby NPTL, we can force the use of LinuxThreads. (The most\nlikely reason for doing this is to run a (broken)\napplication that depends on some nonconformant behavior in\nLinuxThreads.) For example:\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash$ $(\nLD_ASSUME_KERNEL=2.2.5 ldd /bin/ls | grep libc.so | \\ <br>\nawk '{print $3}' ) | egrep -i 'threads|nptl' <br>\nlinuxthreads-0.10 by Xavier Leroy\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/futex\">futex(2)</a>, <a href=\"https://man.page/2/gettid\">gettid(2)</a>,\n<a href=\"https://man.page/5/proc\">proc(5)</a>, <a href=\"https://man.page/7/attributes\">attributes(7)</a>, <a href=\"https://man.page/7/futex\">futex(7)</a>,\n<a href=\"https://man.page/7/nptl\">nptl(7)</a>, <a href=\"https://man.page/7/sigevent\">sigevent(7)</a>, <a href=\"https://man.page/7/signal\">signal(7)</a>\n\nVarious\nPthreads manual pages, for example:\n<a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a>, <a href=\"https://man.page/3/pthread_attr_init\">pthread_attr_init(3)</a>,\n<a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>, <a href=\"https://man.page/3/pthread_cleanup_push\">pthread_cleanup_push(3)</a>,\n<a href=\"https://man.page/3/pthread_cond_signal\">pthread_cond_signal(3)</a>, <a href=\"https://man.page/3/pthread_cond_wait\">pthread_cond_wait(3)</a>,\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, <a href=\"https://man.page/3/pthread_detach\">pthread_detach(3)</a>,\n<a href=\"https://man.page/3/pthread_equal\">pthread_equal(3)</a>, <a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>,\n<a href=\"https://man.page/3/pthread_key_create\">pthread_key_create(3)</a>, <a href=\"https://man.page/3/pthread_kill\">pthread_kill(3)</a>,\n<a href=\"https://man.page/3/pthread_mutex_lock\">pthread_mutex_lock(3)</a>,\n<a href=\"https://man.page/3/pthread_mutex_unlock\">pthread_mutex_unlock(3)</a>,\n<a href=\"https://man.page/3/pthread_mutexattr_destroy\">pthread_mutexattr_destroy(3)</a>,\n<a href=\"https://man.page/3/pthread_mutexattr_init\">pthread_mutexattr_init(3)</a>, <a href=\"https://man.page/3/pthread_once\">pthread_once(3)</a>,\n<a href=\"https://man.page/3/pthread_spin_init\">pthread_spin_init(3)</a>, <a href=\"https://man.page/3/pthread_spin_lock\">pthread_spin_lock(3)</a>,\n<a href=\"https://man.page/3/pthread_rwlockattr_setkind_np\">pthread_rwlockattr_setkind_np(3)</a>,\n<a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>,\n<a href=\"https://man.page/3/pthread_setcanceltype\">pthread_setcanceltype(3)</a>,\n<a href=\"https://man.page/3/pthread_setspecific\">pthread_setspecific(3)</a>, <a href=\"https://man.page/3/pthread_sigmask\">pthread_sigmask(3)</a>,\n<a href=\"https://man.page/3/pthread_sigqueue\">pthread_sigqueue(3)</a>, and\n<a href=\"https://man.page/3/pthread_testcancel\">pthread_testcancel(3)</a>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\nThis page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.","body":"\n\n<h1 align=\"center\">PTHREADS</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">pthreads -\nPOSIX threads</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1\nspecifies a set of interfaces (functions, header files) for\nthreaded programming commonly known as POSIX threads, or\nPthreads. A single process can contain multiple threads, all\nof which are executing the same program. These threads share\nthe same global memory (data and heap segments), but each\nthread has its own stack (automatic variables).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1 also\nrequires that threads share a range of other attributes\n(i.e., these attributes are process-wide rather than\nper-thread):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>process ID</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>parent process ID</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>process group ID and session ID</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>controlling terminal</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>user and group IDs</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>open file descriptors</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>record locks (see <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>signal dispositions</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>file mode creation mask (<a href=\"https://man.page/2/umask\">umask(2)</a>)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>current directory (<a href=\"https://man.page/2/chdir\">chdir(2)</a>) and root directory\n(<a href=\"https://man.page/2/chroot\">chroot(2)</a>)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>interval timers (<a href=\"https://man.page/2/setitimer\">setitimer(2)</a>) and POSIX timers\n(<a href=\"https://man.page/2/timer_create\">timer_create(2)</a>)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>nice value (<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>resource limits (<a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>measurements of the consumption of CPU time\n(<a href=\"https://man.page/2/times\">times(2)</a>) and resources (<a href=\"https://man.page/2/getrusage\">getrusage(2)</a>)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As well as the\nstack, POSIX.1 specifies that various other attributes are\ndistinct for each thread, including:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</p></td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p style=\"margin-top: 1em\">thread ID (the <i>pthread_t</i>\ndata type)</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>signal mask (<a href=\"https://man.page/3/pthread_sigmask\">pthread_sigmask(3)</a>)</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>the <i>errno</i> variable</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>alternate signal stack (<a href=\"https://man.page/2/sigaltstack\">sigaltstack(2)</a>)</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"79%\">\n\n\n<p>real-time scheduling policy and priority\n(<a href=\"https://man.page/7/sched\">sched(7)</a>)</p> </td>\n<td width=\"6%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nLinux-specific features are also per-thread:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p style=\"margin-top: 1em\">capabilities (see\n<a href=\"https://man.page/7/capabilities\">capabilities(7)</a>)</p> </td>\n<td width=\"31%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"54%\">\n\n\n<p>CPU affinity (<a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>)</p></td>\n<td width=\"31%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Pthreads\nfunction return values</b> <br>\nMost pthreads functions return 0 on success, and an error\nnumber on failure. The error numbers that can be returned\nhave the same meaning as the error numbers returned in\n<i>errno</i> by conventional system calls and C library\nfunctions. Note that the pthreads functions do not set\n<i>errno</i>. For each of the pthreads functions that can\nreturn an error, POSIX.1-2001 specifies that the function\ncan never fail with the error <b>EINTR</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Thread\nIDs</b> <br>\nEach of the threads in a process has a unique thread\nidentifier (stored in the type <i>pthread_t</i>). This\nidentifier is returned to the caller of\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, and a thread can obtain its own\nthread identifier using <a href=\"https://man.page/3/pthread_self\">pthread_self(3)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thread IDs are\nguaranteed to be unique only within a process. (In all\npthreads functions that accept a thread ID as an argument,\nthat ID by definition refers to a thread in the same process\nas the caller.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The system may\nreuse a thread ID after a terminated thread has been joined,\nor a detached thread has terminated. POSIX says: &quot;If an\napplication attempts to use a thread ID whose lifetime has\nended, the behavior is undefined.&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Thread-safe\nfunctions</b> <br>\nA thread-safe function is one that can be safely (i.e., it\nwill deliver the same results regardless of whether it is)\ncalled from multiple threads at the same time.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">POSIX.1-2001\nand POSIX.1-2008 require that all functions specified in the\nstandard shall be thread-safe, except for the following\nfunctions:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">asctime() <br>\nbasename() <br>\ncatgets() <br>\ncrypt() <br>\nctermid() if passed a non-NULL argument <br>\nctime() <br>\ndbm_clearerr() <br>\ndbm_close() <br>\ndbm_delete() <br>\ndbm_error() <br>\ndbm_fetch() <br>\ndbm_firstkey() <br>\ndbm_nextkey() <br>\ndbm_open() <br>\ndbm_store() <br>\ndirname() <br>\ndlerror() <br>\ndrand48() <br>\necvt() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nencrypt() <br>\nendgrent() <br>\nendpwent() <br>\nendutxent() <br>\nfcvt() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nftw() <br>\ngcvt() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\ngetc_unlocked() <br>\ngetchar_unlocked() <br>\ngetdate() <br>\ngetenv() <br>\ngetgrent() <br>\ngetgrgid() <br>\ngetgrnam() <br>\ngethostbyaddr() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostbyname() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostent() <br>\ngetlogin() <br>\ngetnetbyaddr() <br>\ngetnetbyname() <br>\ngetnetent() <br>\ngetopt() <br>\ngetprotobyname() <br>\ngetprotobynumber() <br>\ngetprotoent() <br>\ngetpwent() <br>\ngetpwnam() <br>\ngetpwuid() <br>\ngetservbyname() <br>\ngetservbyport() <br>\ngetservent() <br>\ngetutxent() <br>\ngetutxid() <br>\ngetutxline() <br>\ngmtime() <br>\nhcreate() <br>\nhdestroy() <br>\nhsearch() <br>\ninet_ntoa() <br>\nl64a() <br>\nlgamma() <br>\nlgammaf() <br>\nlgammal() <br>\nlocaleconv() <br>\nlocaltime() <br>\nlrand48() <br>\nmrand48() <br>\nnftw() <br>\nnl_langinfo() <br>\nptsname() <br>\nputc_unlocked() <br>\nputchar_unlocked() <br>\nputenv() <br>\npututxline() <br>\nrand() <br>\nreaddir() <br>\nsetenv() <br>\nsetgrent() <br>\nsetkey() <br>\nsetpwent() <br>\nsetutxent() <br>\nstrerror() <br>\nstrsignal() [Added in POSIX.1-2008] <br>\nstrtok() <br>\nsystem() [Added in POSIX.1-2008] <br>\ntmpnam() if passed a non-NULL argument <br>\nttyname() <br>\nunsetenv() <br>\nwcrtomb() if its final argument is NULL <br>\nwcsrtombs() if its final argument is NULL <br>\nwcstombs() <br>\nwctomb()</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Async-cancel-safe\nfunctions</b> <br>\nAn async-cancel-safe function is one that can be safely\ncalled in an application where asynchronous cancelability is\nenabled (see <a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only the\nfollowing functions are required to be async-cancel-safe by\nPOSIX.1-2001 and POSIX.1-2008:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">pthread_cancel()\n<br>\npthread_setcancelstate() <br>\npthread_setcanceltype()</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Cancellation\npoints</b> <br>\nPOSIX.1 specifies that certain functions must, and certain\nother functions may, be cancellation points. If a thread is\ncancelable, its cancelability type is deferred, and a\ncancellation request is pending for the thread, then the\nthread is canceled when it calls a function that is a\ncancellation point.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions are required to be cancellation points by\nPOSIX.1-2001 and/or POSIX.1-2008:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">accept() <br>\naio_suspend() <br>\nclock_nanosleep() <br>\nclose() <br>\nconnect() <br>\ncreat() <br>\nfcntl() F_SETLKW <br>\nfdatasync() <br>\nfsync() <br>\ngetmsg() <br>\ngetpmsg() <br>\nlockf() F_LOCK <br>\nmq_receive() <br>\nmq_send() <br>\nmq_timedreceive() <br>\nmq_timedsend() <br>\nmsgrcv() <br>\nmsgsnd() <br>\nmsync() <br>\nnanosleep() <br>\nopen() <br>\nopenat() [Added in POSIX.1-2008] <br>\npause() <br>\npoll() <br>\npread() <br>\npselect() <br>\npthread_cond_timedwait() <br>\npthread_cond_wait() <br>\npthread_join() <br>\npthread_testcancel() <br>\nputmsg() <br>\nputpmsg() <br>\npwrite() <br>\nread() <br>\nreadv() <br>\nrecv() <br>\nrecvfrom() <br>\nrecvmsg() <br>\nselect() <br>\nsem_timedwait() <br>\nsem_wait() <br>\nsend() <br>\nsendmsg() <br>\nsendto() <br>\nsigpause() [POSIX.1-2001 only (moves to &quot;may&quot; list\nin POSIX.1-2008)] <br>\nsigsuspend() <br>\nsigtimedwait() <br>\nsigwait() <br>\nsigwaitinfo() <br>\nsleep() <br>\nsystem() <br>\ntcdrain() <br>\nusleep() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nwait() <br>\nwaitid() <br>\nwaitpid() <br>\nwrite() <br>\nwritev()</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The following\nfunctions may be cancellation points according to\nPOSIX.1-2001 and/or POSIX.1-2008:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">access() <br>\nasctime() <br>\nasctime_r() <br>\ncatclose() <br>\ncatgets() <br>\ncatopen() <br>\nchmod() [Added in POSIX.1-2008] <br>\nchown() [Added in POSIX.1-2008] <br>\nclosedir() <br>\ncloselog() <br>\nctermid() <br>\nctime() <br>\nctime_r() <br>\ndbm_close() <br>\ndbm_delete() <br>\ndbm_fetch() <br>\ndbm_nextkey() <br>\ndbm_open() <br>\ndbm_store() <br>\ndlclose() <br>\ndlopen() <br>\ndprintf() [Added in POSIX.1-2008] <br>\nendgrent() <br>\nendhostent() <br>\nendnetent() <br>\nendprotoent() <br>\nendpwent() <br>\nendservent() <br>\nendutxent() <br>\nfaccessat() [Added in POSIX.1-2008] <br>\nfchmod() [Added in POSIX.1-2008] <br>\nfchmodat() [Added in POSIX.1-2008] <br>\nfchown() [Added in POSIX.1-2008] <br>\nfchownat() [Added in POSIX.1-2008] <br>\nfclose() <br>\nfcntl() (for any value of cmd argument) <br>\nfflush() <br>\nfgetc() <br>\nfgetpos() <br>\nfgets() <br>\nfgetwc() <br>\nfgetws() <br>\nfmtmsg() <br>\nfopen() <br>\nfpathconf() <br>\nfprintf() <br>\nfputc() <br>\nfputs() <br>\nfputwc() <br>\nfputws() <br>\nfread() <br>\nfreopen() <br>\nfscanf() <br>\nfseek() <br>\nfseeko() <br>\nfsetpos() <br>\nfstat() <br>\nfstatat() [Added in POSIX.1-2008] <br>\nftell() <br>\nftello() <br>\nftw() <br>\nfutimens() [Added in POSIX.1-2008] <br>\nfwprintf() <br>\nfwrite() <br>\nfwscanf() <br>\ngetaddrinfo() <br>\ngetc() <br>\ngetc_unlocked() <br>\ngetchar() <br>\ngetchar_unlocked() <br>\ngetcwd() <br>\ngetdate() <br>\ngetdelim() [Added in POSIX.1-2008] <br>\ngetgrent() <br>\ngetgrgid() <br>\ngetgrgid_r() <br>\ngetgrnam() <br>\ngetgrnam_r() <br>\ngethostbyaddr() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostbyname() [POSIX.1-2001 only (function removed in <br>\nPOSIX.1-2008)] <br>\ngethostent() <br>\ngethostid() <br>\ngethostname() <br>\ngetline() [Added in POSIX.1-2008] <br>\ngetlogin() <br>\ngetlogin_r() <br>\ngetnameinfo() <br>\ngetnetbyaddr() <br>\ngetnetbyname() <br>\ngetnetent() <br>\ngetopt() (if opterr is nonzero) <br>\ngetprotobyname() <br>\ngetprotobynumber() <br>\ngetprotoent() <br>\ngetpwent() <br>\ngetpwnam() <br>\ngetpwnam_r() <br>\ngetpwuid() <br>\ngetpwuid_r() <br>\ngets() <br>\ngetservbyname() <br>\ngetservbyport() <br>\ngetservent() <br>\ngetutxent() <br>\ngetutxid() <br>\ngetutxline() <br>\ngetwc() <br>\ngetwchar() <br>\ngetwd() [POSIX.1-2001 only (function removed in\nPOSIX.1-2008)] <br>\nglob() <br>\niconv_close() <br>\niconv_open() <br>\nioctl() <br>\nlink() <br>\nlinkat() [Added in POSIX.1-2008] <br>\nlio_listio() [Added in POSIX.1-2008] <br>\nlocaltime() <br>\nlocaltime_r() <br>\nlockf() [Added in POSIX.1-2008] <br>\nlseek() <br>\nlstat() <br>\nmkdir() [Added in POSIX.1-2008] <br>\nmkdirat() [Added in POSIX.1-2008] <br>\nmkdtemp() [Added in POSIX.1-2008] <br>\nmkfifo() [Added in POSIX.1-2008] <br>\nmkfifoat() [Added in POSIX.1-2008] <br>\nmknod() [Added in POSIX.1-2008] <br>\nmknodat() [Added in POSIX.1-2008] <br>\nmkstemp() <br>\nmktime() <br>\nnftw() <br>\nopendir() <br>\nopenlog() <br>\npathconf() <br>\npclose() <br>\nperror() <br>\npopen() <br>\nposix_fadvise() <br>\nposix_fallocate() <br>\nposix_madvise() <br>\nposix_openpt() <br>\nposix_spawn() <br>\nposix_spawnp() <br>\nposix_trace_clear() <br>\nposix_trace_close() <br>\nposix_trace_create() <br>\nposix_trace_create_withlog() <br>\nposix_trace_eventtypelist_getnext_id() <br>\nposix_trace_eventtypelist_rewind() <br>\nposix_trace_flush() <br>\nposix_trace_get_attr() <br>\nposix_trace_get_filter() <br>\nposix_trace_get_status() <br>\nposix_trace_getnext_event() <br>\nposix_trace_open() <br>\nposix_trace_rewind() <br>\nposix_trace_set_filter() <br>\nposix_trace_shutdown() <br>\nposix_trace_timedgetnext_event() <br>\nposix_typed_mem_open() <br>\nprintf() <br>\npsiginfo() [Added in POSIX.1-2008] <br>\npsignal() [Added in POSIX.1-2008] <br>\npthread_rwlock_rdlock() <br>\npthread_rwlock_timedrdlock() <br>\npthread_rwlock_timedwrlock() <br>\npthread_rwlock_wrlock() <br>\nputc() <br>\nputc_unlocked() <br>\nputchar() <br>\nputchar_unlocked() <br>\nputs() <br>\npututxline() <br>\nputwc() <br>\nputwchar() <br>\nreaddir() <br>\nreaddir_r() <br>\nreadlink() [Added in POSIX.1-2008] <br>\nreadlinkat() [Added in POSIX.1-2008] <br>\nremove() <br>\nrename() <br>\nrenameat() [Added in POSIX.1-2008] <br>\nrewind() <br>\nrewinddir() <br>\nscandir() [Added in POSIX.1-2008] <br>\nscanf() <br>\nseekdir() <br>\nsemop() <br>\nsetgrent() <br>\nsethostent() <br>\nsetnetent() <br>\nsetprotoent() <br>\nsetpwent() <br>\nsetservent() <br>\nsetutxent() <br>\nsigpause() [Added in POSIX.1-2008] <br>\nstat() <br>\nstrerror() <br>\nstrerror_r() <br>\nstrftime() <br>\nsymlink() <br>\nsymlinkat() [Added in POSIX.1-2008] <br>\nsync() <br>\nsyslog() <br>\ntmpfile() <br>\ntmpnam() <br>\nttyname() <br>\nttyname_r() <br>\ntzset() <br>\nungetc() <br>\nungetwc() <br>\nunlink() <br>\nunlinkat() [Added in POSIX.1-2008] <br>\nutime() [Added in POSIX.1-2008] <br>\nutimensat() [Added in POSIX.1-2008] <br>\nutimes() [Added in POSIX.1-2008] <br>\nvdprintf() [Added in POSIX.1-2008] <br>\nvfprintf() <br>\nvfwprintf() <br>\nvprintf() <br>\nvwprintf() <br>\nwcsftime() <br>\nwordexp() <br>\nwprintf() <br>\nwscanf()</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An\nimplementation may also mark other functions not specified\nin the standard as cancellation points. In particular, an\nimplementation is likely to mark any nonstandard function\nthat may block as a cancellation point. (This includes most\nfunctions that can touch files.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It should be\nnoted that even if an application is not using asynchronous\ncancellation, that calling a function from the above list\nfrom an asynchronous signal handler may cause the equivalent\nof asynchronous cancellation. The underlying user code may\nnot expect asynchronous cancellation and the state of the\nuser data may become inconsistent. Therefore signals should\nbe used with caution when entering a region of deferred\ncancellation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Compiling on\nLinux</b> <br>\nOn Linux, programs that use the Pthreads API should be\ncompiled using <i>cc -pthread</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Linux\nimplementations of POSIX threads</b> <br>\nOver time, two threading implementations have been provided\nby the GNU C library on Linux: <b><br>\nLinuxThreads</b></p>\n\n<p style=\"margin-left:22%;\">This is the original Pthreads\nimplementation. Since glibc 2.4, this implementation is no\nlonger supported.</p>\n\n<p style=\"margin-left:11%;\"><b>NPTL</b> (Native POSIX\nThreads Library)</p>\n\n<p style=\"margin-left:22%;\">This is the modern Pthreads\nimplementation. By comparison with LinuxThreads, NPTL\nprovides closer conformance to the requirements of the\nPOSIX.1 specification and better performance when creating\nlarge numbers of threads. NPTL is available since glibc\n2.3.2, and requires features that are present in the Linux\n2.6 kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Both of these\nare so-called 1:1 implementations, meaning that each thread\nmaps to a kernel scheduling entity. Both threading\nimplementations employ the Linux <a href=\"https://man.page/2/clone\">clone(2)</a> system\ncall. In NPTL, thread synchronization primitives (mutexes,\nthread joining, and so on) are implemented using the Linux\n<a href=\"https://man.page/2/futex\">futex(2)</a> system call.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>LinuxThreads</b>\n<br>\nThe notable features of this implementation are the\nfollowing:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>In addition to the main (initial) thread, and the\nthreads that the program creates using\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, the implementation creates a\n&quot;manager&quot; thread. This thread handles thread\ncreation and termination. (Problems can result if this\nthread is inadvertently killed.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Signals are used internally by the implementation. On\nLinux 2.2 and later, the first three real-time signals are\nused (see also <a href=\"https://man.page/7/signal\">signal(7)</a>). On older Linux kernels,\n<b>SIGUSR1</b> and <b>SIGUSR2</b> are used. Applications\nmust avoid the use of whichever set of signals is employed\nby the implementation.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share process IDs. (In effect,\nLinuxThreads threads are implemented as processes which\nshare more information than usual, but which do not share a\ncommon process ID.) LinuxThreads threads (including the\nmanager thread) are visible as separate processes using\n<a href=\"https://man.page/1/ps\">ps(1)</a>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\nLinuxThreads implementation deviates from the POSIX.1\nspecification in a number of ways, including the\nfollowing:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">Calls to <a href=\"https://man.page/2/getpid\">getpid(2)</a> return\na different value in each thread.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Calls to <a href=\"https://man.page/2/getppid\">getppid(2)</a> in threads other than the\nmain thread return the process ID of the manager thread;\ninstead <a href=\"https://man.page/2/getppid\">getppid(2)</a> in these threads should return the\nsame value as <a href=\"https://man.page/2/getppid\">getppid(2)</a> in the main thread.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>When one thread creates a new child process using\n<a href=\"https://man.page/2/fork\">fork(2)</a>, any thread should be able to <a href=\"https://man.page/2/wait\">wait(2)</a>\non the child. However, the implementation allows only the\nthread that created the child to <a href=\"https://man.page/2/wait\">wait(2)</a> on it.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>When a thread calls <a href=\"https://man.page/2/execve\">execve(2)</a>, all other threads\nare terminated (as required by POSIX.1). However, the\nresulting process has the same PID as the thread that called\n<a href=\"https://man.page/2/execve\">execve(2)</a>: it should have the same PID as the main\nthread.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share user and group IDs. This can cause\ncomplications with set-user-ID programs and can cause\nfailures in Pthreads functions if an application changes its\ncredentials using <a href=\"https://man.page/2/seteuid\">seteuid(2)</a> or similar.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share a common session ID and process\ngroup ID.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share record locks created using\n<a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>The information returned by <a href=\"https://man.page/2/times\">times(2)</a> and\n<a href=\"https://man.page/2/getrusage\">getrusage(2)</a> is per-thread rather than\nprocess-wide.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share semaphore undo values (see\n<a href=\"https://man.page/2/semop\">semop(2)</a>).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share interval timers.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share a common nice value.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>POSIX.1 distinguishes the notions of signals that are\ndirected to the process as a whole and signals that are\ndirected to individual threads. According to POSIX.1, a\nprocess-directed signal (sent using <a href=\"https://man.page/2/kill\">kill(2)</a>, for\nexample) should be handled by a single, arbitrarily selected\nthread within the process. LinuxThreads does not support the\nnotion of process-directed signals: signals may be sent only\nto specific threads.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads have distinct alternate signal stack settings.\nHowever, a new thread&rsquo;s alternate signal stack\nsettings are copied from the thread that created it, so that\nthe threads initially share an alternate signal stack. (A\nnew thread should start with no alternate signal stack\ndefined. If two threads handle signals on their shared\nalternate signal stack at the same time, unpredictable\nprogram failures are likely to occur.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>NPTL</b>\n<br>\nWith NPTL, all of the threads in a process are placed in the\nsame thread group; all members of a thread group share the\nsame PID. NPTL does not employ a manager thread.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">NPTL makes\ninternal use of the first two real-time signals; these\nsignals cannot be used in applications. See <a href=\"https://man.page/7/nptl\">nptl(7)</a>\nfor further details.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">NPTL still has\nat least one nonconformance with POSIX.1:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</p></td>\n<td width=\"3%\"></td>\n<td width=\"63%\">\n\n\n<p style=\"margin-top: 1em\">Threads do not share a common\nnice value.</p></td>\n<td width=\"22%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Some NPTL\nnonconformances occur only with older kernels:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The information returned by\n<a href=\"https://man.page/2/times\">times(2)</a> and <a href=\"https://man.page/2/getrusage\">getrusage(2)</a> is per-thread rather\nthan process-wide (fixed in kernel 2.6.9).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share resource limits (fixed in kernel\n2.6.10).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads do not share interval timers (fixed in kernel\n2.6.12).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Only the main thread is permitted to start a new session\nusing <a href=\"https://man.page/2/setsid\">setsid(2)</a> (fixed in kernel 2.6.16).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Only the main thread is permitted to make the process\ninto a process group leader using <a href=\"https://man.page/2/setpgid\">setpgid(2)</a> (fixed\nin kernel 2.6.16).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Threads have distinct alternate signal stack settings.\nHowever, a new thread&rsquo;s alternate signal stack\nsettings are copied from the thread that created it, so that\nthe threads initially share an alternate signal stack (fixed\nin kernel 2.6.16).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing further points about the NPTL implementation:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">-</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">If the stack size soft resource\nlimit (see the description of <b>RLIMIT_STACK</b> in\n<a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>) is set to a value other than\n<i>unlimited</i>, then this value defines the default stack\nsize for new threads. To be effective, this limit must be\nset before the program is executed, perhaps using the\n<i>ulimit -s</i> shell built-in command (<i>limit\nstacksize</i> in the C shell).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Determining\nthe threading implementation</b> <br>\nSince glibc 2.3.2, the <a href=\"https://man.page/1/getconf\">getconf(1)</a> command can be used\nto determine the system&rsquo;s threading implementation,\nfor example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash$ getconf\nGNU_LIBPTHREAD_VERSION <br>\nNPTL 2.3.4</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">With older\nglibc versions, a command such as the following should be\nsufficient to determine the default threading\nimplementation:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash$ $( ldd\n/bin/ls | grep libc.so | awk '{print $3}' ) | \\ <br>\negrep -i 'threads|nptl' <br>\nNative POSIX Threads Library by Ulrich Drepper et al</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Selecting\nthe threading implementation: LD_ASSUME_KERNEL</b> <br>\nOn systems with a glibc that supports both LinuxThreads and\nNPTL (i.e., glibc 2.3.<i>x</i>), the <b>LD_ASSUME_KERNEL</b>\nenvironment variable can be used to override the dynamic\nlinker&rsquo;s default choice of threading implementation.\nThis variable tells the dynamic linker to assume that it is\nrunning on top of a particular kernel version. By specifying\na kernel version that does not provide the support required\nby NPTL, we can force the use of LinuxThreads. (The most\nlikely reason for doing this is to run a (broken)\napplication that depends on some nonconformant behavior in\nLinuxThreads.) For example:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">bash$ $(\nLD_ASSUME_KERNEL=2.2.5 ldd /bin/ls | grep libc.so | \\ <br>\nawk '{print $3}' ) | egrep -i 'threads|nptl' <br>\nlinuxthreads-0.10 by Xavier Leroy</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/2/clone\">clone(2)</a>,\n<a href=\"https://man.page/2/fork\">fork(2)</a>, <a href=\"https://man.page/2/futex\">futex(2)</a>, <a href=\"https://man.page/2/gettid\">gettid(2)</a>,\n<a href=\"https://man.page/5/proc\">proc(5)</a>, <a href=\"https://man.page/7/attributes\">attributes(7)</a>, <a href=\"https://man.page/7/futex\">futex(7)</a>,\n<a href=\"https://man.page/7/nptl\">nptl(7)</a>, <a href=\"https://man.page/7/sigevent\">sigevent(7)</a>, <a href=\"https://man.page/7/signal\">signal(7)</a></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various\nPthreads manual pages, for example:\n<a href=\"https://man.page/3/pthread_atfork\">pthread_atfork(3)</a>, <a href=\"https://man.page/3/pthread_attr_init\">pthread_attr_init(3)</a>,\n<a href=\"https://man.page/3/pthread_cancel\">pthread_cancel(3)</a>, <a href=\"https://man.page/3/pthread_cleanup_push\">pthread_cleanup_push(3)</a>,\n<a href=\"https://man.page/3/pthread_cond_signal\">pthread_cond_signal(3)</a>, <a href=\"https://man.page/3/pthread_cond_wait\">pthread_cond_wait(3)</a>,\n<a href=\"https://man.page/3/pthread_create\">pthread_create(3)</a>, <a href=\"https://man.page/3/pthread_detach\">pthread_detach(3)</a>,\n<a href=\"https://man.page/3/pthread_equal\">pthread_equal(3)</a>, <a href=\"https://man.page/3/pthread_exit\">pthread_exit(3)</a>,\n<a href=\"https://man.page/3/pthread_key_create\">pthread_key_create(3)</a>, <a href=\"https://man.page/3/pthread_kill\">pthread_kill(3)</a>,\n<a href=\"https://man.page/3/pthread_mutex_lock\">pthread_mutex_lock(3)</a>,\n<a href=\"https://man.page/3/pthread_mutex_unlock\">pthread_mutex_unlock(3)</a>,\n<a href=\"https://man.page/3/pthread_mutexattr_destroy\">pthread_mutexattr_destroy(3)</a>,\n<a href=\"https://man.page/3/pthread_mutexattr_init\">pthread_mutexattr_init(3)</a>, <a href=\"https://man.page/3/pthread_once\">pthread_once(3)</a>,\n<a href=\"https://man.page/3/pthread_spin_init\">pthread_spin_init(3)</a>, <a href=\"https://man.page/3/pthread_spin_lock\">pthread_spin_lock(3)</a>,\n<a href=\"https://man.page/3/pthread_rwlockattr_setkind_np\">pthread_rwlockattr_setkind_np(3)</a>,\n<a href=\"https://man.page/3/pthread_setcancelstate\">pthread_setcancelstate(3)</a>,\n<a href=\"https://man.page/3/pthread_setcanceltype\">pthread_setcanceltype(3)</a>,\n<a href=\"https://man.page/3/pthread_setspecific\">pthread_setspecific(3)</a>, <a href=\"https://man.page/3/pthread_sigmask\">pthread_sigmask(3)</a>,\n<a href=\"https://man.page/3/pthread_sigqueue\">pthread_sigqueue(3)</a>, and\n<a href=\"https://man.page/3/pthread_testcancel\">pthread_testcancel(3)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}