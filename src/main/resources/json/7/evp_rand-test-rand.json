{"name":"evp_rand-test-rand","description":"EVP_RAND-TEST-RAND - The test EVP_RAND implementation","body":"\n\n<h1 align=\"center\">EVP_RAND-TEST-RAND</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_RAND-TEST-RAND\n- The test EVP_RAND implementation</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Support for a\ntest generator through the <b><small>EVP_RAND</small></b>\n<small>API.</small> This generator is for test purposes\nonly, it does not generate random numbers.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Identity</b>\n<br>\n&quot;TEST-RAND&quot; is the name for this implementation;\nit can be used with the <b>EVP_RAND_fetch()</b>\nfunction.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Supported\nparameters</b> <br>\nThe supported parameters are: <br>\n&quot;state&quot; (\n<b><small>OSSL_RAND_PARAM_STATE</small></b> )\n&lt;integer&gt;</p>\n\n<p style=\"margin-left:17%;\">These parameter works as\ndescribed in &quot; <small>PARAMETERS&quot;</small> in\n<b><small>EVP_RAND</small></b> (3).</p>\n\n<p style=\"margin-left:11%;\">&quot;strength&quot; (\n<b><small>OSSL_RAND_PARAM_STRENGTH</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;reseed_requests&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_REQUESTS</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;reseed_time_interval&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_TIME_INTERVAL</small></b> )\n&lt;integer&gt; <br>\n&quot;max_request&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_REQUESTS</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;min_entropylen&quot; (\n<b><small>OSSL_DRBG_PARAM_MIN_ENTROPYLEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_entropylen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_ENTROPYLEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;min_noncelen&quot; (\n<b><small>OSSL_DRBG_PARAM_MIN_NONCELEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_noncelen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_NONCELEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_perslen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_PERSLEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;max_adinlen&quot; (\n<b><small>OSSL_DRBG_PARAM_MAX_ADINLEN</small></b> )\n&lt;unsigned integer&gt; <br>\n&quot;reseed_counter&quot; (\n<b><small>OSSL_DRBG_PARAM_RESEED_COUNTER</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">These parameters work as\ndescribed in &quot; <small>PARAMETERS&quot;</small> in\n<b><small>EVP_RAND</small></b> (3), except that they can all\nbe set as well as read.</p>\n\n<p style=\"margin-left:11%;\">&quot;test_entropy&quot; (\n<b><small>OSSL_RAND_PARAM_TEST_ENTROPY</small></b> )\n&lt;octet string&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the bytes returned when\nthe test generator is sent an entropy request. The current\nposition is remembered across generate calls. If there are\ninsufficient data present to satisfy a call, an error is\nreturned.</p>\n\n<p style=\"margin-left:11%;\">&quot;test_nonce&quot; (\n<b><small>OSSL_RAND_PARAM_TEST_NONCE</small></b> ) &lt;octet\nstring&gt;</p>\n\n<p style=\"margin-left:17%;\">Sets the bytes returned when\nthe test generator is sent a nonce request. Each nonce\nrequest will return all of the bytes.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A context for a\ntest generator can be obtained by calling:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_RAND *rand\n= EVP_RAND_fetch(NULL, &quot;TEST-RAND&quot;, NULL); <br>\nEVP_RAND_CTX *rctx = EVP_RAND_CTX_new(rand);</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_RAND *rand;\n<br>\nEVP_RAND_CTX *rctx; <br>\nunsigned char bytes[100]; <br>\nOSSL_PARAM params[4], *p = params; <br>\nunsigned char entropy[1000] = { ... }; <br>\nunsigned char nonce[20] = { ... }; <br>\nunsigned int strength = 48; <br>\nrand = EVP_RAND_fetch(NULL, &quot;TEST-RAND&quot;, NULL);\n<br>\nrctx = EVP_RAND_CTX_new(rand, NULL); <br>\nEVP_RAND_free(rand); <br>\n*p++ = OSSL_PARAM_construct_uint(OSSL_RAND_PARAM_STRENGTH,\n&amp;strength); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_RAND_PARAM_TEST_ENTROPY,\n<br>\nentropy, sizeof(entropy)); <br>\n*p++ =\nOSSL_PARAM_construct_octet_string(OSSL_RAND_PARAM_TEST_NONCE,\n<br>\nnonce, sizeof(nonce)); <br>\n*p = OSSL_PARAM_construct_end(); <br>\nEVP_RAND_instantiate(rctx, strength, 0, NULL, 0, params);\n<br>\nEVP_RAND_generate(rctx, bytes, sizeof(bytes), strength, 0,\nNULL, 0); <br>\nEVP_RAND_CTX_free(rctx);</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>EVP_RAND</small></b>\n(3), &quot; <small>PARAMETERS&quot;</small> in\n<b><small>EVP_RAND</small></b> (3)</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2020-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}