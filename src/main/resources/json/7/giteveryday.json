{"name":"giteveryday","description":"giteveryday - A useful minimum set of commands for Everyday Git","body":"\n\n<h1 align=\"center\">GITEVERYDAY</h1>\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">giteveryday - A\nuseful minimum set of commands for Everyday Git</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Everyday Git\nWith 20 Commands Or So</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Git users can\nbroadly be grouped into four categories for the purposes of\ndescribing here a small set of useful command for everyday\nGit.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nIndividual Developer (Standalone) commands are essential for\nanybody who makes a commit, even for somebody who works\nalone.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; If you\nwork with other people, you will need commands listed in the\nIndividual Developer (Participant) section as well.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull; People\nwho play the Integrator role need to learn some more\ncommands in addition to the above.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nRepository Administration commands are for system\nadministrators who are responsible for the care and feeding\nof Git repositories.</p>\n\n<h2>INDIVIDUAL DEVELOPER (STANDALONE)\n<a name=\"INDIVIDUAL DEVELOPER (STANDALONE)\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A standalone\nindividual developer does not exchange patches with other\npeople, and works alone in a single repository, using the\nfollowing commands.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-init\">git-init(1)</a> to create a new repository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-log\">git-log(1)</a> to see what happened.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-switch\">git-switch(1)</a> and <a href=\"https://man.page/1/git-branch\">git-branch(1)</a> to switch\nbranches.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-add\">git-add(1)</a> to manage the index file.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-diff\">git-diff(1)</a> and <a href=\"https://man.page/1/git-status\">git-status(1)</a> to see what you\nare in the middle of doing.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-commit\">git-commit(1)</a> to advance the current branch.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-restore\">git-restore(1)</a> to undo changes.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-merge\">git-merge(1)</a> to merge between local branches.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> to maintain topic branches.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-tag\">git-tag(1)</a> to mark a known point.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Examples</b>\n<br>\nUse a tarball as a starting point for a new repository.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ tar zxf\nfrotz.tar.gz <br>\n$ cd frotz <br>\n$ git init <br>\n$ git add . <b>(1)</b> <br>\n$ git commit -m &quot;import of frotz source tree.&quot;\n<br>\n$ git tag v2.43 <b>(2)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> add\neverything under the current directory. <b><br>\n2.</b> make a lightweight, unannotated tag.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Create a topic\nbranch and develop.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git switch -c\nalsa-audio <b>(1)</b> <br>\n$ edit/compile/test <br>\n$ git restore curses/ux_audio_oss.c <b>(2)</b> <br>\n$ git add curses/ux_audio_alsa.c <b>(3)</b> <br>\n$ edit/compile/test <br>\n$ git diff HEAD <b>(4)</b> <br>\n$ git commit -a -s <b>(5)</b> <br>\n$ edit/compile/test <br>\n$ git diff HEAD^ <b>(6)</b> <br>\n$ git commit -a --amend <b>(7)</b> <br>\n$ git switch master <b>(8)</b> <br>\n$ git merge alsa-audio <b>(9)</b> <br>\n$ git log --since='3 days ago' <b>(10)</b> <br>\n$ git log v2.43.. curses/ <b>(11)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b>\ncreate a new topic branch. <b><br>\n2.</b> revert your botched changes in\n<b>curses/ux_audio_oss.c</b>. <b><br>\n3.</b> you need to tell Git if you added a new file; removal\nand modification will be caught if you do <b>git commit\n-a</b> later. <b><br>\n4.</b> to see what changes you are committing. <b><br>\n5.</b> commit everything, as you have tested, with your\nsign-off. <b><br>\n6.</b> look at all your changes including the previous\ncommit. <b><br>\n7.</b> amend the previous commit, adding all your new\nchanges, using your original message. <b><br>\n8.</b> switch to the master branch. <b><br>\n9.</b> merge a topic branch into your master branch. <b><br>\n10.</b> review commit logs; other forms to limit output can\nbe combined and include <b>-10</b> (to show up to 10\ncommits), <b>--until=2005-12-10</b>, etc. <b><br>\n11.</b> view only the changes that touch what&rsquo;s in\n<b>curses/</b> directory, since <b>v2.43</b> tag.</p>\n\n<h2>INDIVIDUAL DEVELOPER (PARTICIPANT)\n<a name=\"INDIVIDUAL DEVELOPER (PARTICIPANT)\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A developer\nworking as a participant in a group project needs to learn\nhow to communicate with others, and uses these commands in\naddition to the ones needed by a standalone developer.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-clone\">git-clone(1)</a> from the upstream to prime your local\nrepository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-pull\">git-pull(1)</a> and <a href=\"https://man.page/1/git-fetch\">git-fetch(1)</a> from\n&quot;origin&quot; to keep up-to-date with the upstream.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-push\">git-push(1)</a> to shared repository, if you adopt CVS\nstyle shared repository workflow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a> to prepare e-mail submission, if\nyou adopt Linux kernel-style public forum workflow.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-send-email\">git-send-email(1)</a> to send your e-mail submission\nwithout corruption by your MUA.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-request-pull\">git-request-pull(1)</a> to create a summary of changes\nfor your upstream to pull.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Examples</b>\n<br>\nClone the upstream and work on it. Feed changes to\nupstream.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git clone\ngit://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6\n<br>\n$ cd my2.6 <br>\n$ git switch -c mine master <b>(1)</b> <br>\n$ edit/compile/test; git commit -a -s <b>(2)</b> <br>\n$ git format-patch master <b>(3)</b> <br>\n$ git send-email --to=&quot;person\n&lt;email@example.com&gt;&quot; 00*.patch <b>(4)</b> <br>\n$ git switch master <b>(5)</b> <br>\n$ git pull <b>(6)</b> <br>\n$ git log -p ORIG_HEAD.. arch/i386 include/asm-i386\n<b>(7)</b> <br>\n$ git ls-remote --heads\nhttp://git.kernel.org/.../jgarzik/libata-dev.git <b>(8)</b>\n<br>\n$ git pull\ngit://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL\n<b>(9)</b> <br>\n$ git reset --hard ORIG_HEAD <b>(10)</b> <br>\n$ git gc <b>(11)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b>\ncheckout a new branch <b>mine</b> from master. <b><br>\n2.</b> repeat as needed. <b><br>\n3.</b> extract patches from your branch, relative to master,\n<b><br>\n4.</b> and email them. <b><br>\n5.</b> return to <b>master</b>, ready to see what&rsquo;s\nnew <b><br>\n6. git pull</b> fetches from <b>origin</b> by default and\nmerges into the current branch. <b><br>\n7.</b> immediately after pulling, look at the changes done\nupstream since last time we checked, only in the area we are\ninterested in. <b><br>\n8.</b> check the branch names in an external repository (if\nnot known). <b><br>\n9.</b> fetch from a specific branch <b>ALL</b> from a\nspecific repository and merge it. <b><br>\n10.</b> revert the pull. <b><br>\n11.</b> garbage collect leftover objects from reverted\npull.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Push into\nanother repository.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">satellite$ git\nclone mothership:frotz frotz <b>(1)</b> <br>\nsatellite$ cd frotz <br>\nsatellite$ git config --get-regexp '^(remote|branch)\\.'\n<b>(2)</b> <br>\nremote.origin.url mothership:frotz <br>\nremote.origin.fetch refs/heads/*:refs/remotes/origin/* <br>\nbranch.master.remote origin <br>\nbranch.master.merge refs/heads/master <br>\nsatellite$ git config remote.origin.push \\ <br>\n+refs/heads/*:refs/remotes/satellite/* <b>(3)</b> <br>\nsatellite$ edit/compile/test/commit <br>\nsatellite$ git push origin <b>(4)</b></p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">mothership$ cd\nfrotz <br>\nmothership$ git switch master <br>\nmothership$ git merge satellite/master <b>(5)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b>\nmothership machine has a frotz repository under your home\ndirectory; clone from it to start a repository on the\nsatellite machine. <b><br>\n2.</b> clone sets these configuration variables by default.\nIt arranges <b>git pull</b> to fetch and store the branches\nof mothership machine to local <b>remotes/origin/*</b>\nremote-tracking branches. <b><br>\n3.</b> arrange <b>git push</b> to push all local branches to\ntheir corresponding branch of the mothership machine.\n<b><br>\n4.</b> push will stash all our work away on\n<b>remotes/satellite/*</b> remote-tracking branches on the\nmothership machine. You could use this as a back-up method.\nLikewise, you can pretend that mothership\n&quot;fetched&quot; from you (useful when access is one\nsided). <b><br>\n5.</b> on mothership machine, merge the work done on the\nsatellite machine into the master branch.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Branch off of a\nspecific tag.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git switch -c\nprivate2.6.14 v2.6.14 <b>(1)</b> <br>\n$ edit/compile/test; git commit -a <br>\n$ git checkout master <br>\n$ git cherry-pick v2.6.14..private2.6.14 <b>(2)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b>\ncreate a private branch based on a well known (but somewhat\nbehind) tag. <b><br>\n2.</b> forward port all changes in <b>private2.6.14</b>\nbranch to <b>master</b> branch without a formal\n&quot;merging&quot;. Or longhand</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>git\nformat-patch -k -m --stdout v2.6.14..private2.6.14 | git am\n-3 -k</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An alternate\nparticipant submission mechanism is using the <b>git\nrequest-pull</b> or pull-request mechanisms (e.g as used on\nGitHub (www.github.com) to notify your upstream of your\ncontribution.</p>\n\n<h2>INTEGRATOR\n<a name=\"INTEGRATOR\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A fairly\ncentral person acting as the integrator in a group project\nreceives changes made by others, reviews and integrates them\nand publishes the result for others to use, using these\ncommands in addition to the ones needed by participants.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">This section\ncan also be used by those who respond to <b>git\nrequest-pull</b> or pull-request on GitHub (www.github.com)\nto integrate the work of others into their history. A\nsub-area lieutenant for a repository will act both as a\nparticipant and as an integrator.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-am\">git-am(1)</a> to apply patches e-mailed in from your\ncontributors.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-pull\">git-pull(1)</a> to merge from your trusted\nlieutenants.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-format-patch\">git-format-patch(1)</a> to prepare and send suggested\nalternative to contributors.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-revert\">git-revert(1)</a> to undo botched commits.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-push\">git-push(1)</a> to publish the bleeding edge.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Examples</b>\n<br>\nA typical integrator&rsquo;s Git day.</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git status\n<b>(1)</b> <br>\n$ git branch --no-merged master <b>(2)</b> <br>\n$ mailx <b>(3)</b> <br>\n&amp; s 2 3 4 5 ./+to-apply <br>\n&amp; s 7 8 ./+hold-linus <br>\n&amp; q <br>\n$ git switch -c topic/one master <br>\n$ git am -3 -i -s ./+to-apply <b>(4)</b> <br>\n$ compile/test <br>\n$ git switch -c hold/linus &amp;&amp; git am -3 -i -s\n./+hold-linus <b>(5)</b> <br>\n$ git switch topic/one &amp;&amp; git rebase master\n<b>(6)</b> <br>\n$ git switch -C seen next <b>(7)</b> <br>\n$ git merge topic/one topic/two &amp;&amp; git merge\nhold/linus <b>(8)</b> <br>\n$ git switch maint <br>\n$ git cherry-pick master~4 <b>(9)</b> <br>\n$ compile/test <br>\n$ git tag -s -m &quot;GIT 0.99.9x&quot; v0.99.9x <b>(10)</b>\n<br>\n$ git fetch ko &amp;&amp; for branch in master maint next\nseen <b>(11)</b> <br>\ndo <br>\ngit show-branch ko/$branch $branch <b>(12)</b> <br>\ndone <br>\n$ git push --follow-tags ko <b>(13)</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"><b>1.</b> see\nwhat you were in the middle of doing, if anything. <b><br>\n2.</b> see which branches haven&rsquo;t been merged into\n<b>master</b> yet. Likewise for any other integration\nbranches e.g. <b>maint</b>, <b>next</b> and <b>seen</b>.\n<b><br>\n3.</b> read mails, save ones that are applicable, and save\nothers that are not quite ready (other mail readers are\navailable). <b><br>\n4.</b> apply them, interactively, with your sign-offs.\n<b><br>\n5.</b> create topic branch as needed and apply, again with\nsign-offs. <b><br>\n6.</b> rebase internal topic branch that has not been merged\nto the master or exposed as a part of a stable branch.\n<b><br>\n7.</b> restart <b>seen</b> every time from the next. <b><br>\n8.</b> and bundle topic branches still cooking. <b><br>\n9.</b> backport a critical fix. <b><br>\n10.</b> create a signed tag. <b><br>\n11.</b> make sure master was not accidentally rewound beyond\nthat already pushed out. <b><br>\n12.</b> In the output from <b>git show-branch</b>,\n<b>master</b> should have everything <b>ko/master</b> has,\nand <b>next</b> should have everything <b>ko/next</b> has,\netc. <b><br>\n13.</b> push out the bleeding edge, together with new tags\nthat point into the pushed history.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In this\nexample, the <b>ko</b> shorthand points at the Git\nmaintainer&rsquo;s repository at kernel.org, and looks like\nthis:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">(in\n.git/config) <br>\n[remote &quot;ko&quot;] <br>\nurl = kernel.org:/pub/scm/git/git.git <br>\nfetch = refs/heads/*:refs/remotes/ko/* <br>\npush = refs/heads/master <br>\npush = refs/heads/next <br>\npush = +refs/heads/seen <br>\npush = refs/heads/maint</p>\n\n<h2>REPOSITORY ADMINISTRATION\n<a name=\"REPOSITORY ADMINISTRATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">A repository\nadministrator uses the following tools to set up and\nmaintain access to the repository by developers.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-daemon\">git-daemon(1)</a> to allow anonymous download from\nrepository.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-shell\">git-shell(1)</a> can be used as a <i>restricted login\nshell</i> for shared central repository users.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/git-http-backend\">git-http-backend(1)</a> provides a server side\nimplementation of Git-over-HTTP (&quot;Smart http&quot;)\nallowing both fetch and push services.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\n<a href=\"https://man.page/1/gitweb\">gitweb(1)</a> provides a web front-end to Git\nrepositories, which can be set-up using the\n<a href=\"https://man.page/1/git-instaweb\">git-instaweb(1)</a> script.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><font color=\"#0000FF\">update\nhook howto</font></b>\n<small><font color=\"#000000\">[1]</font></small>\n<font color=\"#000000\">has a good example of managing a\nshared central repository.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">In\naddition there are a number of other widely deployed\nhosting, browsing and reviewing solutions such\nas:</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">&bull;\ngitolite, gerrit code review, cgit and others.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\"><b>Examples</b>\n<br>\nWe assume the following in /etc/services</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngrep 9418 /etc/services <br>\ngit 9418/tcp # Git Version Control System</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Run\ngit-daemon to serve /pub/scm from inetd.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngrep git /etc/inetd.conf <br>\ngit stream tcp nowait nobody \\ <br>\n/usr/bin/git-daemon git-daemon --inetd --export-all\n/pub/scm</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">The\nactual configuration line should be on one line.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Run\ngit-daemon to serve /pub/scm from xinetd.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ncat /etc/xinetd.d/git-daemon <br>\n# default: off <br>\n# description: The Git server offers access to Git\nrepositories <br>\nservice git <br>\n{ <br>\ndisable = no <br>\ntype = UNLISTED <br>\nport = 9418 <br>\nsocket_type = stream <br>\nwait = no <br>\nuser = nobody <br>\nserver = /usr/bin/git-daemon <br>\nserver_args = --inetd --export-all --base-path=/pub/scm <br>\nlog_on_failure += USERID <br>\n}</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Check\nyour xinetd(8) documentation and setup, this is from a\nFedora system. Others might be different.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Give\npush/pull only access to developers using\ngit-over-ssh.</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">e.g.\nthose using: <b>$ git push/pull\nssh://host.xz/pub/scm/project</b></font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngrep git /etc/passwd <b>(1)</b> <br>\nalice:x:1000:1000::/home/alice:/usr/bin/git-shell <br>\nbob:x:1001:1001::/home/bob:/usr/bin/git-shell <br>\ncindy:x:1002:1002::/home/cindy:/usr/bin/git-shell <br>\ndavid:x:1003:1003::/home/david:/usr/bin/git-shell <br>\n$ grep git /etc/shells <b>(2)</b> <br>\n/usr/bin/git-shell</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>1.</b>\nlog-in shell is set to /usr/bin/git-shell, which does not\nallow anything but <b>git push</b> and <b>git pull</b>. The\nusers require ssh access to the machine. <b><br>\n2.</b> in many distributions /etc/shells needs to list what\nis used as the login shell.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">CVS-style\nshared repository.</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngrep git /etc/group <b>(1)</b> <br>\ngit:x:9418:alice,bob,cindy,david <br>\n$ cd /home/devo.git <br>\n$ ls -l <b>(2)</b> <br>\nlrwxrwxrwx 1 david git 17 Dec 4 22:40 HEAD -&gt;\nrefs/heads/master <br>\ndrwxrwsr-x 2 david git 4096 Dec 4 22:40 branches <br>\n-rw-rw-r-- 1 david git 84 Dec 4 22:40 config <br>\n-rw-rw-r-- 1 david git 58 Dec 4 22:40 description <br>\ndrwxrwsr-x 2 david git 4096 Dec 4 22:40 hooks <br>\n-rw-rw-r-- 1 david git 37504 Dec 4 22:40 index <br>\ndrwxrwsr-x 2 david git 4096 Dec 4 22:40 info <br>\ndrwxrwsr-x 4 david git 4096 Dec 4 22:40 objects <br>\ndrwxrwsr-x 4 david git 4096 Nov 7 14:58 refs <br>\ndrwxrwsr-x 2 david git 4096 Dec 4 22:40 remotes <br>\n$ ls -l hooks/update <b>(3)</b> <br>\n-r-xr-xr-x 1 david git 3536 Dec 4 22:40 update <br>\n$ cat info/allowed-users <b>(4)</b> <br>\nrefs/heads/master alice\\|cindy <br>\nrefs/heads/doc-update bob <br>\nrefs/tags/v[0-9]* david</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\"><b>1.</b>\nplace the developers into the same git group. <b><br>\n2.</b> and make the shared repository writable by the group.\n<b><br>\n3.</b> use update-hook example by Carl from\nDocumentation/howto/ for branch policy control. <b><br>\n4.</b> alice and cindy can push into master, only bob can\npush into doc-update. david is the release manager and is\nthe only person who can create and push version\ntags.</font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"12%\"></td>\n<td width=\"3%\">\n\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">1.</font></p> </td>\n<td width=\"2%\"></td>\n<td width=\"26%\">\n\n\n<p style=\"margin-top: 1em\"><font color=\"#000000\">update\nhook howto</font></p></td>\n<td width=\"57%\">\n</td></tr>\n</table>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">file:///usr/share/doc/git/html/howto/update-hook-example.html</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#INDIVIDUAL DEVELOPER (STANDALONE)\">INDIVIDUAL DEVELOPER (STANDALONE)</a>","<a href=\"#INDIVIDUAL DEVELOPER (PARTICIPANT)\">INDIVIDUAL DEVELOPER (PARTICIPANT)</a>","<a href=\"#INTEGRATOR\">INTEGRATOR</a>","<a href=\"#REPOSITORY ADMINISTRATION\">REPOSITORY ADMINISTRATION</a>","<a href=\"#GIT\">GIT</a>","<a href=\"#NOTES\">NOTES</a>"],"level":7}