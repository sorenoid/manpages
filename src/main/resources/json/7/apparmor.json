{"name":"apparmor","body":"\n\n<h1 align=\"center\">APPARMOR</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor -\nkernel enhancement to confine programs to a limited set of\nresources.</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor is a\nkernel enhancement to confine programs to a limited set of\nresources. AppArmor&rsquo;s unique security model is to bind\naccess control attributes to programs rather than to\nusers.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor\nconfinement is provided via <i>profiles</i> loaded into the\nkernel via <b>apparmor_parser</b>(8), typically through the\n<i>/etc/init.d/apparmor</i> SysV initscript, which is used\nlike this:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#\n/etc/init.d/apparmor start <br>\n# /etc/init.d/apparmor stop <br>\n# /etc/init.d/apparmor restart</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor can\noperate in two modes: <i>enforcement</i>, and <i>complain or\nlearning</i>:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><i>enforcement</i> - Profiles loaded in enforcement mode\nwill result in enforcement of the policy defined in the\nprofile as well as reporting policy violation attempts to\nsyslogd.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><i>complain</i> - Profiles loaded in\n&quot;complain&quot; mode will not enforce policy. Instead,\nit will report policy violation attempts. This mode is\nconvenient for developing profiles. To manage complain mode\nfor individual profiles the utilities <b>aa-complain</b>(8)\nand <b>aa-enforce</b>(8) can be used. These utilities take a\nprogram name as an argument.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Profiles are\ntraditionally stored in files in <i>/etc/apparmor.d/</i>\nunder filenames with the convention of replacing the\n<b>/</b> in pathnames with <b>.</b> (except for the root\n<b>/</b>) so profiles are easier to manage (e.g. the\n<i>/usr/sbin/nscd</i> profile would be named\n<i>usr.sbin.nscd</i>).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Profiles are\napplied to a process at <a href=\"https://man.page/3/exec\">exec(3)</a> time (as seen through\nthe <a href=\"https://man.page/2/execve\">execve(2)</a> system call): once a profile is loaded\nfor a program, that program will be confined on the next\n<a href=\"https://man.page/3/exec\">exec(3)</a>. If a process is already running under a\nprofile, when one replaces that profile in the kernel, the\nupdated profile is applied immediately to that process. On\nthe other hand, a process that is already running unconfined\ncannot be confined.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor\nsupports the Linux kernel&rsquo;s securityfs filesystem, and\nmakes available the list of the profiles currently loaded;\nto mount the filesystem:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"># mount\n-tsecurityfs securityfs /sys/kernel/security <br>\n$ cat /sys/kernel/security/apparmor/profiles <br>\n/usr/bin/mutt <br>\n/usr/bin/gpg <br>\n...</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Normally, the\ninitscript will mount securityfs if it has not already been\ndone.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor also\nrestricts what privileged operations a confined process may\nexecute, even if the process is running as root. A confined\nprocess cannot call the following system calls:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">create_module(2)\ndelete_module(2) init_module(2) ioperm(2) <br>\niopl(2) ptrace(2) reboot(2) setdomainname(2) <br>\nsethostname(2) swapoff(2) swapon(2) sysctl(2)</p>\n\n<h2>ERRORS\n<a name=\"ERRORS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a confined\nprocess tries to access a file it does not have permission\nto access, the kernel will report a message through audit,\nsimilar to:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">audit(1386511672.612:238):\napparmor=&quot;DENIED&quot; operation=&quot;exec&quot; <br>\nparent=7589 profile=&quot;/tmp/sh&quot;\nname=&quot;/bin/uname&quot; pid=7605 <br>\ncomm=&quot;sh&quot; requested_mask=&quot;x&quot;\ndenied_mask=&quot;x&quot; fsuid=0 ouid=0 <br>\naudit(1386511672.613:239): apparmor=&quot;DENIED&quot;\noperation=&quot;open&quot; <br>\nparent=7589 profile=&quot;/tmp/sh&quot;\nname=&quot;/bin/uname&quot; pid=7605 <br>\ncomm=&quot;sh&quot; requested_mask=&quot;r&quot;\ndenied_mask=&quot;r&quot; fsuid=0 ouid=0 <br>\naudit(1386511772.804:246): apparmor=&quot;DENIED&quot;\noperation=&quot;capable&quot; <br>\nparent=7246 profile=&quot;/tmp/sh&quot; pid=7589\ncomm=&quot;sh&quot; pid=7589 <br>\ncomm=&quot;sh&quot; capability=2\ncapname=&quot;dac_override&quot;</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The permissions\nrequested by the process are described in the operation= and\ndenied_mask= (for files - capabilities etc. use a slightly\ndifferent log format). The &quot;name&quot; and process id\nof the running program are reported, as well as the profile\nname including any &quot;hat&quot; that may be active,\nseparated by &quot;//&quot;. (&quot;Name&quot; is in quotes,\nbecause the process name is limited to 15 bytes; it is the\nsame as reported through the Berkeley process\naccounting.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For confined\nprocesses running under a profile that has been loaded in\ncomplain mode, enforcement will not take place and the log\nmessages reported to audit will be of the form:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">audit(1386512577.017:275):\napparmor=&quot;ALLOWED&quot; operation=&quot;open&quot; <br>\nparent=8012 profile=&quot;/usr/bin/du&quot;\nname=&quot;/etc/apparmor.d/tunables/&quot; <br>\npid=8049 comm=&quot;du&quot; requested_mask=&quot;r&quot;\ndenied_mask=&quot;r&quot; fsuid=1000 ouid=0 <br>\naudit(1386512577.017:276): apparmor=&quot;ALLOWED&quot;\noperation=&quot;open&quot; <br>\nparent=8012 profile=&quot;/usr/bin/du&quot;\nname=&quot;/etc/apparmor.d/tunables/&quot; <br>\npid=8049 comm=&quot;du&quot; requested_mask=&quot;r&quot;\ndenied_mask=&quot;r&quot; fsuid=1000 ouid=0</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If the userland\nauditd is not running, the kernel will send audit events to\nklogd; klogd will send the messages to syslog, which will\nlog the messages with the <small>KERN</small> facility.\nThus, <small>REJECTING</small> and <small>PERMITTING</small>\nmessages may go to either <i>/var/log/audit/audit.log</i> or\n<i>/var/log/messages</i>, depending upon local\nconfiguration.</p>\n\n<h2>DEBUGGING\n<a name=\"DEBUGGING\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">AppArmor\nprovides a few facilities to log more information, which can\nhelp debugging profiles.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Enable debug\nmode</b> <br>\nWhen debug mode is enabled, AppArmor will log a few extra\nmessages to dmesg (not via the audit subsystem). For\nexample, the logs will tell whether environment scrubbing\nhas been applied.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To enable debug\nmode, run:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">echo 1 &gt;\n/sys/module/apparmor/parameters/debug</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Turn off\ndeny audit quieting</b> <br>\nBy default, operations that trigger &quot;deny&quot; rules\nare not logged. This is called <i>deny audit\nquieting</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To turn off\ndeny audit quieting, run:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">echo -n noquiet\n&gt;/sys/module/apparmor/parameters/audit</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Force audit\nmode</b> <br>\nAppArmor can log a message for every operation that triggers\na rule configured in the policy. This is called <i>force\naudit mode</i>.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Warning!</b>\nForce audit mode can be extremely noisy even for a single\nprofile, let alone when enabled globally.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To set a\nspecific profile in force audit mode, add the\n&quot;audit&quot; flag:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">profile foo\nflags=(audit) { ... }</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">To enable force\naudit mode globally, run:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">echo -n all\n&gt; /sys/module/apparmor/parameters/audit</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If auditd is\nnot running, to avoid losing too many of the extra log\nmessages, you will likely have to turn off rate limiting by\ndoing:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">echo 0 &gt;\n/proc/sys/kernel/printk_ratelimit</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">But even then\nthe kernel ring buffer may overflow and you might lose\nmessages.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Else, if auditd\nis running, see <b>auditd</b>(8) and\n<b>auditd.conf</b>(5).</p>\n\n<h2>FILES\n<a name=\"FILES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>/etc/init.d/apparmor\n<br>\n/etc/apparmor.d/ <br>\n/var/lib/apparmor/ <br>\n/var/log/audit/audit.log <br>\n/var/log/messages</i></p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i><b>apparmor_parser</b></i>(8),\n<a href=\"https://man.page/2/aa_change_hat\">aa_change_hat(2)</a>, <b>apparmor.d</b>(5),\n<a href=\"https://man.page/1/aa-autodep\">aa-autodep(1)</a>, <a href=\"https://man.page/1/clean\">clean(1)</a>, <b>auditd</b>(8),\n<b>aa-unconfined</b>(8), <a href=\"https://man.page/1/aa-enforce\">aa-enforce(1)</a>,\n<a href=\"https://man.page/1/aa-complain\">aa-complain(1)</a>, and\n&lt;https://wiki.apparmor.net&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#ERRORS\">ERRORS</a>","<a href=\"#DEBUGGING\">DEBUGGING</a>","<a href=\"#FILES\">FILES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":7}