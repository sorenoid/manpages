{"name":"gitfaq","description":"gitfaq -\nFrequently asked questions about using Git","body":"\n\n<h1 align=\"center\">GITFAQ</h1>\n\n\n\n\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitfaq -\nFrequently asked questions about using Git</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">gitfaq</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The examples in\nthis FAQ assume a standard POSIX shell, like <b>bash</b> or\n<b>dash</b>, and a user, A U Thor, who has the account\n<b>author</b> on the hosting provider\n<b>git.example.org</b>.</p>\n\n<h2>CONFIGURATION\n<a name=\"CONFIGURATION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">What should I\nput in <b>user.name</b>?</p>\n\n<p style=\"margin-left:17%;\">You should put your personal\nname, generally a form using a given name and family name.\nFor example, the current maintainer of Git uses &quot;Junio\nC Hamano&quot;. This will be the name portion that is stored\nin every commit you make.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This\nconfiguration doesn&rsquo;t have any effect on\nauthenticating to remote services; for that, see\n<b>credential.username</b> in <a href=\"https://man.page/1/git-config\">git-config(1)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">What does\n<b>http.postBuffer</b> really do?</p>\n\n<p style=\"margin-left:17%;\">This option changes the size of\nthe buffer that Git uses when pushing data to a remote over\nHTTP or HTTPS. If the data is larger than this size,\nlibcurl, which handles the HTTP support for Git, will use\nchunked transfer encoding since it isn&rsquo;t known ahead\nof time what the size of the pushed data will be.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Leaving this\nvalue at the default size is fine unless you know that\neither the remote server or a proxy in the middle\ndoesn&rsquo;t support HTTP/1.1 (which introduced the chunked\ntransfer encoding) or is known to be broken with chunked\ndata. This is often (erroneously) suggested as a solution\nfor generic push problems, but since almost every server and\nproxy supports at least HTTP/1.1, raising this value usually\ndoesn&rsquo;t solve most push problems. A server or proxy\nthat didn&rsquo;t correctly support HTTP/1.1 and chunked\ntransfer encoding wouldn&rsquo;t be that useful on the\nInternet today, since it would break lots of traffic.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that\nincreasing this value will increase the memory used on every\nrelevant push that Git does over HTTP or HTTPS, since the\nentire buffer is allocated regardless of whether or not it\nis all used. Thus, it&rsquo;s best to leave it at the\ndefault unless you are sure you need a different value.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">How do I\nconfigure a different editor?</p>\n\n<p style=\"margin-left:17%;\">If you haven&rsquo;t specified\nan editor specifically for Git, it will by default use the\neditor you&rsquo;ve configured using the <b>VISUAL</b> or\n<b>EDITOR</b> environment variables, or if neither is\nspecified, the system default (which is usually <b>vi</b>).\nSince some people find <b>vi</b> difficult to use or prefer\na different editor, it may be desirable to change the editor\nused.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nconfigure a general editor for most programs which need one,\nyou can edit your shell configuration (e.g.,\n<b>~/.bashrc</b> or <b>~/.zshenv</b>) to contain a line\nsetting the <b>EDITOR</b> or <b>VISUAL</b> environment\nvariable to an appropriate value. For example, if you prefer\nthe editor <b>nano</b>, then you could write the\nfollowing:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">export\nVISUAL=nano</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">If you want to\nconfigure an editor specifically for Git, you can either set\nthe <b>core.editor</b> configuration value or the\n<b>GIT_EDITOR</b> environment variable. You can see\n<a href=\"https://man.page/1/git-var\">git-var(1)</a> for details on the order in which these\noptions are consulted.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Note that in\nall cases, the editor value will be passed to the shell, so\nany arguments containing spaces should be appropriately\nquoted. Additionally, if your editor normally detaches from\nthe terminal when invoked, you should specify it with an\nargument that makes it not do that, or else Git will not see\nany changes. An example of a configuration addressing both\nof these issues on Windows would be the configuration\n<b>&quot;C:\\Program Files\\Vim\\gvim.exe&quot; --nofork</b>,\nwhich quotes the filename with spaces and specifies the\n<b>--nofork</b> option to avoid backgrounding the\nprocess.</p>\n\n<h2>CREDENTIALS\n<a name=\"CREDENTIALS\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">How do I\nspecify my credentials when pushing over HTTP?</p>\n\n<p style=\"margin-left:17%;\">The easiest way to do this is\nto use a credential helper via the <b>credential.helper</b>\nconfiguration. Most systems provide a standard choice to\nintegrate with the system credential manager. For example,\nGit for Windows provides the <b>wincred</b> credential\nmanager, macOS has the <b>osxkeychain</b> credential\nmanager, and Unix systems with a standard desktop\nenvironment can use the <b>libsecret</b> credential manager.\nAll of these store credentials in an encrypted store to keep\nyour passwords or tokens secure.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">In addition,\nyou can use the <b>store</b> credential manager which stores\nin a file in your home directory, or the <b>cache</b>\ncredential manager, which does not permanently store your\ncredentials, but does prevent you from being prompted for\nthem for a certain period of time.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">You can also\njust enter your password when prompted. While it is possible\nto place the password (which must be percent-encoded) in the\nURL, this is not particularly secure and can lead to\naccidental exposure of credentials, so it is not\nrecommended.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">How do I read a\npassword or token from an environment variable?</p>\n\n<p style=\"margin-left:17%;\">The <b>credential.helper</b>\nconfiguration option can also take an arbitrary shell\ncommand that produces the credential protocol on standard\noutput. This is useful when passing credentials into a\ncontainer, for example.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">Such a shell\ncommand can be specified by starting the option value with\nan exclamation point. If your password or token were stored\nin the <b>GIT_TOKEN</b>, you could run the following command\nto set your credential helper:</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ git config\ncredential.helper \\ <br>\n'!f() { echo username=author; echo\n&quot;password=$GIT_TOKEN&quot;; };f'</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">How do I change\nthe password or token I&rsquo;ve saved in my credential\nmanager?</p>\n\n<p style=\"margin-left:17%;\">Usually, if the password or\ntoken is invalid, Git will erase it and prompt for a new\none. However, there are times when this doesn&rsquo;t always\nhappen. To change the password or token, you can erase the\nexisting credentials and then Git will prompt for new ones.\nTo erase credentials, use a syntax like the following\n(substituting your username and the hostname):</p>\n\n<p style=\"margin-left:23%; margin-top: 1em\">$ echo\nurl=https://author@git.example.org | git credential\nreject</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">How do I use\nmultiple accounts with the same hosting provider using\nHTTP?</p>\n\n<p style=\"margin-left:17%;\">Usually the easiest way to\ndistinguish between these accounts is to use the username in\nthe URL. For example, if you have the accounts <b>author</b>\nand <b>committer</b> on <b>git.example.org</b>, you can use\nthe URLs\n<b><font color=\"#0000FF\">https://author@git.example.org/org1/project1.git</font></b>\n<font color=\"#000000\">and</font>\n<b><font color=\"#0000FF\">https://committer@git.example.org/org2/project2.git</font></b><font color=\"#000000\">.\nThis way, when you use a credential helper, it will\nautomatically try to look up the correct credentials for\nyour account. If you already have a remote set up, you can\nchange the URL with something like <b>git remote set-url\norigin https://author@git.example.org/org1/project1.git</b>\n(see <a href=\"https://man.page/1/git-remote\">git-remote(1)</a> for details).</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">How\ndo I use multiple accounts with the same hosting provider\nusing SSH?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">With most\nhosting providers that support SSH, a single key pair\nuniquely identifies a user. Therefore, to use multiple\naccounts, it&rsquo;s necessary to create a key pair for each\naccount. If you&rsquo;re using a reasonably modern OpenSSH\nversion, you can create a new key pair with something like\n<b>ssh-keygen -t ed25519 -f ~/.ssh/id_committer</b>. You can\nthen register the public key (in this case,\n<b>~/.ssh/id_committer.pub</b>; note the <b>.pub</b>) with\nthe hosting provider.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Most\nhosting providers use a single SSH account for pushing; that\nis, all users push to the <b>git</b> account (e.g.,\n<b>git@git.example.org</b>). If that&rsquo;s the case for\nyour provider, you can set up multiple aliases in SSH to\nmake it clear which key pair to use. For example, you could\nwrite something like the following in <b>~/.ssh/config</b>,\nsubstituting the proper private key file:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">#\nThis is the account for author on git.example.org. <br>\nHost example_author <br>\nHostName git.example.org <br>\nUser git <br>\n# This is the key pair registered for author with\ngit.example.org. <br>\nIdentityFile ~/.ssh/id_author <br>\nIdentitiesOnly yes <br>\n# This is the account for committer on git.example.org. <br>\nHost example_committer <br>\nHostName git.example.org <br>\nUser git <br>\n# This is the key pair registered for committer with\ngit.example.org. <br>\nIdentityFile ~/.ssh/id_committer <br>\nIdentitiesOnly yes</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Then,\nyou can adjust your push URL to use\n<b>git@example_author</b> or <b>git@example_committer</b>\ninstead of <b>git@example.org</b> (e.g., <b>git remote\nset-url\ngit@example_author:org1/project1.git</b>).</font></p>\n\n<h2>COMMON ISSUES\n<a name=\"COMMON ISSUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">I&rsquo;ve\nmade a mistake in the last commit. How do I change\nit?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">You can\nmake the appropriate change to your working tree, run <b>git\nadd &lt;file&gt;</b> or <b>git rm &lt;file&gt;</b>, as\nappropriate, to stage it, and then <b>git commit\n--amend</b>. Your change will be included in the commit, and\nyou&rsquo;ll be prompted to edit the commit message again;\nif you wish to use the original message verbatim, you can\nuse the <b>--no-edit</b> option to <b>git commit</b> in\naddition, or just save and quit when your editor\nopens.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">I&rsquo;ve\nmade a change with a bug and it&rsquo;s been included in the\nmain branch. How should I undo it?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The usual\nway to deal with this is to use <b>git revert</b>. This\npreserves the history that the original change was made and\nwas a valuable contribution, but also introduces a new\ncommit that undoes those changes because the original had a\nproblem. The commit message of the revert indicates the\ncommit which was reverted and is usually edited to include\nan explanation as to why the revert was made.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">How\ndo I ignore changes to a tracked file?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Git\ndoesn&rsquo;t provide a way to do this. The reason is that\nif Git needs to overwrite this file, such as during a\ncheckout, it doesn&rsquo;t know whether the changes to the\nfile are precious and should be kept, or whether they are\nirrelevant and can safely be destroyed. Therefore, it has to\ntake the safe route and always preserve them.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It&rsquo;s\ntempting to try to use certain features of <b>git\nupdate-index</b>, namely the assume-unchanged and\nskip-worktree bits, but these don&rsquo;t work properly for\nthis purpose and shouldn&rsquo;t be used this\nway.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nyour goal is to modify a configuration file, it can often be\nhelpful to have a file checked into the repository which is\na template or set of defaults which can then be copied\nalongside and modified as appropriate. This second, modified\nfile is usually ignored to prevent accidentally committing\nit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">I\nasked Git to ignore various files, yet they are still\ntracked</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A\n<b>gitignore</b> file ensures that certain file(s) which are\nnot tracked by Git remain untracked. However, sometimes\nparticular file(s) may have been tracked before adding them\ninto the <b>.gitignore</b>, hence they still remain tracked.\nTo untrack and ignore files/patterns, use <b>git rm --cached\n&lt;file/pattern&gt;</b> and add a pattern to\n<b>.gitignore</b> that matches the &lt;file&gt;. See\n<a href=\"https://man.page/5/gitignore\">gitignore(5)</a> for details.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">How\ndo I know if I want to do a fetch or a pull?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">A fetch\nstores a copy of the latest changes from the remote\nrepository, without modifying the working tree or current\nbranch. You can then at your leisure inspect, merge, rebase\non top of, or ignore the upstream changes. A pull consists\nof a fetch followed immediately by either a merge or rebase.\nSee <a href=\"https://man.page/1/git-pull\">git-pull(1)</a>.</font></p>\n\n<h2>MERGING AND REBASING\n<a name=\"MERGING AND REBASING\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">What\nkinds of problems can occur when merging long-lived branches\nwith squash merges?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">In\ngeneral, there are a variety of problems that can occur when\nusing squash merges to merge two branches multiple times.\nThese can include seeing extra commits in <b>git log</b>\noutput, with a GUI, or when using the <b>...</b> notation to\nexpress a range, as well as the possibility of needing to\nre-resolve conflicts again and again.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nGit does a normal merge between two branches, it considers\nexactly three points: the two branches and a third commit,\ncalled the <i>merge base</i>, which is usually the common\nancestor of the commits. The result of the merge is the sum\nof the changes between the merge base and each head. When\nyou merge two branches with a regular merge commit, this\nresults in a new commit which will end up as a merge base\nwhen they&rsquo;re merged again, because there is now a new\ncommon ancestor. Git doesn&rsquo;t have to consider changes\nthat occurred before the merge base, so you don&rsquo;t have\nto re-resolve any conflicts you resolved before.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">When\nyou perform a squash merge, a merge commit isn&rsquo;t\ncreated; instead, the changes from one side are applied as a\nregular commit to the other side. This means that the merge\nbase for these branches won&rsquo;t have changed, and so\nwhen Git goes to perform its next merge, it considers all of\nthe changes that it considered the last time plus the new\nchanges. That means any conflicts may need to be\nre-resolved. Similarly, anything using the <b>...</b>\nnotation in <b>git diff</b>, <b>git log</b>, or a GUI will\nresult in showing all of the changes since the original\nmerge base.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">As\na consequence, if you want to merge two long-lived branches\nrepeatedly, it&rsquo;s best to always use a regular merge\ncommit.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">If\nI make a change on two branches but revert it on one, why\ndoes the merge of those branches include the\nchange?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, when Git does a merge, it uses a strategy called\nthe <b>ort</b> strategy, which does a fancy three-way merge.\nIn such a case, when Git performs the merge, it considers\nexactly three points: the two heads and a third point,\ncalled the <i>merge base</i>, which is usually the common\nancestor of those commits. Git does not consider the history\nor the individual commits that have happened on those\nbranches at all.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">As\na result, if both sides have a change and one side has\nreverted that change, the result is to include the change.\nThis is because the code has changed on one side and there\nis no net change on the other, and in this scenario, Git\nadopts the change.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">If\nthis is a problem for you, you can do a rebase instead,\nrebasing the branch with the revert onto the other branch. A\nrebase in this scenario will revert the change, because a\nrebase applies each individual commit, including the revert.\nNote that rebases rewrite history, so you should avoid\nrebasing published branches unless you&rsquo;re sure\nyou&rsquo;re comfortable with that. See the NOTES section in\n<a href=\"https://man.page/1/git-rebase\">git-rebase(1)</a> for more details.</font></p>\n\n<h2>HOOKS\n<a name=\"HOOKS\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">How\ndo I use hooks to prevent users from making certain\nchanges?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">The only\nsafe place to make these changes is on the remote repository\n(i.e., the Git server), usually in the <b>pre-receive</b>\nhook or in a continuous integration (CI) system. These are\nthe locations in which policy can be enforced\neffectively.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It&rsquo;s\ncommon to try to use <b>pre-commit</b> hooks (or, for commit\nmessages, <b>commit-msg</b> hooks) to check these things,\nwhich is great if you&rsquo;re working as a solo developer\nand want the tooling to help you. However, using hooks on a\ndeveloper machine is not effective as a policy control\nbecause a user can bypass these hooks with\n<b>--no-verify</b> without being noticed (among various\nother ways). Git assumes that the user is in control of\ntheir local repositories and doesn&rsquo;t try to prevent\nthis or tattle on the user.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">In\naddition, some advanced users find <b>pre-commit</b> hooks\nto be an impediment to workflows that use temporary commits\nto stage work in progress or that create fixup commits, so\nit&rsquo;s better to push these kinds of checks to the\nserver anyway.</font></p>\n\n<h2>CROSS-PLATFORM ISSUES\n<a name=\"CROSS-PLATFORM ISSUES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">I&rsquo;m\non Windows and my text files are detected as\nbinary.</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Git works\nbest when you store text files as UTF-8. Many programs on\nWindows support UTF-8, but some do not and only use the\nlittle-endian UTF-16 format, which Git detects as binary. If\nyou can&rsquo;t use UTF-8 with your programs, you can\nspecify a working tree encoding that indicates which\nencoding your files should be checked out with, while still\nstoring these files as UTF-8 in the repository. This allows\ntools like <a href=\"https://man.page/1/git-diff\">git-diff(1)</a> to work as expected, while\nstill allowing your tools to work.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">To\ndo so, you can specify a <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> pattern\nwith the <b>working-tree-encoding</b> attribute. For\nexample, the following pattern sets all C files to use\nUTF-16LE-BOM, which is a common encoding on\nWindows:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">*.c\nworking-tree-encoding=UTF-16LE-BOM</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">You\nwill need to run <b>git add --renormalize</b> to have this\ntake effect. Note that if you are making these changes on a\nproject that is used across platforms, you&rsquo;ll probably\nwant to make it in a per-user configuration file or in the\none in <b>$GIT_DIR/info/attributes</b>, since making it in a\n<b>.gitattributes</b> file in the repository will apply to\nall users of the repository.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">See\nthe following entry for information about normalizing line\nendings as well, and see <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> for more\ninformation about attribute files.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">I&rsquo;m\non Windows and git diff shows my files as having a <b>^M</b>\nat the end.</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">By\ndefault, Git expects files to be stored with Unix line\nendings. As such, the carriage return (<b>^M</b>) that is\npart of a Windows line ending is shown because it is\nconsidered to be trailing whitespace. Git defaults to\nshowing trailing whitespace only on new lines, not existing\nones.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">You\ncan store the files in the repository with Unix line endings\nand convert them automatically to your platform&rsquo;s line\nendings. To do that, set the configuration option\n<b>core.eol</b> to <b>native</b> and see the following entry\nfor information about how to configure files as text or\nbinary.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">You\ncan also control this behavior with the\n<b>core.whitespace</b> setting if you don&rsquo;t wish to\nremove the carriage returns from your line\nendings.</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Why\ndo I have a file that&rsquo;s always modified?</font></p>\n\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">Internally,\nGit always stores file names as sequences of bytes and\ndoesn&rsquo;t perform any encoding or case folding. However,\nWindows and macOS by default both perform case folding on\nfile names. As a result, it&rsquo;s possible to end up with\nmultiple files or directories whose names differ only in\ncase. Git can handle this just fine, but the file system can\nstore only one of these files, so when Git reads the other\nfile to see its contents, it looks modified.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It&rsquo;s\nbest to remove one of the files such that you only have one\nfile. You can do this with commands like the following\n(assuming two files <b>AFile.txt</b> and <b>afile.txt</b>)\non an otherwise clean working tree:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit rm --cached AFile.txt <br>\n$ git commit -m 'Remove files conflicting in case' <br>\n$ git checkout .</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">This\navoids touching the disk, but removes the additional file.\nYour project may prefer to adopt a naming convention, such\nas all-lowercase names, to avoid this problem from occurring\nagain; such a convention can be checked using a\n<b>pre-receive</b> hook or as part of a continuous\nintegration (CI) system.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">It\nis also possible for perpetually modified files to occur on\nany platform if a smudge or clean filter is in use on your\nsystem but a file was previously committed without running\nthe smudge or clean filter. To fix this, run the following\non an otherwise clean working tree:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">$\ngit add --renormalize .</font></p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">What&rsquo;s\nthe recommended way to store files in Git?</font></p>\n\n<p style=\"margin-left:17%;\"><font color=\"#000000\">While Git\ncan store and handle any file of any type, there are some\nsettings that work better than others. In general, we\nrecommend that text files be stored in UTF-8 without a\nbyte-order mark (BOM) with LF (Unix-style) endings. We also\nrecommend the use of UTF-8 (again, without BOM) in commit\nmessages. These are the settings that work best across\nplatforms and with tools such as <b>git diff</b> and <b>git\nmerge</b>.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Additionally,\nif you have a choice between storage formats that are text\nbased or non-text based, we recommend storing files in the\ntext format and, if necessary, transforming them into the\nother format. For example, a text-based SQL dump with one\nrecord per line will work much better for diffing and\nmerging than an actual database file. Similarly, text-based\nformats such as Markdown and AsciiDoc will work better than\nbinary formats such as Microsoft Word and PDF.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">Similarly,\nstoring binary dependencies (e.g., shared libraries or JAR\nfiles) or build products in the repository is generally not\nrecommended. Dependencies and build products are best stored\non an artifact or package server with only references, URLs,\nand hashes stored in the repository.</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">We\nalso recommend setting a <a href=\"https://man.page/5/gitattributes\">gitattributes(5)</a> file to\nexplicitly mark which files are text and which are binary.\nIf you want Git to guess, you can set the attribute\n<b>text=auto</b>. For example, the following might be\nappropriate in some projects:</font></p>\n\n\n<p style=\"margin-left:23%; margin-top: 1em\"><font color=\"#000000\">#\nBy default, guess. <br>\n* text=auto <br>\n# Mark all C files as text. <br>\n*.c text <br>\n# Mark all JPEG files as binary. <br>\n*.jpg binary</font></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\"><font color=\"#000000\">These\nsettings help tools pick the right format for output such as\npatches and result in files being checked out in the\nappropriate line ending for the platform.</font></p>\n\n<h2>GIT\n<a name=\"GIT\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><font color=\"#000000\">Part\nof the <a href=\"https://man.page/1/git\">git(1)</a> suite</font></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFIGURATION\">CONFIGURATION</a>","<a href=\"#CREDENTIALS\">CREDENTIALS</a>","<a href=\"#COMMON ISSUES\">COMMON ISSUES</a>","<a href=\"#MERGING AND REBASING\">MERGING AND REBASING</a>","<a href=\"#HOOKS\">HOOKS</a>","<a href=\"#CROSS-PLATFORM ISSUES\">CROSS-PLATFORM ISSUES</a>","<a href=\"#GIT\">GIT</a>"],"level":7}