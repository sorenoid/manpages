{"name":"property","description":"property - Properties, a selection mechanism for algorithm implementations","body":"\n\n<h1 align=\"center\">PROPERTY</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">property -\nProperties, a selection mechanism for algorithm\nimplementations</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">As of OpenSSL\n3.0, a new method has been introduced to decide which of\nmultiple implementations of an algorithm will be used. The\nmethod is centered around the concept of properties. Each\nimplementation defines a number of properties and when an\nalgorithm is being selected, filters based on these\nproperties can be used to choose the most appropriate\nimplementation of the algorithm.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties are\nlike variables, they are referenced by name and have a value\nassigned.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Property\nNames</b> <br>\nProperty names fall into two categories: those reserved by\nthe OpenSSL project and user defined names. A\n<i>reserved</i> property name consists of a single C-style\nidentifier (except for leading underscores not being\npermitted), which begins with a letter and can be followed\nby any number of letters, numbers and underscores. Property\nnames are case-insensitive, but OpenSSL will only use\nlowercase letters.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A <i>user\ndefined</i> property name is similar, but it <b>must</b>\nconsist of two or more C-style identifiers, separated by\nperiods. The last identifier in the name can be considered\nthe &rsquo;true&rsquo; property name, which is prefixed by\nsome sort of &rsquo;namespace&rsquo;. Providers for example\ncould include their name in the prefix and use property\nnames like</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">&lt;provider_name&gt;.&lt;property_name&gt;\n<br>\n\n&lt;provider_name&gt;.&lt;algorithm_name&gt;.&lt;property_name&gt;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Properties</b>\n<br>\nA <i>property</i> is a <i>name=value</i> pair. A <i>property\ndefinition</i> is a sequence of comma separated properties.\nThere can be any number of properties in a definition,\nhowever each name must be unique. For example: &quot;&quot;\ndefines an empty property definition (i.e., no restriction);\n&quot;my.foo=bar&quot; defines a property named\n<i>my.foo</i> which has a string value <i>bar</i> and\n&quot;iteration.count=3&quot; defines a property named\n<i>iteration.count</i> which has a numeric value of\n<i>3</i>. The full syntax for property definitions appears\nbelow.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Implementations</b>\n<br>\nEach implementation of an algorithm can define any number of\nproperties. For example, the default provider defines the\nproperty <i>provider=default</i> for all of its algorithms.\nLikewise, OpenSSL&rsquo;s <small>FIPS</small> provider\ndefines <i>provider=fips</i> and the legacy provider defines\n<i>provider=legacy</i> for all of their algorithms.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Queries</b>\n<br>\nA <i>property query clause</i> is a single conditional test.\nFor example, &quot;fips=yes&quot;,\n&quot;provider!=default&quot; or\n&quot;?iteration.count=3&quot;. The first two represent\nmandatory clauses, such clauses <b>must</b> match for any\nalgorithm to even be under consideration. The third clause\nrepresents an optional clause. Matching such clauses is not\na requirement, but any additional optional match counts in\nfavor of the algorithm. More details about that in the\n<b>Lookups</b> section. A <i>property query</i> is a\nsequence of comma separated property query clauses. It is an\nerror if a property name appears in more than one query\nclause. The full syntax for property queries appears below,\nbut the available syntactic features are:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>=</b> is an infix operator providing an equality\ntest.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>!=</b> is an infix operator providing an inequality\ntest.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>?</b> is a prefix operator that means that the\nfollowing clause is optional but preferred.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>-</b> is a prefix operator that means any global\nquery clause involving the following property name should be\nignored.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>&quot;...&quot;</b> is a quoted string. The quotes\nare not included in the body of the string.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>&bull;</p></td>\n<td width=\"5%\"></td>\n<td width=\"83%\">\n\n\n<p><b>&rsquo;...&rsquo;</b> is a quoted string. The quotes\nare not included in the body of the string.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Lookups</b>\n<br>\nWhen an algorithm is looked up, a property query is used to\ndetermine the best matching algorithm. All mandatory query\nclauses <b>must</b> be present and the implementation that\nadditionally has the largest number of matching optional\nquery clauses will be used. If there is more than one such\noptimal candidate, the result will be chosen from amongst\nthose in an indeterminate way. Ordering of optional clauses\nis not significant.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Shortcut</b>\n<br>\nIn order to permit a more concise expression of boolean\nproperties, there is one short cut: a property name alone\n(e.g. &quot;my.property&quot;) is exactly equivalent to\n&quot;my.property=yes&quot; in both definitions and\nqueries.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Global and\nLocal</b> <br>\nTwo levels of property query are supported. A context based\nproperty query that applies to all fetch operations and a\nlocal property query. Where both the context and local\nqueries include a clause with the same name, the local\nclause overrides the context clause.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is possible\nfor a local property query to remove a clause in the context\nproperty query by preceding the property name with a\n&rsquo;-&rsquo;. For example, a context property query that\ncontains &quot;fips=yes&quot; would normally result in\nimplementations that have &quot;fips=yes&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">However, if the\nsetting of the &quot;fips&quot; property is irrelevant to\nthe operations being performed, the local property query can\ninclude the clause &quot;-fips&quot;. Note that the local\nproperty query could not use &quot;fips=no&quot; because\nthat would disallow any implementations with\n&quot;fips=yes&quot; rather than not caring about the\nsetting.</p>\n\n<h2>SYNTAX\n<a name=\"SYNTAX\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The lexical\nsyntax in <small>EBNF</small> is given by:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Definition ::=\nPropertyName ( '=' Value )? <br>\n( ',' PropertyName ( '=' Value )? )* <br>\nQuery ::= PropertyQuery ( ',' PropertyQuery )* <br>\nPropertyQuery ::= '-' PropertyName <br>\n| '?'? ( PropertyName (( '=' | '!=' ) Value)?) <br>\nValue ::= NumberLiteral | StringLiteral <br>\nStringLiteral ::= QuotedString | UnquotedString <br>\nQuotedString ::= '&quot;' [^&quot;]* '&quot;' |\n&quot;'&quot; [^']* &quot;'&quot; <br>\nUnquotedString ::= [^{space},]+ <br>\nNumberLiteral ::= '0' ( [0-7]* | 'x' [0-9A-Fa-f]+ ) | '-'?\n[1-9] [0-9]+ <br>\nPropertyName ::= [A-Z] [A-Z0-9_]* ( '.' [A-Z] [A-Z0-9_]*\n)*</p>\n\n<h2>HISTORY\n<a name=\"HISTORY\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Properties were\nadded in OpenSSL 3.0</p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2019-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SYNTAX\">SYNTAX</a>","<a href=\"#HISTORY\">HISTORY</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}