{"name":"capabilities","description":"capabilities - overview of Linux capabilities","body":"\n\n<h1 align=\"center\">CAPABILITIES</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">capabilities -\noverview of Linux capabilities</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">For the purpose\nof performing permission checks, traditional UNIX\nimplementations distinguish two categories of processes:\n<i>privileged</i> processes (whose effective user ID is 0,\nreferred to as superuser or root), and <i>unprivileged</i>\nprocesses (whose effective UID is nonzero). Privileged\nprocesses bypass all kernel permission checks, while\nunprivileged processes are subject to full permission\nchecking based on the process&rsquo;s credentials (usually:\neffective UID, effective GID, and supplementary group\nlist).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting with\nkernel 2.2, Linux divides the privileges traditionally\nassociated with superuser into distinct units, known as\n<i>capabilities</i>, which can be independently enabled and\ndisabled. Capabilities are a per-thread attribute.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Capabilities\nlist</b> <br>\nThe following list shows the capabilities implemented on\nLinux, and the operations or behaviors that each capability\npermits: <b><br>\nCAP_AUDIT_CONTROL</b> (since Linux 2.6.11)</p>\n\n<p style=\"margin-left:22%;\">Enable and disable kernel\nauditing; change auditing filter rules; retrieve auditing\nstatus and filtering rules.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_AUDIT_READ</b> (since\nLinux 3.16)</p>\n\n<p style=\"margin-left:22%;\">Allow reading the audit log via\na multicast netlink socket.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_AUDIT_WRITE</b> (since\nLinux 2.6.11)</p>\n\n<p style=\"margin-left:22%;\">Write records to kernel\nauditing log.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_BLOCK_SUSPEND</b> (since\nLinux 3.5)</p>\n\n<p style=\"margin-left:22%;\">Employ features that can block\nsystem suspend (<a href=\"https://man.page/7/epoll\">epoll(7)</a> <b>EPOLLWAKEUP</b>,\n<i>/proc/sys/wake_lock</i>).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_BPF</b> (since Linux\n5.8)</p>\n\n<p style=\"margin-left:22%;\">Employ privileged BPF\noperations; see <a href=\"https://man.page/2/bpf\">bpf(2)</a> and <a href=\"https://man.page/7/bpf-helpers\">bpf-helpers(7)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This capability\nwas added in Linux 5.8 to separate out BPF functionality\nfrom the overloaded <b>CAP_SYS_ADMIN</b> capability.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_CHECKPOINT_RESTORE</b>\n(since Linux 5.9)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Update <i>/proc/sys/kernel/ns_last_pid</i> (see\n<a href=\"https://man.page/7/pid_namespaces\">pid_namespaces(7)</a>);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the <i>set_tid</i> feature of\n<a href=\"https://man.page/2/clone3\">clone3(2)</a>;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>read the contents of the symbolic links in\n<i>/proc/[pid]/map_files</i> for other processes.</p></td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This capability\nwas added in Linux 5.9 to separate out checkpoint/restore\nfunctionality from the overloaded <b>CAP_SYS_ADMIN</b>\ncapability.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_CHOWN</b></p>\n\n<p style=\"margin-left:22%;\">Make arbitrary changes to file\nUIDs and GIDs (see <a href=\"https://man.page/2/chown\">chown(2)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_DAC_OVERRIDE</b></p>\n\n<p style=\"margin-left:22%;\">Bypass file read, write, and\nexecute permission checks. (DAC is an abbreviation of\n&quot;discretionary access control&quot;.)</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_DAC_READ_SEARCH</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Bypass file read permission checks and directory read\nand execute permission checks;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>invoke <a href=\"https://man.page/2/open_by_handle_at\">open_by_handle_at(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>use the <a href=\"https://man.page/2/linkat\">linkat(2)</a> <b>AT_EMPTY_PATH</b> flag to\ncreate a link to a file referred to by a file\ndescriptor.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_FOWNER</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Bypass permission checks on operations that normally\nrequire the filesystem UID of the process to match the UID\nof the file (e.g., <a href=\"https://man.page/2/chmod\">chmod(2)</a>, <a href=\"https://man.page/2/utime\">utime(2)</a>),\nexcluding those operations covered by\n<b>CAP_DAC_OVERRIDE</b> and <b>CAP_DAC_READ_SEARCH</b>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set inode flags (see <a href=\"https://man.page/2/ioctl_iflags\">ioctl_iflags(2)</a>) on\narbitrary files;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set Access Control Lists (ACLs) on arbitrary files;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>ignore directory sticky bit on file deletion;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>modify <i>user</i> extended attributes on sticky\ndirectory owned by any user;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>specify <b>O_NOATIME</b> for arbitrary files in\n<a href=\"https://man.page/2/open\">open(2)</a> and <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_FSETID</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Don&rsquo;t clear set-user-ID and set-group-ID mode bits\nwhen a file is modified;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set the set-group-ID bit for a file whose GID does not\nmatch the filesystem or any of the supplementary GIDs of the\ncalling process.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_IPC_LOCK</b></p>\n\n<p style=\"margin-left:22%;\">Lock memory (<a href=\"https://man.page/2/mlock\">mlock(2)</a>,\n<a href=\"https://man.page/2/mlockall\">mlockall(2)</a>, <a href=\"https://man.page/2/mmap\">mmap(2)</a>, <a href=\"https://man.page/2/shmctl\">shmctl(2)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_IPC_OWNER</b></p>\n\n<p style=\"margin-left:22%;\">Bypass permission checks for\noperations on System V IPC objects.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_KILL</b></p>\n\n<p style=\"margin-left:22%;\">Bypass permission checks for\nsending signals (see <a href=\"https://man.page/2/kill\">kill(2)</a>). This includes use of\nthe <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> <b>KDSIGACCEPT</b> operation.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_LEASE</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">Establish leases on arbitrary\nfiles (see <a href=\"https://man.page/2/fcntl\">fcntl(2)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_LINUX_IMMUTABLE</b></p>\n\n<p style=\"margin-left:22%;\">Set the <b>FS_APPEND_FL</b> and\n<b>FS_IMMUTABLE_FL</b> inode flags (see\n<a href=\"https://man.page/2/ioctl_iflags\">ioctl_iflags(2)</a>).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_MAC_ADMIN</b> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Allow MAC configuration or\nstate changes. Implemented for the Smack Linux Security\nModule (LSM).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_MAC_OVERRIDE</b> (since\nLinux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">Override Mandatory Access\nControl (MAC). Implemented for the Smack LSM.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_MKNOD</b> (since Linux\n2.4)</p>\n\n<p style=\"margin-left:22%;\">Create special files using\n<a href=\"https://man.page/2/mknod\">mknod(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_NET_ADMIN</b></p>\n\n<p style=\"margin-left:22%;\">Perform various network-related\noperations:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>interface configuration;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>administration of IP firewall, masquerading, and\naccounting;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>modify routing tables;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>bind to any address for transparent proxying;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set type-of-service (TOS);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>clear driver statistics;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set promiscuous mode;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>enabling multicasting;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>use <a href=\"https://man.page/2/setsockopt\">setsockopt(2)</a> to set the following socket\noptions: <b>SO_DEBUG</b>, <b>SO_MARK</b>, <b>SO_PRIORITY</b>\n(for a priority outside the range 0 to 6),\n<b>SO_RCVBUFFORCE</b>, and <b>SO_SNDBUFFORCE</b>.</p></td></tr>\n</table>\n\n\n<p style=\"margin-left:11%;\"><b>CAP_NET_BIND_SERVICE</b></p>\n\n<p style=\"margin-left:22%;\">Bind a socket to Internet\ndomain privileged ports (port numbers less than 1024).</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_NET_BROADCAST</b></p>\n\n<p style=\"margin-left:22%;\">(Unused) Make socket\nbroadcasts, and listen to multicasts.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_NET_RAW</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"69%\">\n\n\n<p>Use RAW and PACKET sockets;</p></td>\n<td width=\"6%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"69%\">\n\n\n<p>bind to any address for transparent proxying.</p></td>\n<td width=\"6%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_PERFMON</b> (since Linux\n5.8)</p>\n\n<p style=\"margin-left:22%;\">Employ various\nperformance-monitoring mechanisms, including:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>call <a href=\"https://man.page/2/perf_event_open\">perf_event_open(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ various BPF operations that have performance\nimplications.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This capability\nwas added in Linux 5.8 to separate out performance\nmonitoring functionality from the overloaded\n<b>CAP_SYS_ADMIN</b> capability. See also the kernel source\nfile <i>Documentation/admin-guide/perf-security.rst</i>.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SETGID</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Make arbitrary manipulations of process GIDs and\nsupplementary GID list;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>forge GID when passing socket credentials via UNIX\ndomain sockets;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>write a group ID mapping in a user namespace (see\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SETFCAP</b> (since Linux\n2.6.24)</p>\n\n<p style=\"margin-left:22%;\">Set arbitrary capabilities on a\nfile.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SETPCAP</b></p>\n\n<p style=\"margin-left:22%;\">If file capabilities are\nsupported (i.e., since Linux 2.6.24): add any capability\nfrom the calling thread&rsquo;s bounding set to its\ninheritable set; drop capabilities from the bounding set\n(via <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_CAPBSET_DROP</b>); make changes\nto the <i>securebits</i> flags.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If file\ncapabilities are not supported (i.e., kernels before Linux\n2.6.24): grant or remove any capability in the\ncaller&rsquo;s permitted capability set to or from any other\nprocess. (This property of <b>CAP_SETPCAP</b> is not\navailable when the kernel is configured to support file\ncapabilities, since <b>CAP_SETPCAP</b> has entirely\ndifferent semantics for such kernels.)</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SETUID</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Make arbitrary manipulations of process UIDs\n(<a href=\"https://man.page/2/setuid\">setuid(2)</a>, <a href=\"https://man.page/2/setreuid\">setreuid(2)</a>, <a href=\"https://man.page/2/setresuid\">setresuid(2)</a>,\n<a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>forge UID when passing socket credentials via UNIX\ndomain sockets;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>write a user ID mapping in a user namespace (see\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>).</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_ADMIN</b></p>\n\n<p style=\"margin-left:22%;\"><i>Note</i>: this capability is\noverloaded; see <i>Notes to kernel developers</i>,\nbelow.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Perform a range of system administration operations\nincluding: <a href=\"https://man.page/2/quotactl\">quotactl(2)</a>, <a href=\"https://man.page/2/mount\">mount(2)</a>,\n<a href=\"https://man.page/2/umount\">umount(2)</a>, <a href=\"https://man.page/2/pivot_root\">pivot_root(2)</a>, <a href=\"https://man.page/2/swapon\">swapon(2)</a>,\n<a href=\"https://man.page/2/swapoff\">swapoff(2)</a>, <a href=\"https://man.page/2/sethostname\">sethostname(2)</a>, and\n<a href=\"https://man.page/2/setdomainname\">setdomainname(2)</a>;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform privileged <a href=\"https://man.page/2/syslog\">syslog(2)</a> operations (since\nLinux 2.6.37, <b>CAP_SYSLOG</b> should be used to permit\nsuch operations);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform <b>VM86_REQUEST_IRQ vm86</b>(2) command;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>access the same checkpoint/restore functionality that is\ngoverned by <b>CAP_CHECKPOINT_RESTORE</b> (but the latter,\nweaker capability is preferred for accessing that\nfunctionality).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform the same BPF operations as are governed by\n<b>CAP_BPF</b> (but the latter, weaker capability is\npreferred for accessing that functionality).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the same performance monitoring mechanisms as are\ngoverned by <b>CAP_PERFMON</b> (but the latter, weaker\ncapability is preferred for accessing that\nfunctionality).</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform <b>IPC_SET</b> and <b>IPC_RMID</b> operations on\narbitrary System V IPC objects;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override <b>RLIMIT_NPROC</b> resource limit;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform operations on <i>trusted</i> and <i>security</i>\nextended attributes (see <a href=\"https://man.page/7/xattr\">xattr(7)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>use <a href=\"https://man.page/2/lookup_dcookie\">lookup_dcookie(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>use <a href=\"https://man.page/2/ioprio_set\">ioprio_set(2)</a> to assign\n<b>IOPRIO_CLASS_RT</b> and (before Linux 2.6.25)\n<b>IOPRIO_CLASS_IDLE</b> I/O scheduling classes;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>forge PID when passing socket credentials via UNIX\ndomain sockets;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>exceed <i>/proc/sys/fs/file-max</i>, the system-wide\nlimit on the number of open files, in system calls that open\nfiles (e.g., <a href=\"https://man.page/2/accept\">accept(2)</a>, <a href=\"https://man.page/2/execve\">execve(2)</a>,\n<a href=\"https://man.page/2/open\">open(2)</a>, <a href=\"https://man.page/2/pipe\">pipe(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ <b>CLONE_*</b> flags that create new namespaces\nwith <a href=\"https://man.page/2/clone\">clone(2)</a> and <a href=\"https://man.page/2/unshare\">unshare(2)</a> (but, since Linux\n3.8, creating user namespaces does not require any\ncapability);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>access privileged <i>perf</i> event information;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>call <a href=\"https://man.page/2/setns\">setns(2)</a> (requires <b>CAP_SYS_ADMIN</b> in\nthe <i>target</i> namespace);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>call <a href=\"https://man.page/2/fanotify_init\">fanotify_init(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform privileged <b>KEYCTL_CHOWN</b> and\n<b>KEYCTL_SETPERM keyctl</b>(2) operations;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform <a href=\"https://man.page/2/madvise\">madvise(2)</a> <b>MADV_HWPOISON</b>\noperation;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the <b>TIOCSTI ioctl</b>(2) to insert characters\ninto the input queue of a terminal other than the\ncaller&rsquo;s controlling terminal;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the obsolete <a href=\"https://man.page/2/nfsservctl\">nfsservctl(2)</a> system\ncall;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the obsolete <a href=\"https://man.page/2/bdflush\">bdflush(2)</a> system call;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform various privileged block-device <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\noperations;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform various privileged filesystem <a href=\"https://man.page/2/ioctl\">ioctl(2)</a>\noperations;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform privileged <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations on the\n<i>/dev/random</i> device (see <a href=\"https://man.page/4/random\">random(4)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>install a <a href=\"https://man.page/2/seccomp\">seccomp(2)</a> filter without first having\nto set the <i>no_new_privs</i> thread attribute;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>modify allow/deny rules for device control groups;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>\n<b>PTRACE_SECCOMP_GET_FILTER</b> operation to dump\ntracee&rsquo;s seccomp filters;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the <a href=\"https://man.page/2/ptrace\">ptrace(2)</a> <b>PTRACE_SETOPTIONS</b>\noperation to suspend the tracee&rsquo;s seccomp protections\n(i.e., the <b>PTRACE_O_SUSPEND_SECCOMP</b> flag);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform administrative operations on many device\ndrivers;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>modify autogroup nice values by writing to\n<i>/proc/[pid]/autogroup</i> (see <a href=\"https://man.page/7/sched\">sched(7)</a>).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_BOOT</b></p>\n\n<p style=\"margin-left:22%;\">Use <a href=\"https://man.page/2/reboot\">reboot(2)</a> and\n<a href=\"https://man.page/2/kexec_load\">kexec_load(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_CHROOT</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>Use <a href=\"https://man.page/2/chroot\">chroot(2)</a>;</p></td>\n<td width=\"15%\">\n</td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"60%\">\n\n\n<p>change mount namespaces using <a href=\"https://man.page/2/setns\">setns(2)</a>.</p></td>\n<td width=\"15%\">\n</td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_MODULE</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Load and unload kernel modules (see\n<a href=\"https://man.page/2/init_module\">init_module(2)</a> and <a href=\"https://man.page/2/delete_module\">delete_module(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>in kernels before 2.6.25: drop capabilities from the\nsystem-wide capability bounding set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_NICE</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Lower the process nice value (<a href=\"https://man.page/2/nice\">nice(2)</a>,\n<a href=\"https://man.page/2/setpriority\">setpriority(2)</a>) and change the nice value for\narbitrary processes;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set real-time scheduling policies for calling process,\nand set scheduling policies and priorities for arbitrary\nprocesses (<a href=\"https://man.page/2/sched_setscheduler\">sched_setscheduler(2)</a>,\n<a href=\"https://man.page/2/sched_setparam\">sched_setparam(2)</a>, <a href=\"https://man.page/2/sched_setattr\">sched_setattr(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set CPU affinity for arbitrary processes\n(<a href=\"https://man.page/2/sched_setaffinity\">sched_setaffinity(2)</a>);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set I/O scheduling class and priority for arbitrary\nprocesses (<a href=\"https://man.page/2/ioprio_set\">ioprio_set(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>apply <a href=\"https://man.page/2/migrate_pages\">migrate_pages(2)</a> to arbitrary processes and\nallow processes to be migrated to arbitrary nodes;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>apply <a href=\"https://man.page/2/move_pages\">move_pages(2)</a> to arbitrary processes;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>use the <b>MPOL_MF_MOVE_ALL</b> flag with\n<a href=\"https://man.page/2/mbind\">mbind(2)</a> and <a href=\"https://man.page/2/move_pages\">move_pages(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_PACCT</b></p>\n\n<p style=\"margin-left:22%;\">Use <a href=\"https://man.page/2/acct\">acct(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_PTRACE</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Trace arbitrary processes using <a href=\"https://man.page/2/ptrace\">ptrace(2)</a>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>apply <a href=\"https://man.page/2/get_robust_list\">get_robust_list(2)</a> to arbitrary\nprocesses;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>transfer data to or from the memory of arbitrary\nprocesses using <a href=\"https://man.page/2/process_vm_readv\">process_vm_readv(2)</a> and\n<a href=\"https://man.page/2/process_vm_writev\">process_vm_writev(2)</a>;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>inspect processes using <a href=\"https://man.page/2/kcmp\">kcmp(2)</a>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_RAWIO</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Perform I/O port operations (<a href=\"https://man.page/2/iopl\">iopl(2)</a> and\n<a href=\"https://man.page/2/ioperm\">ioperm(2)</a>);</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>access <i>/proc/kcore</i>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the <b>FIBMAP ioctl</b>(2) operation;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>open devices for accessing x86 model-specific registers\n(MSRs, see <a href=\"https://man.page/4/msr\">msr(4)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>update <i>/proc/sys/vm/mmap_min_addr</i>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>create memory mappings at addresses below the value\nspecified by <i>/proc/sys/vm/mmap_min_addr</i>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>map files in <i>/proc/bus/pci</i>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>open <i>/dev/mem</i> and <i>/dev/kmem</i>;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform various SCSI device commands;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform certain operations on <a href=\"https://man.page/4/hpsa\">hpsa(4)</a> and\n<a href=\"https://man.page/4/cciss\">cciss(4)</a> devices;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>perform a range of device-specific operations on other\ndevices.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_RESOURCE</b></p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Use reserved space on ext2 filesystems;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>make <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> calls controlling ext3\njournaling;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override disk quota limits;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>increase resource limits (see <a href=\"https://man.page/2/setrlimit\">setrlimit(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override <b>RLIMIT_NPROC</b> resource limit;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override maximum number of consoles on console\nallocation;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override maximum number of keymaps;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>allow more than 64hz interrupts from the real-time\nclock;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>raise <i>msg_qbytes</i> limit for a System V message\nqueue above the limit in <i>/proc/sys/kernel/msgmnb</i> (see\n<a href=\"https://man.page/2/msgop\">msgop(2)</a> and <a href=\"https://man.page/2/msgctl\">msgctl(2)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>allow the <b>RLIMIT_NOFILE</b> resource limit on the\nnumber of &quot;in-flight&quot; file descriptors to be\nbypassed when passing file descriptors to another process\nvia a UNIX domain socket (see <a href=\"https://man.page/7/unix\">unix(7)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override the <i>/proc/sys/fs/pipe-size-max</i> limit\nwhen setting the capacity of a pipe using the\n<b>F_SETPIPE_SZ fcntl</b>(2) command;</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>use <b>F_SETPIPE_SZ</b> to increase the capacity of a\npipe above the limit specified by\n<i>/proc/sys/fs/pipe-max-size</i>;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>override <i>/proc/sys/fs/mqueue/queues_max,\n/proc/sys/fs/mqueue/msg_max,</i> and\n<i>/proc/sys/fs/mqueue/msgsize_max</i> limits when creating\nPOSIX message queues (see <a href=\"https://man.page/7/mq_overview\">mq_overview(7)</a>);</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>employ the <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_MM</b>\noperation;</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>set <i>/proc/[pid]/oom_score_adj</i> to a value lower\nthan the value last set by a process with\n<b>CAP_SYS_RESOURCE</b>.</p> </td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_TIME</b></p>\n\n<p style=\"margin-left:22%;\">Set system clock\n(<a href=\"https://man.page/2/settimeofday\">settimeofday(2)</a>, <a href=\"https://man.page/2/stime\">stime(2)</a>,\n<a href=\"https://man.page/2/adjtimex\">adjtimex(2)</a>); set real-time (hardware) clock.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYS_TTY_CONFIG</b></p>\n\n<p style=\"margin-left:22%;\">Use <a href=\"https://man.page/2/vhangup\">vhangup(2)</a>; employ\nvarious privileged <a href=\"https://man.page/2/ioctl\">ioctl(2)</a> operations on virtual\nterminals.</p>\n\n<p style=\"margin-left:11%;\"><b>CAP_SYSLOG</b> (since Linux\n2.6.37)</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>Perform privileged <a href=\"https://man.page/2/syslog\">syslog(2)</a> operations. See\n<a href=\"https://man.page/2/syslog\">syslog(2)</a> for information on which operations require\nprivilege.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"22%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"75%\">\n\n\n<p>View kernel addresses exposed via <i>/proc</i> and other\ninterfaces when <i>/proc/sys/kernel/kptr_restrict</i> has\nthe value 1. (See the discussion of the <i>kptr_restrict</i>\nin <a href=\"https://man.page/5/proc\">proc(5)</a>.)</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\"><b>CAP_WAKE_ALARM</b> (since\nLinux 3.0)</p>\n\n<p style=\"margin-left:22%;\">Trigger something that will\nwake up the system (set <b>CLOCK_REALTIME_ALARM</b> and\n<b>CLOCK_BOOTTIME_ALARM</b> timers).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Past and\ncurrent implementation</b> <br>\nA full implementation of capabilities requires that:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>For all privileged operations, the kernel must check\nwhether the thread has the required capability in its\neffective set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The kernel must provide system calls allowing a\nthread&rsquo;s capability sets to be changed and\nretrieved.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The filesystem must support attaching capabilities to an\nexecutable file, so that a process gains those capabilities\nwhen the file is executed.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before kernel\n2.6.24, only the first two of these requirements are met;\nsince kernel 2.6.24, all three requirements are met.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Notes to\nkernel developers</b> <br>\nWhen adding a new kernel feature that should be governed by\na capability, consider the following points.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The goal of capabilities is\ndivide the power of superuser into pieces, such that if a\nprogram that has one or more capabilities is compromised,\nits power to do damage to the system would be less than the\nsame program running with root privilege.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>You have the choice of either creating a new capability\nfor your new feature, or associating the feature with one of\nthe existing capabilities. In order to keep the set of\ncapabilities to a manageable size, the latter option is\npreferable, unless there are compelling reasons to take the\nformer option. (There is also a technical limit: the size of\ncapability sets is currently limited to 64 bits.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>To determine which existing capability might best be\nassociated with your new feature, review the list of\ncapabilities above in order to find a &quot;silo&quot; into\nwhich your new feature best fits. One approach to take is to\ndetermine if there are other features requiring capabilities\nthat will always be used along with the new feature. If the\nnew feature is useless without these other features, you\nshould use the same capability as the other features.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p><i>Don&rsquo;t</i> choose <b>CAP_SYS_ADMIN</b> if you\ncan possibly avoid it! A vast proportion of existing\ncapability checks are associated with this capability (see\nthe partial list above). It can plausibly be called\n&quot;the new root&quot;, since on the one hand, it confers\na wide range of powers, and on the other hand, its broad\nscope means that this is the capability that is required by\nmany privileged programs. Don&rsquo;t make the problem\nworse. The only new features that should be associated with\n<b>CAP_SYS_ADMIN</b> are ones that <i>closely</i> match\nexisting uses in that silo.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>If you have determined that it really is necessary to\ncreate a new capability for your feature, don&rsquo;t make\nor name it as a &quot;single-use&quot; capability. Thus, for\nexample, the addition of the highly specific\n<b>CAP_SYS_PACCT</b> was probably a mistake. Instead, try to\nidentify and name your new capability as a broader silo into\nwhich other related future use cases might fit.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Thread\ncapability sets</b> <br>\nEach thread has the following capability sets containing\nzero or more of the above capabilities: <i><br>\nPermitted</i></p>\n\n<p style=\"margin-left:22%;\">This is a limiting superset for\nthe effective capabilities that the thread may assume. It is\nalso a limiting superset for the capabilities that may be\nadded to the inheritable set by a thread that does not have\nthe <b>CAP_SETPCAP</b> capability in its effective set.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">If a thread\ndrops a capability from its permitted set, it can never\nreacquire that capability (unless it <a href=\"https://man.page/2/execve\">execve(2)</a>s\neither a set-user-ID-root program, or a program whose\nassociated file capabilities grant that capability).</p>\n\n<p style=\"margin-left:11%;\"><i>Inheritable</i></p>\n\n<p style=\"margin-left:22%;\">This is a set of capabilities\npreserved across an <a href=\"https://man.page/2/execve\">execve(2)</a>. Inheritable\ncapabilities remain inheritable when executing any program,\nand inheritable capabilities are added to the permitted set\nwhen executing a program that has the corresponding bits set\nin the file inheritable set.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Because\ninheritable capabilities are not generally preserved across\n<a href=\"https://man.page/2/execve\">execve(2)</a> when running as a non-root user,\napplications that wish to run helper programs with elevated\ncapabilities should consider using ambient capabilities,\ndescribed below.</p>\n\n<p style=\"margin-left:11%;\"><i>Effective</i></p>\n\n<p style=\"margin-left:22%;\">This is the set of capabilities\nused by the kernel to perform permission checks for the\nthread.</p>\n\n<p style=\"margin-left:11%;\"><i>Bounding</i> (per-thread\nsince Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">The capability bounding set is\na mechanism that can be used to limit the capabilities that\nare gained during <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Since Linux\n2.6.25, this is a per-thread capability set. In older\nkernels, the capability bounding set was a system wide\nattribute shared by all threads on the system.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">For more\ndetails on the capability bounding set, see below.</p>\n\n<p style=\"margin-left:11%;\"><i>Ambient</i> (since Linux\n4.3)</p>\n\n<p style=\"margin-left:22%;\">This is a set of capabilities\nthat are preserved across an <a href=\"https://man.page/2/execve\">execve(2)</a> of a program\nthat is not privileged. The ambient capability set obeys the\ninvariant that no capability can ever be ambient if it is\nnot both permitted and inheritable.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The ambient\ncapability set can be directly modified using\n<a href=\"https://man.page/2/prctl\">prctl(2)</a>. Ambient capabilities are automatically\nlowered if either of the corresponding permitted or\ninheritable capabilities is lowered.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Executing a\nprogram that changes UID or GID due to the set-user-ID or\nset-group-ID bits or executing a program that has any file\ncapabilities set will clear the ambient set. Ambient\ncapabilities are added to the permitted set and assigned to\nthe effective set when <a href=\"https://man.page/2/execve\">execve(2)</a> is called. If\nambient capabilities cause a process&rsquo;s permitted and\neffective capabilities to increase during an\n<a href=\"https://man.page/2/execve\">execve(2)</a>, this does not trigger the secure-execution\nmode described in <b>ld.so</b>(8).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A child created\nvia <a href=\"https://man.page/2/fork\">fork(2)</a> inherits copies of its parent&rsquo;s\ncapability sets. See below for a discussion of the treatment\nof capabilities during <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Using\n<a href=\"https://man.page/2/capset\">capset(2)</a>, a thread may manipulate its own capability\nsets (see below).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since Linux\n3.2, the file <i>/proc/sys/kernel/cap_last_cap</i> exposes\nthe numerical value of the highest capability supported by\nthe running kernel; this can be used to determine the\nhighest bit that may be set in a capability set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>File\ncapabilities</b> <br>\nSince kernel 2.6.24, the kernel supports associating\ncapability sets with an executable file using\n<b>setcap</b>(8). The file capability sets are stored in an\nextended attribute (see <a href=\"https://man.page/2/setxattr\">setxattr(2)</a> and\n<a href=\"https://man.page/7/xattr\">xattr(7)</a>) named <i>security.capability</i>. Writing\nto this extended attribute requires the <b>CAP_SETFCAP</b>\ncapability. The file capability sets, in conjunction with\nthe capability sets of the thread, determine the\ncapabilities of a thread after an <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The three file\ncapability sets are: <i><br>\nPermitted</i> (formerly known as <i>forced</i>):</p>\n\n<p style=\"margin-left:22%;\">These capabilities are\nautomatically permitted to the thread, regardless of the\nthread&rsquo;s inheritable capabilities.</p>\n\n<p style=\"margin-left:11%;\"><i>Inheritable</i> (formerly\nknown as <i>allowed</i>):</p>\n\n<p style=\"margin-left:22%;\">This set is ANDed with the\nthread&rsquo;s inheritable set to determine which\ninheritable capabilities are enabled in the permitted set of\nthe thread after the <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%;\"><i>Effective</i>:</p>\n\n<p style=\"margin-left:22%;\">This is not a set, but rather\njust a single bit. If this bit is set, then during an\n<a href=\"https://man.page/2/execve\">execve(2)</a> all of the new permitted capabilities for\nthe thread are also raised in the effective set. If this bit\nis not set, then after an <a href=\"https://man.page/2/execve\">execve(2)</a>, none of the new\npermitted capabilities is in the new effective set.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Enabling the\nfile effective capability bit implies that any file\npermitted or inheritable capability that causes a thread to\nacquire the corresponding permitted capability during an\n<a href=\"https://man.page/2/execve\">execve(2)</a> (see the transformation rules described\nbelow) will also acquire that capability in its effective\nset. Therefore, when assigning capabilities to a file\n(<b>setcap</b>(8), <a href=\"https://man.page/3/cap_set_file\">cap_set_file(3)</a>,\n<a href=\"https://man.page/3/cap_set_fd\">cap_set_fd(3)</a>), if we specify the effective flag as\nbeing enabled for any capability, then the effective flag\nmust also be specified as enabled for all other capabilities\nfor which the corresponding permitted or inheritable flags\nis enabled.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>File\ncapability extended attribute versioning</b> <br>\nTo allow extensibility, the kernel supports a scheme to\nencode a version number inside the\n<i>security.capability</i> extended attribute that is used\nto implement file capabilities. These version numbers are\ninternal to the implementation, and not directly visible to\nuser-space applications. To date, the following versions are\nsupported: <b><br>\nVFS_CAP_REVISION_1</b></p>\n\n<p style=\"margin-left:22%;\">This was the original file\ncapability implementation, which supported 32-bit masks for\nfile capabilities.</p>\n\n<p style=\"margin-left:11%;\"><b>VFS_CAP_REVISION_2</b>\n(since Linux 2.6.25)</p>\n\n<p style=\"margin-left:22%;\">This version allows for file\ncapability masks that are 64 bits in size, and was necessary\nas the number of supported capabilities grew beyond 32. The\nkernel transparently continues to support the execution of\nfiles that have 32-bit version 1 capability masks, but when\nadding capabilities to files that did not previously have\ncapabilities, or modifying the capabilities of existing\nfiles, it automatically uses the version 2 scheme (or\npossibly the version 3 scheme, as described below).</p>\n\n<p style=\"margin-left:11%;\"><b>VFS_CAP_REVISION_3</b>\n(since Linux 4.14)</p>\n\n<p style=\"margin-left:22%;\">Version 3 file capabilities are\nprovided to support namespaced file capabilities (described\nbelow).</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">As with version\n2 file capabilities, version 3 capability masks are 64 bits\nin size. But in addition, the root user ID of namespace is\nencoded in the <i>security.capability</i> extended\nattribute. (A namespace&rsquo;s root user ID is the value\nthat user ID 0 inside that namespace maps to in the initial\nuser namespace.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Version 3 file\ncapabilities are designed to coexist with version 2\ncapabilities; that is, on a modern Linux system, there may\nbe some files with version 2 capabilities while others have\nversion 3 capabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before Linux\n4.14, the only kind of file capability extended attribute\nthat could be attached to a file was a\n<b>VFS_CAP_REVISION_2</b> attribute. Since Linux 4.14, the\nversion of the <i>security.capability</i> extended attribute\nthat is attached to a file depends on the circumstances in\nwhich the attribute was created.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Starting with\nLinux 4.14, a <i>security.capability</i> extended attribute\nis automatically created as (or converted to) a version 3\n(<b>VFS_CAP_REVISION_3</b>) attribute if both of the\nfollowing are true:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(1)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>The thread writing the attribute resides in a noninitial\nuser namespace. (More precisely: the thread resides in a\nuser namespace other than the one from which the underlying\nfilesystem was mounted.)</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"4%\">\n\n\n<p>(2)</p></td>\n<td width=\"2%\"></td>\n<td width=\"83%\">\n\n\n<p>The thread has the <b>CAP_SETFCAP</b> capability over\nthe file inode, meaning that (a) the thread has the\n<b>CAP_SETFCAP</b> capability in its own user namespace; and\n(b) the UID and GID of the file inode have mappings in the\nwriter&rsquo;s user namespace.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When a\n<b>VFS_CAP_REVISION_3</b> <i>security.capability</i>\nextended attribute is created, the root user ID of the\ncreating thread&rsquo;s user namespace is saved in the\nextended attribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">By contrast,\ncreating or modifying a <i>security.capability</i> extended\nattribute from a privileged (<b>CAP_SETFCAP</b>) thread that\nresides in the namespace where the underlying filesystem was\nmounted (this normally means the initial user namespace)\nautomatically results in the creation of a version 2\n(<b>VFS_CAP_REVISION_2</b>) attribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\ncreation of a version 3 <i>security.capability</i> extended\nattribute is automatic. That is to say, when a user-space\napplication writes (<a href=\"https://man.page/2/setxattr\">setxattr(2)</a>) a\n<i>security.capability</i> attribute in the version 2\nformat, the kernel will automatically create a version 3\nattribute if the attribute is created in the circumstances\ndescribed above. Correspondingly, when a version 3\n<i>security.capability</i> attribute is retrieved\n(<a href=\"https://man.page/2/getxattr\">getxattr(2)</a>) by a process that resides inside a user\nnamespace that was created by the root user ID (or a\ndescendant of that user namespace), the returned attribute\nis (automatically) simplified to appear as a version 2\nattribute (i.e., the returned value is the size of a version\n2 attribute and does not include the root user ID). These\nautomatic translations mean that no changes are required to\nuser-space tools (e.g., <a href=\"https://man.page/1/setcap\">setcap(1)</a> and\n<a href=\"https://man.page/1/getcap\">getcap(1)</a>) in order for those tools to be used to\ncreate and retrieve version 3 <i>security.capability</i>\nattributes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that a\nfile can have either a version 2 or a version 3\n<i>security.capability</i> extended attribute associated\nwith it, but not both: creation or modification of the\n<i>security.capability</i> extended attribute will\nautomatically modify the version according to the\ncircumstances in which the extended attribute is created or\nmodified.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Transformation\nof capabilities during execve()</b> <br>\nDuring an <a href=\"https://man.page/2/execve\">execve(2)</a>, the kernel calculates the new\ncapabilities of the process using the following\nalgorithm:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(ambient)\n= (file is privileged) ? 0 : P(ambient)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(permitted)\n= (P(inheritable) &amp; F(inheritable)) | <br>\n(F(permitted) &amp; P(bounding)) | P&rsquo;(ambient)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(effective)\n= F(effective) ? P&rsquo;(permitted) : P&rsquo;(ambient)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(inheritable)\n= P(inheritable) [i.e., unchanged]</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(bounding)\n= P(bounding) [i.e., unchanged]</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">where:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"6%\">\n\n\n<p style=\"margin-top: 1em\">P()</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p style=\"margin-top: 1em\">denotes the value of a thread\ncapability set before the <a href=\"https://man.page/2/execve\">execve(2)</a></p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"6%\">\n\n\n<p>P&rsquo;()</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>denotes the value of a thread capability set after the\n<a href=\"https://man.page/2/execve\">execve(2)</a></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"17%\"></td>\n<td width=\"6%\">\n\n\n<p>F()</p></td>\n<td width=\"3%\"></td>\n<td width=\"74%\">\n\n\n<p>denotes a file capability set</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note the\nfollowing details relating to the above capability\ntransformation rules:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">The ambient capability set is\npresent only since Linux 4.3. When determining the\ntransformation of the ambient set during <a href=\"https://man.page/2/execve\">execve(2)</a>, a\nprivileged file is one that has capabilities or has the\nset-user-ID or set-group-ID bit set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"3%\"></td>\n<td width=\"85%\">\n\n\n<p>Prior to Linux 2.6.25, the bounding set was a\nsystem-wide attribute shared by all threads. That\nsystem-wide value was employed to calculate the new\npermitted set during <a href=\"https://man.page/2/execve\">execve(2)</a> in the same manner as\nshown above for <i>P(bounding)</i>.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\nduring the capability transitions described above, file\ncapabilities may be ignored (treated as empty) for the same\nreasons that the set-user-ID and set-group-ID bits are\nignored; see <a href=\"https://man.page/2/execve\">execve(2)</a>. File capabilities are\nsimilarly ignored if the kernel was booted with the\n<i>no_file_caps</i> option.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>Note</i>:\naccording to the rules above, if a process with nonzero user\nIDs performs an <a href=\"https://man.page/2/execve\">execve(2)</a> then any capabilities that\nare present in its permitted and effective sets will be\ncleared. For the treatment of capabilities when a process\nwith a user ID of zero performs an <a href=\"https://man.page/2/execve\">execve(2)</a>, see\nbelow under <i>Capabilities and execution of programs by\nroot</i>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Safety\nchecking for capability-dumb binaries</b> <br>\nA capability-dumb binary is an application that has been\nmarked to have file capabilities, but has not been converted\nto use the <a href=\"https://man.page/3/libcap\">libcap(3)</a> API to manipulate its\ncapabilities. (In other words, this is a traditional\nset-user-ID-root program that has been switched to use file\ncapabilities, but whose code has not been modified to\nunderstand capabilities.) For such applications, the\neffective capability bit is set on the file, so that the\nfile permitted capabilities are automatically enabled in the\nprocess effective set when executing the file. The kernel\nrecognizes a file which has the effective capability bit set\nas capability-dumb for the purpose of the check described\nhere.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When executing\na capability-dumb binary, the kernel checks if the process\nobtained all permitted capabilities that were specified in\nthe file permitted set, after the capability transformations\ndescribed above have been performed. (The typical reason why\nthis might <i>not</i> occur is that the capability bounding\nset masked out some of the capabilities in the file\npermitted set.) If the process did not obtain the full set\nof file permitted capabilities, then <a href=\"https://man.page/2/execve\">execve(2)</a> fails\nwith the error <b>EPERM</b>. This prevents possible security\nrisks that could arise when a capability-dumb application is\nexecuted with less privilege that it needs. Note that, by\ndefinition, the application could not itself recognize this\nproblem, since it does not employ the <a href=\"https://man.page/3/libcap\">libcap(3)</a>\nAPI.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Capabilities\nand execution of programs by root</b> <br>\nIn order to mirror traditional UNIX semantics, the kernel\nperforms special treatment of file capabilities when a\nprocess with UID 0 (root) executes a program and when a\nset-user-ID-root program is executed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After having\nperformed any changes to the process effective ID that were\ntriggered by the set-user-ID mode bit of the\nbinary&mdash;e.g., switching the effective user ID to 0\n(root) because a set-user-ID-root program was\nexecuted&mdash;the kernel calculates the file capability\nsets as follows:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">If the real or effective user ID\nof the process is 0 (root), then the file inheritable and\npermitted sets are ignored; instead they are notionally\nconsidered to be all ones (i.e., all capabilities enabled).\n(There is one exception to this behavior, described below in\n<i>Set-user-ID-root programs that have file\ncapabilities</i>.)</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>If the effective user ID of the process is 0 (root) or\nthe file effective bit is in fact enabled, then the file\neffective bit is notionally defined to be one (enabled).</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">These notional\nvalues for the file&rsquo;s capability sets are then used as\ndescribed above to calculate the transformation of the\nprocess&rsquo;s capabilities during <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Thus, when a\nprocess with nonzero UIDs <a href=\"https://man.page/2/execve\">execve(2)</a>s a\nset-user-ID-root program that does not have capabilities\nattached, or when a process whose real and effective UIDs\nare zero <a href=\"https://man.page/2/execve\">execve(2)</a>s a program, the calculation of the\nprocess&rsquo;s new permitted capabilities simplifies\nto:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(permitted)\n= P(inheritable) | P(bounding)</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">P&rsquo;(effective)\n= P&rsquo;(permitted)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Consequently,\nthe process gains all capabilities in its permitted and\neffective capability sets, except those masked out by the\ncapability bounding set. (In the calculation of\nP&rsquo;(permitted), the P&rsquo;(ambient) term can be\nsimplified away because it is by definition a proper subset\nof P(inheritable).)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The special\ntreatments of user ID 0 (root) described in this subsection\ncan be disabled using the securebits mechanism described\nbelow.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Set-user-ID-root\nprograms that have file capabilities</b> <br>\nThere is one exception to the behavior described under\n<i>Capabilities and execution of programs by root</i>. If\n(a) the binary that is being executed has capabilities\nattached and (b) the real user ID of the process is\n<i>not</i> 0 (root) and (c) the effective user ID of the\nprocess <i>is</i> 0 (root), then the file capability bits\nare honored (i.e., they are not notionally considered to be\nall ones). The usual way in which this situation can arise\nis when executing a set-UID-root program that also has file\ncapabilities. When such a program is executed, the process\ngains just the capabilities granted by the program (i.e.,\nnot all capabilities, as would occur when executing a\nset-user-ID-root program that does not have any associated\nfile capabilities).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that one\ncan assign empty capability sets to a program file, and thus\nit is possible to create a set-user-ID-root program that\nchanges the effective and saved set-user-ID of the process\nthat executes the program to 0, but confers no capabilities\nto that process.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Capability\nbounding set</b> <br>\nThe capability bounding set is a security mechanism that can\nbe used to limit the capabilities that can be gained during\nan <a href=\"https://man.page/2/execve\">execve(2)</a>. The bounding set is used in the\nfollowing ways:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p style=\"margin-top: 1em\">*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p style=\"margin-top: 1em\">During an <a href=\"https://man.page/2/execve\">execve(2)</a>, the\ncapability bounding set is ANDed with the file permitted\ncapability set, and the result of this operation is assigned\nto the thread&rsquo;s permitted capability set. The\ncapability bounding set thus places a limit on the permitted\ncapabilities that may be granted by an executable file.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>(Since Linux 2.6.25) The capability bounding set acts as\na limiting superset for the capabilities that a thread can\nadd to its inheritable set using <a href=\"https://man.page/2/capset\">capset(2)</a>. This\nmeans that if a capability is not in the bounding set, then\na thread can&rsquo;t add this capability to its inheritable\nset, even if it was in its permitted capabilities, and\nthereby cannot have this capability preserved in its\npermitted set when it <a href=\"https://man.page/2/execve\">execve(2)</a>s a file that has the\ncapability in its inheritable set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that the\nbounding set masks the file permitted capabilities, but not\nthe inheritable capabilities. If a thread maintains a\ncapability in its inheritable set that is not in its\nbounding set, then it can still gain that capability in its\npermitted set by executing a file that has the capability in\nits inheritable set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Depending on\nthe kernel version, the capability bounding set is either a\nsystem-wide attribute, or a per-process attribute.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Capability\nbounding set from Linux 2.6.25 onward</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From Linux\n2.6.25, the <i>capability bounding set</i> is a per-thread\nattribute. (The system-wide capability bounding set\ndescribed below no longer exists.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The bounding\nset is inherited at <a href=\"https://man.page/2/fork\">fork(2)</a> from the thread&rsquo;s\nparent, and is preserved across an <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A thread may\nremove capabilities from its capability bounding set using\nthe <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_CAPBSET_DROP</b> operation,\nprovided it has the <b>CAP_SETPCAP</b> capability. Once a\ncapability has been dropped from the bounding set, it cannot\nbe restored to that set. A thread can determine if a\ncapability is in its bounding set using the <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_CAPBSET_READ</b> operation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Removing\ncapabilities from the bounding set is supported only if file\ncapabilities are compiled into the kernel. In kernels before\nLinux 2.6.33, file capabilities were an optional feature\nconfigurable via the\n<b>CONFIG_SECURITY_FILE_CAPABILITIES</b> option. Since Linux\n2.6.33, the configuration option has been removed and file\ncapabilities are always part of the kernel. When file\ncapabilities are compiled into the kernel, the <b>init</b>\nprocess (the ancestor of all processes) begins with a full\nbounding set. If file capabilities are not compiled into the\nkernel, then <b>init</b> begins with a full bounding set\nminus <b>CAP_SETPCAP</b>, because this capability has a\ndifferent meaning when there are no file capabilities.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Removing a\ncapability from the bounding set does not remove it from the\nthread&rsquo;s inheritable set. However it does prevent the\ncapability from being added back into the thread&rsquo;s\ninheritable set in the future.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Capability\nbounding set prior to Linux 2.6.25</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">In kernels\nbefore 2.6.25, the capability bounding set is a system-wide\nattribute that affects all threads on the system. The\nbounding set is accessible via the file\n<i>/proc/sys/kernel/cap-bound</i>. (Confusingly, this bit\nmask parameter is expressed as a signed decimal number in\n<i>/proc/sys/kernel/cap-bound</i>.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Only the\n<b>init</b> process may set capabilities in the capability\nbounding set; other than that, the superuser (more\nprecisely: a process with the <b>CAP_SYS_MODULE</b>\ncapability) may only clear capabilities from this set.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">On a standard\nsystem the capability bounding set always masks out the\n<b>CAP_SETPCAP</b> capability. To remove this restriction\n(dangerous!), modify the definition of\n<b>CAP_INIT_EFF_SET</b> in <i>include/linux/capability.h</i>\nand rebuild the kernel.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The system-wide\ncapability bounding set feature was added to Linux starting\nwith kernel version 2.2.11.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Effect of\nuser ID changes on capabilities</b> <br>\nTo preserve the traditional semantics for transitions\nbetween 0 and nonzero user IDs, the kernel makes the\nfollowing changes to a thread&rsquo;s capability sets on\nchanges to the thread&rsquo;s real, effective, saved set,\nand filesystem user IDs (using <a href=\"https://man.page/2/setuid\">setuid(2)</a>,\n<a href=\"https://man.page/2/setresuid\">setresuid(2)</a>, or similar):</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">If one or more of the real,\neffective or saved set user IDs was previously 0, and as a\nresult of the UID changes all of these IDs have a nonzero\nvalue, then all capabilities are cleared from the permitted,\neffective, and ambient capability sets.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>If the effective user ID is changed from 0 to nonzero,\nthen all capabilities are cleared from the effective\nset.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>If the effective user ID is changed from nonzero to 0,\nthen the permitted set is copied to the effective set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>4.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>If the filesystem user ID is changed from 0 to nonzero\n(see <a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>), then the following capabilities\nare cleared from the effective set: <b>CAP_CHOWN</b>,\n<b>CAP_DAC_OVERRIDE</b>, <b>CAP_DAC_READ_SEARCH</b>,\n<b>CAP_FOWNER</b>, <b>CAP_FSETID</b>,\n<b>CAP_LINUX_IMMUTABLE</b> (since Linux 2.6.30),\n<b>CAP_MAC_OVERRIDE</b>, and <b>CAP_MKNOD</b> (since Linux\n2.6.30). If the filesystem UID is changed from nonzero to 0,\nthen any of these capabilities that are enabled in the\npermitted set are enabled in the effective set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\">If a thread\nthat has a 0 value for one or more of its user IDs wants to\nprevent its permitted capability set being cleared when it\nresets all of its user IDs to nonzero values, it can do so\nusing the <b>SECBIT_KEEP_CAPS</b> securebits flag described\nbelow.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Programmatically\nadjusting capability sets</b> <br>\nA thread can retrieve and change its permitted, effective,\nand inheritable capability sets using the <a href=\"https://man.page/2/capget\">capget(2)</a>\nand <a href=\"https://man.page/2/capset\">capset(2)</a> system calls. However, the use of\n<a href=\"https://man.page/3/cap_get_proc\">cap_get_proc(3)</a> and <a href=\"https://man.page/3/cap_set_proc\">cap_set_proc(3)</a>, both\nprovided in the <i>libcap</i> package, is preferred for this\npurpose. The following rules govern changes to the thread\ncapability sets:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p style=\"margin-top: 1em\">1.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p style=\"margin-top: 1em\">If the caller does not have the\n<b>CAP_SETPCAP</b> capability, the new inheritable set must\nbe a subset of the combination of the existing inheritable\nand permitted sets.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>2.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>(Since Linux 2.6.25) The new inheritable set must be a\nsubset of the combination of the existing inheritable set\nand the capability bounding set.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>3.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The new permitted set must be a subset of the existing\npermitted set (i.e., it is not possible to acquire permitted\ncapabilities that the thread does not currently have).</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"3%\">\n\n\n<p>4.</p></td>\n<td width=\"1%\"></td>\n<td width=\"85%\">\n\n\n<p>The new effective set must be a subset of the new\npermitted set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>The\nsecurebits flags: establishing a capabilities-only\nenvironment</b> <br>\nStarting with kernel 2.6.26, and with a kernel in which file\ncapabilities are enabled, Linux implements a set of\nper-thread <i>securebits</i> flags that can be used to\ndisable special handling of capabilities for UID 0\n(<i>root</i>). These flags are as follows: <b><br>\nSECBIT_KEEP_CAPS</b></p>\n\n<p style=\"margin-left:22%;\">Setting this flag allows a\nthread that has one or more 0 UIDs to retain capabilities in\nits permitted set when it switches all of its UIDs to\nnonzero values. If this flag is not set, then such a UID\nswitch causes the thread to lose all permitted capabilities.\nThis flag is always cleared on an <a href=\"https://man.page/2/execve\">execve(2)</a>.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">Note that even\nwith the <b>SECBIT_KEEP_CAPS</b> flag set, the effective\ncapabilities of a thread are cleared when it switches its\neffective UID to a nonzero value. However, if the thread has\nset this flag and its effective UID is already nonzero, and\nthe thread subsequently switches all other UIDs to nonzero\nvalues, then the effective capabilities will not be\ncleared.</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">The setting of\nthe <b>SECBIT_KEEP_CAPS</b> flag is ignored if the\n<b>SECBIT_NO_SETUID_FIXUP</b> flag is set. (The latter flag\nprovides a superset of the effect of the former flag.)</p>\n\n<p style=\"margin-left:22%; margin-top: 1em\">This flag\nprovides the same functionality as the older <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_SET_KEEPCAPS</b> operation.</p>\n\n\n<p style=\"margin-left:11%;\"><b>SECBIT_NO_SETUID_FIXUP</b></p>\n\n<p style=\"margin-left:22%;\">Setting this flag stops the\nkernel from adjusting the process&rsquo;s permitted,\neffective, and ambient capability sets when the\nthread&rsquo;s effective and filesystem UIDs are switched\nbetween zero and nonzero values. (See the subsection\n<i>Effect of user ID changes on capabilities</i>.)</p>\n\n<p style=\"margin-left:11%;\"><b>SECBIT_NOROOT</b></p>\n\n<p style=\"margin-left:22%;\">If this bit is set, then the\nkernel does not grant capabilities when a set-user-ID-root\nprogram is executed, or when a process with an effective or\nreal UID of 0 calls <a href=\"https://man.page/2/execve\">execve(2)</a>. (See the subsection\n<i>Capabilities and execution of programs by root</i>.)</p>\n\n\n<p style=\"margin-left:11%;\"><b>SECBIT_NO_CAP_AMBIENT_RAISE</b></p>\n\n<p style=\"margin-left:22%;\">Setting this flag disallows\nraising ambient capabilities via the <a href=\"https://man.page/2/prctl\">prctl(2)</a>\n<b>PR_CAP_AMBIENT_RAISE</b> operation.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Each of the\nabove &quot;base&quot; flags has a companion\n&quot;locked&quot; flag. Setting any of the\n&quot;locked&quot; flags is irreversible, and has the effect\nof preventing further changes to the corresponding\n&quot;base&quot; flag. The locked flags are:\n<b>SECBIT_KEEP_CAPS_LOCKED</b>,\n<b>SECBIT_NO_SETUID_FIXUP_LOCKED</b>,\n<b>SECBIT_NOROOT_LOCKED</b>, and\n<b>SECBIT_NO_CAP_AMBIENT_RAISE_LOCKED</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>securebits</i> flags can be modified and retrieved using\nthe <a href=\"https://man.page/2/prctl\">prctl(2)</a> <b>PR_SET_SECUREBITS</b> and\n<b>PR_GET_SECUREBITS</b> operations. The <b>CAP_SETPCAP</b>\ncapability is required to modify the flags. Note that the\n<b>SECBIT_*</b> constants are available only after including\nthe <i>&lt;linux/securebits.h&gt;</i> header file.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>securebits</i> flags are inherited by child processes.\nDuring an <a href=\"https://man.page/2/execve\">execve(2)</a>, all of the flags are preserved,\nexcept <b>SECBIT_KEEP_CAPS</b> which is always cleared.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">An application\ncan use the following call to lock itself, and all of its\ndescendants, into an environment where the only way of\ngaining capabilities is by executing a program with\nassociated file capabilities:</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">prctl(PR_SET_SECUREBITS,\n<br>\n/* SECBIT_KEEP_CAPS off */ <br>\nSECBIT_KEEP_CAPS_LOCKED | <br>\nSECBIT_NO_SETUID_FIXUP | <br>\nSECBIT_NO_SETUID_FIXUP_LOCKED | <br>\nSECBIT_NOROOT | <br>\nSECBIT_NOROOT_LOCKED); <br>\n/* Setting/locking SECBIT_NO_CAP_AMBIENT_RAISE <br>\nis not required */</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Per-user-namespace\n&quot;set-user-ID-root&quot; programs</b> <br>\nA set-user-ID program whose UID matches the UID that created\na user namespace will confer capabilities in the\nprocess&rsquo;s permitted and effective sets when executed\nby any process inside that namespace or any descendant user\nnamespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The rules about\nthe transformation of the process&rsquo;s capabilities\nduring the <a href=\"https://man.page/2/execve\">execve(2)</a> are exactly as described in the\nsubsections <i>Transformation of capabilities during\nexecve()</i> and <i>Capabilities and execution of programs\nby root</i>, with the difference that, in the latter\nsubsection, &quot;root&quot; is the UID of the creator of\nthe user namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Namespaced\nfile capabilities</b> <br>\nTraditional (i.e., version 2) file capabilities associate\nonly a set of capability masks with a binary executable\nfile. When a process executes a binary with such\ncapabilities, it gains the associated capabilities (within\nits user namespace) as per the rules described above in\n&quot;Transformation of capabilities during\nexecve()&quot;.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Because version\n2 file capabilities confer capabilities to the executing\nprocess regardless of which user namespace it resides in,\nonly privileged processes are permitted to associate\ncapabilities with a file. Here, &quot;privileged&quot; means\na process that has the <b>CAP_SETFCAP</b> capability in the\nuser namespace where the filesystem was mounted (normally\nthe initial user namespace). This limitation renders file\ncapabilities useless for certain use cases. For example, in\nuser-namespaced containers, it can be desirable to be able\nto create a binary that confers capabilities only to\nprocesses executed inside that container, but not to\nprocesses that are executed outside the container.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux 4.14\nadded so-called namespaced file capabilities to support such\nuse cases. Namespaced file capabilities are recorded as\nversion 3 (i.e., <b>VFS_CAP_REVISION_3</b>)\n<i>security.capability</i> extended attributes. Such an\nattribute is automatically created in the circumstances\ndescribed above under &quot;File capability extended\nattribute versioning&quot;. When a version 3\n<i>security.capability</i> extended attribute is created,\nthe kernel records not just the capability masks in the\nextended attribute, but also the namespace root user ID.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As with a\nbinary that has <b>VFS_CAP_REVISION_2</b> file capabilities,\na binary with <b>VFS_CAP_REVISION_3</b> file capabilities\nconfers capabilities to a process during <b>execve</b>().\nHowever, capabilities are conferred only if the binary is\nexecuted by a process that resides in a user namespace whose\nUID 0 maps to the root user ID that is saved in the extended\nattribute, or when executed by a process that resides in a\ndescendant of such a namespace.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Interaction\nwith user namespaces</b> <br>\nFor further information on the interaction of capabilities\nand user namespaces, see <a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>.</p>\n\n<h2>CONFORMING TO\n<a name=\"CONFORMING TO\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">No standards\ngovern capabilities, but the Linux capability implementation\nis based on the withdrawn POSIX.1e draft standard; see\n<a href=\"https://archive.org/details/posix_1003.1e-990310\">https://archive.org/details/posix_1003.1e-990310</a>.</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">When attempting\nto <a href=\"https://man.page/1/strace\">strace(1)</a> binaries that have capabilities (or\nset-user-ID-root binaries), you may find the <i>-u\n&lt;username&gt;</i> option useful. Something like:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">$ <b>sudo\nstrace -o trace.log -u ceci ./myprivprog</b></p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">From kernel\n2.5.27 to kernel 2.6.26, capabilities were an optional\nkernel component, and could be enabled/disabled via the\n<b>CONFIG_SECURITY_CAPABILITIES</b> kernel configuration\noption.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>/proc/[pid]/task/TID/status</i> file can be used to view\nthe capability sets of a thread. The\n<i>/proc/[pid]/status</i> file shows the capability sets of\na process&rsquo;s main thread. Before Linux 3.8, nonexistent\ncapabilities were shown as being enabled (1) in these sets.\nSince Linux 3.8, all nonexistent capabilities (above\n<b>CAP_LAST_CAP</b>) are shown as disabled (0).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<i>libcap</i> package provides a suite of routines for\nsetting and getting capabilities that is more comfortable\nand less likely to change than the interface provided by\n<a href=\"https://man.page/2/capset\">capset(2)</a> and <a href=\"https://man.page/2/capget\">capget(2)</a>. This package also\nprovides the <b>setcap</b>(8) and <b>getcap</b>(8) programs.\nIt can be found at <br>\n\n<a href=\"https://git.kernel.org/pub/scm/libs/libcap/libcap.git/refs/\">https://git.kernel.org/pub/scm/libs/libcap/libcap.git/refs/</a>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before kernel\n2.6.24, and from kernel 2.6.24 to kernel 2.6.32 if file\ncapabilities are not enabled, a thread with the\n<b>CAP_SETPCAP</b> capability can manipulate the\ncapabilities of threads other than itself. However, this is\nonly theoretically possible, since no thread ever has\n<b>CAP_SETPCAP</b> in either of these cases:</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>In the pre-2.6.25 implementation the system-wide\ncapability bounding set, <i>/proc/sys/kernel/cap-bound</i>,\nalways masks out the <b>CAP_SETPCAP</b> capability, and this\ncan not be changed without modifying the kernel source and\nrebuilding the kernel.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"1%\">\n\n\n<p>*</p></td>\n<td width=\"2%\"></td>\n<td width=\"86%\">\n\n\n<p>If file capabilities are disabled (i.e., the kernel\n<b>CONFIG_SECURITY_FILE_CAPABILITIES</b> option is\ndisabled), then <b>init</b> starts out with the\n<b>CAP_SETPCAP</b> capability removed from its per-process\nbounding set, and that bounding set is inherited by all\nother processes created on the system.</p></td></tr>\n</table>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/capsh\">capsh(1)</a>,\n<a href=\"https://man.page/1/setpriv\">setpriv(1)</a>, <a href=\"https://man.page/2/prctl\">prctl(2)</a>, <a href=\"https://man.page/2/setfsuid\">setfsuid(2)</a>,\n<a href=\"https://man.page/3/cap_clear\">cap_clear(3)</a>, <a href=\"https://man.page/3/cap_copy_ext\">cap_copy_ext(3)</a>,\n<a href=\"https://man.page/3/cap_from_text\">cap_from_text(3)</a>, <a href=\"https://man.page/3/cap_get_file\">cap_get_file(3)</a>,\n<a href=\"https://man.page/3/cap_get_proc\">cap_get_proc(3)</a>, <a href=\"https://man.page/3/cap_init\">cap_init(3)</a>,\n<a href=\"https://man.page/3/capgetp\">capgetp(3)</a>, <a href=\"https://man.page/3/capsetp\">capsetp(3)</a>, <a href=\"https://man.page/3/libcap\">libcap(3)</a>,\n<a href=\"https://man.page/5/proc\">proc(5)</a>, <a href=\"https://man.page/7/credentials\">credentials(7)</a>, <a href=\"https://man.page/7/pthreads\">pthreads(7)</a>,\n<a href=\"https://man.page/7/user_namespaces\">user_namespaces(7)</a>, <b>captest</b>(8),\n<b>filecap</b>(8), <b>getcap</b>(8), <b>getpcaps</b>(8),\n<b>netcap</b>(8), <b>pscap</b>(8), <b>setcap</b>(8)</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><i>include/linux/capability.h</i>\nin the Linux kernel source tree</p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#CONFORMING TO\">CONFORMING TO</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}