{"name":"systemd.environment-generator","description":"systemd.environment-generator\n- systemd environment file generators","body":"\n\n<h1 align=\"center\">SYSTEMD.ENVIRONMENT-GENERATOR</h1>\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">systemd.environment-generator\n- systemd environment file generators</p>\n\n<h2>SYNOPSIS\n<a name=\"SYNOPSIS\"></a>\n</h2>\n\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"89%\">\n\n\n\n<p style=\"margin-top: 1em\"><b>/lib/systemd/system-environment-generators/some-generator</b></p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"89%\">\n\n\n\n<p style=\"margin-top: 1em\"><b>/usr/lib/systemd/user-environment-generators/some-generator</b></p> </td></tr>\n</table>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/run/systemd/system-environment-generators/*\n<br>\n/etc/systemd/system-environment-generators/* <br>\n/usr/local/lib/systemd/system-environment-generators/* <br>\n/lib/systemd/system-environment-generators/*</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">/run/systemd/user-environment-generators/*\n<br>\n/etc/systemd/user-environment-generators/* <br>\n/usr/local/lib/systemd/user-environment-generators/* <br>\n/usr/lib/systemd/user-environment-generators/*</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generators are\nsmall executables that live in\n/lib/systemd/system-environment-generators/ and other\ndirectories listed above. <a href=\"https://man.page/1/systemd\">systemd(1)</a> will execute\nthose binaries very early at the startup of each manager and\nat configuration reload time, before running the generators\ndescribed in <b>systemd.generator</b>(7) and before starting\nany units. Environment generators can override the\nenvironment that the manager exports to services and other\nprocesses.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Generators are\nloaded from a set of paths determined during compilation, as\nlisted above. System and user environment generators are\nloaded from directories with names ending in\nsystem-environment-generators/ and\nuser-environment-generators/, respectively. Generators found\nin directories listed earlier override the ones with the\nsame name in directories lower in the list. A symlink to\n/dev/null or an empty file can be used to mask a generator,\nthereby preventing it from running. Please note that the\norder of the two directories with the highest priority is\nreversed with respect to the unit load path, and generators\nin /run/ overwrite those in /etc/.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">After\ninstalling new generators or updating the configuration,\n<b>systemctl daemon-reload</b> may be executed. This will\nre-run all generators, updating environment configuration.\nIt will be used for any services that are started\nsubsequently.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Environment\nfile generators are executed similarly to unit file\ngenerators described in <b>systemd.generator</b>(7), with\nthe following differences:</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nGenerators are executed sequentially in the alphanumerical\norder of the final component of their name. The output of\neach generator output is immediately parsed and used to\nupdate the environment for generators that run after that.\nThus, later generators can use and/or modify the output of\nearlier generators.</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&bull;\nGenerators are run by every manager instance, their output\ncan be different for each user.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">It is\nrecommended to use numerical prefixes for generator names to\nsimplify ordering.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;1.&nbsp;A\nsimple generator that extends an environment variable if a\ndirectory exists in the file system</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#\n50-xdg-data-dirs.sh</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">#!/bin/bash</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># set the\ndefault value <br>\n\nXDG_DATA_DIRS=&quot;${XDG_DATA_DIRS:-/usr/local/share/:/usr/share}&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># add a\ndirectory if it exists <br>\nif [[ -d /opt/foo/share ]]; then <br>\nXDG_DATA_DIRS=&quot;/opt/foo/share:${XDG_DATA_DIRS}&quot;\n<br>\nfi</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\"># write our\noutput <br>\necho &quot;XDG_DATA_DIRS=${XDG_DATA_DIRS}&quot;</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;2.&nbsp;A\nmore complicated generator which reads existing\nconfiguration and mutates one variable</b></p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#\n90-rearrange-path.py</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">#!/usr/bin/env\npython3</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;&quot;&quot;</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">Proof-of-concept\nsystemd environment generator that makes sure that bin dirs\n<br>\nare always after matching sbin dirs in the path. <br>\n(Changes /sbin:/bin:/foo/bar to /bin:/sbin:/foo/bar.)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">This generator\nshows how to override the configuration possibly created by\n<br>\nearlier generators. It would be easier to write in bash, but\nlet's have it <br>\nin Python just to prove that we can, and to serve as a\ntemplate for more <br>\ninteresting generators.</p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">&quot;&quot;&quot;</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">import os <br>\nimport pathlib</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">def\nrearrange_bin_sbin(path): <br>\n&quot;&quot;&quot;Make sure any pair of .../bin, .../sbin\ndirectories is in this order</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">&gt;&gt;&gt;\nrearrange_bin_sbin('/bin:/sbin:/usr/sbin:/usr/bin') <br>\n'/bin:/sbin:/usr/bin:/usr/sbin' <br>\n&quot;&quot;&quot; <br>\nitems = [pathlib.Path(p) for p in path.split(':')] <br>\nfor i in range(len(items)): <br>\nif 'sbin' in items[i].parts: <br>\nind = items[i].parts.index('sbin') <br>\nbin = pathlib.Path(*items[i].parts[:ind], 'bin',\n*items[i].parts[ind+1:]) <br>\nif bin in items[i+1:]: <br>\nj = i + 1 + items[i+1:].index(bin) <br>\nitems[i], items[j] = items[j], items[i] <br>\nreturn ':'.join(p.as_posix() for p in items)</p>\n\n<p style=\"margin-left:17%; margin-top: 1em\">if __name__ ==\n'__main__': <br>\npath = os.environ['PATH'] # This should be always set. <br>\n# If it's not, we'll just crash, which is OK too. <br>\nnew = rearrange_bin_sbin(path) <br>\nif new != path: <br>\nprint('PATH={}'.format(new))</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Example&nbsp;3.&nbsp;Debugging\na generator</b></p>\n\n\n<p style=\"margin-left:17%; margin-top: 1em\">SYSTEMD_LOG_LEVEL=debug\nVAR_A=something VAR_B=&quot;something else&quot; \\ <br>\n\n/lib/systemd/system-environment-generators/path-to-generator</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>systemd-environment-d-generator</b>(8),\n<b>systemd.generator</b>(7), <a href=\"https://man.page/1/systemd\">systemd(1)</a>,\n<a href=\"https://man.page/1/systemctl\">systemctl(1)</a></p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#SYNOPSIS\">SYNOPSIS</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>"],"level":7}