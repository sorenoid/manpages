{"name":"charsets","body":"\n\n<h1 align=\"center\">CHARSETS</h1>\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">charsets -\ncharacter set standards and internationalization</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This manual\npage gives an overview on different character set standards\nand how they were used on Linux before Unicode became\nubiquitous. Some of this information is still helpful for\npeople working with legacy systems and documents.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Standards\ndiscussed include such as ASCII, GB 2312, ISO 8859, JIS,\nKOI8-R, KS, and Unicode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">The primary\nemphasis is on character sets that were actually used by\nlocale character sets, not the myriad others that could be\nfound in data from other systems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ASCII</b>\n<br>\nASCII (American Standard Code For Information Interchange)\nis the original 7-bit character set, originally designed for\nAmerican English. Also known as US-ASCII. It is currently\ndescribed by the ISO 646:1991 IRV (International Reference\nVersion) standard.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Various ASCII\nvariants replacing the dollar sign with other currency\nsymbols and replacing punctuation with non-English\nalphabetic characters to cover German, French, Spanish, and\nothers in 7 bits emerged. All are deprecated; glibc does not\nsupport locales whose character sets are not true supersets\nof ASCII.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">As Unicode,\nwhen using UTF-8, is ASCII-compatible, plain ASCII text\nstill renders properly on modern UTF-8 using systems.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ISO 8859</b>\n<br>\nISO 8859 is a series of 15 8-bit character sets, all of\nwhich have ASCII in their low (7-bit) half, invisible\ncontrol characters in positions 128 to 159, and 96\nfixed-width graphics in positions 160&ndash;255.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Of these, the\nmost important is ISO 8859-1 (&quot;Latin Alphabet No\n.1&quot; / Latin-1). It was widely adopted and supported by\ndifferent systems, and is gradually being replaced with\nUnicode. The ISO 8859-1 characters are also the first 256\ncharacters of Unicode.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Console support\nfor the other 8859 character sets is available under Linux\nthrough user-mode utilities (such as <b>setfont</b>(8)) that\nmodify keyboard bindings and the EGA graphics table and\nemploy the &quot;user mapping&quot; font table in the\nconsole driver.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Here are brief\ndescriptions of each set: <br>\n8859-1 (Latin-1)</p>\n\n<p style=\"margin-left:22%;\">Latin-1 covers many West\nEuropean languages such as Albanian, Basque, Danish,\nEnglish, Faroese, Galician, Icelandic, Irish, Italian,\nNorwegian, Portuguese, Spanish, and Swedish. The lack of the\nligatures Dutch &Auml;&sup2;/&Auml;&sup3;, French &Aring;,\nand old-style &acirc;German&acirc; quotation marks was\nconsidered tolerable.</p>\n\n<p style=\"margin-left:11%;\">8859-2 (Latin-2)</p>\n\n<p style=\"margin-left:22%;\">Latin-2 supports many\nLatin-written Central and East European languages such as\nBosnian, Croatian, Czech, German, Hungarian, Polish, Slovak,\nand Slovene. Replacing Romanian &Egrave;/&Egrave; with\n&Aring;/&Aring;&pound; was considered tolerable.</p>\n\n<p style=\"margin-left:11%;\">8859-3 (Latin-3)</p>\n\n<p style=\"margin-left:22%;\">Latin-3 was designed to cover\nof Esperanto, Maltese, and Turkish, but 8859-9 later\nsuperseded it for Turkish.</p>\n\n<p style=\"margin-left:11%;\">8859-4 (Latin-4)</p>\n\n<p style=\"margin-left:22%;\">Latin-4 introduced letters for\nNorth European languages such as Estonian, Latvian, and\nLithuanian, but was superseded by 8859-10 and 8859-13.</p>\n\n<table width=\"100%\" border=\"0\" rules=\"none\" frame=\"void\"\n       cellspacing=\"0\" cellpadding=\"0\">\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>8859-5</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Cyrillic letters supporting Bulgarian, Byelorussian,\nMacedonian, Russian, Serbian, and (almost completely)\nUkrainian. It was never widely used, see the discussion of\nKOI8-R/KOI8-U below.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>8859-6</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Was created for Arabic. The 8859-6 glyph table is a\nfixed font of separate letter forms, but a proper display\nengine should combine these using the proper initial,\nmedial, and final forms.</p></td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>8859-7</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Was created for Modern Greek in 1987, updated in\n2003.</p> </td></tr>\n<tr valign=\"top\" align=\"left\">\n<td width=\"11%\"></td>\n<td width=\"9%\">\n\n\n<p>8859-8</p></td>\n<td width=\"2%\"></td>\n<td width=\"78%\">\n\n\n<p>Supports Modern Hebrew without niqud (punctuation\nsigns). Niqud and full-fledged Biblical Hebrew were outside\nthe scope of this character set.</p></td></tr>\n</table>\n\n<p style=\"margin-left:11%;\">8859-9 (Latin-5)</p>\n\n<p style=\"margin-left:22%;\">This is a variant of Latin-1\nthat replaces Icelandic letters with Turkish ones.</p>\n\n<p style=\"margin-left:11%;\">8859-10 (Latin-6)</p>\n\n<p style=\"margin-left:22%;\">Latin-6 added the Inuit\n(Greenlandic) and Sami (Lappish) letters that were missing\nin Latin-4 to cover the entire Nordic area.</p>\n\n<p style=\"margin-left:11%;\">8859-11</p>\n\n<p style=\"margin-left:22%;\">Supports the Thai alphabet and\nis nearly identical to the TIS-620 standard.</p>\n\n<p style=\"margin-left:11%;\">8859-12</p>\n\n<p style=\"margin-left:22%;\">This set does not exist.</p>\n\n<p style=\"margin-left:11%;\">8859-13 (Latin-7)</p>\n\n<p style=\"margin-left:22%;\">Supports the Baltic Rim\nlanguages; in particular, it includes Latvian characters not\nfound in Latin-4.</p>\n\n<p style=\"margin-left:11%;\">8859-14 (Latin-8)</p>\n\n<p style=\"margin-left:22%;\">This is the Celtic character\nset, covering Old Irish, Manx, Gaelic, Welsh, Cornish, and\nBreton.</p>\n\n<p style=\"margin-left:11%;\">8859-15 (Latin-9)</p>\n\n<p style=\"margin-left:22%;\">Latin-9 is similar to the\nwidely used Latin-1 but replaces some less common symbols\nwith the Euro sign and French and Finnish letters that were\nmissing in Latin-1.</p>\n\n<p style=\"margin-left:11%;\">8859-16 (Latin-10)</p>\n\n<p style=\"margin-left:22%;\">This set covers many Southeast\nEuropean languages, and most importantly supports Romanian\nmore completely than Latin-2.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>KOI8-R /\nKOI8-U</b> <br>\nKOI8-R is a non-ISO character set popular in Russia before\nUnicode. The lower half is ASCII; the upper is a Cyrillic\ncharacter set somewhat better designed than ISO 8859-5.\nKOI8-U, based on KOI8-R, has better support for Ukrainian.\nNeither of these sets are ISO-2022 compatible, unlike the\nISO 8859 series.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Console support\nfor KOI8-R is available under Linux through user-mode\nutilities that modify keyboard bindings and the EGA graphics\ntable, and employ the &quot;user mapping&quot; font table in\nthe console driver.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>GB 2312</b>\n<br>\nGB 2312 is a mainland Chinese national standard character\nset used to express simplified Chinese. Just like JIS X\n0208, characters are mapped into a 94x94 two-byte matrix\nused to construct EUC-CN. EUC-CN is the most important\nencoding for Linux and includes ASCII and GB 2312. Note that\nEUC-CN is often called as GB, GB 2312, or CN-GB.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Big5</b>\n<br>\nBig5 was a popular character set in Taiwan to express\ntraditional Chinese. (Big5 is both a character set and an\nencoding.) It is a superset of ASCII. Non-ASCII characters\nare expressed in two bytes. Bytes 0xa1&ndash;0xfe are used\nas leading bytes for two-byte characters. Big5 and its\nextension were widely used in Taiwan and Hong Kong. It is\nnot ISO 2022 compliant.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>JIS X\n0208</b> <br>\nJIS X 0208 is a Japanese national standard character set.\nThough there are some more Japanese national standard\ncharacter sets (like JIS X 0201, JIS X 0212, and JIS X\n0213), this is the most important one. Characters are mapped\ninto a 94x94 two-byte matrix, whose each byte is in the\nrange 0x21&ndash;0x7e. Note that JIS X 0208 is a character\nset, not an encoding. This means that JIS X 0208 itself is\nnot used for expressing text data. JIS X 0208 is used as a\ncomponent to construct encodings such as EUC-JP, Shift_JIS,\nand ISO-2022-JP. EUC-JP is the most important encoding for\nLinux and includes ASCII and JIS X 0208. In EUC-JP, JIS X\n0208 characters are expressed in two bytes, each of which is\nthe JIS X 0208 code plus 0x80.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>KS X\n1001</b> <br>\nKS X 1001 is a Korean national standard character set. Just\nas JIS X 0208, characters are mapped into a 94x94 two-byte\nmatrix. KS X 1001 is used like JIS X 0208, as a component to\nconstruct encodings such as EUC-KR, Johab, and ISO-2022-KR.\nEUC-KR is the most important encoding for Linux and includes\nASCII and KS X 1001. KS C 5601 is an older name for KS X\n1001.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>ISO 2022 and\nISO 4873</b> <br>\nThe ISO 2022 and 4873 standards describe a font-control\nmodel based on VT100 practice. This model is (partially)\nsupported by the Linux kernel and by <a href=\"https://man.page/1/xterm\">xterm(1)</a>.\nSeveral ISO 2022-based character encodings have been\ndefined, especially for Japanese.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There are 4\ngraphic character sets, called G0, G1, G2, and G3, and one\nof them is the current character set for codes with high bit\nzero (initially G0), and one of them is the current\ncharacter set for codes with high bit one (initially G1).\nEach graphic character set has 94 or 96 characters, and is\nessentially a 7-bit character set. It uses codes either\n040&ndash;0177 (041&ndash;0176) or 0240&ndash;0377\n(0241&ndash;0376). G0 always has size 94 and uses codes\n041&ndash;0176.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Switching\nbetween character sets is done using the shift functions\n<b>^N</b> (SO or LS1), <b>^O</b> (SI or LS0), ESC n (LS2),\nESC o (LS3), ESC N (SS2), ESC O (SS3), ESC ~ (LS1R), ESC }\n(LS2R), ESC | (LS3R). The function LS<i>n</i> makes\ncharacter set G<i>n</i> the current one for codes with high\nbit zero. The function LS<i>n</i>R makes character set\nG<i>n</i> the current one for codes with high bit one. The\nfunction SS<i>n</i> makes character set G<i>n</i>\n(<i>n</i>=2 or 3) the current one for the next character\nonly (regardless of the value of its high order bit).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A 94-character\nset is designated as G<i>n</i> character set by an escape\nsequence ESC ( xx (for G0), ESC ) xx (for G1), ESC * xx (for\nG2), ESC + xx (for G3), where xx is a symbol or a pair of\nsymbols found in the ISO 2375 International Register of\nCoded Character Sets. For example, ESC ( @ selects the ISO\n646 character set as G0, ESC ( A selects the UK standard\ncharacter set (with pound instead of number sign), ESC ( B\nselects ASCII (with dollar instead of currency sign), ESC (\nM selects a character set for African languages, ESC ( ! A\nselects the Cuban character set, and so on.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A 96-character\nset is designated as G<i>n</i> character set by an escape\nsequence ESC - xx (for G1), ESC . xx (for G2) or ESC / xx\n(for G3). For example, ESC - G selects the Hebrew alphabet\nas G1.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A multibyte\ncharacter set is designated as G<i>n</i> character set by an\nescape sequence ESC $ xx or ESC $ ( xx (for G0), ESC $ ) xx\n(for G1), ESC $ * xx (for G2), ESC $ + xx (for G3). For\nexample, ESC $ ( C selects the Korean character set for G0.\nThe Japanese character set selected by ESC $ B has a more\nrecent version selected by ESC &amp; @ ESC $ B.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">ISO 4873\nstipulates a narrower use of character sets, where G0 is\nfixed (always ASCII), so that G1, G2 and G3 can be invoked\nonly for codes with the high order bit set. In particular,\n<b>^N</b> and <b>^O</b> are not used anymore, ESC ( xx can\nbe used only with xx=B, and ESC ) xx, ESC * xx, ESC + xx are\nequivalent to ESC - xx, ESC . xx, ESC / xx,\nrespectively.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>TIS-620</b>\n<br>\nTIS-620 is a Thai national standard character set and a\nsuperset of ASCII. In the same fashion as the ISO 8859\nseries, Thai characters are mapped into 0xa1&ndash;0xfe.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Unicode</b>\n<br>\nUnicode (ISO 10646) is a standard which aims to\nunambiguously represent every character in every human\nlanguage. Unicode&rsquo;s structure permits 20.1 bits to\nencode every character. Since most computers don&rsquo;t\ninclude 20.1-bit integers, Unicode is usually encoded as\n32-bit integers internally and either a series of 16-bit\nintegers (UTF-16) (needing two 16-bit integers only when\nencoding certain rare characters) or a series of 8-bit bytes\n(UTF-8).</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Linux\nrepresents Unicode using the 8-bit Unicode Transformation\nFormat (UTF-8). UTF-8 is a variable length encoding of\nUnicode. It uses 1 byte to code 7 bits, 2 bytes for 11 bits,\n3 bytes for 16 bits, 4 bytes for 21 bits, 5 bytes for 26\nbits, 6 bytes for 31 bits.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Let 0,1,x stand\nfor a zero, one, or arbitrary bit. A byte 0xxxxxxx stands\nfor the Unicode 00000000 0xxxxxxx which codes the same\nsymbol as the ASCII 0xxxxxxx. Thus, ASCII goes unchanged\ninto UTF-8, and people using only ASCII do not notice any\nchange: not in code, and not in file size.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">A byte 110xxxxx\nis the start of a 2-byte code, and 110xxxxx 10yyyyyy is\nassembled into 00000xxx xxyyyyyy. A byte 1110xxxx is the\nstart of a 3-byte code, and 1110xxxx 10yyyyyy 10zzzzzz is\nassembled into xxxxyyyy yyzzzzzz. (When UTF-8 is used to\ncode the 31-bit ISO 10646 then this progression continues up\nto 6-byte codes.)</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">For most texts\nin ISO 8859 character sets, this means that the characters\noutside of ASCII are now coded with two bytes. This tends to\nexpand ordinary text files by only one or two percent. For\nRussian or Greek texts, this expands ordinary text files by\n100%, since text in those languages is mostly outside of\nASCII. For Japanese users this means that the 16-bit codes\nnow in common use will take three bytes. While there are\nalgorithmic conversions from some character sets (especially\nISO 8859-1) to Unicode, general conversion requires carrying\naround conversion tables, which can be quite large for\n16-bit codes.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Note that UTF-8\nis self-synchronizing: 10xxxxxx is a tail, any other byte is\nthe head of a code. Note that the only way ASCII bytes occur\nin a UTF-8 stream, is as themselves. In particular, there\nare no embedded NULs ('\\0') or '/'s that form part of some\nlarger code.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since ASCII,\nand, in particular, NUL and '/', are unchanged, the kernel\ndoes not notice that UTF-8 is being used. It does not care\nat all what the bytes it is handling stand for.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Rendering of\nUnicode data streams is typically handled through\n&quot;subfont&quot; tables which map a subset of Unicode to\nglyphs. Internally the kernel uses Unicode to describe the\nsubfont loaded in video RAM. This means that in the Linux\nconsole in UTF-8 mode, one can use a character set with 512\ndifferent symbols. This is not enough for Japanese, Chinese,\nand Korean, but it is enough for most other purposes.</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/1/iconv\">iconv(1)</a>,\n<a href=\"https://man.page/7/ascii\">ascii(7)</a>, <a href=\"https://man.page/7/iso_8859-1\">iso_8859-1(7)</a>, <a href=\"https://man.page/7/unicode\">unicode(7)</a>,\n<a href=\"https://man.page/7/utf-8\">utf-8(7)</a></p>\n\n<h2>COLOPHON\n<a name=\"COLOPHON\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This page is\npart of release 5.10 of the Linux <i>man-pages</i> project.\nA description of the project, information about reporting\nbugs, and the latest version of this page, can be found at\nhttps://www.kernel.org/doc/man-pages/.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COLOPHON\">COLOPHON</a>"],"level":7}