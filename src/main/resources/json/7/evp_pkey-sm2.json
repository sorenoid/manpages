{"name":"evp_pkey-sm2","description":"EVP_PKEY-SM2,\nEVP_KEYMGMT-SM2, SM2 - EVP_PKEY keytype support for the\nChinese SM2 signature and encryption algorithms\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\nThe\n<b><small>SM2</small></b> algorithm was first defined by the\nChinese national standard <small>GM/T 0003-2012</small> and\nwas later standardized by <small>ISO</small> as\n<small>ISO/IEC 14888. <b>SM2</b></small> is actually an\nelliptic curve based algorithm. The current implementation\nin OpenSSL supports both signature and encryption schemes\nvia the <small>EVP</small> interface.\n\nWhen doing the\n<b><small>SM2</small></b> signature algorithm, it requires a\ndistinguishing identifier to form the message prefix which\nis hashed before the real message is hashed.\n\n<b>Common\n<small>SM2</small> parameters</b> <small><br>\nSM2</small> uses the parameters defined in &quot;Common\n<small>EC</small> parameters&quot; in\n<b><small>EVP_PKEY-EC</small></b> (7). The following\nparameters are different: <br>\n&quot;cofactor&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_COFACTOR</small></b> )\n&lt;unsigned integer&gt;\n\n<p style=\"margin-left:17%;\">This parameter is ignored for\n<b><small>SM2</small></b> .\n\n<p style=\"margin-left:11%;\">(\n<b><small>OSSL_PKEY_PARAM_DEFAULT_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt;\n\n<p style=\"margin-left:17%;\">Getter that returns the default\ndigest name. (Currently returns &quot;\n<small>SM3&quot;</small> as of OpenSSL 3.0).\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<b><small>SM2</small></b>\nsignatures can be generated by using the\n&rsquo;DigestSign&rsquo; series of APIs, for instance,\n<b>EVP_DigestSignInit()</b>, <b>EVP_DigestSignUpdate()</b>\nand <b>EVP_DigestSignFinal()</b>. Ditto for the verification\nprocess by calling the &rsquo;DigestVerify&rsquo; series of\nAPIs.\n\nBefore\ncomputing an <b><small>SM2</small></b> signature, an\n<b><small>EVP_PKEY_CTX</small></b> needs to be created, and\nan <b><small>SM2</small></b> <small>ID</small> must be set\nfor it, like this:\n\n\nEVP_PKEY_CTX_set1_id(pctx,\nid, id_len);\n\nBefore calling\nthe <b>EVP_DigestSignInit()</b> or\n<b>EVP_DigestVerifyInit()</b> functions, that\n<b><small>EVP_PKEY_CTX</small></b> should be assigned to the\n<b><small>EVP_MD_CTX</small></b> , like this:\n\n\nEVP_MD_CTX_set_pkey_ctx(mctx,\npctx);\n\nThere is\nnormally no need to pass a <b>pctx</b> parameter to\n<b>EVP_DigestSignInit()</b> or <b>EVP_DigestVerifyInit()</b>\nin such a scenario.\n\n\n<small>SM2</small>\ncan be tested with the <a href=\"https://man.page/1/openssl-speed\">openssl-speed(1)</a> application\nsince version 3.0. Currently, the only valid algorithm name\nis <b>sm2</b>.\n\nSince version\n3.0, <small>SM2</small> keys can be generated and loaded\nonly when the domain parameters specify the\n<small>SM2</small> elliptic curve.\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\nThis example\ndemonstrates the calling sequence for using an\n<b><small>EVP_PKEY</small></b> to verify a message with the\n<small>SM2</small> signature algorithm and the\n<small>SM3</small> hash algorithm:\n\n#include\n&lt;openssl/evp.h&gt; <br>\n/* obtain an EVP_PKEY using whatever methods... */ <br>\nmctx = EVP_MD_CTX_new(); <br>\npctx = EVP_PKEY_CTX_new(pkey, NULL); <br>\nEVP_PKEY_CTX_set1_id(pctx, id, id_len); <br>\nEVP_MD_CTX_set_pkey_ctx(mctx, pctx); <br>\nEVP_DigestVerifyInit(mctx, NULL, EVP_sm3(), NULL, pkey);\n<br>\nEVP_DigestVerifyUpdate(mctx, msg, msg_len); <br>\nEVP_DigestVerifyFinal(mctx, sig, sig_len)\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<a href=\"https://man.page/3/EVP_PKEY_CTX_new\">EVP_PKEY_CTX_new(3)</a>,\n<a href=\"https://man.page/3/EVP_DigestSignInit\">EVP_DigestSignInit(3)</a>,\n<a href=\"https://man.page/3/EVP_DigestVerifyInit\">EVP_DigestVerifyInit(3)</a>,\n<a href=\"https://man.page/3/EVP_PKEY_CTX_set1_id\">EVP_PKEY_CTX_set1_id(3)</a>,\n<a href=\"https://man.page/3/EVP_MD_CTX_set_pkey_ctx\">EVP_MD_CTX_set_pkey_ctx(3)</a>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\nCopyright\n2018-2021 The OpenSSL Project Authors. All Rights\nReserved.\n\nLicensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.","body":"\n\n<h1 align=\"center\">EVP_PKEY-SM2</h1>\n\n\n\n\n\n\n\n\n<hr>\n\n\n<h2>NAME\n<a name=\"NAME\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_PKEY-SM2,\nEVP_KEYMGMT-SM2, SM2 - EVP_PKEY keytype support for the\nChinese SM2 signature and encryption algorithms</p>\n\n<h2>DESCRIPTION\n<a name=\"DESCRIPTION\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">The\n<b><small>SM2</small></b> algorithm was first defined by the\nChinese national standard <small>GM/T 0003-2012</small> and\nwas later standardized by <small>ISO</small> as\n<small>ISO/IEC 14888. <b>SM2</b></small> is actually an\nelliptic curve based algorithm. The current implementation\nin OpenSSL supports both signature and encryption schemes\nvia the <small>EVP</small> interface.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">When doing the\n<b><small>SM2</small></b> signature algorithm, it requires a\ndistinguishing identifier to form the message prefix which\nis hashed before the real message is hashed.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b>Common\n<small>SM2</small> parameters</b> <small><br>\nSM2</small> uses the parameters defined in &quot;Common\n<small>EC</small> parameters&quot; in\n<b><small>EVP_PKEY-EC</small></b> (7). The following\nparameters are different: <br>\n&quot;cofactor&quot; (\n<b><small>OSSL_PKEY_PARAM_EC_COFACTOR</small></b> )\n&lt;unsigned integer&gt;</p>\n\n<p style=\"margin-left:17%;\">This parameter is ignored for\n<b><small>SM2</small></b> .</p>\n\n<p style=\"margin-left:11%;\">(\n<b><small>OSSL_PKEY_PARAM_DEFAULT_DIGEST</small></b> ) &lt;\n<small>UTF8</small> string&gt;</p>\n\n<p style=\"margin-left:17%;\">Getter that returns the default\ndigest name. (Currently returns &quot;\n<small>SM3&quot;</small> as of OpenSSL 3.0).</p>\n\n<h2>NOTES\n<a name=\"NOTES\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><b><small>SM2</small></b>\nsignatures can be generated by using the\n&rsquo;DigestSign&rsquo; series of APIs, for instance,\n<b>EVP_DigestSignInit()</b>, <b>EVP_DigestSignUpdate()</b>\nand <b>EVP_DigestSignFinal()</b>. Ditto for the verification\nprocess by calling the &rsquo;DigestVerify&rsquo; series of\nAPIs.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before\ncomputing an <b><small>SM2</small></b> signature, an\n<b><small>EVP_PKEY_CTX</small></b> needs to be created, and\nan <b><small>SM2</small></b> <small>ID</small> must be set\nfor it, like this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_PKEY_CTX_set1_id(pctx,\nid, id_len);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Before calling\nthe <b>EVP_DigestSignInit()</b> or\n<b>EVP_DigestVerifyInit()</b> functions, that\n<b><small>EVP_PKEY_CTX</small></b> should be assigned to the\n<b><small>EVP_MD_CTX</small></b> , like this:</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">EVP_MD_CTX_set_pkey_ctx(mctx,\npctx);</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">There is\nnormally no need to pass a <b>pctx</b> parameter to\n<b>EVP_DigestSignInit()</b> or <b>EVP_DigestVerifyInit()</b>\nin such a scenario.</p>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><small>SM2</small>\ncan be tested with the <a href=\"https://man.page/1/openssl-speed\">openssl-speed(1)</a> application\nsince version 3.0. Currently, the only valid algorithm name\nis <b>sm2</b>.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Since version\n3.0, <small>SM2</small> keys can be generated and loaded\nonly when the domain parameters specify the\n<small>SM2</small> elliptic curve.</p>\n\n<h2>EXAMPLES\n<a name=\"EXAMPLES\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">This example\ndemonstrates the calling sequence for using an\n<b><small>EVP_PKEY</small></b> to verify a message with the\n<small>SM2</small> signature algorithm and the\n<small>SM3</small> hash algorithm:</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">#include\n&lt;openssl/evp.h&gt; <br>\n/* obtain an EVP_PKEY using whatever methods... */ <br>\nmctx = EVP_MD_CTX_new(); <br>\npctx = EVP_PKEY_CTX_new(pkey, NULL); <br>\nEVP_PKEY_CTX_set1_id(pctx, id, id_len); <br>\nEVP_MD_CTX_set_pkey_ctx(mctx, pctx); <br>\nEVP_DigestVerifyInit(mctx, NULL, EVP_sm3(), NULL, pkey);\n<br>\nEVP_DigestVerifyUpdate(mctx, msg, msg_len); <br>\nEVP_DigestVerifyFinal(mctx, sig, sig_len)</p>\n\n<h2>SEE ALSO\n<a name=\"SEE ALSO\"></a>\n</h2>\n\n\n\n<p style=\"margin-left:11%; margin-top: 1em\"><a href=\"https://man.page/3/EVP_PKEY_CTX_new\">EVP_PKEY_CTX_new(3)</a>,\n<a href=\"https://man.page/3/EVP_DigestSignInit\">EVP_DigestSignInit(3)</a>,\n<a href=\"https://man.page/3/EVP_DigestVerifyInit\">EVP_DigestVerifyInit(3)</a>,\n<a href=\"https://man.page/3/EVP_PKEY_CTX_set1_id\">EVP_PKEY_CTX_set1_id(3)</a>,\n<a href=\"https://man.page/3/EVP_MD_CTX_set_pkey_ctx\">EVP_MD_CTX_set_pkey_ctx(3)</a></p>\n\n<h2>COPYRIGHT\n<a name=\"COPYRIGHT\"></a>\n</h2>\n\n\n<p style=\"margin-left:11%; margin-top: 1em\">Copyright\n2018-2021 The OpenSSL Project Authors. All Rights\nReserved.</p>\n\n<p style=\"margin-left:11%; margin-top: 1em\">Licensed under\nthe Apache License 2.0 (the &quot;License&quot;). You may\nnot use this file except in compliance with the License. You\ncan obtain a copy in the file <small>LICENSE</small> in the\nsource distribution or at\n&lt;https://www.openssl.org/source/license.html&gt;.</p>\n<hr>\n","headings":["<a href=\"#NAME\">NAME</a>","<a href=\"#DESCRIPTION\">DESCRIPTION</a>","<a href=\"#NOTES\">NOTES</a>","<a href=\"#EXAMPLES\">EXAMPLES</a>","<a href=\"#SEE ALSO\">SEE ALSO</a>","<a href=\"#COPYRIGHT\">COPYRIGHT</a>"],"level":7}